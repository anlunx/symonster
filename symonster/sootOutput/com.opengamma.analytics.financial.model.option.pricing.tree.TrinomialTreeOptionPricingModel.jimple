public class com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel extends com.opengamma.analytics.financial.model.option.pricing.tree.TreeOptionPricingModel
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.TreeOptionPricingModel: void <init>()>();

        return;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification, com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification r1, r3, $r9;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18;
        double[] r4, r11;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker $r7, $r8;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider r10;
        int i7, i8;
        com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification r12;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        d3 := @parameter5: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "lattice");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "function");

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "volatility should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "volatility should be finite");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "interestRate should be finite");

        $z3 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "dividend should be finite");

        $z4 = r1 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        if $z4 == 0 goto label05;

        r12 = new com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification;

        $r9 = r12;

        specialinvoke r12.<com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification: void <init>()>();

        goto label06;

     label05:
        $r9 = r1;

     label06:
        r3 = $r9;

        $z5 = r2 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider;

        if $z5 == 0 goto label08;

        r10 = (com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider) r2;

        $r7 = virtualinvoke r10.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z6 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkOut(double)>(d0);

        if $z6 != 0 goto label07;

        $r8 = virtualinvoke r10.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z7 = virtualinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkStrikeBehindBarrier()>();

        if $z7 == 0 goto label08;

     label07:
        return 0.0;

     label08:
        i7 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getStrike()>();

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $d14 = (double) i7;

        d6 = d5 / $d14;

        $d15 = neg d2;

        $d16 = $d15 * d6;

        d7 = staticinvoke <java.lang.Math: double exp(double)>($d16);

        $d17 = d2 - d3;

        r4 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double[] getParametersTrinomial(double,double,double,double,double,int,double)>(d0, d4, d5, d1, $d17, i7, d6);

        d8 = r4[1];

        d9 = r4[2];

        d10 = r4[3];

        d11 = r4[4];

        d12 = r4[5];

        d13 = d8 / d9;

        $b2 = d10 cmpl 0.0;

        if $b2 <= 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "upProbability should be greater than 0.");

        $b3 = d10 cmpg 1.0;

        if $b3 >= 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "upProbability should be smaller than 1.");

        $b4 = d11 cmpl 0.0;

        if $b4 <= 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "middleProbability should be greater than 0.");

        $b5 = d11 cmpg 1.0;

        if $b5 >= 0 goto label15;

        $z13 = 1;

        goto label16;

     label15:
        $z13 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "middleProbability should be smaller than 1.");

        $b6 = d12 cmpl 0.0;

        if $b6 <= 0 goto label17;

        $z14 = 1;

        goto label18;

     label17:
        $z14 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z14, "downProbability should be greater than 0.");

        r11 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d0, d9, d13);

        i8 = i7 - 1;

     label19:
        if i8 <= -1 goto label20;

        r11 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d7, d10, d11, d12, r11, d0, 0.0, d9, d13, i8);

        i8 = i8 + -1;

        goto label19;

     label20:
        $d18 = r11[0];

        return $d18;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double[], double[], double[])
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r1;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;
        double[] r2, r3, r4, r6, r7, r8, r9, r18, r19, r20;
        int i0, $i2, $i3, $i4, i11, i12, i13;
        byte $b1, $b5, $b6, $b7, $b8, $b9, $b10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification $r14;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker $r15, $r16;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider r17;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "volatility");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "interestRate");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "dividend");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $r14 = new com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        specialinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: void <init>()>();

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $i2 = lengthof r3;

        if i0 != $i2 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Wrong interestRate length");

        $i3 = lengthof r2;

        if i0 != $i3 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Wrong volatility length");

        $i4 = lengthof r4;

        if i0 != $i4 goto label07;

        $z10 = 1;

        goto label08;

     label07:
        $z10 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Wrong dividend length");

        i11 = 0;

     label09:
        if i11 >= i0 goto label12;

        $d27 = r2[i11];

        $b10 = $d27 cmpl 0.0;

        if $b10 <= 0 goto label10;

        $z11 = 1;

        goto label11;

     label10:
        $z11 = 0;

     label11:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "volatility should be positive");

        $d28 = r2[i11];

        $z4 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d28);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "volatility should be finite");

        $d29 = r3[i11];

        $z5 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d29);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "interestRate should be finite");

        $d30 = r4[i11];

        $z6 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d30);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "dividend should be finite");

        i11 = i11 + 1;

        goto label09;

     label12:
        $z1 = r1 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider;

        if $z1 == 0 goto label14;

        r17 = (com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider) r1;

        $r15 = virtualinvoke r17.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z2 = virtualinvoke $r15.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkOut(double)>(d0);

        if $z2 != 0 goto label13;

        $r16 = virtualinvoke r17.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z3 = virtualinvoke $r16.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkStrikeBehindBarrier()>();

        if $z3 == 0 goto label14;

     label13:
        return 0.0;

     label14:
        r18 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double[] getShiftedDrift(double[],double[],double[])>(r2, r3, r4);

        $d6 = (double) i0;

        d2 = d1 / $d6;

        d3 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double getSpaceStepTrinomial(double[],double[],double)>(r2, r18, d2);

        $d7 = neg d3;

        d4 = staticinvoke <java.lang.Math: double exp(double)>($d7);

        d5 = staticinvoke <java.lang.Math: double exp(double)>(d3);

        r6 = newarray (double)[i0];

        r7 = newarray (double)[i0];

        r8 = newarray (double)[i0];

        r9 = newarray (double)[i0];

        i12 = 0;

     label15:
        if i12 >= i0 goto label26;

        $d14 = r2[i12];

        $d13 = r18[i12];

        r19 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double[] getParametersTrinomial(double,double,double,double)>($d14, $d13, d2, d3);

        $d15 = r19[0];

        r6[i12] = $d15;

        $d16 = r19[1];

        r7[i12] = $d16;

        $d17 = r19[2];

        r8[i12] = $d17;

        $d18 = r3[i12];

        $d19 = neg $d18;

        $d20 = $d19 * d2;

        $d21 = staticinvoke <java.lang.Math: double exp(double)>($d20);

        r9[i12] = $d21;

        $d22 = r6[i12];

        $b5 = $d22 cmpl 0.0;

        if $b5 <= 0 goto label16;

        $z12 = 1;

        goto label17;

     label16:
        $z12 = 0;

     label17:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "upProbability should be greater than 0.");

        $d23 = r6[i12];

        $b6 = $d23 cmpg 1.0;

        if $b6 >= 0 goto label18;

        $z13 = 1;

        goto label19;

     label18:
        $z13 = 0;

     label19:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "upProbability should be smaller than 1.");

        $d24 = r7[i12];

        $b7 = $d24 cmpl 0.0;

        if $b7 <= 0 goto label20;

        $z14 = 1;

        goto label21;

     label20:
        $z14 = 0;

     label21:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z14, "middleProbability should be greater than 0.");

        $d25 = r7[i12];

        $b8 = $d25 cmpg 1.0;

        if $b8 >= 0 goto label22;

        $z15 = 1;

        goto label23;

     label22:
        $z15 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z15, "middleProbability should be smaller than 1.");

        $d26 = r8[i12];

        $b9 = $d26 cmpl 0.0;

        if $b9 <= 0 goto label24;

        $z16 = 1;

        goto label25;

     label24:
        $z16 = 0;

     label25:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z16, "downProbability should be greater than 0.");

        i12 = i12 + 1;

        goto label15;

     label26:
        r20 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d0, d4, d5);

        i13 = i0 - 1;

     label27:
        if i13 <= -1 goto label28;

        $d12 = r9[i13];

        $d11 = r6[i13];

        $d10 = r7[i13];

        $d9 = r8[i13];

        r20 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>($d12, $d11, $d10, $d9, r20, d0, 0.0, d4, d5, i13);

        i13 = i13 + -1;

        goto label27;

     label28:
        $d8 = r20[0];

        return $d8;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification, com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double, double, com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification r1, r4, $r12;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;
        com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider r3;
        double[] r5, r14;
        int[] r6;
        int i0, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker $r10, $r11;
        com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider r13;
        com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification r15;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r3 := @parameter5: com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "lattice");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "function");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "dividend");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z10 = 1;

        goto label02;

     label01:
        $z10 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label03;

        $z11 = 1;

        goto label04;

     label03:
        $z11 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "volatility should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "volatility should be finite");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "interestRate should be finite");

        $z3 = r1 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        if $z3 == 0 goto label05;

        r15 = new com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification;

        $r12 = r15;

        specialinvoke r15.<com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification: void <init>()>();

        goto label06;

     label05:
        $r12 = r1;

     label06:
        r4 = $r12;

        $z4 = r2 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider;

        if $z4 == 0 goto label08;

        r13 = (com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider) r2;

        $r10 = virtualinvoke r13.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z8 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkOut(double)>(d0);

        if $z8 != 0 goto label07;

        $r11 = virtualinvoke r13.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider: com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker getChecker()>();

        $z9 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.option.pricing.tree.BarrierOptionFunctionProvider$CrossBarrierChecker: boolean checkStrikeBehindBarrier()>();

        if $z9 == 0 goto label08;

     label07:
        return 0.0;

     label08:
        i12 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getStrike()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $d13 = (double) i12;

        d5 = d4 / $d13;

        $z5 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: boolean checkTimeSteps(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "Number of steps is too small");

        $z6 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: boolean checkDividendBeforeExpiry(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Dividend is paid after expiry");

        $d14 = neg d2;

        $d15 = $d14 * d5;

        d6 = staticinvoke <java.lang.Math: double exp(double)>($d15);

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double[] getParametersTrinomial(double,double,double,double,double,int,double)>(d0, d3, d4, d1, d2, i12, d5);

        d7 = r5[1];

        d8 = r5[2];

        d9 = r5[3];

        d10 = r5[4];

        d11 = r5[5];

        d12 = d7 / d8;

        $b3 = d9 cmpl 0.0;

        if $b3 <= 0 goto label09;

        $z12 = 1;

        goto label10;

     label09:
        $z12 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "upProbability should be greater than 0.");

        $b4 = d9 cmpg 1.0;

        if $b4 >= 0 goto label11;

        $z13 = 1;

        goto label12;

     label11:
        $z13 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "upProbability should be smaller than 1.");

        $b5 = d10 cmpl 0.0;

        if $b5 <= 0 goto label13;

        $z14 = 1;

        goto label14;

     label13:
        $z14 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z14, "middleProbability should be greater than 0.");

        $b6 = d10 cmpg 1.0;

        if $b6 >= 0 goto label15;

        $z15 = 1;

        goto label16;

     label15:
        $z15 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z15, "middleProbability should be smaller than 1.");

        $b7 = d11 cmpl 0.0;

        if $b7 <= 0 goto label17;

        $z16 = 1;

        goto label18;

     label17:
        $z16 = 0;

     label18:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z16, "downProbability should be greater than 0.");

        r6 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: int[] getDividendSteps(double)>(d5);

        d22 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double spotModifier(double,double)>(d0, d2);

        r14 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d22, d8, d12);

        i13 = 0;

        i0 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: int getNumberOfDividends()>();

        $z7 = r3 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.ProportionalDividendFunctionProvider;

        if $z7 == 0 goto label24;

        i14 = i12 - 1;

     label19:
        if i14 <= -1 goto label23;

        $i10 = i0 - 1;

        i15 = $i10 - i13;

     label20:
        if i15 <= -1 goto label22;

        $i11 = r6[i15];

        if i14 != $i11 goto label21;

        d22 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double dividendCorrections(double,double,double,int)>(d22, 0.0, 0.0, i15);

        i13 = i13 + 1;

     label21:
        i15 = i15 + -1;

        goto label20;

     label22:
        r14 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d6, d9, d10, d11, r14, d22, 0.0, d8, d12, i14);

        i14 = i14 + -1;

        goto label19;

     label23:
        goto label29;

     label24:
        d23 = 0.0;

        i16 = i12 - 1;

     label25:
        if i16 <= -1 goto label29;

        $d17 = neg d2;

        $d18 = $d17 * d5;

        $d19 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        d23 = d23 * $d19;

        $i8 = i0 - 1;

        i17 = $i8 - i13;

     label26:
        if i17 <= -1 goto label28;

        $i9 = r6[i17];

        if i16 != $i9 goto label27;

        $d20 = (double) i16;

        $d21 = d5 * $d20;

        d23 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double dividendCorrections(double,double,double,int)>(d23, d2, $d21, i17);

        i13 = i13 + 1;

     label27:
        i17 = i17 + -1;

        goto label26;

     label28:
        r14 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d6, d9, d10, d11, r14, d22, d23, d8, d12, i16);

        i16 = i16 + -1;

        goto label25;

     label29:
        $d16 = r14[0];

        return $d16;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D, double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76;
        int i0, i7;
        double[] r3, r4, $r6;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification $r7;
        double[][] r8;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        d5 := @parameter6: double;

        d6 := @parameter7: double;

        d7 := @parameter8: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "spot1 should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "spot1 should be finite");

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "spot2 should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "spot2 should be finite");

        $b3 = d2 cmpl 0.0;

        if $b3 <= 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "volatility1 should be positive");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "volatility1 should be finite");

        $b4 = d3 cmpl 0.0;

        if $b4 <= 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "volatility2 should be positive");

        $z3 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "volatility2 should be finite");

        $b5 = d4 cmpl -1.0;

        if $b5 < 0 goto label09;

        $b6 = d4 cmpg 1.0;

        if $b6 > 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "correlation should be -1. <= rho <= 1.");

        $z9 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "interestRate should be finite");

        $z10 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "dividend1 should be finite");

        $z11 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "dividend2 should be finite");

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: int getNumberOfSteps()>();

        d8 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double getTimeToExpiry()>();

        $d33 = (double) i0;

        d9 = d8 / $d33;

        $r7 = new com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification;

        specialinvoke $r7.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: void <init>()>();

        $d34 = d5 - d6;

        r3 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: double[] getParametersTrinomial(double,double,double)>(d2, $d34, d9);

        $d35 = d5 - d7;

        r4 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: double[] getParametersTrinomial(double,double,double)>(d3, $d35, d9);

        d10 = r3[2];

        d11 = r4[2];

        d12 = r3[0];

        d13 = r4[0];

        d14 = r3[3];

        d15 = r3[4];

        d16 = r3[5];

        d17 = r4[3];

        d18 = r4[4];

        d19 = r4[5];

        $d36 = neg d5;

        $d37 = $d36 * d9;

        d20 = staticinvoke <java.lang.Math: double exp(double)>($d37);

        $d38 = d14 / 3.0;

        $d39 = d17 / 3.0;

        $d40 = $d38 + $d39;

        $d41 = $d40 - 0.1111111111111111;

        $d42 = d4 / 4.0;

        d21 = $d41 + $d42;

        $d43 = d14 / 3.0;

        $d44 = d18 / 3.0;

        $d45 = $d43 + $d44;

        d22 = $d45 - 0.1111111111111111;

        $d46 = d14 / 3.0;

        $d47 = d19 / 3.0;

        $d48 = $d46 + $d47;

        $d49 = $d48 - 0.1111111111111111;

        $d50 = d4 / 4.0;

        d23 = $d49 - $d50;

        $d51 = d15 / 3.0;

        $d52 = d17 / 3.0;

        $d53 = $d51 + $d52;

        d24 = $d53 - 0.1111111111111111;

        $d54 = d15 / 3.0;

        $d55 = d18 / 3.0;

        $d56 = $d54 + $d55;

        d25 = $d56 - 0.1111111111111111;

        $d57 = d15 / 3.0;

        $d58 = d19 / 3.0;

        $d59 = $d57 + $d58;

        d26 = $d59 - 0.1111111111111111;

        $d60 = d16 / 3.0;

        $d61 = d17 / 3.0;

        $d62 = $d60 + $d61;

        $d63 = $d62 - 0.1111111111111111;

        $d64 = d4 / 4.0;

        d27 = $d63 - $d64;

        $d65 = d16 / 3.0;

        $d66 = d18 / 3.0;

        $d67 = $d65 + $d66;

        d28 = $d67 - 0.1111111111111111;

        $d68 = d16 / 3.0;

        $d69 = d19 / 3.0;

        $d70 = $d68 + $d69;

        $d71 = $d70 - 0.1111111111111111;

        $d72 = d4 / 4.0;

        d29 = $d71 + $d72;

        $d73 = (double) i0;

        $d74 = staticinvoke <java.lang.Math: double pow(double,double)>(d10, $d73);

        d30 = d0 * $d74;

        $d75 = (double) i0;

        $d76 = staticinvoke <java.lang.Math: double pow(double,double)>(d11, $d75);

        d31 = d1 * $d76;

        r8 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double[][] getPayoffAtExpiryTrinomial(double,double,double,double)>(d30, d31, d12, d13);

        i7 = i0 - 1;

     label11:
        if i7 <= -1 goto label12;

        r8 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double[][] getNextOptionValues(double,double,double,double,double,double,double,double,double,double,double[][],double,double,double,double,double,double,int)>(d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, r8, d0, d1, d10, d11, d12, d13, i7);

        i7 = i7 + -1;

        goto label11;

     label12:
        $r6 = r8[0];

        $d32 = $r6[0];

        return $d32;
    }

    public com.opengamma.analytics.financial.greeks.GreekResultCollection getGreeks(com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification, com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification r1, r4, $r22;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, d100, d101, d102, d103;
        int i0, i8;
        double[] r5, r6, $r12, $r13, r23;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.financial.greeks.Greek $r14, $r16, $r18, $r20;
        java.lang.Double $r15, $r17, $r19, $r21;
        com.opengamma.analytics.financial.greeks.GreekResultCollection r24;
        com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification r25;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        d3 := @parameter5: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "lattice");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "function");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "volatility should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "volatility should be finite");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "interestRate should be finite");

        $z3 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "dividend should be finite");

        r24 = new com.opengamma.analytics.financial.greeks.GreekResultCollection;

        specialinvoke r24.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void <init>()>();

        $z4 = r1 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        if $z4 == 0 goto label05;

        r25 = new com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification;

        $r22 = r25;

        specialinvoke r25.<com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification: void <init>()>();

        goto label06;

     label05:
        $r22 = r1;

     label06:
        r4 = $r22;

        i0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getStrike()>();

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $d20 = (double) i0;

        d6 = d5 / $d20;

        $d21 = neg d2;

        $d22 = $d21 * d6;

        d7 = staticinvoke <java.lang.Math: double exp(double)>($d22);

        $d23 = d2 - d3;

        r5 = virtualinvoke $r22.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double[] getParametersTrinomial(double,double,double,double,double,int,double)>(d0, d4, d5, d1, $d23, i0, d6);

        d8 = r5[0];

        d9 = r5[1];

        d10 = r5[2];

        d11 = r5[3];

        d12 = r5[4];

        d13 = r5[5];

        d14 = d9 / d10;

        $b3 = d11 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "upProbability should be greater than 0.");

        $b4 = d11 cmpg 1.0;

        if $b4 >= 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "upProbability should be smaller than 1.");

        $b5 = d12 cmpl 0.0;

        if $b5 <= 0 goto label11;

        $z9 = 1;

        goto label12;

     label11:
        $z9 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "middleProbability should be greater than 0.");

        $b6 = d12 cmpg 1.0;

        if $b6 >= 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "middleProbability should be smaller than 1.");

        $b7 = d13 cmpl 0.0;

        if $b7 <= 0 goto label15;

        $z11 = 1;

        goto label16;

     label15:
        $z11 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "downProbability should be greater than 0.");

        r23 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d0, d10, d14);

        r6 = newarray (double)[4];

        $r12 = newarray (double)[3];

        $d24 = d0 * d10;

        $r12[0] = $d24;

        $d25 = d0 * d9;

        $r12[1] = $d25;

        $d26 = d0 * d8;

        $r12[2] = $d26;

        $r13 = newarray (double)[5];

        $d27 = $r12[0];

        $d28 = $d27 * d10;

        $r13[0] = $d28;

        $d29 = $r12[0];

        $d30 = $d29 * d9;

        $r13[1] = $d30;

        $d31 = $r12[1];

        $d32 = $d31 * d9;

        $r13[2] = $d32;

        $d33 = $r12[2];

        $d34 = $d33 * d9;

        $r13[3] = $d34;

        $d35 = $r12[2];

        $d36 = $d35 * d8;

        $r13[4] = $d36;

        i8 = i0 - 1;

     label17:
        if i8 <= -1 goto label20;

        r23 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d7, d11, d12, d13, r23, d0, 0.0, d10, d14, i8);

        if i8 != 2 goto label18;

        $d58 = r23[4];

        $d57 = r23[3];

        $d62 = $d58 - $d57;

        $d60 = $r13[4];

        $d59 = $r13[3];

        $d61 = $d60 - $d59;

        d100 = $d62 / $d61;

        $d64 = r23[3];

        $d63 = r23[2];

        $d68 = $d64 - $d63;

        $d66 = $r13[3];

        $d65 = $r13[2];

        $d67 = $d66 - $d65;

        d101 = $d68 / $d67;

        $d70 = r23[2];

        $d69 = r23[1];

        $d74 = $d70 - $d69;

        $d72 = $r13[2];

        $d71 = $r13[1];

        $d73 = $d72 - $d71;

        d15 = $d74 / $d73;

        $d76 = r23[1];

        $d75 = r23[0];

        $d80 = $d76 - $d75;

        $d78 = $r13[1];

        $d77 = $r13[0];

        $d79 = $d78 - $d77;

        d16 = $d80 / $d79;

        $d81 = d100 - d101;

        $d85 = 2.0 * $d81;

        $d83 = $r13[4];

        $d82 = $r13[2];

        $d84 = $d83 - $d82;

        d17 = $d85 / $d84;

        $d86 = d101 - d15;

        $d90 = 2.0 * $d86;

        $d88 = $r13[3];

        $d87 = $r13[1];

        $d89 = $d88 - $d87;

        d18 = $d90 / $d89;

        $d91 = d15 - d16;

        $d95 = 2.0 * $d91;

        $d93 = $r13[2];

        $d92 = $r13[0];

        $d94 = $d93 - $d92;

        d19 = $d95 / $d94;

        $d96 = d17 + d18;

        $d97 = $d96 + d19;

        $d98 = $d97 / 3.0;

        r6[2] = $d98;

        $d99 = r23[2];

        r6[3] = $d99;

     label18:
        if i8 != 1 goto label19;

        $d44 = r23[1];

        $d43 = r23[0];

        $d48 = $d44 - $d43;

        $d46 = $r12[1];

        $d45 = $r12[0];

        $d47 = $d46 - $d45;

        d102 = $d48 / $d47;

        $d50 = r23[2];

        $d49 = r23[1];

        $d54 = $d50 - $d49;

        $d52 = $r12[2];

        $d51 = $r12[1];

        $d53 = $d52 - $d51;

        d103 = $d54 / $d53;

        $d55 = d102 + d103;

        $d56 = 0.5 * $d55;

        r6[1] = $d56;

     label19:
        i8 = i8 + -1;

        goto label17;

     label20:
        $d37 = r23[0];

        r6[0] = $d37;

        $d38 = virtualinvoke r4.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double getTheta(double,double,double,double,double,double[])>(d0, d1, d2, d3, d6, r6);

        r6[3] = $d38;

        $r14 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek FAIR_PRICE>;

        $d39 = r6[0];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d39);

        virtualinvoke r24.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r14, $r15);

        $r16 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek DELTA>;

        $d40 = r6[1];

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d40);

        virtualinvoke r24.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r16, $r17);

        $r18 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek GAMMA>;

        $d41 = r6[2];

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d41);

        virtualinvoke r24.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r18, $r19);

        $r20 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek THETA>;

        $d42 = r6[3];

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d42);

        virtualinvoke r24.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r20, $r21);

        return r24;
    }

    public com.opengamma.analytics.financial.greeks.GreekResultCollection getGreeks(com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double[], double[], double[])
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, d106, d107, d108, d109;
        double[] r2, r3, r4, r7, r8, r9, r10, $r19, $r20, r29, r30, r31, r32;
        int i0, $i2, $i3, $i4, i11, i12, i13;
        byte $b1, $b5, $b6, $b7, $b8, $b9, $b10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.opengamma.analytics.financial.greeks.GreekResultCollection $r17;
        com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification $r18;
        com.opengamma.analytics.financial.greeks.Greek $r21, $r23, $r25, $r27;
        java.lang.Double $r22, $r24, $r26, $r28;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "volatility");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "interestRate");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r4, "dividend");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $r17 = new com.opengamma.analytics.financial.greeks.GreekResultCollection;

        specialinvoke $r17.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void <init>()>();

        $r18 = new com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        specialinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: void <init>()>();

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $i2 = lengthof r3;

        if i0 != $i2 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "Wrong interestRate length");

        $i3 = lengthof r2;

        if i0 != $i3 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Wrong volatility length");

        $i4 = lengthof r4;

        if i0 != $i4 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Wrong dividend length");

        i11 = 0;

     label09:
        if i11 >= i0 goto label12;

        $d102 = r2[i11];

        $b10 = $d102 cmpl 0.0;

        if $b10 <= 0 goto label10;

        $z8 = 1;

        goto label11;

     label10:
        $z8 = 0;

     label11:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "volatility should be positive");

        $d103 = r2[i11];

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d103);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "volatility should be finite");

        $d104 = r3[i11];

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d104);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "interestRate should be finite");

        $d105 = r4[i11];

        $z3 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d105);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "dividend should be finite");

        i11 = i11 + 1;

        goto label09;

     label12:
        r29 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double[] getShiftedDrift(double[],double[],double[])>(r2, r3, r4);

        $d11 = (double) i0;

        d2 = d1 / $d11;

        d3 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double getSpaceStepTrinomial(double[],double[],double)>(r2, r29, d2);

        $d12 = neg d3;

        d4 = staticinvoke <java.lang.Math: double exp(double)>($d12);

        d5 = staticinvoke <java.lang.Math: double exp(double)>(d3);

        r7 = newarray (double)[i0];

        r8 = newarray (double)[i0];

        r9 = newarray (double)[i0];

        r10 = newarray (double)[i0];

        i12 = 0;

     label13:
        if i12 >= i0 goto label24;

        $d89 = r2[i12];

        $d88 = r29[i12];

        r30 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double[] getParametersTrinomial(double,double,double,double)>($d89, $d88, d2, d3);

        $d90 = r30[0];

        r7[i12] = $d90;

        $d91 = r30[1];

        r8[i12] = $d91;

        $d92 = r30[2];

        r9[i12] = $d92;

        $d93 = r3[i12];

        $d94 = neg $d93;

        $d95 = $d94 * d2;

        $d96 = staticinvoke <java.lang.Math: double exp(double)>($d95);

        r10[i12] = $d96;

        $d97 = r7[i12];

        $b5 = $d97 cmpl 0.0;

        if $b5 <= 0 goto label14;

        $z9 = 1;

        goto label15;

     label14:
        $z9 = 0;

     label15:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "upProbability should be greater than 0.");

        $d98 = r7[i12];

        $b6 = $d98 cmpg 1.0;

        if $b6 >= 0 goto label16;

        $z10 = 1;

        goto label17;

     label16:
        $z10 = 0;

     label17:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "upProbability should be smaller than 1.");

        $d99 = r8[i12];

        $b7 = $d99 cmpl 0.0;

        if $b7 <= 0 goto label18;

        $z11 = 1;

        goto label19;

     label18:
        $z11 = 0;

     label19:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "middleProbability should be greater than 0.");

        $d100 = r8[i12];

        $b8 = $d100 cmpg 1.0;

        if $b8 >= 0 goto label20;

        $z12 = 1;

        goto label21;

     label20:
        $z12 = 0;

     label21:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "middleProbability should be smaller than 1.");

        $d101 = r9[i12];

        $b9 = $d101 cmpl 0.0;

        if $b9 <= 0 goto label22;

        $z13 = 1;

        goto label23;

     label22:
        $z13 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "downProbability should be greater than 0.");

        i12 = i12 + 1;

        goto label13;

     label24:
        r31 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d0, d4, d5);

        r32 = newarray (double)[4];

        $r19 = newarray (double)[3];

        $d13 = d0 * d4;

        $r19[0] = $d13;

        $r19[1] = d0;

        $d14 = d0 * d5;

        $r19[2] = $d14;

        $r20 = newarray (double)[5];

        $d15 = $r19[0];

        $d16 = $d15 * d4;

        $r20[0] = $d16;

        $d17 = $r19[0];

        $r20[1] = $d17;

        $r20[2] = d0;

        $d18 = $r19[2];

        $r20[3] = $d18;

        $d19 = $r19[2];

        $d20 = $d19 * d5;

        $r20[4] = $d20;

        i13 = i0 - 1;

     label25:
        if i13 <= -1 goto label28;

        $d30 = r10[i13];

        $d29 = r7[i13];

        $d28 = r8[i13];

        $d27 = r9[i13];

        r31 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>($d30, $d29, $d28, $d27, r31, d0, 0.0, d4, d5, i13);

        if i13 != 2 goto label26;

        $d46 = r31[4];

        $d45 = r31[3];

        $d50 = $d46 - $d45;

        $d48 = $r20[4];

        $d47 = $r20[3];

        $d49 = $d48 - $d47;

        d106 = $d50 / $d49;

        $d52 = r31[3];

        $d51 = r31[2];

        $d56 = $d52 - $d51;

        $d54 = $r20[3];

        $d53 = $r20[2];

        $d55 = $d54 - $d53;

        d107 = $d56 / $d55;

        $d58 = r31[2];

        $d57 = r31[1];

        $d62 = $d58 - $d57;

        $d60 = $r20[2];

        $d59 = $r20[1];

        $d61 = $d60 - $d59;

        d6 = $d62 / $d61;

        $d64 = r31[1];

        $d63 = r31[0];

        $d68 = $d64 - $d63;

        $d66 = $r20[1];

        $d65 = $r20[0];

        $d67 = $d66 - $d65;

        d7 = $d68 / $d67;

        $d69 = d106 - d107;

        $d73 = 2.0 * $d69;

        $d71 = $r20[4];

        $d70 = $r20[2];

        $d72 = $d71 - $d70;

        d8 = $d73 / $d72;

        $d74 = d107 - d6;

        $d78 = 2.0 * $d74;

        $d76 = $r20[3];

        $d75 = $r20[1];

        $d77 = $d76 - $d75;

        d9 = $d78 / $d77;

        $d79 = d6 - d7;

        $d83 = 2.0 * $d79;

        $d81 = $r20[2];

        $d80 = $r20[0];

        $d82 = $d81 - $d80;

        d10 = $d83 / $d82;

        $d84 = d8 + d9;

        $d85 = $d84 + d10;

        $d86 = $d85 / 3.0;

        r32[2] = $d86;

        $d87 = r31[2];

        r32[3] = $d87;

     label26:
        if i13 != 1 goto label27;

        $d32 = r31[1];

        $d31 = r31[0];

        $d36 = $d32 - $d31;

        $d34 = $r19[1];

        $d33 = $r19[0];

        $d35 = $d34 - $d33;

        d108 = $d36 / $d35;

        $d38 = r31[2];

        $d37 = r31[1];

        $d42 = $d38 - $d37;

        $d40 = $r19[2];

        $d39 = $r19[1];

        $d41 = $d40 - $d39;

        d109 = $d42 / $d41;

        $d43 = d108 + d109;

        $d44 = 0.5 * $d43;

        r32[1] = $d44;

     label27:
        i13 = i13 + -1;

        goto label25;

     label28:
        $d21 = r31[0];

        r32[0] = $d21;

        $d22 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification: double getTheta(double,double,double,double,double,double[])>(d0, 0.0, 0.0, 0.0, d2, r32);

        r32[3] = $d22;

        $r21 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek FAIR_PRICE>;

        $d23 = r32[0];

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d23);

        virtualinvoke $r17.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r21, $r22);

        $r23 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek DELTA>;

        $d24 = r32[1];

        $r24 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        virtualinvoke $r17.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r23, $r24);

        $r25 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek GAMMA>;

        $d25 = r32[2];

        $r26 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d25);

        virtualinvoke $r17.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r25, $r26);

        $r27 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek THETA>;

        $d26 = r32[3];

        $r28 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d26);

        virtualinvoke $r17.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r27, $r28);

        return $r17;
    }

    public com.opengamma.analytics.financial.greeks.GreekResultCollection getGreeks(com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification, com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, double, double, double, com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification r1, r5, $r21;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r2;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, d143, d144, d145, d146, d147, d148, d149, d150, d151, d152, d153, d154, d155, d156, d157, d158, d159, d160, d161;
        com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider r3;
        int i0, i1, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17;
        double[] r6, r8, r22, r23, r24, r25, r26;
        int[] r7;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.opengamma.analytics.financial.greeks.Greek $r13, $r15, $r17, $r19;
        java.lang.Double $r14, $r16, $r18, $r20;
        com.opengamma.analytics.financial.greeks.GreekResultCollection r27;
        com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification r28;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r3 := @parameter5: com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "lattice");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "function");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "dividend");

        $b2 = d0 cmpl 0.0;

        if $b2 <= 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Spot should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Spot should be finite");

        $b3 = d1 cmpl 0.0;

        if $b3 <= 0 goto label03;

        $z8 = 1;

        goto label04;

     label03:
        $z8 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "volatility should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "volatility should be finite");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "interestRate should be finite");

        r27 = new com.opengamma.analytics.financial.greeks.GreekResultCollection;

        specialinvoke r27.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void <init>()>();

        $z3 = r1 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.TimeVaryingLatticeSpecification;

        if $z3 == 0 goto label05;

        r28 = new com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification;

        $r21 = r28;

        specialinvoke r28.<com.opengamma.analytics.financial.model.option.pricing.tree.TrigeorgisLatticeSpecification: void <init>()>();

        goto label06;

     label05:
        $r21 = r1;

     label06:
        r5 = $r21;

        i0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getStrike()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        $d15 = (double) i0;

        d5 = d4 / $d15;

        $z4 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: boolean checkTimeSteps(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "Number of steps is too small");

        $z5 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: boolean checkDividendBeforeExpiry(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "Dividend is paid after expiry");

        $d16 = neg d2;

        $d17 = $d16 * d5;

        d6 = staticinvoke <java.lang.Math: double exp(double)>($d17);

        r6 = virtualinvoke $r21.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double[] getParametersTrinomial(double,double,double,double,double,int,double)>(d0, d3, d4, d1, d2, i0, d5);

        d7 = r6[0];

        d8 = r6[1];

        d9 = r6[2];

        d10 = r6[3];

        d11 = r6[4];

        d12 = r6[5];

        d13 = d8 / d9;

        $b4 = d10 cmpl 0.0;

        if $b4 <= 0 goto label07;

        $z9 = 1;

        goto label08;

     label07:
        $z9 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "upProbability should be greater than 0.");

        $b5 = d10 cmpg 1.0;

        if $b5 >= 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "upProbability should be smaller than 1.");

        $b6 = d11 cmpl 0.0;

        if $b6 <= 0 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "middleProbability should be greater than 0.");

        $b7 = d11 cmpg 1.0;

        if $b7 >= 0 goto label13;

        $z12 = 1;

        goto label14;

     label13:
        $z12 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z12, "middleProbability should be smaller than 1.");

        $b8 = d12 cmpl 0.0;

        if $b8 <= 0 goto label15;

        $z13 = 1;

        goto label16;

     label15:
        $z13 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z13, "downProbability should be greater than 0.");

        r7 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: int[] getDividendSteps(double)>(d5);

        d143 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double spotModifier(double,double)>(d0, d2);

        r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d143, d9, d13);

        i13 = 0;

        i1 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: int getNumberOfDividends()>();

        r8 = newarray (double)[4];

        $z6 = r3 instanceof com.opengamma.analytics.financial.model.option.pricing.tree.ProportionalDividendFunctionProvider;

        if $z6 == 0 goto label24;

        i14 = i0 - 1;

     label17:
        if i14 <= -1 goto label23;

        $i11 = i1 - 1;

        i15 = $i11 - i13;

     label18:
        if i15 <= -1 goto label20;

        $i12 = r7[i15];

        if i14 != $i12 goto label19;

        d143 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double dividendCorrections(double,double,double,int)>(d143, 0.0, 0.0, i15);

        i13 = i13 + 1;

     label19:
        i15 = i15 + -1;

        goto label18;

     label20:
        r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d6, d10, d11, d12, r22, d143, 0.0, d9, d13, i14);

        if i14 != 2 goto label21;

        r23 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double[] getAssetPricesForGamma(double,double,int[],double,double,double,double)>(d0, d2, r7, d7, d8, d9, 0.0);

        $d101 = r22[4];

        $d100 = r22[3];

        $d105 = $d101 - $d100;

        $d103 = r23[4];

        $d102 = r23[3];

        $d104 = $d103 - $d102;

        d144 = $d105 / $d104;

        $d107 = r22[3];

        $d106 = r22[2];

        $d111 = $d107 - $d106;

        $d109 = r23[3];

        $d108 = r23[2];

        $d110 = $d109 - $d108;

        d145 = $d111 / $d110;

        $d113 = r22[2];

        $d112 = r22[1];

        $d117 = $d113 - $d112;

        $d115 = r23[2];

        $d114 = r23[1];

        $d116 = $d115 - $d114;

        d146 = $d117 / $d116;

        $d119 = r22[1];

        $d118 = r22[0];

        $d123 = $d119 - $d118;

        $d121 = r23[1];

        $d120 = r23[0];

        $d122 = $d121 - $d120;

        d147 = $d123 / $d122;

        $d124 = d144 - d145;

        $d128 = 2.0 * $d124;

        $d126 = r23[4];

        $d125 = r23[2];

        $d127 = $d126 - $d125;

        d148 = $d128 / $d127;

        $d129 = d145 - d146;

        $d133 = 2.0 * $d129;

        $d131 = r23[3];

        $d130 = r23[1];

        $d132 = $d131 - $d130;

        d149 = $d133 / $d132;

        $d134 = d146 - d147;

        $d138 = 2.0 * $d134;

        $d136 = r23[2];

        $d135 = r23[0];

        $d137 = $d136 - $d135;

        d150 = $d138 / $d137;

        $d139 = d148 + d149;

        $d140 = $d139 + d150;

        $d141 = $d140 / 3.0;

        r8[2] = $d141;

        $d142 = r22[2];

        r8[3] = $d142;

     label21:
        if i14 != 1 goto label22;

        r24 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double[] getAssetPricesForDelta(double,double,int[],double,double,double,double)>(d0, d2, r7, d7, d8, d9, 0.0);

        $d87 = r22[1];

        $d86 = r22[0];

        $d91 = $d87 - $d86;

        $d89 = r24[1];

        $d88 = r24[0];

        $d90 = $d89 - $d88;

        d151 = $d91 / $d90;

        $d93 = r22[2];

        $d92 = r22[1];

        $d97 = $d93 - $d92;

        $d95 = r24[2];

        $d94 = r24[1];

        $d96 = $d95 - $d94;

        d152 = $d97 / $d96;

        $d98 = d151 + d152;

        $d99 = 0.5 * $d98;

        r8[1] = $d99;

     label22:
        i14 = i14 + -1;

        goto label17;

     label23:
        goto label31;

     label24:
        d153 = 0.0;

        i16 = i0 - 1;

     label25:
        if i16 <= -1 goto label31;

        $d24 = neg d2;

        $d25 = $d24 * d5;

        $d26 = staticinvoke <java.lang.Math: double exp(double)>($d25);

        d153 = d153 * $d26;

        $i9 = i1 - 1;

        i17 = $i9 - i13;

     label26:
        if i17 <= -1 goto label28;

        $i10 = r7[i17];

        if i16 != $i10 goto label27;

        $d84 = (double) i16;

        $d85 = d5 * $d84;

        d153 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double dividendCorrections(double,double,double,int)>(d153, d2, $d85, i17);

        i13 = i13 + 1;

     label27:
        i17 = i17 + -1;

        goto label26;

     label28:
        r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getNextOptionValues(double,double,double,double,double[],double,double,double,double,int)>(d6, d10, d11, d12, r22, d143, d153, d9, d13, i16);

        if i16 != 2 goto label29;

        r25 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double[] getAssetPricesForGamma(double,double,int[],double,double,double,double)>(d143, d2, r7, d7, d8, d9, d153);

        $d42 = r22[4];

        $d41 = r22[3];

        $d46 = $d42 - $d41;

        $d44 = r25[4];

        $d43 = r25[3];

        $d45 = $d44 - $d43;

        d154 = $d46 / $d45;

        $d48 = r22[3];

        $d47 = r22[2];

        $d52 = $d48 - $d47;

        $d50 = r25[3];

        $d49 = r25[2];

        $d51 = $d50 - $d49;

        d155 = $d52 / $d51;

        $d54 = r22[2];

        $d53 = r22[1];

        $d58 = $d54 - $d53;

        $d56 = r25[2];

        $d55 = r25[1];

        $d57 = $d56 - $d55;

        d156 = $d58 / $d57;

        $d60 = r22[1];

        $d59 = r22[0];

        $d64 = $d60 - $d59;

        $d62 = r25[1];

        $d61 = r25[0];

        $d63 = $d62 - $d61;

        d157 = $d64 / $d63;

        $d65 = d154 - d155;

        $d69 = 2.0 * $d65;

        $d67 = r25[4];

        $d66 = r25[2];

        $d68 = $d67 - $d66;

        d158 = $d69 / $d68;

        $d70 = d155 - d156;

        $d74 = 2.0 * $d70;

        $d72 = r25[3];

        $d71 = r25[1];

        $d73 = $d72 - $d71;

        d159 = $d74 / $d73;

        $d75 = d156 - d157;

        $d79 = 2.0 * $d75;

        $d77 = r25[2];

        $d76 = r25[0];

        $d78 = $d77 - $d76;

        d14 = $d79 / $d78;

        $d80 = d158 + d159;

        $d81 = $d80 + d14;

        $d82 = $d81 / 3.0;

        r8[2] = $d82;

        $d83 = r22[2];

        r8[3] = $d83;

     label29:
        if i16 != 1 goto label30;

        r26 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.pricing.tree.DividendFunctionProvider: double[] getAssetPricesForDelta(double,double,int[],double,double,double,double)>(d143, d2, r7, d7, d8, d9, d153);

        $d28 = r22[1];

        $d27 = r22[0];

        $d32 = $d28 - $d27;

        $d30 = r26[1];

        $d29 = r26[0];

        $d31 = $d30 - $d29;

        d160 = $d32 / $d31;

        $d34 = r22[2];

        $d33 = r22[1];

        $d38 = $d34 - $d33;

        $d36 = r26[2];

        $d35 = r26[1];

        $d37 = $d36 - $d35;

        d161 = $d38 / $d37;

        $d39 = d160 + d161;

        $d40 = 0.5 * $d39;

        r8[1] = $d40;

     label30:
        i16 = i16 + -1;

        goto label25;

     label31:
        $d18 = r22[0];

        r8[0] = $d18;

        $d19 = virtualinvoke r5.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: double getTheta(double,double,double,double,double,double[])>(d0, d1, d2, 0.0, d5, r8);

        r8[3] = $d19;

        $r13 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek FAIR_PRICE>;

        $d20 = r8[0];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d20);

        virtualinvoke r27.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r13, $r14);

        $r15 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek DELTA>;

        $d21 = r8[1];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d21);

        virtualinvoke r27.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r15, $r16);

        $r17 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek GAMMA>;

        $d22 = r8[2];

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d22);

        virtualinvoke r27.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r17, $r18);

        $r19 = <com.opengamma.analytics.financial.greeks.Greek: com.opengamma.analytics.financial.greeks.Greek THETA>;

        $d23 = r8[3];

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d23);

        virtualinvoke r27.<com.opengamma.analytics.financial.greeks.GreekResultCollection: void put(com.opengamma.analytics.financial.greeks.Greek,java.lang.Double)>($r19, $r20);

        return r27;
    }

    public double[] getGreeks(com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D, double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, $d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345, $d346, $d347, $d348, $d349, $d350, $d351, $d352, $d353, $d354, $d355, $d356, $d357, $d358, $d359, $d360, $d361, $d362, $d363, $d364, $d365, $d366, $d367, $d368, $d369, $d370, $d371, $d372, $d373, $d374, $d375, $d376, $d377, $d378, $d379, $d380, $d381, $d382, $d383, $d384, $d385, $d386, $d387, $d388, $d389, $d390, $d391, $d392, $d393, $d394, $d395, $d396, $d397, $d398, $d399, $d400, $d401, $d402, d403, d404, d405, d406, d407, d408, d409, d410, d411, d412, d413, d414, d415, d416, d417, d418, d419, d420, d421, d422;
        int i0, i7;
        double[] r3, r4, r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112, $r113, $r114, $r115, $r116, $r117, $r119, $r120, $r121, $r122;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification $r118;
        double[][] r123;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        d5 := @parameter6: double;

        d6 := @parameter7: double;

        d7 := @parameter8: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $b1 = d0 cmpl 0.0;

        if $b1 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z4, "spot1 should be positive");

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "spot1 should be finite");

        $b2 = d1 cmpl 0.0;

        if $b2 <= 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "spot2 should be positive");

        $z1 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "spot2 should be finite");

        $b3 = d2 cmpl 0.0;

        if $b3 <= 0 goto label05;

        $z6 = 1;

        goto label06;

     label05:
        $z6 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "volatility1 should be positive");

        $z2 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d2);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "volatility1 should be finite");

        $b4 = d3 cmpl 0.0;

        if $b4 <= 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "volatility2 should be positive");

        $z3 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "volatility2 should be finite");

        $b5 = d4 cmpl -1.0;

        if $b5 < 0 goto label09;

        $b6 = d4 cmpg 1.0;

        if $b6 > 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "correlation should be -1. <= rho <= 1.");

        $z9 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "interestRate should be finite");

        $z10 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "dividend1 should be finite");

        $z11 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>(d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "dividend2 should be finite");

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: int getNumberOfSteps()>();

        d8 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double getTimeToExpiry()>();

        $d343 = (double) i0;

        d9 = d8 / $d343;

        $r118 = new com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification;

        specialinvoke $r118.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: void <init>()>();

        $d344 = d5 - d6;

        r3 = virtualinvoke $r118.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: double[] getParametersTrinomial(double,double,double)>(d2, $d344, d9);

        $d345 = d5 - d7;

        r4 = virtualinvoke $r118.<com.opengamma.analytics.financial.model.option.pricing.tree.CoxRossRubinsteinLatticeSpecification: double[] getParametersTrinomial(double,double,double)>(d3, $d345, d9);

        d10 = r3[2];

        d11 = r4[2];

        d12 = r3[0];

        d13 = r4[0];

        d14 = r3[3];

        d15 = r3[4];

        d16 = r3[5];

        d17 = r4[3];

        d18 = r4[4];

        d19 = r4[5];

        $d346 = neg d5;

        $d347 = $d346 * d9;

        d20 = staticinvoke <java.lang.Math: double exp(double)>($d347);

        $d348 = d14 / 3.0;

        $d349 = d17 / 3.0;

        $d350 = $d348 + $d349;

        $d351 = $d350 - 0.1111111111111111;

        $d352 = d4 / 4.0;

        d21 = $d351 + $d352;

        $d353 = d14 / 3.0;

        $d354 = d18 / 3.0;

        $d355 = $d353 + $d354;

        d22 = $d355 - 0.1111111111111111;

        $d356 = d14 / 3.0;

        $d357 = d19 / 3.0;

        $d358 = $d356 + $d357;

        $d359 = $d358 - 0.1111111111111111;

        $d360 = d4 / 4.0;

        d23 = $d359 - $d360;

        $d361 = d15 / 3.0;

        $d362 = d17 / 3.0;

        $d363 = $d361 + $d362;

        d24 = $d363 - 0.1111111111111111;

        $d364 = d15 / 3.0;

        $d365 = d18 / 3.0;

        $d366 = $d364 + $d365;

        d25 = $d366 - 0.1111111111111111;

        $d367 = d15 / 3.0;

        $d368 = d19 / 3.0;

        $d369 = $d367 + $d368;

        d26 = $d369 - 0.1111111111111111;

        $d370 = d16 / 3.0;

        $d371 = d17 / 3.0;

        $d372 = $d370 + $d371;

        $d373 = $d372 - 0.1111111111111111;

        $d374 = d4 / 4.0;

        d27 = $d373 - $d374;

        $d375 = d16 / 3.0;

        $d376 = d18 / 3.0;

        $d377 = $d375 + $d376;

        d28 = $d377 - 0.1111111111111111;

        $d378 = d16 / 3.0;

        $d379 = d19 / 3.0;

        $d380 = $d378 + $d379;

        $d381 = $d380 - 0.1111111111111111;

        $d382 = d4 / 4.0;

        d29 = $d381 + $d382;

        $r119 = newarray (double)[3];

        $d383 = d0 * d10;

        $r119[0] = $d383;

        $r119[1] = d0;

        $d384 = d0 * d12;

        $r119[2] = $d384;

        $r120 = newarray (double)[3];

        $d385 = d1 * d11;

        $r120[0] = $d385;

        $r120[1] = d1;

        $d386 = d1 * d13;

        $r120[2] = $d386;

        $r121 = newarray (double)[5];

        $d387 = $r119[0];

        $d388 = $d387 * d10;

        $r121[0] = $d388;

        $d389 = $r119[0];

        $r121[1] = $d389;

        $r121[2] = d0;

        $d390 = $r119[2];

        $r121[3] = $d390;

        $d391 = $r119[2];

        $d392 = $d391 * d12;

        $r121[4] = $d392;

        $r122 = newarray (double)[5];

        $d393 = $r120[0];

        $d394 = $d393 * d11;

        $r122[0] = $d394;

        $d395 = $r120[0];

        $r122[1] = $d395;

        $r122[2] = d1;

        $d396 = $r120[2];

        $r122[3] = $d396;

        $d397 = $r120[2];

        $d398 = $d397 * d13;

        $r122[4] = $d398;

        $d399 = (double) i0;

        $d400 = staticinvoke <java.lang.Math: double pow(double,double)>(d10, $d399);

        d30 = d0 * $d400;

        $d401 = (double) i0;

        $d402 = staticinvoke <java.lang.Math: double pow(double,double)>(d11, $d401);

        d31 = d1 * $d402;

        r123 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double[][] getPayoffAtExpiryTrinomial(double,double,double,double)>(d30, d31, d12, d13);

        r9 = newarray (double)[7];

        i7 = i0 - 1;

     label11:
        if i7 <= -1 goto label14;

        r123 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider2D: double[][] getNextOptionValues(double,double,double,double,double,double,double,double,double,double,double[][],double,double,double,double,double,double,int)>(d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, r123, d0, d1, d10, d11, d12, d13, i7);

        if i7 != 2 goto label12;

        $d125 = $r121[1];

        $d124 = $r121[0];

        d403 = $d125 - $d124;

        $d127 = $r121[2];

        $d126 = $r121[1];

        d404 = $d127 - $d126;

        $d129 = $r121[3];

        $d128 = $r121[2];

        d405 = $d129 - $d128;

        $d131 = $r121[4];

        $d130 = $r121[3];

        d406 = $d131 - $d130;

        $r37 = r123[1];

        $d133 = $r37[0];

        $r38 = r123[0];

        $d132 = $r38[0];

        $d135 = $d133 - $d132;

        $r39 = r123[1];

        $d134 = $r39[1];

        $d137 = $d135 + $d134;

        $r40 = r123[0];

        $d136 = $r40[1];

        $d139 = $d137 - $d136;

        $r41 = r123[1];

        $d138 = $r41[2];

        $d141 = $d139 + $d138;

        $r42 = r123[0];

        $d140 = $r42[2];

        $d143 = $d141 - $d140;

        $r43 = r123[1];

        $d142 = $r43[3];

        $d145 = $d143 + $d142;

        $r44 = r123[0];

        $d144 = $r44[3];

        $d147 = $d145 - $d144;

        $r45 = r123[1];

        $d146 = $r45[4];

        $d149 = $d147 + $d146;

        $r46 = r123[0];

        $d148 = $r46[4];

        $d150 = $d149 - $d148;

        $d151 = $d150 / d403;

        d407 = $d151 / 5.0;

        $r47 = r123[2];

        $d153 = $r47[0];

        $r48 = r123[1];

        $d152 = $r48[0];

        $d155 = $d153 - $d152;

        $r49 = r123[2];

        $d154 = $r49[1];

        $d157 = $d155 + $d154;

        $r50 = r123[1];

        $d156 = $r50[1];

        $d159 = $d157 - $d156;

        $r51 = r123[2];

        $d158 = $r51[2];

        $d161 = $d159 + $d158;

        $r52 = r123[1];

        $d160 = $r52[2];

        $d163 = $d161 - $d160;

        $r53 = r123[2];

        $d162 = $r53[3];

        $d165 = $d163 + $d162;

        $r54 = r123[1];

        $d164 = $r54[3];

        $d167 = $d165 - $d164;

        $r55 = r123[2];

        $d166 = $r55[4];

        $d169 = $d167 + $d166;

        $r56 = r123[1];

        $d168 = $r56[4];

        $d170 = $d169 - $d168;

        $d171 = $d170 / d404;

        d408 = $d171 / 5.0;

        $r57 = r123[3];

        $d173 = $r57[0];

        $r58 = r123[2];

        $d172 = $r58[0];

        $d175 = $d173 - $d172;

        $r59 = r123[3];

        $d174 = $r59[1];

        $d177 = $d175 + $d174;

        $r60 = r123[2];

        $d176 = $r60[1];

        $d179 = $d177 - $d176;

        $r61 = r123[3];

        $d178 = $r61[2];

        $d181 = $d179 + $d178;

        $r62 = r123[2];

        $d180 = $r62[2];

        $d183 = $d181 - $d180;

        $r63 = r123[3];

        $d182 = $r63[3];

        $d185 = $d183 + $d182;

        $r64 = r123[2];

        $d184 = $r64[3];

        $d187 = $d185 - $d184;

        $r65 = r123[3];

        $d186 = $r65[4];

        $d189 = $d187 + $d186;

        $r66 = r123[2];

        $d188 = $r66[4];

        $d190 = $d189 - $d188;

        $d191 = $d190 / d405;

        d409 = $d191 / 5.0;

        $r67 = r123[4];

        $d193 = $r67[0];

        $r68 = r123[3];

        $d192 = $r68[0];

        $d195 = $d193 - $d192;

        $r69 = r123[4];

        $d194 = $r69[1];

        $d197 = $d195 + $d194;

        $r70 = r123[3];

        $d196 = $r70[1];

        $d199 = $d197 - $d196;

        $r71 = r123[4];

        $d198 = $r71[2];

        $d201 = $d199 + $d198;

        $r72 = r123[3];

        $d200 = $r72[2];

        $d203 = $d201 - $d200;

        $r73 = r123[4];

        $d202 = $r73[3];

        $d205 = $d203 + $d202;

        $r74 = r123[3];

        $d204 = $r74[3];

        $d207 = $d205 - $d204;

        $r75 = r123[4];

        $d206 = $r75[4];

        $d209 = $d207 + $d206;

        $r76 = r123[3];

        $d208 = $r76[4];

        $d210 = $d209 - $d208;

        $d211 = $d210 / d406;

        d410 = $d211 / 5.0;

        $d212 = d408 - d407;

        $d216 = 2.0 * $d212;

        $d214 = $r121[2];

        $d213 = $r121[0];

        $d215 = $d214 - $d213;

        $d223 = $d216 / $d215;

        $d217 = d409 - d408;

        $d221 = 2.0 * $d217;

        $d219 = $r121[3];

        $d218 = $r121[1];

        $d220 = $d219 - $d218;

        $d222 = $d221 / $d220;

        $d230 = $d223 + $d222;

        $d224 = d410 - d409;

        $d228 = 2.0 * $d224;

        $d226 = $r121[4];

        $d225 = $r121[2];

        $d227 = $d226 - $d225;

        $d229 = $d228 / $d227;

        $d231 = $d230 + $d229;

        $d232 = $d231 / 3.0;

        r9[4] = $d232;

        $d234 = $r122[1];

        $d233 = $r122[0];

        d411 = $d234 - $d233;

        $d236 = $r122[2];

        $d235 = $r122[1];

        d412 = $d236 - $d235;

        $d238 = $r122[3];

        $d237 = $r122[2];

        d32 = $d238 - $d237;

        $d240 = $r122[4];

        $d239 = $r122[3];

        d33 = $d240 - $d239;

        $r77 = r123[0];

        $d242 = $r77[1];

        $r78 = r123[0];

        $d241 = $r78[0];

        $d244 = $d242 - $d241;

        $r79 = r123[1];

        $d243 = $r79[1];

        $d246 = $d244 + $d243;

        $r80 = r123[1];

        $d245 = $r80[0];

        $d248 = $d246 - $d245;

        $r81 = r123[2];

        $d247 = $r81[1];

        $d250 = $d248 + $d247;

        $r82 = r123[2];

        $d249 = $r82[0];

        $d252 = $d250 - $d249;

        $r83 = r123[3];

        $d251 = $r83[1];

        $d254 = $d252 + $d251;

        $r84 = r123[3];

        $d253 = $r84[0];

        $d256 = $d254 - $d253;

        $r85 = r123[4];

        $d255 = $r85[1];

        $d258 = $d256 + $d255;

        $r86 = r123[4];

        $d257 = $r86[0];

        $d259 = $d258 - $d257;

        $d260 = $d259 / d411;

        d34 = $d260 / 5.0;

        $r87 = r123[0];

        $d262 = $r87[2];

        $r88 = r123[0];

        $d261 = $r88[1];

        $d264 = $d262 - $d261;

        $r89 = r123[1];

        $d263 = $r89[2];

        $d266 = $d264 + $d263;

        $r90 = r123[1];

        $d265 = $r90[1];

        $d268 = $d266 - $d265;

        $r91 = r123[2];

        $d267 = $r91[2];

        $d270 = $d268 + $d267;

        $r92 = r123[2];

        $d269 = $r92[1];

        $d272 = $d270 - $d269;

        $r93 = r123[3];

        $d271 = $r93[2];

        $d274 = $d272 + $d271;

        $r94 = r123[3];

        $d273 = $r94[1];

        $d276 = $d274 - $d273;

        $r95 = r123[4];

        $d275 = $r95[2];

        $d278 = $d276 + $d275;

        $r96 = r123[4];

        $d277 = $r96[1];

        $d279 = $d278 - $d277;

        $d280 = $d279 / d412;

        d35 = $d280 / 5.0;

        $r97 = r123[0];

        $d282 = $r97[3];

        $r98 = r123[0];

        $d281 = $r98[2];

        $d284 = $d282 - $d281;

        $r99 = r123[1];

        $d283 = $r99[3];

        $d286 = $d284 + $d283;

        $r100 = r123[1];

        $d285 = $r100[2];

        $d288 = $d286 - $d285;

        $r101 = r123[2];

        $d287 = $r101[3];

        $d290 = $d288 + $d287;

        $r102 = r123[2];

        $d289 = $r102[2];

        $d292 = $d290 - $d289;

        $r103 = r123[3];

        $d291 = $r103[3];

        $d294 = $d292 + $d291;

        $r104 = r123[3];

        $d293 = $r104[2];

        $d296 = $d294 - $d293;

        $r105 = r123[4];

        $d295 = $r105[3];

        $d298 = $d296 + $d295;

        $r106 = r123[4];

        $d297 = $r106[2];

        $d299 = $d298 - $d297;

        $d300 = $d299 / d32;

        d36 = $d300 / 5.0;

        $r107 = r123[0];

        $d302 = $r107[4];

        $r108 = r123[0];

        $d301 = $r108[3];

        $d304 = $d302 - $d301;

        $r109 = r123[1];

        $d303 = $r109[4];

        $d306 = $d304 + $d303;

        $r110 = r123[1];

        $d305 = $r110[3];

        $d308 = $d306 - $d305;

        $r111 = r123[2];

        $d307 = $r111[4];

        $d310 = $d308 + $d307;

        $r112 = r123[2];

        $d309 = $r112[3];

        $d312 = $d310 - $d309;

        $r113 = r123[3];

        $d311 = $r113[4];

        $d314 = $d312 + $d311;

        $r114 = r123[3];

        $d313 = $r114[3];

        $d316 = $d314 - $d313;

        $r115 = r123[4];

        $d315 = $r115[4];

        $d318 = $d316 + $d315;

        $r116 = r123[4];

        $d317 = $r116[3];

        $d319 = $d318 - $d317;

        $d320 = $d319 / d33;

        d37 = $d320 / 5.0;

        $d321 = d35 - d34;

        $d325 = 2.0 * $d321;

        $d323 = $r122[2];

        $d322 = $r122[0];

        $d324 = $d323 - $d322;

        $d332 = $d325 / $d324;

        $d326 = d36 - d35;

        $d330 = 2.0 * $d326;

        $d328 = $r122[3];

        $d327 = $r122[1];

        $d329 = $d328 - $d327;

        $d331 = $d330 / $d329;

        $d339 = $d332 + $d331;

        $d333 = d37 - d36;

        $d337 = 2.0 * $d333;

        $d335 = $r122[4];

        $d334 = $r122[2];

        $d336 = $d335 - $d334;

        $d338 = $d337 / $d336;

        $d340 = $d339 + $d338;

        $d341 = $d340 / 3.0;

        r9[5] = $d341;

        $r117 = r123[2];

        $d342 = $r117[2];

        r9[3] = $d342;

     label12:
        if i7 != 1 goto label13;

        $d45 = $r119[1];

        $d44 = $r119[0];

        d413 = $d45 - $d44;

        $d47 = $r119[2];

        $d46 = $r119[1];

        d414 = $d47 - $d46;

        $r13 = r123[1];

        $d49 = $r13[0];

        $r14 = r123[0];

        $d48 = $r14[0];

        $d50 = $d49 - $d48;

        $d55 = $d50 / d413;

        $r15 = r123[2];

        $d52 = $r15[0];

        $r16 = r123[1];

        $d51 = $r16[0];

        $d53 = $d52 - $d51;

        $d54 = $d53 / d414;

        $d56 = $d55 + $d54;

        d415 = 0.5 * $d56;

        $r17 = r123[1];

        $d58 = $r17[1];

        $r18 = r123[0];

        $d57 = $r18[1];

        $d59 = $d58 - $d57;

        $d64 = $d59 / d413;

        $r19 = r123[2];

        $d61 = $r19[1];

        $r20 = r123[1];

        $d60 = $r20[1];

        $d62 = $d61 - $d60;

        $d63 = $d62 / d414;

        $d65 = $d64 + $d63;

        d416 = 0.5 * $d65;

        $r21 = r123[1];

        $d67 = $r21[2];

        $r22 = r123[0];

        $d66 = $r22[2];

        $d68 = $d67 - $d66;

        $d73 = $d68 / d413;

        $r23 = r123[2];

        $d70 = $r23[2];

        $r24 = r123[1];

        $d69 = $r24[2];

        $d71 = $d70 - $d69;

        $d72 = $d71 / d414;

        $d74 = $d73 + $d72;

        d417 = 0.5 * $d74;

        $d75 = d415 + d416;

        $d76 = $d75 + d417;

        $d77 = $d76 / 3.0;

        r9[1] = $d77;

        $d79 = $r120[1];

        $d78 = $r120[0];

        d418 = $d79 - $d78;

        $d81 = $r120[2];

        $d80 = $r120[1];

        d419 = $d81 - $d80;

        $r25 = r123[0];

        $d83 = $r25[1];

        $r26 = r123[0];

        $d82 = $r26[0];

        $d84 = $d83 - $d82;

        $d89 = $d84 / d418;

        $r27 = r123[0];

        $d86 = $r27[2];

        $r28 = r123[0];

        $d85 = $r28[1];

        $d87 = $d86 - $d85;

        $d88 = $d87 / d419;

        $d90 = $d89 + $d88;

        d420 = 0.5 * $d90;

        $r29 = r123[1];

        $d92 = $r29[1];

        $r30 = r123[1];

        $d91 = $r30[0];

        $d93 = $d92 - $d91;

        $d98 = $d93 / d418;

        $r31 = r123[1];

        $d95 = $r31[2];

        $r32 = r123[1];

        $d94 = $r32[1];

        $d96 = $d95 - $d94;

        $d97 = $d96 / d419;

        $d99 = $d98 + $d97;

        d421 = 0.5 * $d99;

        $r33 = r123[2];

        $d101 = $r33[1];

        $r34 = r123[2];

        $d100 = $r34[0];

        $d102 = $d101 - $d100;

        $d107 = $d102 / d418;

        $r35 = r123[2];

        $d104 = $r35[2];

        $r36 = r123[2];

        $d103 = $r36[1];

        $d105 = $d104 - $d103;

        $d106 = $d105 / d419;

        $d108 = $d107 + $d106;

        d422 = 0.5 * $d108;

        $d109 = d420 + d421;

        $d110 = $d109 + d422;

        $d111 = $d110 / 3.0;

        r9[2] = $d111;

        $d112 = d416 - d415;

        $d115 = $d112 / d418;

        $d113 = d417 - d416;

        $d114 = $d113 / d419;

        $d118 = $d115 + $d114;

        $d116 = d421 - d420;

        $d117 = $d116 / d413;

        $d121 = $d118 + $d117;

        $d119 = d422 - d421;

        $d120 = $d119 / d414;

        $d122 = $d121 + $d120;

        $d123 = 0.25 * $d122;

        r9[6] = $d123;

     label13:
        i7 = i7 + -1;

        goto label11;

     label14:
        $r11 = r123[0];

        $d38 = $r11[0];

        r9[0] = $d38;

        $d40 = r9[3];

        $r12 = r123[0];

        $d39 = $r12[0];

        $d41 = $d40 - $d39;

        $d42 = 0.5 * $d41;

        $d43 = $d42 / d9;

        r9[3] = $d43;

        return r9;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D, com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D r1;
        com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i41, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i56, $i57, $i58, $i59, $i60, $i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, $i72, i74;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, d182, d183, d184, d185, d186, d187, $d188, $d189, $d190, $d191, $d192, $d193;
        double[] r3, r4, r5, r6, r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, r40, r41, $r43, $r44, $r45;
        byte $b38, $b40, $b42, $b48, $b54, $b55, $b73;
        double[][] r42;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "function");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "data");

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: int getNumberOfSteps()>();

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getStrike()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double getTimeToExpiry()>();

        d2 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: double getSpot()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: double getInterestRate(double)>(d1);

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: double getCostOfCarry()>();

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: double getVolatility(double,double)>(d1, d0);

        $d12 = (double) i0;

        d6 = d1 / $d12;

        $d13 = neg d3;

        $d14 = $d13 * d6;

        d7 = staticinvoke <java.lang.Math: double exp(double)>($d14);

        $d15 = 2.0 * d6;

        $d16 = staticinvoke <java.lang.Math: double sqrt(double)>($d15);

        d8 = d5 * $d16;

        d9 = staticinvoke <java.lang.Math: double exp(double)>(d8);

        d10 = 1.0 / d9;

        $i1 = 2 * i0;

        $i2 = $i1 + 1;

        r3 = newarray (double)[$i2];

        $i3 = 2 * i0;

        $i4 = $i3 + 1;

        r4 = newarray (double)[$i4];

        r5 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.tree.OptionFunctionProvider1D: double[] getPayoffAtExpiryTrinomial(double,double,double)>(d2, d10, d9);

        i62 = i0;

     label01:
        if i62 <= -1 goto label22;

        if i62 != 0 goto label02;

        $d167 = r3[2];

        d182 = $d167 / d7;

        $d171 = 1.0 / d7;

        $d170 = r4[0];

        $d169 = r4[1];

        $d168 = r4[2];

        d183 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel: double getMiddle(double,double,double,double,double,double)>(d182, $d171, d2, $d170, $d169, $d168);

        $d172 = 1.0 - d182;

        d184 = $d172 - d183;

        $d173 = r5[0];

        $d176 = d184 * $d173;

        $d174 = r5[1];

        $d175 = d183 * $d174;

        $d179 = $d176 + $d175;

        $d177 = r5[2];

        $d178 = d182 * $d177;

        $d180 = $d179 + $d178;

        $d181 = d7 * $d180;

        r5[0] = $d181;

        goto label21;

     label02:
        $i5 = 2 * i62;

        i63 = $i5 + 1;

        r6 = newarray (double)[i63];

        r40 = newarray (double)[i63];

        r7 = newarray (double)[i63];

        $d18 = (double) i62;

        d185 = d6 * $d18;

        i64 = i62 - 1;

        $d19 = (double) i62;

        $d20 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, $d19);

        d186 = d2 * $d20;

        i65 = i63 - 1;

     label03:
        if i65 <= -1 goto label04;

        r6[i65] = d186;

        $d162 = r6[i65];

        d187 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.StandardOptionDataBundle: double getVolatility(double,double)>(d185, $d162);

        $d163 = r6[i65];

        $d164 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackScholesFormulaRepository: double price(double,double,double,double,double,double,boolean)>(d2, $d163, d185, d187, d3, d4, 1);

        r40[i65] = $d164;

        $d165 = r6[i65];

        $d166 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackScholesFormulaRepository: double price(double,double,double,double,double,double,boolean)>(d2, $d165, d185, d187, d3, d4, 0);

        r7[i65] = $d166;

        d186 = d186 * d10;

        i65 = i65 + -1;

        goto label03;

     label04:
        r41 = newarray (double)[i63];

        i66 = i63 - 1;

     label05:
        if i66 <= i64 goto label08;

        $i59 = i66 - 1;

        $d149 = r40[$i59];

        r41[i66] = $d149;

        i67 = i66 + 1;

     label06:
        if i67 >= i63 goto label07;

        $d160 = r41[i66];

        $d156 = r6[i67];

        $i61 = i66 - 1;

        $d155 = r6[$i61];

        $d158 = $d156 - $d155;

        $d157 = r41[i67];

        $d159 = $d158 * $d157;

        $d161 = $d160 - $d159;

        r41[i66] = $d161;

        i67 = i67 + 1;

        goto label06;

     label07:
        $d153 = r41[i66];

        $d151 = r6[i66];

        $i60 = i66 - 1;

        $d150 = r6[$i60];

        $d152 = $d151 - $d150;

        $d154 = $d153 / $d152;

        r41[i66] = $d154;

        i66 = i66 + -1;

        goto label05;

     label08:
        i68 = i64 + 1;

        i69 = 0;

     label09:
        if i69 >= i68 goto label12;

        $i56 = i69 + 1;

        $d136 = r7[$i56];

        r41[i69] = $d136;

        i70 = 0;

     label10:
        if i70 >= i69 goto label11;

        $d147 = r41[i69];

        $i58 = i69 + 1;

        $d143 = r6[$i58];

        $d142 = r6[i70];

        $d145 = $d143 - $d142;

        $d144 = r41[i70];

        $d146 = $d145 * $d144;

        $d148 = $d147 - $d146;

        r41[i69] = $d148;

        i70 = i70 + 1;

        goto label10;

     label11:
        $d140 = r41[i69];

        $i57 = i69 + 1;

        $d138 = r6[$i57];

        $d137 = r6[i69];

        $d139 = $d138 - $d137;

        $d141 = $d140 / $d139;

        r41[i69] = $d141;

        i69 = i69 + 1;

        goto label09;

     label12:
        if i62 == i0 goto label20;

        r42 = newmultiarray (double)[i63][3];

        $i6 = i63 - 1;

        $r9 = r42[$i6];

        $i7 = i63 + 1;

        $d22 = r3[$i7];

        $i8 = i63 - 1;

        $d21 = r41[$i8];

        $d23 = $d22 / $d21;

        $d24 = $d23 / d7;

        $r9[2] = $d24;

        $i9 = i63 - 1;

        $r11 = r42[$i9];

        $i10 = i63 - 1;

        $r10 = r42[$i10];

        $d30 = $r10[2];

        $d29 = 1.0 / d7;

        $i11 = i63 - 1;

        $d28 = r6[$i11];

        $i12 = i63 - 1;

        $d27 = r4[$i12];

        $d26 = r4[i63];

        $i13 = i63 + 1;

        $d25 = r4[$i13];

        $d31 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel: double getMiddle(double,double,double,double,double,double)>($d30, $d29, $d28, $d27, $d26, $d25);

        $r11[1] = $d31;

        $i14 = i63 - 1;

        $r14 = r42[$i14];

        $i15 = i63 - 1;

        $r12 = r42[$i15];

        $d32 = $r12[2];

        $d34 = 1.0 - $d32;

        $i16 = i63 - 1;

        $r13 = r42[$i16];

        $d33 = $r13[1];

        $d35 = $d34 - $d33;

        $r14[0] = $d35;

        $i17 = i63 - 2;

        $r16 = r42[$i17];

        $d36 = r3[i63];

        $d40 = $d36 / d7;

        $i18 = i63 - 1;

        $r15 = r42[$i18];

        $d38 = $r15[1];

        $i19 = i63 - 1;

        $d37 = r41[$i19];

        $d39 = $d38 * $d37;

        $d42 = $d40 - $d39;

        $i20 = i63 - 2;

        $d41 = r41[$i20];

        $d43 = $d42 / $d41;

        $r16[2] = $d43;

        $i21 = i63 - 2;

        $r18 = r42[$i21];

        $i22 = i63 - 2;

        $r17 = r42[$i22];

        $d49 = $r17[2];

        $d48 = 1.0 / d7;

        $i23 = i63 - 2;

        $d47 = r6[$i23];

        $i24 = i63 - 2;

        $d46 = r4[$i24];

        $i25 = i63 - 1;

        $d45 = r4[$i25];

        $d44 = r4[i63];

        $d50 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel: double getMiddle(double,double,double,double,double,double)>($d49, $d48, $d47, $d46, $d45, $d44);

        $r18[1] = $d50;

        $i26 = i63 - 2;

        $r21 = r42[$i26];

        $i27 = i63 - 2;

        $r19 = r42[$i27];

        $d51 = $r19[2];

        $d53 = 1.0 - $d51;

        $i28 = i63 - 2;

        $r20 = r42[$i28];

        $d52 = $r20[1];

        $d54 = $d53 - $d52;

        $r21[0] = $d54;

        i71 = i63 - 3;

     label13:
        if i71 <= -1 goto label18;

        $r27 = r42[i71];

        $i31 = i71 + 2;

        $d67 = r3[$i31];

        $d71 = $d67 / d7;

        $i32 = i71 + 2;

        $r25 = r42[$i32];

        $d69 = $r25[0];

        $i33 = i71 + 2;

        $d68 = r41[$i33];

        $d70 = $d69 * $d68;

        $d75 = $d71 - $d70;

        $i34 = i71 + 1;

        $r26 = r42[$i34];

        $d73 = $r26[1];

        $i35 = i71 + 1;

        $d72 = r41[$i35];

        $d74 = $d73 * $d72;

        $d77 = $d75 - $d74;

        $d76 = r41[i71];

        $d78 = $d77 / $d76;

        $r27[2] = $d78;

        $r29 = r42[i71];

        $r28 = r42[i71];

        $d84 = $r28[2];

        $d83 = 1.0 / d7;

        $d82 = r6[i71];

        $d81 = r4[i71];

        $i36 = i71 + 1;

        $d80 = r4[$i36];

        $i37 = i71 + 2;

        $d79 = r4[$i37];

        $d85 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel: double getMiddle(double,double,double,double,double,double)>($d84, $d83, $d82, $d81, $d80, $d79);

        $r29[1] = $d85;

        $r32 = r42[i71];

        $r30 = r42[i71];

        $d86 = $r30[1];

        $d88 = 1.0 - $d86;

        $r31 = r42[i71];

        $d87 = $r31[2];

        $d89 = $d88 - $d87;

        $r32[0] = $d89;

        $r33 = r42[i71];

        $d90 = $r33[2];

        $b38 = $d90 cmpg 0.0;

        if $b38 <= 0 goto label14;

        $r38 = r42[i71];

        $d134 = $r38[1];

        $b54 = $d134 cmpg 0.0;

        if $b54 <= 0 goto label14;

        $r39 = r42[i71];

        $d135 = $r39[0];

        $b55 = $d135 cmpg 0.0;

        if $b55 > 0 goto label17;

     label14:
        $d188 = r6[i71];

        d11 = $d188 / d7;

        $i72 = i71 + 1;

        $d189 = r4[$i72];

        $b73 = d11 cmpg $d189;

        if $b73 >= 0 goto label15;

        $d112 = r4[i71];

        $b48 = d11 cmpl $d112;

        if $b48 <= 0 goto label15;

        $r36 = r42[i71];

        $d113 = r4[i71];

        $d114 = d11 - $d113;

        $d118 = 0.5 * $d114;

        $i49 = i71 + 2;

        $d116 = r4[$i49];

        $d115 = r4[i71];

        $d117 = $d116 - $d115;

        $d119 = $d118 / $d117;

        $r36[2] = $d119;

        $r37 = r42[i71];

        $i50 = i71 + 2;

        $d120 = r4[$i50];

        $d124 = $d120 - d11;

        $i51 = i71 + 2;

        $d122 = r4[$i51];

        $d121 = r4[i71];

        $d123 = $d122 - $d121;

        $d131 = $d124 / $d123;

        $i52 = i71 + 1;

        $d125 = r4[$i52];

        $d129 = $d125 - d11;

        $i53 = i71 + 1;

        $d127 = r4[$i53];

        $d126 = r4[i71];

        $d128 = $d127 - $d126;

        $d130 = $d129 / $d128;

        $d132 = $d131 + $d130;

        $d133 = 0.5 * $d132;

        $r37[0] = $d133;

        goto label16;

     label15:
        $i39 = i71 + 2;

        $d91 = r4[$i39];

        $b40 = d11 cmpg $d91;

        if $b40 >= 0 goto label16;

        $i41 = i71 + 1;

        $d92 = r4[$i41];

        $b42 = d11 cmpl $d92;

        if $b42 <= 0 goto label16;

        $r34 = r42[i71];

        $i43 = i71 + 1;

        $d93 = r4[$i43];

        $d97 = d11 - $d93;

        $i44 = i71 + 2;

        $d95 = r4[$i44];

        $d94 = r4[i71];

        $d96 = $d95 - $d94;

        $d104 = $d97 / $d96;

        $d98 = r4[i71];

        $d102 = d11 - $d98;

        $i45 = i71 + 2;

        $d100 = r4[$i45];

        $d99 = r4[i71];

        $d101 = $d100 - $d99;

        $d103 = $d102 / $d101;

        $d105 = $d104 + $d103;

        $d106 = 0.5 * $d105;

        $r34[2] = $d106;

        $r35 = r42[i71];

        $i46 = i71 + 2;

        $d107 = r4[$i46];

        $d108 = $d107 - d11;

        $d110 = 0.5 * $d108;

        $i47 = i71 + 2;

        $d109 = r4[$i47];

        $d111 = $d110 / $d109;

        $r35[0] = $d111;

     label16:
        $r43 = r42[i71];

        $r44 = r42[i71];

        $d190 = $r44[0];

        $d191 = 1.0 - $d190;

        $r45 = r42[i71];

        $d192 = $r45[2];

        $d193 = $d191 - $d192;

        $r43[1] = $d193;

     label17:
        i71 = i71 + -1;

        goto label13;

     label18:
        i74 = 0;

     label19:
        if i74 >= i63 goto label20;

        $r22 = r42[i74];

        $d56 = $r22[0];

        $d55 = r5[i74];

        $d60 = $d56 * $d55;

        $r23 = r42[i74];

        $d58 = $r23[1];

        $i29 = i74 + 1;

        $d57 = r5[$i29];

        $d59 = $d58 * $d57;

        $d64 = $d60 + $d59;

        $r24 = r42[i74];

        $d62 = $r24[2];

        $i30 = i74 + 2;

        $d61 = r5[$i30];

        $d63 = $d62 * $d61;

        $d65 = $d64 + $d63;

        $d66 = d7 * $d65;

        r5[i74] = $d66;

        i74 = i74 + 1;

        goto label19;

     label20:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r41, 0, r3, 0, i63);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r4, 0, i63);

     label21:
        i62 = i62 + -1;

        goto label01;

     label22:
        $d17 = r5[0];

        return $d17;
    }

    private double getMiddle(double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.TrinomialTreeOptionPricingModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d6 = d1 * d2;

        $d9 = $d6 - d3;

        $d7 = d5 - d3;

        $d8 = d0 * $d7;

        $d11 = $d9 - $d8;

        $d10 = d4 - d3;

        $d12 = $d11 / $d10;

        return $d12;
    }
}
