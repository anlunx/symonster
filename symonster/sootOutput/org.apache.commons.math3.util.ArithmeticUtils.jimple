public final class org.apache.commons.math3.util.ArithmeticUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.util.ArithmeticUtils r0;

        r0 := @this: org.apache.commons.math3.util.ArithmeticUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int addAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 + $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long addAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, $l2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $l2 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)>(l0, l1, $r0);

        return $l2;
    }

    public static long binomialCoefficient(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1;
        long $l2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>(i0, i1);

        return $l2;
    }

    public static double binomialCoefficientDouble(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1;
        double $d0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientDouble(int,int)>(i0, i1);

        return $d0;
    }

    public static double binomialCoefficientLog(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1;
        double $d0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double binomialCoefficientLog(int,int)>(i0, i1);

        return $d0;
    }

    public static long factorial(int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i0);

        return $l1;
    }

    public static double factorialDouble(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int i0;
        double $d0;

        i0 := @parameter0: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialDouble(int)>(i0);

        return $d0;
    }

    public static double factorialLog(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int i0;
        double $d0;

        i0 := @parameter0: int;

        $d0 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: double factorialLog(int)>(i0);

        return $d0;
    }

    public static int gcd(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2, $i3, $i4, $i9, i10, i11;
        org.apache.commons.math3.exception.MathArithmeticException $r0, $r5, $r10;
        java.lang.Object[] $r1, $r6, $r11;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r7, $r12;
        java.lang.Integer $r3, $r4, $r8, $r9, $r13, $r14;
        byte $b5, $b6, $b8;
        long $l7, l12, l13, l16;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i10 = i0;

        i11 = i1;

        if i0 == 0 goto label01;

        if i1 != 0 goto label04;

     label01:
        if i0 == -2147483648 goto label02;

        if i1 != -2147483648 goto label03;

     label02:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label03:
        $i2 = i0 + i1;

        $i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i2);

        return $i3;

     label04:
        l12 = (long) i0;

        l13 = (long) i1;

        z0 = 0;

        if i0 >= 0 goto label07;

        if -2147483648 != i0 goto label05;

        z0 = 1;

        goto label06;

     label05:
        i10 = neg i0;

     label06:
        l12 = neg l12;

     label07:
        if i1 >= 0 goto label10;

        if -2147483648 != i1 goto label08;

        z0 = 1;

        goto label09;

     label08:
        i11 = neg i1;

     label09:
        l13 = neg l13;

     label10:
        if z0 == 0 goto label14;

        $b5 = l12 cmp l13;

        if $b5 != 0 goto label11;

        $r10 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r11 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11[0] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11[1] = $r14;

        specialinvoke $r10.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r10;

     label11:
        l16 = l13 % l12;

        $b6 = l16 cmp 0L;

        if $b6 != 0 goto label13;

        $b8 = l12 cmp 2147483647L;

        if $b8 <= 0 goto label12;

        $r5 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_32_BITS>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label12:
        $i9 = (int) l12;

        return $i9;

     label13:
        i11 = (int) l16;

        $l7 = l12 % l16;

        i10 = (int) $l7;

     label14:
        $i4 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcdPositive(int,int)>(i10, i11);

        return $i4;
    }

    private static int gcdPositive(int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, i6, i7, i8, i9, i10;

        i6 := @parameter0: int;

        i7 := @parameter1: int;

        if i6 != 0 goto label1;

        return i7;

     label1:
        if i7 != 0 goto label2;

        return i6;

     label2:
        i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i6);

        i8 = i6 >> i0;

        i1 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i7);

        i9 = i7 >> i1;

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i0, i1);

     label3:
        if i8 == i9 goto label4;

        i3 = i8 - i9;

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i8, i9);

        i10 = staticinvoke <java.lang.Math: int abs(int)>(i3);

        $i5 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i10);

        i8 = i10 >> $i5;

        goto label3;

     label4:
        $i4 = i8 << i2;

        return $i4;
    }

    public static long gcd(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, $l5, $l6, $l7, $l11, $l13, $l15, $l17, $l18, $l19, $l20, l22, l23, $l25, $l27, l28, $l29;
        byte $b2, $b3, $b4, $b8, $b9, $b10, $b12, $b14, $b16, $b21, $b26, $b30;
        org.apache.commons.math3.exception.MathArithmeticException $r0, $r5;
        java.lang.Object[] $r1, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r7;
        java.lang.Long $r3, $r4, $r8, $r9;
        int i24;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l22 = l0;

        l23 = l1;

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label01;

        $b8 = l1 cmp 0L;

        if $b8 != 0 goto label04;

     label01:
        $b3 = l0 cmp -9223372036854775808L;

        if $b3 == 0 goto label02;

        $b4 = l1 cmp -9223372036854775808L;

        if $b4 != 0 goto label03;

     label02:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label03:
        $l5 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>(l0);

        $l6 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>(l1);

        $l7 = $l5 + $l6;

        return $l7;

     label04:
        $b9 = l0 cmp 0L;

        if $b9 <= 0 goto label05;

        l22 = neg l0;

     label05:
        $b10 = l1 cmp 0L;

        if $b10 <= 0 goto label06;

        l23 = neg l1;

     label06:
        i24 = 0;

     label07:
        $l25 = l22 & 1L;

        $b26 = $l25 cmp 0L;

        if $b26 != 0 goto label08;

        $l20 = l23 & 1L;

        $b21 = $l20 cmp 0L;

        if $b21 != 0 goto label08;

        if i24 >= 63 goto label08;

        l22 = l22 / 2L;

        l23 = l23 / 2L;

        i24 = i24 + 1;

        goto label07;

     label08:
        if i24 != 63 goto label09;

        $r5 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats GCD_OVERFLOW_64_BITS>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r6[1] = $r9;

        specialinvoke $r5.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label09:
        $l11 = l22 & 1L;

        $b12 = $l11 cmp 1L;

        if $b12 != 0 goto label10;

        $l27 = l23;

        goto label11;

     label10:
        $l13 = l22 / 2L;

        $l27 = neg $l13;

     label11:
        l28 = $l27;

     label12:
        $l29 = l28 & 1L;

        $b30 = $l29 cmp 0L;

        if $b30 != 0 goto label13;

        l28 = l28 / 2L;

        goto label12;

     label13:
        $b14 = l28 cmp 0L;

        if $b14 <= 0 goto label14;

        l22 = neg l28;

        goto label15;

     label14:
        l23 = l28;

     label15:
        $l15 = l23 - l22;

        l28 = $l15 / 2L;

        $b16 = l28 cmp 0L;

        if $b16 != 0 goto label12;

        $l18 = neg l22;

        $l17 = 1L << i24;

        $l19 = $l18 * $l17;

        return $l19;
    }

    public static int lcm(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, i2, $i3, $i4, $i5;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label1;

        if i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int gcd(int,int)>(i0, i1);

        $i4 = i0 / $i3;

        $i5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>($i4, i1);

        i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i5);

        if i2 != -2147483648 goto label3;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_32_BITS>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label3:
        return i2;
    }

    public static long lcm(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, l2, $l5, $l6, $l7;
        byte $b3, $b4, $b8;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3, $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label1;

        $b4 = l1 cmp 0L;

        if $b4 != 0 goto label2;

     label1:
        return 0L;

     label2:
        $l5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long gcd(long,long)>(l0, l1);

        $l6 = l0 / $l5;

        $l7 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>($l6, l1);

        l2 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l7);

        $b8 = l2 cmp -9223372036854775808L;

        if $b8 != 0 goto label3;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LCM_OVERFLOW_64_BITS>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label3:
        return l2;
    }

    public static int mulAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 * $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long mulAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, $l5, $l9, $l11, l13;
        byte $b2, $b3, $b4, $b6, $b7, $b8, $b10, $b12;
        org.apache.commons.math3.exception.MathArithmeticException $r0, $r1, $r2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label1;

        l13 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l1, l0);

        goto label9;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label6;

        $b7 = l1 cmp 0L;

        if $b7 >= 0 goto label3;

        $l11 = 9223372036854775807L / l1;

        $b12 = l0 cmp $l11;

        if $b12 < 0 goto label2;

        l13 = l0 * l1;

        goto label9;

     label2:
        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r2;

     label3:
        $b8 = l1 cmp 0L;

        if $b8 <= 0 goto label5;

        $l9 = -9223372036854775808L / l1;

        $b10 = $l9 cmp l0;

        if $b10 > 0 goto label4;

        l13 = l0 * l1;

        goto label9;

     label4:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r1;

     label5:
        l13 = 0L;

        goto label9;

     label6:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label8;

        $l5 = 9223372036854775807L / l1;

        $b6 = l0 cmp $l5;

        if $b6 > 0 goto label7;

        l13 = l0 * l1;

        goto label9;

     label7:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label8:
        l13 = 0L;

     label9:
        return l13;
    }

    public static int subAndCheck(int, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i7;
        long l2, $l3, $l4;
        byte $b5, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 - $l3;

        $b5 = l2 cmp -2147483648L;

        if $b5 < 0 goto label1;

        $b6 = l2 cmp 2147483647L;

        if $b6 <= 0 goto label2;

     label1:
        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_SUBTRACTION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r0;

     label2:
        $i7 = (int) l2;

        return $i7;
    }

    public static long subAndCheck(long, long) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, $l3, $l5, l6;
        byte $b2, $b4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r0, $r3;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r4, $r5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l1 cmp -9223372036854775808L;

        if $b2 != 0 goto label2;

        $b4 = l0 cmp 0L;

        if $b4 >= 0 goto label1;

        l6 = l0 - l1;

        goto label3;

     label1:
        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r4;

        $l5 = neg l1;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r2[1] = $r5;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label2:
        $l3 = neg l1;

        $r0 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW_IN_ADDITION>;

        l6 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long addAndCheck(long,long,org.apache.commons.math3.exception.util.Localizable)>(l0, $l3, $r0);

     label3:
        return l6;
    }

    public static int pow(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1, $i2, i3, i4, i5;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1, $r6, $r9, $r13;
        java.lang.Integer $r2, $r10, $r14;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        org.apache.commons.math3.exception.util.ExceptionContext $r4, $r7, $r11;
        java.lang.Object[] $r5, $r8, $r12;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        i3 = i1;

        i4 = 1;

        i5 = i0;

     label2:
        $i2 = i3 & 1;

        if $i2 == 0 goto label3;

        i4 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>(i4, i5);

     label3:
        i3 = i3 >> 1;

        if i3 != 0 goto label4;

        goto label5;

     label4:
        i5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: int mulAndCheck(int,int)>(i5, i5);

        goto label2;

     label5:
        return i4;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        $r7 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BASE>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[0] = $r10;

        virtualinvoke $r7.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        $r11 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[0] = $r14;

        virtualinvoke $r11.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r3;

        catch org.apache.commons.math3.exception.MathArithmeticException from label1 to label5 with label6;
    }

    public static int pow(int, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        int i0, i6, i7;
        byte $b1, $b2, $b4;
        long $l3, l5;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Long $r2;

        i0 := @parameter0: int;

        l5 := @parameter1: long;

        $b1 = l5 cmp 0L;

        if $b1 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        i6 = 1;

        i7 = i0;

     label2:
        $b2 = l5 cmp 0L;

        if $b2 == 0 goto label4;

        $l3 = l5 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        i6 = i6 * i7;

     label3:
        i7 = i7 * i7;

        l5 = l5 >> 1;

        goto label2;

     label4:
        return i6;
    }

    public static long pow(long, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l4, l5;
        int i1, $i2, i3;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1, $r6, $r9, $r13;
        java.lang.Integer $r2, $r14;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        org.apache.commons.math3.exception.util.ExceptionContext $r4, $r7, $r11;
        java.lang.Object[] $r5, $r8, $r12;
        java.lang.Long $r10;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        i3 = i1;

        l4 = 1L;

        l5 = l0;

     label2:
        $i2 = i3 & 1;

        if $i2 == 0 goto label3;

        l4 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l4, l5);

     label3:
        i3 = i3 >> 1;

        if i3 != 0 goto label4;

        goto label5;

     label4:
        l5 = staticinvoke <org.apache.commons.math3.util.ArithmeticUtils: long mulAndCheck(long,long)>(l5, l5);

        goto label2;

     label5:
        return l4;

     label6:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OVERFLOW>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        $r7 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats BASE>;

        $r8 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8[0] = $r10;

        virtualinvoke $r7.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        $r11 = virtualinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12[0] = $r14;

        virtualinvoke $r11.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r3;

        catch org.apache.commons.math3.exception.MathArithmeticException from label1 to label5 with label6;
    }

    public static long pow(long, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        long l0, $l3, l5, l6, l7;
        byte $b1, $b2, $b4;
        org.apache.commons.math3.exception.NotPositiveException $r0;
        org.apache.commons.math3.exception.util.LocalizedFormats $r1;
        java.lang.Long $r2;

        l0 := @parameter0: long;

        l5 := @parameter1: long;

        $b1 = l5 cmp 0L;

        if $b1 >= 0 goto label1;

        $r0 = new org.apache.commons.math3.exception.NotPositiveException;

        $r1 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r1, $r2);

        throw $r0;

     label1:
        l6 = 1L;

        l7 = l0;

     label2:
        $b2 = l5 cmp 0L;

        if $b2 == 0 goto label4;

        $l3 = l5 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        l6 = l6 * l7;

     label3:
        l7 = l7 * l7;

        l5 = l5 >> 1;

        goto label2;

     label4:
        return l6;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger r0, $r1;
        int i0;
        org.apache.commons.math3.exception.NotPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        return $r1;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, long) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger r0, r4, r5;
        byte $b0, $b1, $b3;
        long $l2, l4;
        org.apache.commons.math3.exception.NotPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Long $r3;

        r0 := @parameter0: java.math.BigInteger;

        l4 := @parameter1: long;

        $b0 = l4 cmp 0L;

        if $b0 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        r4 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r5 = r0;

     label2:
        $b1 = l4 cmp 0L;

        if $b1 == 0 goto label4;

        $l2 = l4 & 1L;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        r4 = virtualinvoke r4.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

     label3:
        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5);

        l4 = l4 >> 1;

        goto label2;

     label4:
        return r4;
    }

    public static java.math.BigInteger pow(java.math.BigInteger, java.math.BigInteger) throws org.apache.commons.math3.exception.NotPositiveException
    {
        java.math.BigInteger r0, $r1, $r2, r5, r6, r7;
        int $i0;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.NotPositiveException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @parameter0: java.math.BigInteger;

        r5 := @parameter1: java.math.BigInteger;

        $r1 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke r5.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotPositiveException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EXPONENT>;

        specialinvoke $r3.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r4, r5);

        throw $r3;

     label1:
        r6 = <java.math.BigInteger: java.math.BigInteger ONE>;

        r7 = r0;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r5.<java.math.BigInteger: boolean testBit(int)>(0);

        if $z1 == 0 goto label3;

        r6 = virtualinvoke r6.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

     label3:
        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r7);

        r5 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(1);

        goto label2;

     label4:
        return r6;
    }

    public static long stirlingS2(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.MathArithmeticException
    {
        int i0, i1;
        long $l2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long stirlingS2(int,int)>(i0, i1);

        return $l2;
    }

    private static long addAndCheck(long, long, org.apache.commons.math3.exception.util.Localizable) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        long l0, l1, l2, $l3, $l5;
        org.apache.commons.math3.exception.util.Localizable r0;
        byte $b4, $b6;
        org.apache.commons.math3.exception.MathArithmeticException $r1;
        java.lang.Object[] $r2;
        java.lang.Long $r3, $r4;
        boolean $z0, $z1, $z2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: org.apache.commons.math3.exception.util.Localizable;

        l2 = l0 + l1;

        $l3 = l0 ^ l1;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $l5 = l0 ^ l2;

        $b6 = $l5 cmp 0L;

        if $b6 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $z2 = $z0 | $z1;

        if $z2 != 0 goto label5;

        $r1 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2[1] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>(r0, $r2);

        throw $r1;

     label5:
        return l2;
    }

    public static boolean isPowerOfTwo(long)
    {
        long l0, $l2, $l3;
        byte $b1, $b4;
        boolean $z0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l2 = l0 - 1L;

        $l3 = l0 & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
