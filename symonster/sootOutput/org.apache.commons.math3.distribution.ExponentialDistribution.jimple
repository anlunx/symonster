public class org.apache.commons.math3.distribution.ExponentialDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private static final double[] EXPONENTIAL_SA_QI;
    private final double mean;
    private final double logMean;
    private final double solverAbsoluteAccuracy;

    public void <init>(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(double,double)>(d0, 1.0E-9);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, d1;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r1, d0, d1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>(r1, d0, 1.0E-9);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, $d2;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats MEAN>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean> = d0;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logMean> = $d2;

        r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double solverAbsoluteAccuracy> = d1;

        return;
    }

    public double getMean()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, d1, $d2;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logDensity(double)>(d0);

        $b0 = d1 cmpl #-Infinity;

        if $b0 != 0 goto label1;

        $d2 = 0.0;

        goto label2;

     label1:
        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d1);

     label2:
        return $d2;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 >= 0 goto label1;

        return #-Infinity;

     label1:
        $d2 = neg d0;

        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d4 = $d2 / $d1;

        $d3 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double logMean>;

        $d5 = $d4 - $d3;

        return $d5;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        d5 = 0.0;

        goto label2;

     label1:
        $d2 = neg d0;

        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d3);

        d5 = 1.0 - $d4;

     label2:
        return d5;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, $d1, $d2, $d3, $d4, d5;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b2 = d0 cmpl 1.0;

        if $b2 != 0 goto label3;

        d5 = #Infinity;

        goto label4;

     label3:
        $d1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d3 = neg $d1;

        $d2 = 1.0 - d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        d5 = $d3 * $d4;

     label4:
        return d5;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1, $r3, $r4;
        byte $b0, $b1, $b2, $b3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13, d14, d15, d16, d17;
        double[] $r2, $r5, $r6, $r7;
        int i4;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d12 = 0.0;

        $r1 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d13 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label1:
        $b0 = d13 cmpg 0.5;

        if $b0 >= 0 goto label2;

        $r7 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d11 = $r7[0];

        d12 = d12 + $d11;

        d13 = d13 * 2.0;

        goto label1;

     label2:
        $d0 = d13 - 1.0;

        d14 = d13 + $d0;

        $r2 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d1 = $r2[0];

        $b1 = d14 cmpg $d1;

        if $b1 > 0 goto label3;

        $d9 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $d8 = d12 + d14;

        $d10 = $d9 * $d8;

        return $d10;

     label3:
        i4 = 0;

        $r3 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d15 = interfaceinvoke $r3.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d16 = d15;

     label4:
        i4 = i4 + 1;

        $r4 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        d17 = interfaceinvoke $r4.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $b2 = d17 cmpg d16;

        if $b2 >= 0 goto label5;

        d16 = d17;

     label5:
        $r5 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d2 = $r5[i4];

        $b3 = d14 cmpl $d2;

        if $b3 > 0 goto label4;

        $d6 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double mean>;

        $r6 = <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI>;

        $d3 = $r6[0];

        $d4 = d16 * $d3;

        $d5 = d12 + $d4;

        $d7 = $d6 * $d5;

        return $d7;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double getMean()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.ExponentialDistribution: double getMean()>();

        $d1 = d0 * d0;

        return $d1;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return #Infinity;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 0;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.ExponentialDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.ExponentialDistribution;

        return 1;
    }

    static void <clinit>()
    {
        double d0, $d1, $d2, $d3, d4;
        org.apache.commons.math3.util.ResizableDoubleArray $r1;
        byte $b0;
        double[] $r2;
        long $l1;
        int i2;

        <org.apache.commons.math3.distribution.ExponentialDistribution: long serialVersionUID> = 2401296428283614780L;

        <org.apache.commons.math3.distribution.ExponentialDistribution: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(2.0);

        d4 = 0.0;

        i2 = 1;

        $r1 = new org.apache.commons.math3.util.ResizableDoubleArray;

        specialinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void <init>(int)>(20);

     label1:
        $b0 = d4 cmpg 1.0;

        if $b0 >= 0 goto label2;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(d0, i2);

        $l1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long factorial(int)>(i2);

        $d2 = (double) $l1;

        $d3 = $d1 / $d2;

        d4 = d4 + $d3;

        virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: void addElement(double)>(d4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r1.<org.apache.commons.math3.util.ResizableDoubleArray: double[] getElements()>();

        <org.apache.commons.math3.distribution.ExponentialDistribution: double[] EXPONENTIAL_SA_QI> = $r2;

        return;
    }
}
