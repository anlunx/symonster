public class org.apache.commons.math3.transform.TransformUtils extends java.lang.Object
{
    private static final int[] POWERS_OF_TWO;

    private void <init>()
    {
        org.apache.commons.math3.transform.TransformUtils r0;

        r0 := @this: org.apache.commons.math3.transform.TransformUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double[] scaleArray(double[], double)
    {
        double[] r0;
        double d0, $d1, $d2;
        int $i0, i1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $d1 = r0[i1];

        $d2 = $d1 * d0;

        r0[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static org.apache.commons.math3.complex.Complex[] scaleArray(org.apache.commons.math3.complex.Complex[], double)
    {
        org.apache.commons.math3.complex.Complex[] r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0, i1;
        org.apache.commons.math3.complex.Complex $r1, $r2, $r3;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex[];

        d0 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r1 = new org.apache.commons.math3.complex.Complex;

        $r2 = r0[i1];

        $d1 = virtualinvoke $r2.<org.apache.commons.math3.complex.Complex: double getReal()>();

        $d2 = d0 * $d1;

        $r3 = r0[i1];

        $d3 = virtualinvoke $r3.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        $d4 = d0 * $d3;

        specialinvoke $r1.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d2, $d4);

        r0[i1] = $r1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static double[][] createRealImaginaryArray(org.apache.commons.math3.complex.Complex[])
    {
        org.apache.commons.math3.complex.Complex[] r0;
        double[][] r1;
        double[] r2, r3;
        org.apache.commons.math3.complex.Complex r4;
        int $i0, $i1, i2;
        double $d0, $d1;

        r0 := @parameter0: org.apache.commons.math3.complex.Complex[];

        $i0 = lengthof r0;

        r1 = newmultiarray (double)[2][$i0];

        r2 = r1[0];

        r3 = r1[1];

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        r4 = r0[i2];

        $d0 = virtualinvoke r4.<org.apache.commons.math3.complex.Complex: double getReal()>();

        r2[i2] = $d0;

        $d1 = virtualinvoke r4.<org.apache.commons.math3.complex.Complex: double getImaginary()>();

        r3[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static org.apache.commons.math3.complex.Complex[] createComplexArray(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[][] r0;
        double[] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.math3.complex.Complex[] r3;
        org.apache.commons.math3.complex.Complex $r4;
        double $d0, $d1;
        org.apache.commons.math3.exception.DimensionMismatchException $r5, $r6;

        r0 := @parameter0: double[][];

        $i1 = lengthof r0;

        if $i1 == 2 goto label1;

        $r6 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r0;

        specialinvoke $r6.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, 2);

        throw $r6;

     label1:
        r1 = r0[0];

        r2 = r0[1];

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label2;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i5 = lengthof r2;

        $i4 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i5, $i4);

        throw $r5;

     label2:
        i0 = lengthof r1;

        r3 = newarray (org.apache.commons.math3.complex.Complex)[i0];

        i7 = 0;

     label3:
        if i7 >= i0 goto label4;

        $r4 = new org.apache.commons.math3.complex.Complex;

        $d1 = r1[i7];

        $d0 = r2[i7];

        specialinvoke $r4.<org.apache.commons.math3.complex.Complex: void <init>(double,double)>($d1, $d0);

        r3[i7] = $r4;

        i7 = i7 + 1;

        goto label3;

     label4:
        return r3;
    }

    public static int exactLog2(int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        int i0, i1;
        int[] $r0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        i0 := @parameter0: int;

        $r0 = <org.apache.commons.math3.transform.TransformUtils: int[] POWERS_OF_TWO>;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r0, i0);

        if i1 >= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POWER_OF_TWO_CONSIDER_PADDING>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label1:
        return i1;
    }

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[31];

        $r0[0] = 1;

        $r0[1] = 2;

        $r0[2] = 4;

        $r0[3] = 8;

        $r0[4] = 16;

        $r0[5] = 32;

        $r0[6] = 64;

        $r0[7] = 128;

        $r0[8] = 256;

        $r0[9] = 512;

        $r0[10] = 1024;

        $r0[11] = 2048;

        $r0[12] = 4096;

        $r0[13] = 8192;

        $r0[14] = 16384;

        $r0[15] = 32768;

        $r0[16] = 65536;

        $r0[17] = 131072;

        $r0[18] = 262144;

        $r0[19] = 524288;

        $r0[20] = 1048576;

        $r0[21] = 2097152;

        $r0[22] = 4194304;

        $r0[23] = 8388608;

        $r0[24] = 16777216;

        $r0[25] = 33554432;

        $r0[26] = 67108864;

        $r0[27] = 134217728;

        $r0[28] = 268435456;

        $r0[29] = 536870912;

        $r0[30] = 1073741824;

        <org.apache.commons.math3.transform.TransformUtils: int[] POWERS_OF_TWO> = $r0;

        return;
    }
}
