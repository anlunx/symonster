public final class com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction extends com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider
{
    private static final com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction INSTANCE;

    public static com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction getInstance()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r0;

        $r0 = <com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$1 $r3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$1;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$1: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r0, r1, d0);

        return $r3;
    }

    public double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, $d4;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r2;
        boolean z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "option");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "data");

        d1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getPrice(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>(r1, d0, r2);

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        z0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: boolean isCall()>();

        $d4 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double impliedVolatility(double,double,double,double,boolean)>(d1, d0, d3, d2, z0);

        return $d4;
    }

    public double getPrice(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r2;
        double[] r3, r4, r5;
        int i0, i1;
        boolean z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getWeights()>();

        r4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        i0 = lengthof r3;

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        z0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: boolean isCall()>();

        d3 = d2 / d0;

        d10 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d7 = r3[i1];

        $d6 = r5[i1];

        $d5 = r4[i1];

        $d8 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d6, d3, d1, $d5, z0);

        $d9 = $d7 * $d8;

        d10 = d10 + $d9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d4 = d0 * d10;

        return $d4;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$2 $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "option");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$2;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction,double,double,double)>(r0, d0, d1, d2);

        return $r3;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, d1, d2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$3 $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "option");

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getTimeToExpiry()>();

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$3;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction,double,double,double)>(r0, d0, d1, d2);

        return $r3;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.math.function.Function1D getModelAdjointFunctionByCallingSingleStrikes(double,double[],double)>(d0, r1, d1);

        return $r2;
    }

    private double[] getVolatilityAdjoint(double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, d25, d26;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r1;
        int i0, i1, $i3, i4, i5, i6;
        boolean z0, $z1;
        double[] r2, r3, r4, r5, r6, r7, r9;
        byte $b2;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int getNumberOfParameters()>();

        $b2 = d1 cmpl d0;

        if $b2 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        r2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getWeights()>();

        i1 = lengthof r2;

        r5 = newarray (double)[i1];

        r6 = newarray (double)[i1];

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $d19 = r3[i4];

        d3 = d0 * $d19;

        $d20 = r2[i4];

        $d21 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>(d3, d1, d2, $d20, z0);

        r5[i4] = $d21;

        $d22 = r2[i4];

        $d23 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d3, d1, d2, $d22, z0);

        r6[i4] = $d23;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r8 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        specialinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>(d1, d2, z0);

        d24 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r8, d0, r1);

        d4 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d0, d1, d2, d24);

        d5 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>(d0, d1, d2, d24, z0);

        d6 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d0, d1, d2, d24, z0);

        $i3 = i0 + 3;

        r7 = newarray (double)[$i3];

        r7[0] = d24;

        d25 = 0.0;

        i5 = 0;

     label5:
        if i5 >= i1 goto label6;

        $d15 = r4[i5];

        $d14 = r3[i5];

        $d17 = $d15 * $d14;

        $d16 = r5[i5];

        $d18 = $d17 * $d16;

        d25 = d25 + $d18;

        i5 = i5 + 1;

        goto label5;

     label6:
        $d7 = d25 - d5;

        $d8 = $d7 / d4;

        r7[1] = $d8;

        d26 = 0.0;

        i6 = 0;

     label7:
        if i6 >= i1 goto label8;

        $d12 = r4[i6];

        $d11 = r6[i6];

        $d13 = $d12 * $d11;

        d26 = d26 + $d13;

        i6 = i6 + 1;

        goto label7;

     label8:
        $d9 = d26 - d6;

        $d10 = $d9 / d4;

        r7[2] = $d10;

        r9 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double[] getModelAjoint(double,double,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData,double[],double)>(d0, d1, d2, r1, r5, d4);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r7, 3, i0);

        return r7;
    }

    public double[] getModelAjoint(double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, d8;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r1;
        boolean z0, $z1;
        double[] r2, r3, r4, $r6;
        int i0, i2;
        byte $b1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $b1 = d1 cmpl d0;

        if $b1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        r2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        i0 = lengthof r2;

        r4 = newarray (double)[i0];

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $d4 = r3[i2];

        $d6 = d0 * $d4;

        $d5 = r2[i2];

        $d7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>($d6, d1, d2, $d5, z0);

        r4[i2] = $d7;

        i2 = i2 + 1;

        goto label3;

     label4:
        $r5 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        specialinvoke $r5.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>(d1, d2, z0);

        d8 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r5, d0, r1);

        d3 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d0, d1, d2, d8);

        $r6 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double[] getModelAjoint(double,double,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData,double[],double)>(d0, d1, d2, r1, r4, d3);

        return $r6;
    }

    private double[] getModelAjoint(double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, d35, d36, d37, d38, d39, d40;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r1;
        double[] r2, r3, r4, r5, r6, r7, $r8, $r9, $r10, r11;
        boolean z0, $z1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        byte $b2;
        double[][] r12, r13;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        r2 := @parameter4: double[];

        d3 := @parameter5: double;

        $b2 = d1 cmpl d0;

        if $b2 < 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        i0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: int getNumberOfParameters()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getVolatilities()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getRelativeForwards()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[] getWeights()>();

        i1 = lengthof r3;

        r6 = newarray (double)[i1];

        r7 = newarray (double)[i1];

        i12 = 0;

     label03:
        if i12 >= i1 goto label04;

        $d30 = r4[i12];

        d35 = d0 * $d30;

        $d31 = r3[i12];

        $d32 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>(d35, d1, d2, $d31, z0);

        r6[i12] = $d32;

        $d33 = r3[i12];

        $d34 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d35, d1, d2, $d33);

        r7[i12] = $d34;

        i12 = i12 + 1;

        goto label03;

     label04:
        r11 = newarray (double)[i0];

        d36 = 0.0;

        i13 = 0;

     label05:
        if i13 >= i1 goto label06;

        $d28 = r5[i13];

        $d27 = r7[i13];

        $d29 = $d28 * $d27;

        d36 = d36 + $d29;

        i13 = i13 + 1;

        goto label05;

     label06:
        $d4 = d36 / d3;

        r11[0] = $d4;

        i14 = 1;

     label07:
        if i14 >= i1 goto label10;

        d37 = 0.0;

        i15 = i14;

     label08:
        if i15 >= i1 goto label09;

        $d25 = r5[i15];

        $d24 = r7[i15];

        $d26 = $d25 * $d24;

        d37 = d37 + $d26;

        i15 = i15 + 1;

        goto label08;

     label09:
        $d23 = d37 / d3;

        r11[i14] = $d23;

        i14 = i14 + 1;

        goto label07;

     label10:
        r12 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getWeightsJacobian()>();

        i16 = 0;

     label11:
        $i3 = i1 - 1;

        if i16 >= $i3 goto label14;

        d38 = 0.0;

        i17 = 0;

     label12:
        if i17 >= i1 goto label13;

        $d21 = r6[i17];

        $r10 = r12[i17];

        $d20 = $r10[i16];

        $d22 = $d21 * $d20;

        d38 = d38 + $d22;

        i17 = i17 + 1;

        goto label12;

     label13:
        $i11 = i1 + i16;

        $d19 = d38 / d3;

        r11[$i11] = $d19;

        i16 = i16 + 1;

        goto label11;

     label14:
        $i4 = 2 * i1;

        $i5 = $i4 - 1;

        if i0 <= $i5 goto label20;

        r13 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData: double[][] getRelativeForwardsJacobian()>();

        i18 = 0;

     label15:
        $i6 = i1 - 1;

        if i18 >= $i6 goto label20;

        d39 = 0.0;

        i19 = 0;

     label16:
        if i19 >= i1 goto label17;

        $d15 = r4[i19];

        $d14 = r2[i19];

        $d17 = $d15 * $d14;

        $r9 = r12[i19];

        $d16 = $r9[i18];

        $d18 = $d17 * $d16;

        d39 = d39 - $d18;

        i19 = i19 + 1;

        goto label16;

     label17:
        $i7 = i1 + i18;

        $d7 = r11[$i7];

        $d5 = d39 * d0;

        $d6 = $d5 / d3;

        $d8 = $d7 + $d6;

        r11[$i7] = $d8;

        d40 = 0.0;

        i20 = 0;

     label18:
        if i20 >= i1 goto label19;

        $d12 = r2[i20];

        $r8 = r13[i20];

        $d11 = $r8[i18];

        $d13 = $d12 * $d11;

        d40 = d40 + $d13;

        i20 = i20 + 1;

        goto label18;

     label19:
        $i8 = 2 * i1;

        $i9 = $i8 - 1;

        $i10 = $i9 + i18;

        $d9 = d40 * d0;

        $d10 = $d9 / d3;

        r11[$i10] = $d10;

        i18 = i18 + 1;

        goto label15;

     label20:
        return r11;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: java.lang.String toString()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 == $r3 goto label3;

        return 0;

     label3:
        return 1;
    }

    public java.lang.String toString()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        return "Mixed log normal";
    }

    static double[] access$000(com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction, double, double, double, com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction r0;
        double d0, d1, d2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r1;
        double[] $r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r1 := @parameter4: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData;

        $r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double[] getVolatilityAdjoint(double,double,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>(d0, d1, d2, r1);

        return $r2;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r0;

        $r0 = new com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction;

        specialinvoke $r0.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction INSTANCE> = $r0;

        return;
    }
}
