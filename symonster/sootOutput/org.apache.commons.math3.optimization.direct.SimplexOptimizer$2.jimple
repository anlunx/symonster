class org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 extends java.lang.Object implements java.util.Comparator
{
    final boolean val$isMinim;
    final org.apache.commons.math3.optimization.direct.SimplexOptimizer this$0;

    void <init>(org.apache.commons.math3.optimization.direct.SimplexOptimizer, boolean)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 r0;
        org.apache.commons.math3.optimization.direct.SimplexOptimizer r1;
        boolean z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer$2;

        r1 := @parameter0: org.apache.commons.math3.optimization.direct.SimplexOptimizer;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: org.apache.commons.math3.optimization.direct.SimplexOptimizer this$0> = r1;

        r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: boolean val$isMinim> = z0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.apache.commons.math3.optimization.PointValuePair, org.apache.commons.math3.optimization.PointValuePair)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 r0;
        org.apache.commons.math3.optimization.PointValuePair r1, r2;
        double d0, d1;
        java.lang.Object $r3, $r5;
        java.lang.Double $r4, $r6;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer$2;

        r1 := @parameter0: org.apache.commons.math3.optimization.PointValuePair;

        r2 := @parameter1: org.apache.commons.math3.optimization.PointValuePair;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.optimization.PointValuePair: java.lang.Object getValue()>();

        $r4 = (java.lang.Double) $r3;

        d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $r5 = virtualinvoke r2.<org.apache.commons.math3.optimization.PointValuePair: java.lang.Object getValue()>();

        $r6 = (java.lang.Double) $r5;

        d1 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $z0 = r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: boolean val$isMinim>;

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d0, d1);

        goto label2;

     label1:
        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>(d1, d0);

     label2:
        return $i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.direct.SimplexOptimizer$2 r0;
        java.lang.Object r1, r2;
        org.apache.commons.math3.optimization.PointValuePair $r3, $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.SimplexOptimizer$2;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.commons.math3.optimization.PointValuePair) r1;

        $r3 = (org.apache.commons.math3.optimization.PointValuePair) r2;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.SimplexOptimizer$2: int compare(org.apache.commons.math3.optimization.PointValuePair,org.apache.commons.math3.optimization.PointValuePair)>($r4, $r3);

        return $i0;
    }
}
