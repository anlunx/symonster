public abstract class com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter extends java.lang.Object
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MA;
    private static final com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare SOLVER;
    private static final com.opengamma.analytics.math.function.Function1D UNCONSTRAINED;
    private final com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _model;
    private final com.opengamma.analytics.math.function.Function1D _volFunc;
    private final com.opengamma.analytics.math.function.Function1D _volAdjointFunc;
    private final com.opengamma.analytics.math.matrix.DoubleMatrix1D _marketValues;
    private final com.opengamma.analytics.math.matrix.DoubleMatrix1D _errors;

    public void <init>(double, double[], double, double[], double[], com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        double d0, d1;
        double[] r1, r2, r3;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r4;
        int i0, $i1, $i2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r5, $r6;
        com.opengamma.analytics.math.function.Function1D $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        r4 := @parameter5: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null strikes");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "null implied vols");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r3, "null errors");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "null model");

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "vols not the same length as strikes");

        $i2 = lengthof r3;

        if i0 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "errors not the same length as strikes");

        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r2);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.DoubleMatrix1D _marketValues> = $r5;

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r3);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.DoubleMatrix1D _errors> = $r6;

        $r7 = virtualinvoke r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d0, r1, d1);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D _volFunc> = $r7;

        $r8 = virtualinvoke r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double,double[],double)>(d0, r1, d1);

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D _volAdjointFunc> = $r8;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _model> = r4;

        return;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        java.util.BitSet $r2;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = new java.util.BitSet;

        specialinvoke $r2.<java.util.BitSet: void <init>()>();

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,java.util.BitSet)>(r1, $r2);

        return $r3;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, java.util.BitSet)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1;
        java.util.BitSet r2;
        com.opengamma.analytics.math.minimization.NonLinearParameterTransforms r3;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform $r4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: java.util.BitSet;

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.minimization.NonLinearParameterTransforms getTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D,java.util.BitSet)>(r1, r2);

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)>(r1, r3);

        return $r4;
    }

    public com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D, com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r9, $r10, $r13, $r15;
        com.opengamma.analytics.math.minimization.NonLinearParameterTransforms r2;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults r4;
        com.opengamma.analytics.math.minimization.NonLinearTransformFunction $r5;
        com.opengamma.analytics.math.function.Function1D $r6, $r7, $r11, $r12, $r14;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare $r8;
        com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform $r16;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        r2 := @parameter1: com.opengamma.analytics.math.minimization.NonLinearParameterTransforms;

        $r5 = new com.opengamma.analytics.math.minimization.NonLinearTransformFunction;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D getModelValueFunction()>();

        $r7 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D getModelJacobianFunction()>();

        specialinvoke $r5.<com.opengamma.analytics.math.minimization.NonLinearTransformFunction: void <init>(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)>($r6, $r7, r2);

        $r8 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare SOLVER>;

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.DoubleMatrix1D _marketValues>;

        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.DoubleMatrix1D _errors>;

        $r11 = virtualinvoke $r5.<com.opengamma.analytics.math.minimization.NonLinearTransformFunction: com.opengamma.analytics.math.function.Function1D getFittingFunction()>();

        $r12 = virtualinvoke $r5.<com.opengamma.analytics.math.minimization.NonLinearTransformFunction: com.opengamma.analytics.math.function.Function1D getFittingJacobian()>();

        $r13 = interfaceinvoke r2.<com.opengamma.analytics.math.minimization.NonLinearParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D transform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D getConstraintFunction(com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)>(r2);

        $r15 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.DoubleMatrix1D getMaximumStep()>();

        r4 = virtualinvoke $r8.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults solve(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r9, $r10, $r11, $r12, $r13, $r14, $r15);

        $r16 = new com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform;

        specialinvoke $r16.<com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResultsWithTransform: void <init>(com.opengamma.analytics.math.statistics.leastsquare.LeastSquareResults,com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)>(r4, r2);

        return $r16;
    }

    protected com.opengamma.analytics.math.function.Function1D getModelValueFunction()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$2 $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        $r1 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$2;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter)>(r0);

        return $r1;
    }

    protected com.opengamma.analytics.math.function.Function1D getModelJacobianFunction()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$3 $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        $r1 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$3;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter)>(r0);

        return $r1;
    }

    protected abstract com.opengamma.analytics.math.matrix.DoubleMatrix1D getMaximumStep();

    protected abstract com.opengamma.analytics.math.minimization.NonLinearParameterTransforms getTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D);

    protected abstract com.opengamma.analytics.math.minimization.NonLinearParameterTransforms getTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D, java.util.BitSet);

    public abstract com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData toSmileModelData(com.opengamma.analytics.math.matrix.DoubleMatrix1D);

    protected com.opengamma.analytics.math.function.Function1D getConstraintFunction(com.opengamma.analytics.math.minimization.NonLinearParameterTransforms)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.minimization.NonLinearParameterTransforms r1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        r1 := @parameter0: com.opengamma.analytics.math.minimization.NonLinearParameterTransforms;

        $r2 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED>;

        return $r2;
    }

    public com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider getModel()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider $r1;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _model>;

        return $r1;
    }

    static com.opengamma.analytics.math.function.Function1D access$000(com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.function.Function1D $r1;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D _volFunc>;

        return $r1;
    }

    static com.opengamma.analytics.math.function.Function1D access$100(com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter r0;
        com.opengamma.analytics.math.function.Function1D $r1;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter;

        $r1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D _volAdjointFunc>;

        return $r1;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;
        com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare $r1;
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r2;
        com.opengamma.analytics.math.linearalgebra.Decomposition $r3;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$1 $r4;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.MatrixAlgebra MA> = $r0;

        $r1 = new com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare;

        $r3 = <com.opengamma.analytics.math.linearalgebra.DecompositionFactory: com.opengamma.analytics.math.linearalgebra.Decomposition SV_COLT>;

        $r2 = <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare: void <init>(com.opengamma.analytics.math.linearalgebra.Decomposition,com.opengamma.analytics.math.matrix.MatrixAlgebra,double)>($r3, $r2, 1.0E-12);

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.statistics.leastsquare.NonLinearLeastSquare SOLVER> = $r1;

        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$1;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter$1: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.smile.fitting.SmileModelFitter: com.opengamma.analytics.math.function.Function1D UNCONSTRAINED> = $r4;

        return;
    }
}
