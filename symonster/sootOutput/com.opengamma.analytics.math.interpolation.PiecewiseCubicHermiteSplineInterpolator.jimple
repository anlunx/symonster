public class com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double[] r1, r2, r3, $r9, $r11, r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11, i12;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7;
        double[][] $r8, $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r13;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "xValues length = yValues length");

        $i3 = lengthof r1;

        if $i3 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i9 = 0;

     label05:
        if i9 >= i0 goto label06;

        $d4 = r1[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d5 = r1[i9];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        $d6 = r2[i9];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yData containing NaN");

        $d7 = r2[i9];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yData containing Infinity");

        i9 = i9 + 1;

        goto label05;

     label06:
        r12 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r3 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r12, r3);

        i10 = 1;

     label07:
        if i10 >= i0 goto label10;

        $i7 = i10 - 1;

        $d3 = r12[$i7];

        $d2 = r12[i10];

        $b8 = $d3 cmpl $d2;

        if $b8 != 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i10 = i10 + 1;

        goto label07;

     label10:
        r13 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r12, r3);

        i11 = 0;

     label11:
        $i4 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        if i11 >= $i4 goto label14;

        i12 = 0;

     label12:
        $i6 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        if i12 >= $i6 goto label13;

        $r8 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r9 = $r8[i11];

        $d0 = $r9[i12];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r10 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r11 = $r10[i11];

        $d1 = $r11[i12];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i12 = i12 + 1;

        goto label12;

     label13:
        i11 = i11 + 1;

        goto label11;

     label14:
        $r6 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r12);

        $i5 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        specialinvoke $r6.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r7, r13, $i5, 1);

        return $r6;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double[] r1, $r6, $r12, $r13, $r16, $r17, $r19, $r20, r21, r23;
        double[][] r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r8, $r11, $r14, $r18;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r9;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r10, $r15;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r22;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i3 = lengthof r1;

        $r6 = r2[0];

        $i2 = lengthof $r6;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "(xValues length = yValuesMatrix\'s row vector length)");

        $i4 = lengthof r1;

        if $i4 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i10 = 0;

     label05:
        if i10 >= i0 goto label08;

        $d4 = r1[i10];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xValues containing NaN");

        $d5 = r1[i10];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xValues containing Infinity");

        i11 = 0;

     label06:
        if i11 >= i1 goto label07;

        $r19 = r2[i11];

        $d6 = $r19[i10];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValuesMatrix containing NaN");

        $r20 = r2[i11];

        $d7 = $r20[i10];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yValuesMatrix containing Infinity");

        i11 = i11 + 1;

        goto label06;

     label07:
        i10 = i10 + 1;

        goto label05;

     label08:
        i12 = 0;

     label09:
        if i12 >= i0 goto label14;

        i13 = i12 + 1;

     label10:
        if i13 >= i0 goto label13;

        $d3 = r1[i12];

        $d2 = r1[i13];

        $b9 = $d3 cmpl $d2;

        if $b9 != 0 goto label11;

        $z8 = 1;

        goto label12;

     label11:
        $z8 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i13 = i13 + 1;

        goto label10;

     label13:
        i12 = i12 + 1;

        goto label09;

     label14:
        r21 = newarray (double)[i0];

        r22 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i1];

        i14 = 0;

     label15:
        if i14 >= i1 goto label16;

        r21 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r17 = r2[i14];

        r23 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r17, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r21, r23);

        $r18 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r21, r23);

        r22[i14] = $r18;

        i14 = i14 + 1;

        goto label15;

     label16:
        $r7 = r22[0];

        i15 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r8 = r22[0];

        i16 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i5 = i1 * i15;

        r3 = newmultiarray (double)[$i5][i16];

        i17 = 0;

     label17:
        if i17 >= i15 goto label20;

        i18 = 0;

     label18:
        if i18 >= i1 goto label19;

        $i7 = i1 * i17;

        $i8 = $i7 + i18;

        $r14 = r22[i18];

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i17);

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r3[$i8] = $r16;

        i18 = i18 + 1;

        goto label18;

     label19:
        i17 = i17 + 1;

        goto label17;

     label20:
        i19 = 0;

     label21:
        $i6 = i15 * i1;

        if i19 >= $i6 goto label24;

        i20 = 0;

     label22:
        if i20 >= i16 goto label23;

        $r12 = r3[i19];

        $d0 = $r12[i20];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r13 = r3[i19];

        $d1 = $r13[i20];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i20 = i20 + 1;

        goto label22;

     label23:
        i19 = i19 + 1;

        goto label21;

     label24:
        $r9 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r21);

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r10, $r11, i16, i1);

        return $r9;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double[] r1, r2;
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity $r4;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r4 = new com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity;

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: void <init>()>();

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolatorWithSensitivity: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>(r1, r2);

        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double[] r1, r2, r4, r5, $r7, $r8, $r9, $r10, $r11, $r12, r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        double[][] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r3 = newmultiarray (double)[$i1][4];

        $i2 = i0 - 1;

        r4 = newarray (double)[$i2];

        $i3 = i0 - 1;

        r5 = newarray (double)[$i3];

        i10 = 0;

     label1:
        $i4 = i0 - 1;

        if i10 >= $i4 goto label2;

        $i8 = i10 + 1;

        $d24 = r1[$i8];

        $d23 = r1[i10];

        $d25 = $d24 - $d23;

        r4[i10] = $d25;

        $i9 = i10 + 1;

        $d27 = r2[$i9];

        $d26 = r2[i10];

        $d29 = $d27 - $d26;

        $d28 = r4[i10];

        $d30 = $d29 / $d28;

        r5[i10] = $d30;

        i10 = i10 + 1;

        goto label1;

     label2:
        if i0 != 2 goto label3;

        $r11 = r3[0];

        $d21 = r5[0];

        $r11[2] = $d21;

        $r12 = r3[0];

        $d22 = r1[0];

        $r12[3] = $d22;

        goto label5;

     label3:
        r13 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: double[] slopeFinder(double[],double[])>(r4, r5);

        i11 = 0;

     label4:
        $i5 = i0 - 1;

        if i11 >= $i5 goto label5;

        $r7 = r3[i11];

        $d2 = r13[i11];

        $d0 = r5[i11];

        $d1 = 2.0 * $d0;

        $d4 = $d2 - $d1;

        $i6 = i11 + 1;

        $d3 = r13[$i6];

        $d6 = $d4 + $d3;

        $d5 = r4[i11];

        $d8 = $d6 / $d5;

        $d7 = r4[i11];

        $d9 = $d8 / $d7;

        $r7[0] = $d9;

        $r8 = r3[i11];

        $d10 = r5[i11];

        $d13 = 3.0 * $d10;

        $d11 = r13[i11];

        $d12 = 2.0 * $d11;

        $d15 = $d13 - $d12;

        $i7 = i11 + 1;

        $d14 = r13[$i7];

        $d17 = $d15 - $d14;

        $d16 = r4[i11];

        $d18 = $d17 / $d16;

        $r8[1] = $d18;

        $r9 = r3[i11];

        $d19 = r13[i11];

        $r9[2] = $d19;

        $r10 = r3[i11];

        $d20 = r2[i11];

        $r10[3] = $d20;

        i11 = i11 + 1;

        goto label4;

     label5:
        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r6;
    }

    private double[] slopeFinder(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double[] r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, i11;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;
        byte $b7;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 + 1;

        r3 = newarray (double)[$i1];

        $d5 = r1[0];

        $d4 = r1[1];

        $d3 = r2[0];

        $d2 = r2[1];

        $d6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: double endpointSlope(double,double,double,double)>($d5, $d4, $d3, $d2);

        r3[0] = $d6;

        $i2 = i0 - 1;

        $d10 = r1[$i2];

        $i3 = i0 - 2;

        $d9 = r1[$i3];

        $i4 = i0 - 1;

        $d8 = r2[$i4];

        $i5 = i0 - 2;

        $d7 = r2[$i5];

        $d11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator: double endpointSlope(double,double,double,double)>($d10, $d9, $d8, $d7);

        r3[i0] = $d11;

        i11 = 1;

     label1:
        if i11 >= i0 goto label4;

        $d13 = r2[i11];

        $i6 = i11 - 1;

        $d12 = r2[$i6];

        $d14 = $d13 * $d12;

        $b7 = $d14 cmpg 0.0;

        if $b7 > 0 goto label2;

        r3[i11] = 0.0;

        goto label3;

     label2:
        $d15 = r1[i11];

        $d17 = 2.0 * $d15;

        $i8 = i11 - 1;

        $d16 = r1[$i8];

        d0 = $d17 + $d16;

        $d20 = r1[i11];

        $i9 = i11 - 1;

        $d18 = r1[$i9];

        $d19 = 2.0 * $d18;

        d1 = $d20 + $d19;

        $d26 = d0 + d1;

        $i10 = i11 - 1;

        $d21 = r2[$i10];

        $d24 = d0 / $d21;

        $d22 = r2[i11];

        $d23 = d1 / $d22;

        $d25 = $d24 + $d23;

        $d27 = $d26 / $d25;

        r3[i11] = $d27;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        return r3;
    }

    private double endpointSlope(double, double, double, double)
    {
        com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        byte $b0, $b1, $b2;

        r0 := @this: com.opengamma.analytics.math.interpolation.PiecewiseCubicHermiteSplineInterpolator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = 2.0 * d0;

        $d6 = $d5 + d1;

        $d8 = $d6 * d2;

        $d7 = d0 * d3;

        $d10 = $d8 - $d7;

        $d9 = d0 + d1;

        d4 = $d10 / $d9;

        $d11 = staticinvoke <java.lang.Math: double signum(double)>(d4);

        $d12 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $b0 = $d11 cmpl $d12;

        if $b0 == 0 goto label1;

        return 0.0;

     label1:
        $d13 = staticinvoke <java.lang.Math: double signum(double)>(d2);

        $d14 = staticinvoke <java.lang.Math: double signum(double)>(d3);

        $b1 = $d13 cmpl $d14;

        if $b1 == 0 goto label2;

        $d15 = staticinvoke <java.lang.Math: double abs(double)>(d4);

        $d16 = staticinvoke <java.lang.Math: double abs(double)>(d2);

        $d17 = 3.0 * $d16;

        $b2 = $d15 cmpl $d17;

        if $b2 <= 0 goto label2;

        $d18 = 3.0 * d2;

        return $d18;

     label2:
        return d4;
    }
}
