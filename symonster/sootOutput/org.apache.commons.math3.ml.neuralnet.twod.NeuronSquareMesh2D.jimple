public class org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.math3.ml.neuralnet.Network network;
    private final int numberOfRows;
    private final int numberOfColumns;
    private final boolean wrapRows;
    private final boolean wrapColumns;
    private final org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood;
    private final long[][] identifiers;

    void <init>(boolean, boolean, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood, double[][][])
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        boolean z0, z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood r1;
        double[][][] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, i12, i13;
        double[][] $r3, $r4, $r9;
        double[] $r5, $r10;
        org.apache.commons.math3.ml.neuralnet.Network $r6, $r11;
        long[][] $r7, $r8;
        long[] $r12;
        long $l9;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r13, $r16;
        java.lang.Integer $r14, $r15, $r17, $r18;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood;

        r2 := @parameter3: double[][][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r2;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows> = $i1;

        $r3 = r2[0];

        $i2 = lengthof $r3;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns> = $i2;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if $i3 >= 2 goto label1;

        $r16 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r16.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r17, $r18, 1);

        throw $r16;

     label1:
        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if $i4 >= 2 goto label2;

        $r13 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i10 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r13.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r14, $r15, 1);

        throw $r13;

     label2:
        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows> = z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns> = z1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood> = r1;

        $r4 = r2[0];

        $r5 = $r4[0];

        i0 = lengthof $r5;

        $r6 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i0);

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network> = $r6;

        $i6 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r7 = newmultiarray (long)[$i6][$i5];

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers> = $r7;

        i12 = 0;

     label3:
        $i7 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i12 >= $i7 goto label6;

        i13 = 0;

     label4:
        $i8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if i13 >= $i8 goto label5;

        $r8 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r12 = $r8[i12];

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r9 = r2[i12];

        $r10 = $r9[i13];

        $l9 = virtualinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>($r10);

        $r12[i13] = $l9;

        i13 = i13 + 1;

        goto label4;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void createLinks()>();

        return;
    }

    public void <init>(int, boolean, int, boolean, org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[])
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0, i1, i2, $i3, $i4, i6, i7, i8;
        boolean z0, z1;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood r1;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] r2;
        double[] r3;
        long[][] $r4, $r6;
        org.apache.commons.math3.ml.neuralnet.Network $r5, $r7;
        long[] $r8;
        long $l5;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer $r9;
        double $d0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r10, $r13;
        java.lang.Integer $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        z1 := @parameter3: boolean;

        r1 := @parameter4: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood;

        r2 := @parameter5: org.apache.commons.math3.ml.neuralnet.FeatureInitializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 2 goto label1;

        $r13 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r13.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r14, $r15, 1);

        throw $r13;

     label1:
        if i1 >= 2 goto label2;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r11, $r12, 1);

        throw $r10;

     label2:
        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows> = i0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows> = z0;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns> = i1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns> = z1;

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood> = r1;

        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $r4 = newmultiarray (long)[$i4][$i3];

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers> = $r4;

        i2 = lengthof r2;

        $r5 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i2);

        r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network> = $r5;

        i6 = 0;

     label3:
        if i6 >= i0 goto label8;

        i7 = 0;

     label4:
        if i7 >= i1 goto label7;

        r3 = newarray (double)[i2];

        i8 = 0;

     label5:
        if i8 >= i2 goto label6;

        $r9 = r2[i8];

        $d0 = interfaceinvoke $r9.<org.apache.commons.math3.ml.neuralnet.FeatureInitializer: double value()>();

        r3[i8] = $d0;

        i8 = i8 + 1;

        goto label5;

     label6:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r8 = $r6[i6];

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l5 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>(r3);

        $r8[i7] = $l5;

        i7 = i7 + 1;

        goto label4;

     label7:
        i6 = i6 + 1;

        goto label3;

     label8:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: void createLinks()>();

        return;
    }

    public org.apache.commons.math3.ml.neuralnet.Network getNetwork()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        org.apache.commons.math3.ml.neuralnet.Network $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        return $r1;
    }

    public int getNumberOfRows()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        return $i0;
    }

    public int getNumberOfColumns()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        return $i0;
    }

    public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int, int)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.commons.math3.exception.OutOfRangeException $r1, $r5;
        java.lang.Integer $r2, $r3, $r4, $r6, $r7, $r8;
        long[][] $r9;
        long[] $r10;
        long $l8;
        org.apache.commons.math3.ml.neuralnet.Network $r11;
        org.apache.commons.math3.ml.neuralnet.Neuron $r12;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i0 < $i4 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i3 = $i2 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        if i1 < 0 goto label3;

        $i7 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if i1 < $i7 goto label4;

     label3:
        $r5 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        $i6 = $i5 - 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        specialinvoke $r5.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r6, $r7, $r8);

        throw $r5;

     label4:
        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r9 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r10 = $r9[i0];

        $l8 = $r10[i1];

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l8);

        return $r12;
    }

    private void createLinks()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i13, $i17, $i19, $i25, $i27, $i29, $i31, $i33, $i35, $i37, $i39, $i41, $i42, $i44, $i45, $i47, $i48, $i50, $i51, i53, i54;
        org.apache.commons.math3.ml.neuralnet.Neuron r2, r4;
        java.util.Iterator r3;
        long l2, $l9, $l10, $l12, $l14, $l15, $l16, $l18, $l20, $l21, $l22, $l23, $l24, $l26, $l28, $l30, $l32, $l34, $l36, $l38, $l40, $l43, $l46, $l49, $l52, $l55;
        java.util.ArrayList $r5;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r6;
        int[] $r7;
        boolean $z0, $z1, $z10, $z27, $z28, $z29, $z30;
        java.lang.Object $r8;
        java.lang.Long $r9, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47, $r50, $r53, $r56, $r59, $r62, $r65, $r68, $r71, $r74, $r77, $r80, $r83;
        org.apache.commons.math3.ml.neuralnet.Network $r10, $r11, $r85;
        long[][] $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45, $r48, $r51, $r54, $r57, $r60, $r63, $r66, $r69, $r72, $r75, $r78, $r81, $r86;
        long[] $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46, $r49, $r52, $r55, $r58, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r82, $r87;
        org.apache.commons.math3.exception.MathInternalError $r84;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        i0 = $i3 - 1;

        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        i1 = $i4 - 1;

        i53 = 0;

     label01:
        $i5 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i53 >= $i5 goto label32;

        i54 = 0;

     label02:
        $i6 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if i54 >= $i6 goto label31;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r7 = <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$1: int[] $SwitchMap$org$apache$commons$math3$ml$neuralnet$SquareNeighbourhood>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood>;

        $i7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood: int ordinal()>();

        $i8 = $r7[$i7];

        lookupswitch($i8)
        {
            case 1: goto label03;
            case 2: goto label19;
            default: goto label27;
        };

     label03:
        if i53 <= 0 goto label05;

        if i54 <= 0 goto label04;

        $r81 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i50 = i53 - 1;

        $r82 = $r81[$i50];

        $i51 = i54 - 1;

        $l52 = $r82[$i51];

        $r83 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l52);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r83);

     label04:
        if i54 >= i1 goto label05;

        $r78 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i47 = i53 - 1;

        $r79 = $r78[$i47];

        $i48 = i54 + 1;

        $l49 = $r79[$i48];

        $r80 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l49);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r80);

     label05:
        if i53 >= i0 goto label07;

        if i54 <= 0 goto label06;

        $r75 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i44 = i53 + 1;

        $r76 = $r75[$i44];

        $i45 = i54 - 1;

        $l46 = $r76[$i45];

        $r77 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l46);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r77);

     label06:
        if i54 >= i1 goto label07;

        $r72 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i41 = i53 + 1;

        $r73 = $r72[$i41];

        $i42 = i54 + 1;

        $l43 = $r73[$i42];

        $r74 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l43);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r74);

     label07:
        $z27 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z27 == 0 goto label11;

        if i53 != 0 goto label09;

        if i54 <= 0 goto label08;

        $r69 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r70 = $r69[i0];

        $i39 = i54 - 1;

        $l40 = $r70[$i39];

        $r71 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l40);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r71);

     label08:
        if i54 >= i1 goto label11;

        $r66 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r67 = $r66[i0];

        $i37 = i54 + 1;

        $l38 = $r67[$i37];

        $r68 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l38);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r68);

        goto label11;

     label09:
        if i53 != i0 goto label11;

        if i54 <= 0 goto label10;

        $r63 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r64 = $r63[0];

        $i35 = i54 - 1;

        $l36 = $r64[$i35];

        $r65 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l36);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r65);

     label10:
        if i54 >= i1 goto label11;

        $r60 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r61 = $r60[0];

        $i33 = i54 + 1;

        $l34 = $r61[$i33];

        $r62 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l34);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r62);

     label11:
        $z28 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z28 == 0 goto label15;

        if i54 != 0 goto label13;

        if i53 <= 0 goto label12;

        $r57 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i31 = i53 - 1;

        $r58 = $r57[$i31];

        $l32 = $r58[i1];

        $r59 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l32);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r59);

     label12:
        if i53 >= i0 goto label15;

        $r54 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i29 = i53 + 1;

        $r55 = $r54[$i29];

        $l30 = $r55[i1];

        $r56 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l30);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r56);

        goto label15;

     label13:
        if i54 != i1 goto label15;

        if i53 <= 0 goto label14;

        $r51 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i27 = i53 - 1;

        $r52 = $r51[$i27];

        $l28 = $r52[0];

        $r53 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l28);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r53);

     label14:
        if i53 >= i0 goto label15;

        $r48 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i25 = i53 + 1;

        $r49 = $r48[$i25];

        $l26 = $r49[0];

        $r50 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l26);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r50);

     label15:
        $z29 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z29 == 0 goto label19;

        $z10 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z10 == 0 goto label19;

        if i53 != 0 goto label16;

        if i54 != 0 goto label16;

        $r45 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r46 = $r45[i0];

        $l24 = $r46[i1];

        $r47 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l24);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r47);

        goto label19;

     label16:
        if i53 != 0 goto label17;

        if i54 != i1 goto label17;

        $r42 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r43 = $r42[i0];

        $l23 = $r43[0];

        $r44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l23);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r44);

        goto label19;

     label17:
        if i53 != i0 goto label18;

        if i54 != 0 goto label18;

        $r39 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r40 = $r39[0];

        $l22 = $r40[i1];

        $r41 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l22);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r41);

        goto label19;

     label18:
        if i53 != i0 goto label19;

        if i54 != i1 goto label19;

        $r36 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r37 = $r36[0];

        $l21 = $r37[0];

        $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l21);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r38);

     label19:
        if i53 <= 0 goto label20;

        $r33 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i19 = i53 - 1;

        $r34 = $r33[$i19];

        $l20 = $r34[i54];

        $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l20);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r35);

     label20:
        if i53 >= i0 goto label21;

        $r30 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $i17 = i53 + 1;

        $r31 = $r30[$i17];

        $l18 = $r31[i54];

        $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l18);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r32);

     label21:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        if $z0 == 0 goto label23;

        if i53 != 0 goto label22;

        $r27 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r28 = $r27[i0];

        $l16 = $r28[i54];

        $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l16);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label23;

     label22:
        if i53 != i0 goto label23;

        $r24 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r25 = $r24[0];

        $l15 = $r25[i54];

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l15);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r26);

     label23:
        if i54 <= 0 goto label24;

        $r21 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r22 = $r21[i53];

        $i13 = i54 - 1;

        $l14 = $r22[$i13];

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r23);

     label24:
        if i54 >= i1 goto label25;

        $r18 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r19 = $r18[i53];

        $i11 = i54 + 1;

        $l12 = $r19[$i11];

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r20);

     label25:
        $z1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        if $z1 == 0 goto label28;

        if i54 != 0 goto label26;

        $r15 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r16 = $r15[i53];

        $l10 = $r16[i1];

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label28;

     label26:
        if i54 != i1 goto label28;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r13 = $r12[i53];

        $l9 = $r13[0];

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l9);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label28;

     label27:
        $r84 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r84.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r84;

     label28:
        $r85 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r86 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long[][] identifiers>;

        $r87 = $r86[i53];

        $l55 = $r87[i54];

        r2 = virtualinvoke $r85.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l55);

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $z30 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z30 == 0 goto label30;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Long) $r8;

        l2 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $r10 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        r4 = virtualinvoke $r10.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(l2);

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Network network>;

        virtualinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>(r2, r4);

        goto label29;

     label30:
        i54 = i54 + 1;

        goto label02;

     label31:
        i53 = i53 + 1;

        goto label01;

     label32:
        return;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        java.io.ObjectInputStream r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D r0;
        double[][][] r1;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy $r2;
        org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood $r3;
        boolean $z0, $z1;
        double[][] $r4;
        org.apache.commons.math3.ml.neuralnet.Neuron $r5;
        double[] $r6;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        r1 = newmultiarray (double)[$i1][$i0][];

        i4 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfRows>;

        if i4 >= $i2 goto label4;

        i5 = 0;

     label2:
        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: int numberOfColumns>;

        if i5 >= $i3 goto label3;

        $r4 = r1[i4];

        $r5 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(int,int)>(i4, i5);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        $r4[i5] = $r6;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 = new org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy;

        $z1 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapRows>;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: boolean wrapColumns>;

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood neighbourhood>;

        specialinvoke $r2.<org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D$SerializationProxy: void <init>(boolean,boolean,org.apache.commons.math3.ml.neuralnet.SquareNeighbourhood,double[][][])>($z1, $z0, $r3, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.neuralnet.twod.NeuronSquareMesh2D: long serialVersionUID> = 1L;

        return;
    }
}
