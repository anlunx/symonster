public abstract class org.apache.commons.math3.linear.RealVector extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.math3.linear.RealVector r0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int getDimension();

    public abstract double getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException;

    public abstract void setEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException;

    public void addToEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        $d2 = $d1 + d0;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i0, $d2);

        return;
    }

    public abstract org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector);

    public abstract org.apache.commons.math3.linear.RealVector append(double);

    public abstract org.apache.commons.math3.linear.RealVector getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException;

    public abstract void setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException;

    public abstract boolean isNaN();

    public abstract boolean isInfinite();

    protected void checkVectorDimensions(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(int)>($i0);

        return;
    }

    protected void checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0, i1;
        org.apache.commons.math3.exception.DimensionMismatchException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if i1 == i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r1.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>(i1, i0);

        throw $r1;

     label1:
        return;
    }

    protected void checkIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i2 = $i1 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        return;
    }

    protected void checkIndices(int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0, i1, i2, $i3, $i4;
        org.apache.commons.math3.exception.OutOfRangeException $r1, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2, $r7, $r12;
        java.lang.Integer $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r11;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if i0 < 0 goto label1;

        if i0 < i2 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i3 = i2 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4, $r5);

        throw $r1;

     label2:
        if i1 < 0 goto label3;

        if i1 < i2 goto label4;

     label3:
        $r6 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INDEX>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i4 = i2 - 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        specialinvoke $r6.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r7, $r8, $r9, $r10);

        throw $r6;

     label4:
        if i1 >= i0 goto label5;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INITIAL_ROW_AFTER_FINAL_ROW>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r12, $r13, $r14, 0);

        throw $r11;

     label5:
        return;
    }

    public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1, r2;
        java.util.Iterator r3;
        org.apache.commons.math3.linear.RealVector$Entry r4;
        int i0;
        boolean $z0;
        java.lang.Object $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        r2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.linear.RealVector$Entry) $r5;

        i0 = virtualinvoke r4.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke r4.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        $d2 = $d0 + $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i0, $d2);

        goto label1;

     label2:
        return r2;
    }

    public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1, r2;
        java.util.Iterator r3;
        org.apache.commons.math3.linear.RealVector$Entry r4;
        int i0;
        boolean $z0;
        java.lang.Object $r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        r2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>(-1.0);

        r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.linear.RealVector$Entry) $r5;

        i0 = virtualinvoke r4.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d0 = virtualinvoke r4.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

        $d2 = $d0 + $d1;

        virtualinvoke r2.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i0, $d2);

        goto label1;

     label2:
        return r2;
    }

    public org.apache.commons.math3.linear.RealVector mapAdd(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapAddToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r3;
        double d0;
        byte $b0;
        org.apache.commons.math3.analysis.function.Add $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $r1 = new org.apache.commons.math3.analysis.function.Add;

        specialinvoke $r1.<org.apache.commons.math3.analysis.function.Add: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.UnivariateFunction fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)>($r1, d0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>($r2);

        return $r3;

     label1:
        return r0;
    }

    public abstract org.apache.commons.math3.linear.RealVector copy();

    public double dotProduct(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        int i0, i1;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        d3 = 0.0;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d3;
    }

    public double cosine(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        double d0, d1, $d2, $d3, $d4;
        byte $b0, $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 == 0 goto label1;

        $b1 = d1 cmpl 0.0;

        if $b1 != 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        $d2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $d3 = d0 * d1;

        $d4 = $d2 / $d3;

        return $d4;
    }

    public abstract org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;

    public abstract org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;

    public double getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        java.util.Iterator r2;
        org.apache.commons.math3.linear.RealVector$Entry r3;
        double d0, $d1, $d2, $d3, $d4, d5;
        boolean $z0;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        d5 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.linear.RealVector$Entry) $r4;

        $d2 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        d0 = $d2 - $d3;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public double getNorm()
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        double d0, $d1, $d2, d3;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d3 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d2 = d0 * d0;

        d3 = d3 + $d2;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d3);

        return $d1;
    }

    public double getL1Norm()
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d2 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d2 = d2 + $d1;

        goto label1;

     label2:
        return d2;
    }

    public double getLInfNorm()
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d2 = 0.0;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d0);

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d2, $d1);

        goto label1;

     label2:
        return d2;
    }

    public double getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        java.util.Iterator r2;
        org.apache.commons.math3.linear.RealVector$Entry r3;
        boolean $z0;
        java.lang.Object $r4;
        double $d0, $d1, $d2, $d3, d4;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.linear.RealVector$Entry) $r4;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d4 = d4 + $d3;

        goto label1;

     label2:
        return d4;
    }

    public double getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        java.util.Iterator r2;
        org.apache.commons.math3.linear.RealVector$Entry r3;
        boolean $z0;
        java.lang.Object $r4;
        double $d0, $d1, $d2, $d3, d4;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        d4 = 0.0;

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.linear.RealVector$Entry) $r4;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $i0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i0);

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, d4);

        goto label1;

     label2:
        return d4;
    }

    public int getMinIndex()
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, d1;
        byte $b0;
        int i1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i1 = -1;

        d1 = #Infinity;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $b0 = $d0 cmpg d1;

        if $b0 > 0 goto label2;

        i1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

     label2:
        goto label1;

     label3:
        return i1;
    }

    public double getMinValue()
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getMinIndex()>();

        if i0 >= 0 goto label1;

        $d0 = #NaN;

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

     label2:
        return $d0;
    }

    public int getMaxIndex()
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;
        double $d0, d1;
        byte $b0;
        int i1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i1 = -1;

        d1 = #-Infinity;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $b0 = $d0 cmpl d1;

        if $b0 < 0 goto label2;

        i1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: int getIndex()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

     label2:
        goto label1;

     label3:
        return i1;
    }

    public double getMaxValue()
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getMaxIndex()>();

        if i0 >= 0 goto label1;

        $d0 = #NaN;

        goto label2;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i0);

     label2:
        return $d0;
    }

    public org.apache.commons.math3.linear.RealVector mapMultiply(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapMultiplyToSelf(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r3;
        double d0;
        org.apache.commons.math3.analysis.function.Multiply $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.function.Multiply;

        specialinvoke $r1.<org.apache.commons.math3.analysis.function.Multiply: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.UnivariateFunction fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)>($r1, d0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>($r2);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector mapSubtract(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapSubtractToSelf(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $d1 = neg d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapAddToSelf(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.linear.RealVector mapDivide(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapDivideToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math3.linear.RealVector mapDivideToSelf(double)
    {
        org.apache.commons.math3.linear.RealVector r0, $r3;
        double d0;
        org.apache.commons.math3.analysis.function.Divide $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.function.Divide;

        specialinvoke $r1.<org.apache.commons.math3.analysis.function.Divide: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.UnivariateFunction fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction,double)>($r1, d0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>($r2);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealMatrix outerProduct(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        int i0, i1, i2, i3;
        boolean $z0, $z1;
        org.apache.commons.math3.linear.OpenMapRealMatrix $r2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r3;
        org.apache.commons.math3.linear.AbstractRealMatrix r4;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        i1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $z0 = r1 instanceof org.apache.commons.math3.linear.SparseRealVector;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.commons.math3.linear.SparseRealVector;

        if $z1 == 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.linear.OpenMapRealMatrix;

        specialinvoke $r2.<org.apache.commons.math3.linear.OpenMapRealMatrix: void <init>(int,int)>(i0, i1);

        r4 = $r2;

        goto label3;

     label2:
        $r3 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i0, i1);

        r4 = $r3;

     label3:
        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        i3 = 0;

     label5:
        if i3 >= i1 goto label6;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $d2 = $d0 * $d1;

        interfaceinvoke r4.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label5;

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        return r4;
    }

    public org.apache.commons.math3.linear.RealVector projection(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector r0, r1, $r2;
        double d0, $d1, $d2, $d3;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        d0 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $d2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>(r1);

        $d3 = $d1 / $d2;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapMultiply(double)>($d3);

        return $r2;
    }

    public void set(double)
    {
        org.apache.commons.math3.linear.RealVector r0;
        double d0;
        java.util.Iterator r1;
        org.apache.commons.math3.linear.RealVector$Entry r2;
        boolean $z0;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.linear.RealVector$Entry) $r3;

        virtualinvoke r2.<org.apache.commons.math3.linear.RealVector$Entry: void setValue(double)>(d0);

        goto label1;

     label2:
        return;
    }

    public double[] toArray()
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0, i1;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        r1 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public org.apache.commons.math3.linear.RealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector r0, $r1;
        double d0;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapDivide(double)>(d0);

        return $r1;
    }

    public void unitize() throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.linear.RealVector r0;
        double d0, $d1;
        byte $b0;
        org.apache.commons.math3.exception.MathArithmeticException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getNorm()>();

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapDivideToSelf(double)>($d1);

        return;
    }

    public java.util.Iterator sparseIterator()
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVector$SparseEntryIterator $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        $r1 = new org.apache.commons.math3.linear.RealVector$SparseEntryIterator;

        specialinvoke $r1.<org.apache.commons.math3.linear.RealVector$SparseEntryIterator: void <init>(org.apache.commons.math3.linear.RealVector)>(r0);

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.linear.RealVector r0;
        int i0;
        org.apache.commons.math3.linear.RealVector$1 $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $r1 = new org.apache.commons.math3.linear.RealVector$1;

        specialinvoke $r1.<org.apache.commons.math3.linear.RealVector$1: void <init>(org.apache.commons.math3.linear.RealVector,int)>(r0, i0);

        return $r1;
    }

    public org.apache.commons.math3.linear.RealVector map(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.RealVector r0, $r2, $r3;
        org.apache.commons.math3.analysis.UnivariateFunction r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)>(r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector mapToSelf(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        java.util.Iterator r2;
        org.apache.commons.math3.linear.RealVector$Entry r3;
        boolean $z0;
        java.lang.Object $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.linear.RealVector$Entry) $r4;

        $d0 = virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: double getValue()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d0);

        virtualinvoke r3.<org.apache.commons.math3.linear.RealVector$Entry: void setValue(double)>($d1);

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math3.linear.RealVector combine(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1, $r2, $r3;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector copy()>();

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.RealVector: org.apache.commons.math3.linear.RealVector combineToSelf(double,double,org.apache.commons.math3.linear.RealVector)>(d0, d1, r1);

        return $r3;
    }

    public org.apache.commons.math3.linear.RealVector combineToSelf(double, double, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.RealVector r0, r1;
        double d0, d1, d2, d3, $d4, $d5, $d6;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkVectorDimensions(org.apache.commons.math3.linear.RealVector)>(r1);

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if i1 >= $i0 goto label2;

        d2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        d3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i1);

        $d5 = d0 * d2;

        $d4 = d1 * d3;

        $d6 = $d5 + $d4;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, $d6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor r1;
        int i0, $i1, i2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void visit(int,double)>(i2, $d1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor r1;
        int i0, i1, $i2, i3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: void visit(int,double)>(i3, $d1);

        i3 = i3 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorPreservingVisitor r1;
        int i0, i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorPreservingVisitor,int,int)>(r1, i0, i1);

        return $d0;
    }

    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor r1;
        int i0, $i1, i2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        $i1 = i0 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: void start(int,int,int)>(i0, 0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i2);

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double visit(int,double)>(i2, $d1);

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i2, $d2);

        i2 = i2 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor r1;
        int i0, i1, $i2, i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void checkIndices(int,int)>(i0, i1);

        $i2 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: void start(int,int,int)>($i2, i0, i1);

        i3 = i0;

     label1:
        if i3 > i1 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>(i3);

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double visit(int,double)>(i3, $d1);

        virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i3, $d2);

        i3 = i3 + 1;

        goto label1;

     label2:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealVectorChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor, int, int) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVectorChangingVisitor r1;
        int i0, i1;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVectorChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.linear.RealVector: double walkInDefaultOrder(org.apache.commons.math3.linear.RealVectorChangingVisitor,int,int)>(r1, i0, i1);

        return $d0;
    }

    public boolean equals(java.lang.Object) throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector r0;
        java.lang.Object r1;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int hashCode() throws org.apache.commons.math3.exception.MathUnsupportedOperationException
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.math3.linear.RealVector;

        $r1 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public static org.apache.commons.math3.linear.RealVector unmodifiableRealVector(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.RealVector r0;
        org.apache.commons.math3.linear.RealVector$2 $r1;

        r0 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r1 = new org.apache.commons.math3.linear.RealVector$2;

        specialinvoke $r1.<org.apache.commons.math3.linear.RealVector$2: void <init>(org.apache.commons.math3.linear.RealVector)>(r0);

        return $r1;
    }
}
