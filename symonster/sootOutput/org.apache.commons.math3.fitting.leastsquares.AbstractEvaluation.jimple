public abstract class org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation extends java.lang.Object implements org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem$Evaluation
{
    private final int observationSize;

    void <init>(int)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        int i0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: int observationSize> = i0;

        return;
    }

    public org.apache.commons.math3.linear.RealMatrix getCovariances(double)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double d0;
        org.apache.commons.math3.linear.RealMatrix r1, r2, $r4, $r6;
        org.apache.commons.math3.linear.DecompositionSolver r3;
        org.apache.commons.math3.linear.QRDecomposition $r5;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealMatrix getJacobian()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix transpose()>();

        r2 = interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix multiply(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r5 = new org.apache.commons.math3.linear.QRDecomposition;

        specialinvoke $r5.<org.apache.commons.math3.linear.QRDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix,double)>(r2, d0);

        r3 = virtualinvoke $r5.<org.apache.commons.math3.linear.QRDecomposition: org.apache.commons.math3.linear.DecompositionSolver getSolver()>();

        $r6 = interfaceinvoke r3.<org.apache.commons.math3.linear.DecompositionSolver: org.apache.commons.math3.linear.RealMatrix getInverse()>();

        return $r6;
    }

    public org.apache.commons.math3.linear.RealVector getSigma(double)
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double d0, $d1, $d2;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1;
        org.apache.commons.math3.linear.ArrayRealVector $r3;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        d0 := @parameter0: double;

        r1 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealMatrix getCovariances(double)>(d0);

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        $r3 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r3.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d1);

        virtualinvoke $r3.<org.apache.commons.math3.linear.RealVector: void setEntry(int,double)>(i1, $d2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public double getRMS()
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        double d0, $d1, $d2, $d3, $d4;
        int $i0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        d0 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: double getCost()>();

        $d2 = d0 * d0;

        $i0 = r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: int observationSize>;

        $d1 = (double) $i0;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        return $d4;
    }

    public double getCost()
    {
        org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation r0;
        org.apache.commons.math3.linear.ArrayRealVector $r2;
        org.apache.commons.math3.linear.RealVector $r3;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation;

        $r2 = new org.apache.commons.math3.linear.ArrayRealVector;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.fitting.leastsquares.AbstractEvaluation: org.apache.commons.math3.linear.RealVector getResiduals()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(org.apache.commons.math3.linear.RealVector)>($r3);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.linear.ArrayRealVector: double dotProduct(org.apache.commons.math3.linear.RealVector)>($r2);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d1;
    }
}
