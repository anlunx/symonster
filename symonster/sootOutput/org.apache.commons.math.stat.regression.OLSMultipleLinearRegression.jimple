public class org.apache.commons.math.stat.regression.OLSMultipleLinearRegression extends org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression
{
    private org.apache.commons.math.linear.QRDecomposition qr;

    public void <init>()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        specialinvoke r0.<org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression: void <init>()>();

        r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr> = null;

        return;
    }

    public void newSampleData(double[], double[][])
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        double[] r1;
        double[][] r2;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: void validateSampleData(double[][],double[])>(r2, r1);

        virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: void newYSampleData(double[])>(r1);

        virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: void newXSampleData(double[][])>(r2);

        return;
    }

    public void newSampleData(double[], int, int)
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        double[] r1;
        int i0, i1;
        org.apache.commons.math.linear.QRDecompositionImpl $r2;
        org.apache.commons.math.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression: void newSampleData(double[],int,int)>(r1, i0, i1);

        $r2 = new org.apache.commons.math.linear.QRDecompositionImpl;

        $r3 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        specialinvoke $r2.<org.apache.commons.math.linear.QRDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr> = $r2;

        return;
    }

    public org.apache.commons.math.linear.RealMatrix calculateHat()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math.linear.RealMatrix r1, $r6, $r8, $r9, $r10;
        int i0, i1, i2, i3;
        double[][] r3;
        org.apache.commons.math.linear.QRDecomposition $r4, $r5;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r7;
        double[] $r11, $r12;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $r4 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr>;

        r1 = interfaceinvoke $r4.<org.apache.commons.math.linear.QRDecomposition: org.apache.commons.math.linear.RealMatrix getQ()>();

        $r5 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math.linear.QRDecomposition: org.apache.commons.math.linear.RealMatrix getR()>();

        i0 = interfaceinvoke $r6.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r7 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        specialinvoke $r7.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(int,int)>(i1, i1);

        r3 = virtualinvoke $r7.<org.apache.commons.math.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label6;

        i3 = 0;

     label2:
        if i3 >= i1 goto label5;

        if i2 != i3 goto label3;

        if i2 >= i0 goto label3;

        $r12 = r3[i2];

        $r12[i3] = 1.0;

        goto label4;

     label3:
        $r11 = r3[i2];

        $r11[i3] = 0.0;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r8 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r7);

        $r9 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix transpose()>();

        $r10 = interfaceinvoke $r8.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r9);

        return $r10;
    }

    public double calculateTotalSumOfSquares()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        boolean $z0;
        org.apache.commons.math.stat.descriptive.moment.SecondMoment $r1;
        org.apache.commons.math.linear.RealVector $r2, $r4;
        double[] $r3, $r5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: boolean isNoIntercept()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealVector Y>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $d1 = staticinvoke <org.apache.commons.math.stat.StatUtils: double sumSq(double[])>($r5);

        return $d1;

     label1:
        $r1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment;

        specialinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.SecondMoment: void <init>()>();

        $r2 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealVector Y>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $d0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.SecondMoment: double evaluate(double[])>($r3);

        return $d0;
    }

    public double calculateResidualSumOfSquares()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math.linear.RealVector r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        r1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealVector calculateResiduals()>();

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        return $d0;
    }

    public double calculateRSquared()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: double calculateResidualSumOfSquares()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: double calculateTotalSumOfSquares()>();

        $d2 = $d0 / $d1;

        $d3 = 1.0 - $d2;

        return $d3;
    }

    public double calculateAdjustedRSquared()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r3;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $r1 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        $i0 = interfaceinvoke $r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        d0 = (double) $i0;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: boolean isNoIntercept()>();

        if $z0 == 0 goto label1;

        $d10 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: double calculateRSquared()>();

        $d11 = 1.0 - $d10;

        $r3 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        $i2 = interfaceinvoke $r3.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $d12 = (double) $i2;

        $d13 = d0 - $d12;

        $d14 = d0 / $d13;

        $d15 = $d11 * $d14;

        $d16 = 1.0 - $d15;

        return $d16;

     label1:
        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: double calculateResidualSumOfSquares()>();

        $d2 = d0 - 1.0;

        $d3 = $d1 * $d2;

        $d4 = virtualinvoke r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: double calculateTotalSumOfSquares()>();

        $r2 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        $i1 = interfaceinvoke $r2.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $d5 = (double) $i1;

        $d6 = d0 - $d5;

        $d7 = $d4 * $d6;

        $d8 = $d3 / $d7;

        $d9 = 1.0 - $d8;

        return $d9;
    }

    protected void newXSampleData(double[][])
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        double[][] r1;
        org.apache.commons.math.linear.QRDecompositionImpl $r2;
        org.apache.commons.math.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math.stat.regression.AbstractMultipleLinearRegression: void newXSampleData(double[][])>(r1);

        $r2 = new org.apache.commons.math.linear.QRDecompositionImpl;

        $r3 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        specialinvoke $r2.<org.apache.commons.math.linear.QRDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r3);

        r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr> = $r2;

        return;
    }

    protected org.apache.commons.math.linear.RealVector calculateBeta()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        org.apache.commons.math.linear.QRDecomposition $r1;
        org.apache.commons.math.linear.DecompositionSolver $r2;
        org.apache.commons.math.linear.RealVector $r3, $r4;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $r1 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr>;

        $r2 = interfaceinvoke $r1.<org.apache.commons.math.linear.QRDecomposition: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        $r3 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealVector Y>;

        $r4 = interfaceinvoke $r2.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealVector solve(org.apache.commons.math.linear.RealVector)>($r3);

        return $r4;
    }

    protected org.apache.commons.math.linear.RealMatrix calculateBetaVariance()
    {
        org.apache.commons.math.stat.regression.OLSMultipleLinearRegression r0;
        int i0, $i1, $i2;
        org.apache.commons.math.linear.RealMatrix r1, r2, $r3, $r5, $r8, $r9;
        org.apache.commons.math.linear.QRDecomposition $r4;
        org.apache.commons.math.linear.LUDecompositionImpl $r6;
        org.apache.commons.math.linear.DecompositionSolver $r7;

        r0 := @this: org.apache.commons.math.stat.regression.OLSMultipleLinearRegression;

        $r3 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.RealMatrix X>;

        i0 = interfaceinvoke $r3.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r4 = r0.<org.apache.commons.math.stat.regression.OLSMultipleLinearRegression: org.apache.commons.math.linear.QRDecomposition qr>;

        $r5 = interfaceinvoke $r4.<org.apache.commons.math.linear.QRDecomposition: org.apache.commons.math.linear.RealMatrix getR()>();

        $i2 = i0 - 1;

        $i1 = i0 - 1;

        r1 = interfaceinvoke $r5.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix getSubMatrix(int,int,int,int)>(0, $i2, 0, $i1);

        $r6 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r6.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>(r1);

        $r7 = virtualinvoke $r6.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r2 = interfaceinvoke $r7.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix getInverse()>();

        $r8 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix transpose()>();

        $r9 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r8);

        return $r9;
    }
}
