public class com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction extends java.lang.Object
{
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double price(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN spot; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "negative/NaN lognormalVol; have {}", $r6);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "interestRate is NaN");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "costOfCarry is NaN");

        $d8 = d0 / d1;

        $d9 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $d10 = 0.5 * d3;

        $d11 = $d10 * d3;

        $d12 = d5 - $d11;

        $d13 = $d12 * d2;

        $d14 = $d9 + $d13;

        $d15 = $d14 / d3;

        $d16 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d6 = $d15 / $d16;

        if z0 == 0 goto label09;

        $d23 = 1.0;

        goto label10;

     label09:
        $d23 = -1.0;

     label10:
        $d17 = neg d4;

        $d18 = $d17 * d2;

        $d19 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d20 = $d23 * d6;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d20);

        $d21 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r9);

        $d22 = $d19 * $d21;

        return $d22;
    }

    public static double delta(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN spot; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "negative/NaN lognormalVol; have {}", $r6);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "interestRate is NaN");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "costOfCarry is NaN");

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d6 = d3 * $d9;

        $d10 = d0 / d1;

        $d11 = staticinvoke <java.lang.Math: double log(double)>($d10);

        $d12 = 0.5 * d3;

        $d13 = $d12 * d3;

        $d14 = d5 - $d13;

        $d15 = $d14 * d2;

        $d16 = $d11 + $d15;

        d7 = $d16 / d6;

        if z0 == 0 goto label09;

        $d25 = 1.0;

        goto label10;

     label09:
        $d25 = -1.0;

     label10:
        $d17 = neg d4;

        $d18 = $d17 * d2;

        $d19 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $d20 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d21 = $d25 * $d20;

        $d22 = $d21 / d0;

        $d23 = $d22 / d6;

        $d24 = $d19 * $d23;

        return $d24;
    }

    public static double gamma(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN spot; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "negative/NaN lognormalVol; have {}", $r6);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "interestRate is NaN");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "costOfCarry is NaN");

        $d9 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d6 = d3 * $d9;

        $d10 = d0 / d1;

        $d11 = staticinvoke <java.lang.Math: double log(double)>($d10);

        $d12 = 0.5 * d3;

        $d13 = $d12 * d3;

        $d14 = d5 - $d13;

        $d15 = $d14 * d2;

        $d16 = $d11 + $d15;

        d7 = $d16 / d6;

        if z0 == 0 goto label09;

        $d30 = 1.0;

        goto label10;

     label09:
        $d30 = -1.0;

     label10:
        $d19 = neg $d30;

        $d17 = neg d4;

        $d18 = $d17 * d2;

        $d20 = staticinvoke <java.lang.Math: double exp(double)>($d18);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $d21 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d24 = $d20 * $d21;

        $d22 = d7 / d6;

        $d23 = 1.0 + $d22;

        $d25 = $d24 * $d23;

        $d26 = $d25 / d0;

        $d27 = $d26 / d0;

        $d28 = $d27 / d6;

        $d29 = $d19 * $d28;

        return $d29;
    }

    public static double theta(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9, $r11;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8, $r10;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN spot; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "negative/NaN lognormalVol; have {}", $r6);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "interestRate is NaN");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "costOfCarry is NaN");

        $d9 = d0 / d1;

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $d11 = 0.5 * d3;

        $d12 = $d11 * d3;

        $d13 = d5 - $d12;

        $d14 = $d13 * d2;

        $d15 = $d10 + $d14;

        $d16 = $d15 / d3;

        $d17 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d6 = $d16 / $d17;

        if z0 == 0 goto label09;

        $d45 = 1.0;

        goto label10;

     label09:
        $d45 = -1.0;

     label10:
        $d18 = d0 / d1;

        $d19 = staticinvoke <java.lang.Math: double log(double)>($d18);

        $d20 = neg $d19;

        $d21 = staticinvoke <java.lang.Math: double pow(double,double)>(d2, 1.5);

        $d24 = $d20 / $d21;

        $d22 = 0.5 * d3;

        $d23 = $d22 * d3;

        $d25 = d5 - $d23;

        $d26 = staticinvoke <java.lang.Math: double pow(double,double)>(d2, 0.5);

        $d27 = $d25 / $d26;

        $d28 = $d24 + $d27;

        $d29 = 0.5 * $d28;

        d8 = $d29 / d3;

        $d30 = neg d4;

        $d31 = $d30 * d2;

        $d32 = staticinvoke <java.lang.Math: double exp(double)>($d31);

        $d34 = d4 * $d32;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d33 = $d45 * d6;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d33);

        $d35 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r9);

        $d38 = $d34 * $d35;

        $d36 = neg d4;

        $d37 = $d36 * d2;

        $d39 = staticinvoke <java.lang.Math: double exp(double)>($d37);

        $d40 = $d45 * $d39;

        $r10 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        $d41 = interfaceinvoke $r10.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r11);

        $d42 = $d40 * $d41;

        $d43 = $d42 * d8;

        $d44 = $d38 - $d43;

        return $d44;
    }

    public static double driftlessTheta(double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;
        boolean z0, $z1, $z2, $z3, $z4;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        z0 := @parameter4: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "negative/NaN forward; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z2, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN lognormalVol; have {}", $r6);

        $d8 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        d4 = d3 * $d8;

        $d9 = d0 / d1;

        $d10 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $d12 = $d10 / d4;

        $d11 = 0.5 * d4;

        d5 = $d12 - $d11;

        if z0 == 0 goto label09;

        $d27 = 1.0;

        goto label10;

     label09:
        $d27 = -1.0;

     label10:
        $d13 = d0 / d1;

        $d14 = staticinvoke <java.lang.Math: double log(double)>($d13);

        $d15 = neg $d14;

        $d16 = staticinvoke <java.lang.Math: double pow(double,double)>(d2, 1.5);

        $d17 = $d15 / $d16;

        $d18 = $d17 / d3;

        $d19 = 0.5 * d3;

        $d20 = staticinvoke <java.lang.Math: double pow(double,double)>(d2, 0.5);

        $d21 = $d19 / $d20;

        $d22 = $d18 - $d21;

        d7 = 0.5 * $d22;

        $d23 = neg $d27;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        $d24 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d25 = $d23 * $d24;

        $d26 = $d25 * d7;

        return $d26;
    }

    public static double vega(double, double, double, double, double, double, boolean)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3;
        java.lang.Object[] $r0, $r2, $r4, $r6;
        java.lang.Double $r1, $r3, $r5, $r7, $r9;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label01;

        $z3 = 1;

        goto label02;

     label01:
        $z3 = 0;

     label02:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r0[0] = $r1;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z3, "negative/NaN spot; have {}", $r0);

        $b1 = d1 cmpl 0.0;

        if $b1 <= 0 goto label03;

        $z4 = 1;

        goto label04;

     label03:
        $z4 = 0;

     label04:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r2[0] = $r3;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "negative/NaN strike; have {}", $r2);

        $b2 = d2 cmpl 0.0;

        if $b2 <= 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r4[0] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "negative/NaN timeToExpiry; have {}", $r4);

        $b3 = d3 cmpl 0.0;

        if $b3 <= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        $r6[0] = $r7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "negative/NaN lognormalVol; have {}", $r6);

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "interestRate is NaN");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "costOfCarry is NaN");

        d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d2);

        $d10 = d0 / d1;

        $d11 = staticinvoke <java.lang.Math: double log(double)>($d10);

        $d12 = 0.5 * d3;

        $d13 = $d12 * d3;

        $d14 = d5 - $d13;

        $d15 = $d14 * d2;

        $d16 = $d11 + $d15;

        $d17 = $d16 / d3;

        d7 = $d17 / d6;

        if z0 == 0 goto label09;

        $d34 = 1.0;

        goto label10;

     label09:
        $d34 = -1.0;

     label10:
        $d18 = d0 / d1;

        $d19 = staticinvoke <java.lang.Math: double log(double)>($d18);

        $d20 = d5 * d2;

        $d21 = $d19 + $d20;

        $d22 = neg $d21;

        $d23 = $d22 / d3;

        $d24 = $d23 / d3;

        $d26 = $d24 / d6;

        $d25 = 0.5 * d6;

        d9 = $d26 - $d25;

        $d27 = neg d4;

        $d28 = $d27 * d2;

        $d29 = staticinvoke <java.lang.Math: double exp(double)>($d28);

        $d30 = $d34 * $d29;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d7);

        $d31 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d32 = $d30 * $d31;

        $d33 = $d32 * d9;

        return $d33;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r0;

        $r0 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.formula.DigitalOptionFunction: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL> = $r0;

        return;
    }
}
