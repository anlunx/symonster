public class org.apache.commons.math3.linear.NonSymmetricMatrixException extends org.apache.commons.math3.exception.MathIllegalArgumentException
{
    private static final long serialVersionUID;
    private final int row;
    private final int column;
    private final double threshold;

    public void <init>(int, int, double)
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int i0, i1;
        double d0;
        java.lang.Object[] $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;
        java.lang.Double $r5;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NON_SYMMETRIC_MATRIX>;

        $r1 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[2] = $r5;

        specialinvoke r0.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int row> = i0;

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int column> = i1;

        r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: double threshold> = d0;

        return;
    }

    public int getRow()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        $i0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int row>;

        return $i0;
    }

    public int getColumn()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        $i0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: int column>;

        return $i0;
    }

    public double getThreshold()
    {
        org.apache.commons.math3.linear.NonSymmetricMatrixException r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.NonSymmetricMatrixException;

        $d0 = r0.<org.apache.commons.math3.linear.NonSymmetricMatrixException: double threshold>;

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.NonSymmetricMatrixException: long serialVersionUID> = -7518495577824189882L;

        return;
    }
}
