class org.apache.commons.math3.analysis.FunctionUtils$16$1 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
{
    final int val$k;
    final org.apache.commons.math3.analysis.FunctionUtils$16 this$0;

    void <init>(org.apache.commons.math3.analysis.FunctionUtils$16, int)
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$1 r0;
        org.apache.commons.math3.analysis.FunctionUtils$16 r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$1;

        r1 := @parameter0: org.apache.commons.math3.analysis.FunctionUtils$16;

        i0 := @parameter1: int;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: org.apache.commons.math3.analysis.FunctionUtils$16 this$0> = r1;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: int val$k> = i0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double value(double[])
    {
        org.apache.commons.math3.analysis.FunctionUtils$16$1 r0;
        double[] r1;
        int i0, $i1, i2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r3;
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction $r4;
        int[] $r5;
        double $d0, $d1, $d2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure $r6, $r7, r8;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$16$1;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        r2 = newarray (org.apache.commons.math3.analysis.differentiation.DerivativeStructure)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $i1 = r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: int val$k>;

        if i2 != $i1 goto label2;

        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d2 = r1[i2];

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,int,double)>(1, 1, 0, $d2);

        r2[i2] = $r7;

        goto label3;

     label2:
        $r6 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = r1[i2];

        specialinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>(1, 1, $d1);

        r2[i2] = $r6;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r3 = r0.<org.apache.commons.math3.analysis.FunctionUtils$16$1: org.apache.commons.math3.analysis.FunctionUtils$16 this$0>;

        $r4 = $r3.<org.apache.commons.math3.analysis.FunctionUtils$16: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction val$f>;

        r8 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r2);

        $r5 = newarray (int)[1];

        $r5[0] = 1;

        $d0 = virtualinvoke r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>($r5);

        return $d0;
    }
}
