public class org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest extends java.lang.Object
{
    protected static final int MAXIMUM_PARTIAL_SUM_COUNT;
    protected static final double KS_SUM_CAUCHY_CRITERION;
    protected static final double PG_SUM_RELATIVE_ERROR;
    protected static final int SMALL_SAMPLE_PRODUCT;
    protected static final int LARGE_SAMPLE_PRODUCT;
    protected static final int MONTE_CARLO_ITERATIONS;
    private final org.apache.commons.math3.random.RandomGenerator rng;

    public void <init>()
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng> = r1;

        return;
    }

    public double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2;
        boolean z0;
        double $d0, $d1, $d2;
        int $i0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution,double[])>(r1, r2);

        $i0 = lengthof r2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>($d0, $i0, z0);

        $d2 = 1.0 - $d1;

        return $d2;
    }

    public double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution, double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2, r3;
        int i0, $i1, $i2, i4;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>(r2);

        i0 = lengthof r2;

        d0 = (double) i0;

        r3 = newarray (double)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);

        staticinvoke <java.util.Arrays: void sort(double[])>(r3);

        d10 = 0.0;

        i4 = 1;

     label1:
        if i4 > i0 goto label3;

        $i1 = i4 - 1;

        $d3 = r3[$i1];

        d1 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double cumulativeProbability(double)>($d3);

        $i2 = i4 - 1;

        $d4 = (double) $i2;

        $d5 = $d4 / d0;

        $d9 = d1 - $d5;

        $d6 = (double) i4;

        $d7 = $d6 / d0;

        $d8 = $d7 - d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d9, $d8);

        $b3 = d2 cmpl d10;

        if $b3 <= 0 goto label2;

        d10 = d2;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return d10;
    }

    public double kolmogorovSmirnovTest(double[], double[], boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] r1, r2;
        boolean z0;
        long l0, $l3, $l4;
        int $i1, $i2, $i7, $i8, $i9, $i10, $i11, $i12;
        byte $b5, $b6;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $i1 = lengthof r1;

        $l4 = (long) $i1;

        $i2 = lengthof r2;

        $l3 = (long) $i2;

        l0 = $l4 * $l3;

        $b5 = l0 cmp 200L;

        if $b5 >= 0 goto label1;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r1, r2);

        $i12 = lengthof r1;

        $i11 = lengthof r2;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double exactP(double,int,int,boolean)>($d4, $i12, $i11, z0);

        return $d5;

     label1:
        $b6 = l0 cmp 10000L;

        if $b6 >= 0 goto label2;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r1, r2);

        $i10 = lengthof r1;

        $i9 = lengthof r2;

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double monteCarloP(double,int,int,boolean,int)>($d2, $i10, $i9, z0, 1000000);

        return $d3;

     label2:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r1, r2);

        $i8 = lengthof r1;

        $i7 = lengthof r2;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double approximateP(double,int,int)>($d0, $i8, $i7);

        return $d1;
    }

    public double kolmogorovSmirnovTest(double[], double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] r1, r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(double[],double[],boolean)>(r1, r2, 1);

        return $d0;
    }

    public double kolmogorovSmirnovStatistic(double[], double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] r1, r2, r3, r4;
        int i0, i1, $i2, $i4, i6, i7, i8, i9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23, $d24, d26, d27, $d28, d30;
        byte $b3, $b5;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void checkArray(double[])>(r2);

        r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>(r1);

        r4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>(r2);

        staticinvoke <java.util.Arrays: void sort(double[])>(r3);

        staticinvoke <java.util.Arrays: void sort(double[])>(r4);

        i0 = lengthof r3;

        i1 = lengthof r4;

        d22 = 0.0;

        i6 = 0;

     label01:
        if i6 >= i0 goto label05;

        $d11 = (double) i6;

        $d13 = $d11 + 1.0;

        $d12 = (double) i0;

        d23 = $d13 / $d12;

        $d14 = r3[i6];

        i7 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r4, $d14);

        if i7 < 0 goto label02;

        $d19 = (double) i7;

        $d21 = $d19 + 1.0;

        $d20 = (double) i1;

        $d24 = $d21 / $d20;

        goto label03;

     label02:
        $i4 = neg i7;

        $d15 = (double) $i4;

        $d17 = $d15 - 1.0;

        $d16 = (double) i1;

        $d24 = $d17 / $d16;

     label03:
        $d18 = d23 - $d24;

        d26 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d18);

        $b5 = d26 cmpl d22;

        if $b5 <= 0 goto label04;

        d22 = d26;

     label04:
        i6 = i6 + 1;

        goto label01;

     label05:
        i8 = 0;

     label06:
        if i8 >= i1 goto label10;

        $d0 = (double) i8;

        $d2 = $d0 + 1.0;

        $d1 = (double) i1;

        d27 = $d2 / $d1;

        $d3 = r4[i8];

        i9 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r3, $d3);

        if i9 < 0 goto label07;

        $d8 = (double) i9;

        $d10 = $d8 + 1.0;

        $d9 = (double) i0;

        $d28 = $d10 / $d9;

        goto label08;

     label07:
        $i2 = neg i9;

        $d4 = (double) $i2;

        $d6 = $d4 - 1.0;

        $d5 = (double) i0;

        $d28 = $d6 / $d5;

     label08:
        $d7 = $d28 - d27;

        d30 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d7);

        $b3 = d30 cmpl d22;

        if $b3 <= 0 goto label09;

        d22 = d30;

     label09:
        i8 = i8 + 1;

        goto label06;

     label10:
        return d22;
    }

    public double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r2 := @parameter1: double[];

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[],boolean)>(r1, r2, 0);

        return $d0;
    }

    public boolean kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], double)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double[] r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public double cdf(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, $d1;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>(d0, i0, 0);

        return $d1;
    }

    public double cdfExact(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, $d1;
        int i0;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double cdf(double,int,boolean)>(d0, i0, 1);

        return $d1;
    }

    public double cdf(double, int, boolean) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17;
        int i0, i7;
        boolean z0;
        byte $b1, $b2, $b3, $b4, $b5, $b6;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $d4 = (double) i0;

        d1 = 1.0 / $d4;

        d2 = 0.5 * d1;

        $b1 = d0 cmpg d2;

        if $b1 > 0 goto label1;

        return 0.0;

     label1:
        $b2 = d2 cmpg d0;

        if $b2 >= 0 goto label4;

        $b6 = d0 cmpg d1;

        if $b6 > 0 goto label4;

        d17 = 1.0;

        $d14 = 2.0 * d0;

        d3 = $d14 - d1;

        i7 = 1;

     label2:
        if i7 > i0 goto label3;

        $d15 = (double) i7;

        $d16 = $d15 * d3;

        d17 = d17 * $d16;

        i7 = i7 + 1;

        goto label2;

     label3:
        return d17;

     label4:
        $d5 = 1.0 - d1;

        $b3 = $d5 cmpg d0;

        if $b3 > 0 goto label5;

        $b5 = d0 cmpg 1.0;

        if $b5 >= 0 goto label5;

        $d10 = 1.0 - d0;

        $d9 = (double) i0;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>($d10, $d9);

        $d12 = 2.0 * $d11;

        $d13 = 1.0 - $d12;

        return $d13;

     label5:
        $b4 = 1.0 cmpg d0;

        if $b4 > 0 goto label6;

        return 1.0;

     label6:
        if z0 == 0 goto label7;

        $d8 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double exactK(double,int)>(d0, i0);

        return $d8;

     label7:
        if i0 > 140 goto label8;

        $d7 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double roundedK(double,int)>(d0, i0);

        return $d7;

     label8:
        $d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double pelzGood(double,int)>(d0, i0);

        return $d6;
    }

    private double exactK(double, int) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, $d1, $d2, $d3, $d4;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math3.linear.FieldMatrix r1, r2;
        org.apache.commons.math3.FieldElement $r3;
        java.math.BigDecimal $r4;
        org.apache.commons.math3.fraction.BigFraction $r5, r6;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = (double) i0;

        $d2 = $d1 * d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        i1 = (int) $d3;

        r1 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.linear.FieldMatrix createExactH(double,int)>(d0, i0);

        r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.linear.FieldMatrix power(int)>(i0);

        $i3 = i1 - 1;

        $i2 = i1 - 1;

        $r3 = interfaceinvoke r2.<org.apache.commons.math3.linear.FieldMatrix: org.apache.commons.math3.FieldElement getEntry(int,int)>($i3, $i2);

        r6 = (org.apache.commons.math3.fraction.BigFraction) $r3;

        i4 = 1;

     label1:
        if i4 > i0 goto label2;

        $r5 = virtualinvoke r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(i4);

        r6 = virtualinvoke $r5.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>(i0);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke r6.<org.apache.commons.math3.fraction.BigFraction: java.math.BigDecimal bigDecimalValue(int,int)>(20, 4);

        $d4 = virtualinvoke $r4.<java.math.BigDecimal: double doubleValue()>();

        return $d4;
    }

    private double roundedK(double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math3.linear.RealMatrix r1, r2;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = (double) i0;

        $d2 = $d1 * d0;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        i1 = (int) $d3;

        r1 = specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.linear.RealMatrix createRoundedH(double,int)>(d0, i0);

        r2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: org.apache.commons.math3.linear.RealMatrix power(int)>(i0);

        $i3 = i1 - 1;

        $i2 = i1 - 1;

        d7 = interfaceinvoke r2.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>($i3, $i2);

        i4 = 1;

     label1:
        if i4 > i0 goto label2;

        $d5 = (double) i4;

        $d4 = (double) i0;

        $d6 = $d5 / $d4;

        d7 = d7 * $d6;

        i4 = i4 + 1;

        goto label1;

     label2:
        return d7;
    }

    public double pelzGood(double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, d121, d124, d125, d126, d127, d128, d131, d132, d133, d134, d135, d136, d139, d140, d141, d142, d144, d145, d146, d147, d150, d151, d152, d153, d154, d155, d156, d157, d158;
        int i0, $i1, $i4, $i8, $i9, i11, i12, i13, i14, i15, i16;
        org.apache.commons.math3.exception.TooManyIterationsException $r1, $r3, $r5, $r7, $r9, $r11;
        java.lang.Integer $r2, $r4, $r6, $r8, $r10, $r12;
        byte $b2, $b3, $b5, $b6, $b7, $b10;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d13 = (double) i0;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d13);

        d2 = d0 * d1;

        $d15 = d0 * d0;

        $d14 = (double) i0;

        d3 = $d15 * $d14;

        d4 = d3 * d3;

        d5 = d4 * d3;

        d6 = d4 * d4;

        d121 = 0.0;

        $d16 = 8.0 * d3;

        d124 = 9.869604401089358 / $d16;

        i11 = 1;

     label01:
        if i11 >= 100000 goto label03;

        $i8 = 2 * i11;

        $i9 = $i8 - 1;

        d125 = (double) $i9;

        $d116 = neg d124;

        $d117 = $d116 * d125;

        $d118 = $d117 * d125;

        d126 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d118);

        d121 = d121 + d126;

        $d119 = 1.0E-10 * d121;

        $b10 = d126 cmpg $d119;

        if $b10 > 0 goto label02;

        goto label03;

     label02:
        i11 = i11 + 1;

        goto label01;

     label03:
        if i11 != 100000 goto label04;

        $r11 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r11.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r12);

        throw $r11;

     label04:
        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.283185307179586);

        $d18 = d121 * $d17;

        d127 = $d18 / d2;

        d7 = 2.0 * d3;

        d128 = 0.0;

        i12 = 0;

     label05:
        if i12 >= 100000 goto label07;

        $d107 = (double) i12;

        d131 = $d107 + 0.5;

        d132 = d131 * d131;

        $d108 = 9.869604401089358 * d132;

        $d111 = $d108 - d3;

        $d109 = -9.869604401089358 * d132;

        $d110 = $d109 / d7;

        $d112 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d110);

        d133 = $d111 * $d112;

        d128 = d128 + d133;

        $d113 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d133);

        $d114 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d128);

        $d115 = 1.0E-10 * $d114;

        $b7 = $d113 cmpg $d115;

        if $b7 >= 0 goto label06;

        goto label07;

     label06:
        i12 = i12 + 1;

        goto label05;

     label07:
        if i12 != 100000 goto label08;

        $r9 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r9.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r10);

        throw $r9;

     label08:
        d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(1.5707963267948966);

        $d21 = d128 * d8;

        $d19 = 3.0 * d4;

        $d20 = $d19 * d1;

        $d22 = $d21 / $d20;

        d134 = d127 + $d22;

        d9 = 2.0 * d4;

        d10 = 6.0 * d5;

        d135 = 5.0 * d3;

        d136 = 0.0;

        i13 = 0;

     label09:
        if i13 >= 100000 goto label11;

        $d90 = (double) i13;

        d139 = $d90 + 0.5;

        d140 = d139 * d139;

        $d94 = d10 + d9;

        $d91 = d9 - d135;

        $d92 = 9.869604401089358 * $d91;

        $d93 = $d92 * d140;

        $d99 = $d94 + $d93;

        $d95 = 1.0 - d7;

        $d96 = 97.40909103400243 * $d95;

        $d97 = $d96 * d140;

        $d98 = $d97 * d140;

        $d102 = $d99 + $d98;

        $d100 = -9.869604401089358 * d140;

        $d101 = $d100 / d7;

        $d103 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d101);

        d141 = $d102 * $d103;

        d136 = d136 + d141;

        $d104 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d141);

        $d105 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d136);

        $d106 = 1.0E-10 * $d105;

        $b6 = $d104 cmpg $d106;

        if $b6 >= 0 goto label10;

        goto label11;

     label10:
        i13 = i13 + 1;

        goto label09;

     label11:
        if i13 != 100000 goto label12;

        $r7 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r7.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r8);

        throw $r7;

     label12:
        d142 = 0.0;

        i14 = 1;

     label13:
        if i14 >= 100000 goto label15;

        $i4 = i14 * i14;

        d144 = (double) $i4;

        $d85 = 9.869604401089358 * d144;

        $d83 = -9.869604401089358 * d144;

        $d84 = $d83 / d7;

        $d86 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d84);

        d145 = $d85 * $d86;

        d142 = d142 + d145;

        $d87 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d145);

        $d88 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d142);

        $d89 = 1.0E-10 * $d88;

        $b5 = $d87 cmpg $d89;

        if $b5 >= 0 goto label14;

        goto label15;

     label14:
        i14 = i14 + 1;

        goto label13;

     label15:
        if i14 != 100000 goto label16;

        $r5 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r5.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r6);

        throw $r5;

     label16:
        $d23 = (double) i0;

        $d33 = d8 / $d23;

        $d24 = 36.0 * d3;

        $d25 = $d24 * d3;

        $d26 = $d25 * d3;

        $d27 = $d26 * d2;

        $d31 = d136 / $d27;

        $d28 = 18.0 * d3;

        $d29 = $d28 * d2;

        $d30 = d142 / $d29;

        $d32 = $d31 - $d30;

        $d34 = $d33 * $d32;

        d146 = d134 + $d34;

        d147 = 0.0;

        i15 = 0;

     label17:
        if i15 >= 100000 goto label19;

        $d56 = (double) i15;

        d150 = $d56 + 0.5;

        d151 = d150 * d150;

        d152 = d151 * d151;

        d153 = d152 * d151;

        $d59 = 961.3891935753043 * d153;

        $d57 = 30.0 * d3;

        $d58 = 5.0 - $d57;

        $d65 = $d59 * $d58;

        $d63 = 97.40909103400243 * d152;

        $d61 = -60.0 * d3;

        $d60 = 212.0 * d4;

        $d62 = $d61 + $d60;

        $d64 = $d63 * $d62;

        $d71 = $d65 + $d64;

        $d69 = 9.869604401089358 * d151;

        $d67 = 135.0 * d4;

        $d66 = 96.0 * d5;

        $d68 = $d67 - $d66;

        $d70 = $d69 * $d68;

        $d73 = $d71 + $d70;

        $d72 = 30.0 * d5;

        $d75 = $d73 - $d72;

        $d74 = 90.0 * d6;

        $d78 = $d75 - $d74;

        $d76 = -9.869604401089358 * d151;

        $d77 = $d76 / d7;

        $d79 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d77);

        d154 = $d78 * $d79;

        d147 = d147 + d154;

        $d80 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d154);

        $d81 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d147);

        $d82 = 1.0E-10 * $d81;

        $b3 = $d80 cmpg $d82;

        if $b3 >= 0 goto label18;

        goto label19;

     label18:
        i15 = i15 + 1;

        goto label17;

     label19:
        if i15 != 100000 goto label20;

        $r3 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r3.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label20:
        d155 = 0.0;

        i16 = 1;

     label21:
        if i16 >= 100000 goto label23;

        $i1 = i16 * i16;

        d156 = (double) $i1;

        d157 = d156 * d156;

        $d48 = -97.40909103400243 * d157;

        $d46 = 29.608813203268074 * d156;

        $d47 = $d46 * d3;

        $d51 = $d48 + $d47;

        $d49 = -9.869604401089358 * d156;

        $d50 = $d49 / d7;

        $d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d50);

        d158 = $d51 * $d52;

        d155 = d155 + d158;

        $d53 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d158);

        $d54 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d155);

        $d55 = 1.0E-10 * $d54;

        $b2 = $d53 cmpg $d55;

        if $b2 >= 0 goto label22;

        goto label23;

     label22:
        i16 = i16 + 1;

        goto label21;

     label23:
        if i16 != 100000 goto label24;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100000);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label24:
        $d35 = (double) i0;

        $d36 = d1 * $d35;

        $d43 = d8 / $d36;

        $d37 = 3240.0 * d5;

        $d38 = $d37 * d4;

        $d41 = d147 / $d38;

        $d39 = 108.0 * d5;

        $d40 = d155 / $d39;

        $d42 = $d41 + $d40;

        $d44 = $d43 * $d42;

        $d45 = d146 + $d44;

        return $d45;
    }

    private org.apache.commons.math3.linear.FieldMatrix createExactH(double, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.fraction.FractionConversionException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25, i26;
        byte $b4;
        org.apache.commons.math3.fraction.BigFraction $r1, $r2, $r6, $r8, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r36, $r38, r39;
        org.apache.commons.math3.linear.Array2DRowFieldMatrix $r3;
        org.apache.commons.math3.fraction.BigFractionField $r4;
        org.apache.commons.math3.fraction.BigFraction[] $r5, $r7, $r9, $r10, $r16, $r19, $r21, $r24, $r29, $r31, r41;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r32;
        java.lang.Double $r33, $r34;
        org.apache.commons.math3.fraction.FractionConversionException $r35, $r37;
        org.apache.commons.math3.fraction.BigFraction[][] r40;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d2 = (double) i0;

        $d3 = $d2 * d0;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i1 = (int) $d4;

        $i3 = 2 * i1;

        i2 = $i3 - 1;

        $d7 = (double) i1;

        $d5 = (double) i0;

        $d6 = $d5 * d0;

        d1 = $d7 - $d6;

        $b4 = d1 cmpl 1.0;

        if $b4 < 0 goto label01;

        $r32 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r34 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r32.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r33, $r34, 0);

        throw $r32;

     label01:
        $r1 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r1.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-20, 10000);

        r39 = $r1;

     label02:
        goto label07;

     label03:
        $r35 := @caughtexception;

     label04:
        $r36 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r36.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-10, 10000);

        r39 = $r36;

     label05:
        goto label07;

     label06:
        $r37 := @caughtexception;

        $r38 = new org.apache.commons.math3.fraction.BigFraction;

        specialinvoke $r38.<org.apache.commons.math3.fraction.BigFraction: void <init>(double,double,int)>(d1, 1.0E-5, 10000);

        r39 = $r38;

     label07:
        r40 = newmultiarray (org.apache.commons.math3.fraction.BigFraction)[i2][i2];

        i20 = 0;

     label08:
        if i20 >= i2 goto label13;

        i21 = 0;

     label09:
        if i21 >= i2 goto label12;

        $i18 = i20 - i21;

        $i19 = $i18 + 1;

        if $i19 >= 0 goto label10;

        $r31 = r40[i20];

        $r30 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ZERO>;

        $r31[i21] = $r30;

        goto label11;

     label10:
        $r29 = r40[i20];

        $r28 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE>;

        $r29[i21] = $r28;

     label11:
        i21 = i21 + 1;

        goto label09;

     label12:
        i20 = i20 + 1;

        goto label08;

     label13:
        r41 = newarray (org.apache.commons.math3.fraction.BigFraction)[i2];

        r41[0] = r39;

        i22 = 1;

     label14:
        if i22 >= i2 goto label15;

        $i17 = i22 - 1;

        $r26 = r41[$i17];

        $r27 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(org.apache.commons.math3.fraction.BigFraction)>($r26);

        r41[i22] = $r27;

        i22 = i22 + 1;

        goto label14;

     label15:
        i23 = 0;

     label16:
        if i23 >= i2 goto label17;

        $r19 = r40[i23];

        $r16 = r40[i23];

        $r18 = $r16[0];

        $r17 = r41[i23];

        $r20 = virtualinvoke $r18.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r17);

        $r19[0] = $r20;

        $i13 = i2 - 1;

        $r24 = r40[$i13];

        $i14 = i2 - 1;

        $r21 = r40[$i14];

        $r23 = $r21[i23];

        $i15 = i2 - i23;

        $i16 = $i15 - 1;

        $r22 = r41[$i16];

        $r25 = virtualinvoke $r23.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(org.apache.commons.math3.fraction.BigFraction)>($r22);

        $r24[i23] = $r25;

        i23 = i23 + 1;

        goto label16;

     label17:
        $r2 = <org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction ONE_HALF>;

        $i5 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: int compareTo(org.apache.commons.math3.fraction.BigFraction)>($r2);

        if $i5 != 1 goto label18;

        $i11 = i2 - 1;

        $r10 = r40[$i11];

        $i12 = i2 - 1;

        $r9 = r40[$i12];

        $r11 = $r9[0];

        $r12 = virtualinvoke r39.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction multiply(int)>(2);

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction subtract(int)>(1);

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction pow(int)>(i2);

        $r15 = virtualinvoke $r11.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction add(org.apache.commons.math3.fraction.BigFraction)>($r14);

        $r10[0] = $r15;

     label18:
        i24 = 0;

     label19:
        if i24 >= i2 goto label24;

        i25 = 0;

     label20:
        $i6 = i24 + 1;

        if i25 >= $i6 goto label23;

        $i7 = i24 - i25;

        $i8 = $i7 + 1;

        if $i8 <= 0 goto label22;

        i26 = 2;

     label21:
        $i9 = i24 - i25;

        $i10 = $i9 + 1;

        if i26 > $i10 goto label22;

        $r7 = r40[i24];

        $r5 = r40[i24];

        $r6 = $r5[i25];

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.fraction.BigFraction: org.apache.commons.math3.fraction.BigFraction divide(int)>(i26);

        $r7[i25] = $r8;

        i26 = i26 + 1;

        goto label21;

     label22:
        i25 = i25 + 1;

        goto label20;

     label23:
        i24 = i24 + 1;

        goto label19;

     label24:
        $r3 = new org.apache.commons.math3.linear.Array2DRowFieldMatrix;

        $r4 = staticinvoke <org.apache.commons.math3.fraction.BigFractionField: org.apache.commons.math3.fraction.BigFractionField getInstance()>();

        specialinvoke $r3.<org.apache.commons.math3.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math3.Field,org.apache.commons.math3.FieldElement[][])>($r4, r40);

        return $r3;

        catch org.apache.commons.math3.fraction.FractionConversionException from label01 to label02 with label03;
        catch org.apache.commons.math3.fraction.FractionConversionException from label04 to label05 with label06;
    }

    private org.apache.commons.math3.linear.RealMatrix createRoundedH(double, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24, i25;
        double[][] r1;
        byte $b4;
        org.apache.commons.math3.linear.RealMatrix $r2;
        double[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, r13;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r10;
        java.lang.Double $r11, $r12;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d2 = (double) i0;

        $d3 = $d2 * d0;

        $d4 = staticinvoke <java.lang.Math: double ceil(double)>($d3);

        i1 = (int) $d4;

        $i3 = 2 * i1;

        i2 = $i3 - 1;

        $d7 = (double) i1;

        $d5 = (double) i0;

        $d6 = $d5 * d0;

        d1 = $d7 - $d6;

        $b4 = d1 cmpl 1.0;

        if $b4 < 0 goto label01;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r11, $r12, 0);

        throw $r10;

     label01:
        r1 = newmultiarray (double)[i2][i2];

        i19 = 0;

     label02:
        if i19 >= i2 goto label07;

        i20 = 0;

     label03:
        if i20 >= i2 goto label06;

        $i17 = i19 - i20;

        $i18 = $i17 + 1;

        if $i18 >= 0 goto label04;

        $r9 = r1[i19];

        $r9[i20] = 0.0;

        goto label05;

     label04:
        $r8 = r1[i19];

        $r8[i20] = 1.0;

     label05:
        i20 = i20 + 1;

        goto label03;

     label06:
        i19 = i19 + 1;

        goto label02;

     label07:
        r13 = newarray (double)[i2];

        r13[0] = d1;

        i21 = 1;

     label08:
        if i21 >= i2 goto label09;

        $i16 = i21 - 1;

        $d22 = r13[$i16];

        $d23 = d1 * $d22;

        r13[i21] = $d23;

        i21 = i21 + 1;

        goto label08;

     label09:
        i22 = 0;

     label10:
        if i22 >= i2 goto label11;

        $r6 = r1[i22];

        $r5 = r1[i22];

        $d17 = $r5[0];

        $d16 = r13[i22];

        $d18 = $d17 - $d16;

        $r6[0] = $d18;

        $i13 = i2 - 1;

        $r7 = r1[$i13];

        $d20 = $r7[i22];

        $i14 = i2 - i22;

        $i15 = $i14 - 1;

        $d19 = r13[$i15];

        $d21 = $d20 - $d19;

        $r7[i22] = $d21;

        i22 = i22 + 1;

        goto label10;

     label11:
        $i5 = staticinvoke <java.lang.Double: int compare(double,double)>(d1, 0.5);

        if $i5 <= 0 goto label12;

        $i11 = i2 - 1;

        $r4 = r1[$i11];

        $d13 = $r4[0];

        $d11 = 2.0 * d1;

        $d12 = $d11 - 1.0;

        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>($d12, i2);

        $d15 = $d13 + $d14;

        $r4[0] = $d15;

     label12:
        i23 = 0;

     label13:
        if i23 >= i2 goto label18;

        i24 = 0;

     label14:
        $i6 = i23 + 1;

        if i24 >= $i6 goto label17;

        $i7 = i23 - i24;

        $i8 = $i7 + 1;

        if $i8 <= 0 goto label16;

        i25 = 2;

     label15:
        $i9 = i23 - i24;

        $i10 = $i9 + 1;

        if i25 > $i10 goto label16;

        $r3 = r1[i23];

        $d9 = $r3[i24];

        $d8 = (double) i25;

        $d10 = $d9 / $d8;

        $r3[i24] = $d10;

        i25 = i25 + 1;

        goto label15;

     label16:
        i24 = i24 + 1;

        goto label14;

     label17:
        i23 = i23 + 1;

        goto label13;

     label18:
        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r1);

        return $r2;
    }

    private void checkArray(double[])
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] r1;
        int $i0, $i1;
        org.apache.commons.math3.exception.InsufficientDataException $r2;
        java.lang.Object[] $r3, $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4, $r9;
        java.lang.Integer $r5, $r6;
        org.apache.commons.math3.exception.NullArgumentException $r7;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NULL_NOT_ALLOWED>;

        $r8 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r7;

     label1:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label2;

        $r2 = new org.apache.commons.math3.exception.InsufficientDataException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE>;

        $r3 = newarray (java.lang.Object)[2];

        $i1 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r3[1] = $r6;

        specialinvoke $r2.<org.apache.commons.math3.exception.InsufficientDataException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        return;
    }

    public double ksSum(double, double, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12;
        int i0, i6;
        byte $b1, $b3, $b5;
        long $l2, $l4, l7;
        org.apache.commons.math3.exception.TooManyIterationsException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $d3 = -2.0 * d0;

        d2 = $d3 * d0;

        i6 = -1;

        l7 = 1L;

        d11 = 0.5;

        d12 = 1.0;

     label1:
        $b1 = d12 cmpl d1;

        if $b1 <= 0 goto label2;

        $l4 = (long) i0;

        $b5 = l7 cmp $l4;

        if $b5 >= 0 goto label2;

        $d5 = (double) l7;

        $d7 = d2 * $d5;

        $d6 = (double) l7;

        $d8 = $d7 * $d6;

        d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d8);

        $d9 = (double) i6;

        $d10 = $d9 * d12;

        d11 = d11 + $d10;

        i6 = i6 * -1;

        l7 = l7 + 1L;

        goto label1;

     label2:
        $l2 = (long) i0;

        $b3 = l7 cmp $l2;

        if $b3 != 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.TooManyIterationsException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.TooManyIterationsException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label3:
        $d4 = d11 * 2.0;

        return $d4;
    }

    public double exactP(double, int, int, boolean)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        int i0, i1, $i2, $i3, $i5, $i8, $i9, $i10, i12, i13, i14;
        boolean z0, $z1;
        java.util.Iterator r1;
        double[] r2, r3;
        int[] r4;
        long $l4, l11;
        java.lang.Object $r5;
        byte $b6, $b7;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i2 = i0 + i1;

        r1 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: java.util.Iterator combinationsIterator(int,int)>($i2, i0);

        l11 = 0L;

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i1];

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (int[]) $r5;

        i12 = 0;

        i13 = 0;

        i14 = 0;

     label2:
        $i5 = i0 + i1;

        if i14 >= $i5 goto label5;

        if i12 >= i0 goto label3;

        $i9 = r4[i12];

        if $i9 != i14 goto label3;

        $i10 = i12;

        i12 = i12 + 1;

        $d5 = (double) i14;

        r2[$i10] = $d5;

        goto label4;

     label3:
        $i8 = i13;

        i13 = i13 + 1;

        $d4 = (double) i14;

        r3[$i8] = $d4;

     label4:
        i14 = i14 + 1;

        goto label2;

     label5:
        d6 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r2, r3);

        $b6 = d6 cmpl d0;

        if $b6 <= 0 goto label6;

        l11 = l11 + 1L;

        goto label7;

     label6:
        $b7 = d6 cmpl d0;

        if $b7 != 0 goto label7;

        if z0 != 0 goto label7;

        l11 = l11 + 1L;

     label7:
        goto label1;

     label8:
        $d1 = (double) l11;

        $i3 = i0 + i1;

        $l4 = staticinvoke <org.apache.commons.math3.util.CombinatoricsUtils: long binomialCoefficient(int,int)>($i3, i0);

        $d2 = (double) $l4;

        $d3 = $d1 / $d2;

        return $d3;
    }

    public double approximateP(double, int, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d1 = (double) i1;

        d2 = (double) i0;

        $d4 = d1 * d2;

        $d3 = d1 + d2;

        $d5 = $d4 / $d3;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d7 = d0 * $d6;

        $d8 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double ksSum(double,double,int)>($d7, 1.0E-20, 100000);

        $d9 = 1.0 - $d8;

        return $d9;
    }

    public double monteCarloP(double, int, int, boolean, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double d0, d1, $d2, $d3, $d4;
        int i0, i1, i2, $i3, i6, i7;
        boolean z0;
        int[] r1;
        double[] r2, r3;
        byte $b4, $b5;
        org.apache.commons.math3.random.RandomGenerator $r4;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        $i3 = i1 + i0;

        r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] natural(int)>($i3);

        r2 = newarray (double)[i0];

        r3 = newarray (double)[i1];

        i6 = 0;

        i7 = 0;

     label1:
        if i7 >= i2 goto label4;

        specialinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void copyPartition(double[],double[],int[],int,int)>(r2, r3, r1, i0, i1);

        d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r2, r3);

        $b4 = d1 cmpl d0;

        if $b4 <= 0 goto label2;

        i6 = i6 + 1;

        goto label3;

     label2:
        $b5 = d1 cmpl d0;

        if $b5 != 0 goto label3;

        if z0 != 0 goto label3;

        i6 = i6 + 1;

     label3:
        $r4 = r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: org.apache.commons.math3.random.RandomGenerator rng>;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],org.apache.commons.math3.random.RandomGenerator)>(r1, $r4);

        staticinvoke <java.util.Arrays: void sort(int[],int,int)>(r1, 0, i0);

        i7 = i7 + 1;

        goto label1;

     label4:
        $d3 = (double) i6;

        $d2 = (double) i2;

        $d4 = $d3 / $d2;

        return $d4;
    }

    private void copyPartition(double[], double[], int[], int, int)
    {
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest r0;
        double[] r1, r2;
        int[] r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: int[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i6 = 0;

        i7 = 0;

        i8 = 0;

     label1:
        $i2 = i0 + i1;

        if i8 >= $i2 goto label4;

        if i6 >= i0 goto label2;

        $i4 = r3[i6];

        if $i4 != i8 goto label2;

        $i5 = i6;

        i6 = i6 + 1;

        $d1 = (double) i8;

        r1[$i5] = $d1;

        goto label3;

     label2:
        $i3 = i7;

        i7 = i7 + 1;

        $d0 = (double) i8;

        r2[$i3] = $d0;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int MONTE_CARLO_ITERATIONS> = 1000000;

        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int LARGE_SAMPLE_PRODUCT> = 10000;

        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int SMALL_SAMPLE_PRODUCT> = 200;

        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double PG_SUM_RELATIVE_ERROR> = 1.0E-10;

        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double KS_SUM_CAUCHY_CRITERION> = 1.0E-20;

        <org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: int MAXIMUM_PARTIAL_SUM_COUNT> = 100000;

        return;
    }
}
