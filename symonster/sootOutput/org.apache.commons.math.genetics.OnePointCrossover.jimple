public class org.apache.commons.math.genetics.OnePointCrossover extends java.lang.Object implements org.apache.commons.math.genetics.CrossoverPolicy
{

    public void <init>()
    {
        org.apache.commons.math.genetics.OnePointCrossover r0;

        r0 := @this: org.apache.commons.math.genetics.OnePointCrossover;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math.genetics.ChromosomePair crossover(org.apache.commons.math.genetics.Chromosome, org.apache.commons.math.genetics.Chromosome)
    {
        org.apache.commons.math.genetics.OnePointCrossover r0;
        org.apache.commons.math.genetics.Chromosome r1, r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        org.apache.commons.math.genetics.AbstractListChromosome $r4, $r5;
        org.apache.commons.math.genetics.ChromosomePair $r6;

        r0 := @this: org.apache.commons.math.genetics.OnePointCrossover;

        r1 := @parameter0: org.apache.commons.math.genetics.Chromosome;

        r2 := @parameter1: org.apache.commons.math.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof org.apache.commons.math.genetics.AbstractListChromosome;

        if $z1 != 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("One point crossover works on FixedLengthChromosomes only.");

        throw $r3;

     label2:
        $r5 = (org.apache.commons.math.genetics.AbstractListChromosome) r1;

        $r4 = (org.apache.commons.math.genetics.AbstractListChromosome) r2;

        $r6 = specialinvoke r0.<org.apache.commons.math.genetics.OnePointCrossover: org.apache.commons.math.genetics.ChromosomePair crossover(org.apache.commons.math.genetics.AbstractListChromosome,org.apache.commons.math.genetics.AbstractListChromosome)>($r5, $r4);

        return $r6;
    }

    private org.apache.commons.math.genetics.ChromosomePair crossover(org.apache.commons.math.genetics.AbstractListChromosome, org.apache.commons.math.genetics.AbstractListChromosome)
    {
        org.apache.commons.math.genetics.OnePointCrossover r0;
        org.apache.commons.math.genetics.AbstractListChromosome r1, r2, $r11, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.util.List r3, r4;
        java.util.ArrayList $r7, $r8;
        org.apache.commons.math.random.RandomGenerator $r9;
        org.apache.commons.math.genetics.ChromosomePair $r10;
        java.lang.Object $r13, $r14, $r15, $r16;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: org.apache.commons.math.genetics.OnePointCrossover;

        r1 := @parameter0: org.apache.commons.math.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math.genetics.AbstractListChromosome;

        i0 = virtualinvoke r1.<org.apache.commons.math.genetics.AbstractListChromosome: int getLength()>();

        $i2 = virtualinvoke r2.<org.apache.commons.math.genetics.AbstractListChromosome: int getLength()>();

        if i0 == $i2 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both chromosomes must have same lengths.");

        throw $r17;

     label1:
        r3 = virtualinvoke r1.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r4 = virtualinvoke r2.<org.apache.commons.math.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r7 = new java.util.ArrayList;

        $i3 = virtualinvoke r1.<org.apache.commons.math.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        $r8 = new java.util.ArrayList;

        $i4 = virtualinvoke r2.<org.apache.commons.math.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i4);

        $r9 = staticinvoke <org.apache.commons.math.genetics.GeneticAlgorithm: org.apache.commons.math.random.RandomGenerator getRandomGenerator()>();

        $i5 = i0 - 2;

        $i6 = interfaceinvoke $r9.<org.apache.commons.math.random.RandomGenerator: int nextInt(int)>($i5);

        i1 = 1 + $i6;

        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        $r15 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i7);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $r16 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i7);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        i7 = i7 + 1;

        goto label2;

     label3:
        i8 = i1;

     label4:
        if i8 >= i0 goto label5;

        $r13 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i8);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        $r14 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i8);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        i8 = i8 + 1;

        goto label4;

     label5:
        $r10 = new org.apache.commons.math.genetics.ChromosomePair;

        $r11 = virtualinvoke r1.<org.apache.commons.math.genetics.AbstractListChromosome: org.apache.commons.math.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r7);

        $r12 = virtualinvoke r2.<org.apache.commons.math.genetics.AbstractListChromosome: org.apache.commons.math.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r8);

        specialinvoke $r10.<org.apache.commons.math.genetics.ChromosomePair: void <init>(org.apache.commons.math.genetics.Chromosome,org.apache.commons.math.genetics.Chromosome)>($r11, $r12);

        return $r10;
    }
}
