public class org.apache.commons.math.optimization.fitting.CurveFitter extends java.lang.Object
{
    private final org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer optimizer;
    private final java.util.List observations;

    public void <init>(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        r1 := @parameter0: org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.fitting.CurveFitter: org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer optimizer> = r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations> = $r2;

        return;
    }

    public void addObservedPoint(double, double)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math.optimization.fitting.CurveFitter: void addObservedPoint(double,double,double)>(1.0, d0, d1);

        return;
    }

    public void addObservedPoint(double, double, double)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        double d0, d1, d2;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint $r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r2 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        $r1 = new org.apache.commons.math.optimization.fitting.WeightedObservedPoint;

        specialinvoke $r1.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: void <init>(double,double,double)>(d0, d1, d2);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void addObservedPoint(org.apache.commons.math.optimization.fitting.WeightedObservedPoint)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.WeightedObservedPoint;

        $r2 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] getObservations()
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        java.util.List $r1, $r2;
        int $i0;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        $r2 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.commons.math.optimization.fitting.WeightedObservedPoint)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.commons.math.optimization.fitting.WeightedObservedPoint[]) $r4;

        return $r5;
    }

    public void clearObservations()
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public double[] fit(org.apache.commons.math.optimization.fitting.ParametricRealFunction, double[]) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        org.apache.commons.math.optimization.fitting.ParametricRealFunction r1;
        double[] r2, r3, r4, $r11;
        org.apache.commons.math.optimization.fitting.WeightedObservedPoint r5;
        java.util.List $r6, $r7, $r8;
        int $i0, $i1, i2;
        boolean $z0;
        org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction $r9;
        org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer $r10;
        java.lang.Object $r12;
        double $d0, $d1;
        java.util.Iterator r13;
        org.apache.commons.math.optimization.VectorialPointValuePair r14;

        r0 := @this: org.apache.commons.math.optimization.fitting.CurveFitter;

        r1 := @parameter0: org.apache.commons.math.optimization.fitting.ParametricRealFunction;

        r2 := @parameter1: double[];

        $r6 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        r3 = newarray (double)[$i0];

        $r7 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        r4 = newarray (double)[$i1];

        i2 = 0;

        $r8 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        r13 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math.optimization.fitting.WeightedObservedPoint) $r12;

        $d0 = virtualinvoke r5.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getY()>();

        r3[i2] = $d0;

        $d1 = virtualinvoke r5.<org.apache.commons.math.optimization.fitting.WeightedObservedPoint: double getWeight()>();

        r4[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r10 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer optimizer>;

        $r9 = new org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction;

        specialinvoke $r9.<org.apache.commons.math.optimization.fitting.CurveFitter$TheoreticalValuesFunction: void <init>(org.apache.commons.math.optimization.fitting.CurveFitter,org.apache.commons.math.optimization.fitting.ParametricRealFunction)>(r0, r1);

        r14 = interfaceinvoke $r10.<org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer: org.apache.commons.math.optimization.VectorialPointValuePair optimize(org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction,double[],double[],double[])>($r9, r3, r4, r2);

        $r11 = virtualinvoke r14.<org.apache.commons.math.optimization.VectorialPointValuePair: double[] getPointRef()>();

        return $r11;
    }

    static java.util.List access$000(org.apache.commons.math.optimization.fitting.CurveFitter)
    {
        org.apache.commons.math.optimization.fitting.CurveFitter r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.commons.math.optimization.fitting.CurveFitter;

        $r1 = r0.<org.apache.commons.math.optimization.fitting.CurveFitter: java.util.List observations>;

        return $r1;
    }
}
