class org.apache.commons.math3.geometry.partitioning.InsideFinder extends java.lang.Object
{
    private final org.apache.commons.math3.geometry.partitioning.Region region;
    private boolean plusFound;
    private boolean minusFound;

    public void <init>(org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        org.apache.commons.math3.geometry.partitioning.Region r1;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region> = r1;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 0;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 0;

        return;
    }

    public void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.SubHyperplane)
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, $r14, $r15, $r17, $r18, $r20, $r27, $r28, $r30, $r34, $r36, $r39, $r42, $r44, $r47, $r52, $r54;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane r2, $r5, $r6, $r9, $r19, $r21, $r22, $r31, $r35, $r43, $r53, $r55;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r3, $r10, $r23, $r32, $r33;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane r4;
        int[] $r7;
        org.apache.commons.math3.geometry.partitioning.Side $r8, $r11, $r12, $r24, $r25;
        int $i0, $i1;
        org.apache.commons.math3.geometry.partitioning.Region $r13, $r16, $r26, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        java.lang.Object $r37, $r40, $r45, $r48, $r50;
        java.lang.Boolean $r38, $r41, $r46, $r49, $r51;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.SubHyperplane;

        $r5 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r5 != null goto label02;

        $r50 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r51 = (java.lang.Boolean) $r50;

        $z13 = virtualinvoke $r51.<java.lang.Boolean: boolean booleanValue()>();

        if $z13 == 0 goto label01;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

     label01:
        return;

     label02:
        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        r3 = interfaceinvoke $r6.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r7 = <org.apache.commons.math3.geometry.partitioning.InsideFinder$1: int[] $SwitchMap$org$apache$commons$math3$geometry$partitioning$Side>;

        $r8 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r3);

        $i0 = virtualinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Side: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label03;
            case 2: goto label07;
            case 3: goto label11;
            default: goto label13;
        };

     label03:
        $r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r10 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r10);

        $r12 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r11 != $r12 goto label04;

        $r16 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r17 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z2 = interfaceinvoke $r16.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r17);

        if $z2 != 0 goto label05;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

        goto label05;

     label04:
        $r13 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r14 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z0 = interfaceinvoke $r13.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r14);

        if $z0 != 0 goto label05;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

     label05:
        $z14 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z14 == 0 goto label06;

        $z1 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z1 != 0 goto label21;

     label06:
        $r15 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r15, r2);

        goto label21;

     label07:
        $r22 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r23 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r24 = interfaceinvoke $r22.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r23);

        $r25 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        if $r24 != $r25 goto label08;

        $r29 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r30 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z7 = interfaceinvoke $r29.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r30);

        if $z7 != 0 goto label09;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

        goto label09;

     label08:
        $r26 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: org.apache.commons.math3.geometry.partitioning.Region region>;

        $r27 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z5 = interfaceinvoke $r26.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r27);

        if $z5 != 0 goto label09;

        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

     label09:
        $z15 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z15 == 0 goto label10;

        $z6 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z6 != 0 goto label21;

     label10:
        $r28 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r28, r2);

        goto label21;

     label11:
        r4 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)>(r3);

        $r18 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r19 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r18, $r19);

        $z3 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        if $z3 == 0 goto label12;

        $z4 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        if $z4 != 0 goto label21;

     label12:
        $r20 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r21 = virtualinvoke r4.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: org.apache.commons.math3.geometry.partitioning.SubHyperplane getMinus()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: void recurseSides(org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r20, $r21);

        goto label21;

     label13:
        $r31 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        $r32 = interfaceinvoke $r31.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $r33 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.SubHyperplane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        $z8 = interfaceinvoke $r32.<org.apache.commons.math3.geometry.partitioning.Hyperplane: boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r33);

        if $z8 == 0 goto label17;

        $r42 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r43 = virtualinvoke $r42.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r43 != null goto label14;

        $r47 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r48 = virtualinvoke $r47.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r49 = (java.lang.Boolean) $r48;

        $z12 = virtualinvoke $r49.<java.lang.Boolean: boolean booleanValue()>();

        if $z12 == 0 goto label15;

     label14:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label15:
        $r52 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r53 = virtualinvoke $r52.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r53 != null goto label16;

        $r44 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r45 = virtualinvoke $r44.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r46 = (java.lang.Boolean) $r45;

        $z11 = virtualinvoke $r46.<java.lang.Boolean: boolean booleanValue()>();

        if $z11 == 0 goto label21;

     label16:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

        goto label21;

     label17:
        $r34 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r35 = virtualinvoke $r34.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r35 != null goto label18;

        $r39 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $r40 = virtualinvoke $r39.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r41 = (java.lang.Boolean) $r40;

        $z10 = virtualinvoke $r41.<java.lang.Boolean: boolean booleanValue()>();

        if $z10 == 0 goto label19;

     label18:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound> = 1;

     label19:
        $r54 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r55 = virtualinvoke $r54.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.SubHyperplane getCut()>();

        if $r55 != null goto label20;

        $r36 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $r37 = virtualinvoke $r36.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r38 = (java.lang.Boolean) $r37;

        $z9 = virtualinvoke $r38.<java.lang.Boolean: boolean booleanValue()>();

        if $z9 == 0 goto label21;

     label20:
        r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound> = 1;

     label21:
        return;
    }

    public boolean plusFound()
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean plusFound>;

        return $z0;
    }

    public boolean minusFound()
    {
        org.apache.commons.math3.geometry.partitioning.InsideFinder r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.InsideFinder;

        $z0 = r0.<org.apache.commons.math3.geometry.partitioning.InsideFinder: boolean minusFound>;

        return $z0;
    }
}
