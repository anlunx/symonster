public class org.apache.commons.math3.random.HaltonSequenceGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomVectorGenerator
{
    private static final int[] PRIMES;
    private static final int[] WEIGHTS;
    private final int dimension;
    private int count;
    private final int[] base;
    private final int[] weight;

    public void <init>(int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int i0;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        i0 := @parameter0: int;

        $r2 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES>;

        $r1 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] WEIGHTS>;

        specialinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: void <init>(int,int[],int[])>(i0, $r2, $r1);

        return;
    }

    public void <init>(int, int[], int[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] r1, r2, $r6, $r9, $r13;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Integer $r4, $r5, $r7;
        java.lang.Object $r8, $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r12;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = 0;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        if i0 < 1 goto label1;

        $i2 = lengthof r1;

        if i0 <= $i2 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r6 = <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES>;

        $i1 = lengthof $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r7);

        throw $r3;

     label2:
        if r2 == null goto label3;

        $i4 = lengthof r2;

        $i3 = lengthof r1;

        if $i4 == $i3 goto label3;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r2;

        $i5 = lengthof r1;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, $i5);

        throw $r12;

     label3:
        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension> = i0;

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (int[]) $r8;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base> = $r9;

        if r2 != null goto label4;

        $r13 = null;

        goto label5;

     label4:
        $r10 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r13 = (int[]) $r10;

     label5:
        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight> = $r13;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = 0;

        return;
    }

    public double[] nextVector()
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        double[] r1;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        int[] $r2, $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension>;

        r1 = newarray (double)[$i2];

        i12 = 0;

     label1:
        $i3 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int dimension>;

        if i12 >= $i3 goto label4;

        i13 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i6 = $r2[i12];

        $d0 = (double) $i6;

        d6 = 1.0 / $d0;

     label2:
        if i13 <= 0 goto label3;

        $r3 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i9 = $r3[i12];

        $r4 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i7 = $r4[i12];

        $i8 = i13 % $i7;

        i1 = virtualinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int scramble(int,int,int,int)>(i12, 0, $i9, $i8);

        $d3 = r1[i12];

        $d1 = (double) i1;

        $d2 = d6 * $d1;

        $d4 = $d3 + $d2;

        r1[i12] = $d4;

        $r5 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i10 = $r5[i12];

        i13 = i13 / $i10;

        $r6 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] base>;

        $i11 = $r6[i12];

        $d5 = (double) $i11;

        d6 = d6 / $d5;

        goto label2;

     label3:
        i12 = i12 + 1;

        goto label1;

     label4:
        $i4 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        $i5 = $i4 + 1;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = $i5;

        return r1;
    }

    protected int scramble(int, int, int, int)
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int[] weight>;

        $i4 = $r2[i0];

        $i5 = $i4 * i3;

        $i6 = $i5 % i2;

        goto label2;

     label1:
        $i6 = i3;

     label2:
        return $i6;
    }

    public double[] skipTo(int) throws org.apache.commons.math3.exception.NotPositiveException
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count> = i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: double[] nextVector()>();

        return $r1;
    }

    public int getNextIndex()
    {
        org.apache.commons.math3.random.HaltonSequenceGenerator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.HaltonSequenceGenerator;

        $i0 = r0.<org.apache.commons.math3.random.HaltonSequenceGenerator: int count>;

        return $i0;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        $r0 = newarray (int)[40];

        $r0[0] = 2;

        $r0[1] = 3;

        $r0[2] = 5;

        $r0[3] = 7;

        $r0[4] = 11;

        $r0[5] = 13;

        $r0[6] = 17;

        $r0[7] = 19;

        $r0[8] = 23;

        $r0[9] = 29;

        $r0[10] = 31;

        $r0[11] = 37;

        $r0[12] = 41;

        $r0[13] = 43;

        $r0[14] = 47;

        $r0[15] = 53;

        $r0[16] = 59;

        $r0[17] = 61;

        $r0[18] = 67;

        $r0[19] = 71;

        $r0[20] = 73;

        $r0[21] = 79;

        $r0[22] = 83;

        $r0[23] = 89;

        $r0[24] = 97;

        $r0[25] = 101;

        $r0[26] = 103;

        $r0[27] = 107;

        $r0[28] = 109;

        $r0[29] = 113;

        $r0[30] = 127;

        $r0[31] = 131;

        $r0[32] = 137;

        $r0[33] = 139;

        $r0[34] = 149;

        $r0[35] = 151;

        $r0[36] = 157;

        $r0[37] = 163;

        $r0[38] = 167;

        $r0[39] = 173;

        <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] PRIMES> = $r0;

        $r1 = newarray (int)[40];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 3;

        $r1[3] = 3;

        $r1[4] = 8;

        $r1[5] = 11;

        $r1[6] = 12;

        $r1[7] = 14;

        $r1[8] = 7;

        $r1[9] = 18;

        $r1[10] = 12;

        $r1[11] = 13;

        $r1[12] = 17;

        $r1[13] = 18;

        $r1[14] = 29;

        $r1[15] = 14;

        $r1[16] = 18;

        $r1[17] = 43;

        $r1[18] = 41;

        $r1[19] = 44;

        $r1[20] = 40;

        $r1[21] = 30;

        $r1[22] = 47;

        $r1[23] = 65;

        $r1[24] = 71;

        $r1[25] = 28;

        $r1[26] = 40;

        $r1[27] = 60;

        $r1[28] = 79;

        $r1[29] = 89;

        $r1[30] = 56;

        $r1[31] = 50;

        $r1[32] = 52;

        $r1[33] = 61;

        $r1[34] = 108;

        $r1[35] = 56;

        $r1[36] = 66;

        $r1[37] = 63;

        $r1[38] = 60;

        $r1[39] = 66;

        <org.apache.commons.math3.random.HaltonSequenceGenerator: int[] WEIGHTS> = $r1;

        return;
    }
}
