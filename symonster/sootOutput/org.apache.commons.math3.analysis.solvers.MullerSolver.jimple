public class org.apache.commons.math3.analysis.solvers.MullerSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
{
    private static final double DEFAULT_ABSOLUTE_ACCURACY;

    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void <init>(double)>(1.0E-6);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>(d0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>(d0, d1);

        return;
    }

    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getMin()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getMax()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getStartValue()>();

        d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getFunctionValueAccuracy()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void verifySequence(double,double,double)>(d0, d2, d1);

        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d0);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b0 = $d7 cmpg d3;

        if $b0 >= 0 goto label1;

        return d0;

     label1:
        d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d1);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        $b1 = $d8 cmpg d3;

        if $b1 >= 0 goto label2;

        return d1;

     label2:
        d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d2);

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d6);

        $b2 = $d9 cmpg d3;

        if $b2 >= 0 goto label3;

        return d2;

     label3:
        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: void verifyBracketing(double,double)>(d0, d1);

        $z0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: boolean isBracketing(double,double)>(d0, d2);

        if $z0 == 0 goto label4;

        $d11 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double solve(double,double,double,double)>(d0, d2, d4, d6);

        return $d11;

     label4:
        $d10 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double solve(double,double,double,double)>(d2, d1, d6, d5);

        return $d10;
    }

    private double solve(double, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, d55, d56, d57, d58, d59, d60, d61, $d62, $d63, $d64, $d65, $d66;
        boolean $z1, $z2;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getRelativeAccuracy()>();

        d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getAbsoluteAccuracy()>();

        d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double getFunctionValueAccuracy()>();

        d55 = d0;

        d56 = d2;

        d57 = d1;

        d58 = d3;

        $d19 = d0 + d1;

        d59 = 0.5 * $d19;

        d60 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d59);

        d61 = #Infinity;

     label01:
        $d21 = d60 - d56;

        $d20 = d59 - d55;

        d7 = $d21 / $d20;

        $d23 = d58 - d60;

        $d22 = d57 - d59;

        d8 = $d23 / $d22;

        $d25 = d8 - d7;

        $d24 = d57 - d55;

        d9 = $d25 / $d24;

        $d26 = d59 - d55;

        $d27 = $d26 * d9;

        d10 = d7 + $d27;

        $d30 = d10 * d10;

        $d28 = 4.0 * d60;

        $d29 = $d28 * d9;

        d11 = $d30 - $d29;

        $d31 = -2.0 * d60;

        $d32 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d11);

        $d33 = d10 + $d32;

        $d34 = $d31 / $d33;

        d12 = d59 + $d34;

        $d35 = -2.0 * d60;

        $d36 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d11);

        $d37 = d10 - $d36;

        $d38 = $d35 / $d37;

        d13 = d59 + $d38;

        $z1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: boolean isSequence(double,double,double)>(d55, d12, d57);

        if $z1 == 0 goto label02;

        $d62 = d12;

        goto label03;

     label02:
        $d62 = d13;

     label03:
        d14 = $d62;

        d15 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>($d62);

        $d39 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d62);

        $d40 = d4 * $d39;

        d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d40, d5);

        $d41 = $d62 - d61;

        $d42 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d41);

        $b0 = $d42 cmpg d16;

        if $b0 <= 0 goto label04;

        $d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d15);

        $b1 = $d43 cmpg d6;

        if $b1 > 0 goto label05;

     label04:
        return d14;

     label05:
        $b2 = $d62 cmpg d59;

        if $b2 >= 0 goto label06;

        $d54 = d59 - d55;

        $d52 = d57 - d55;

        $d53 = 0.95 * $d52;

        $b11 = $d54 cmpl $d53;

        if $b11 > 0 goto label08;

     label06:
        $b3 = d14 cmpl d59;

        if $b3 <= 0 goto label07;

        $d51 = d57 - d59;

        $d49 = d57 - d55;

        $d50 = 0.95 * $d49;

        $b10 = $d51 cmpl $d50;

        if $b10 > 0 goto label08;

     label07:
        $b4 = d14 cmpl d59;

        if $b4 != 0 goto label09;

     label08:
        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        if $z2 != 0 goto label19;

        $b6 = d14 cmpg d59;

        if $b6 >= 0 goto label11;

        $d63 = d55;

        goto label12;

     label11:
        $d63 = d59;

     label12:
        d55 = $d63;

        $b7 = d14 cmpg d59;

        if $b7 >= 0 goto label13;

        $d64 = d56;

        goto label14;

     label13:
        $d64 = d60;

     label14:
        d56 = $d64;

        $b8 = d14 cmpl d59;

        if $b8 <= 0 goto label15;

        $d65 = d57;

        goto label16;

     label15:
        $d65 = d59;

     label16:
        d57 = $d65;

        $b9 = d14 cmpl d59;

        if $b9 <= 0 goto label17;

        $d66 = d58;

        goto label18;

     label17:
        $d66 = d60;

     label18:
        d58 = $d66;

        d59 = d14;

        d60 = d15;

        d61 = d14;

        goto label22;

     label19:
        $d44 = d55 + d57;

        d17 = 0.5 * $d44;

        d18 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d17);

        $d45 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>(d56);

        $d46 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>(d18);

        $d47 = $d45 + $d46;

        $b5 = $d47 cmpl 0.0;

        if $b5 != 0 goto label20;

        d57 = d17;

        d58 = d18;

        goto label21;

     label20:
        d55 = d17;

        d56 = d18;

     label21:
        $d48 = d55 + d57;

        d59 = 0.5 * $d48;

        d60 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver: double computeObjectiveValue(double)>(d59);

        d61 = #Infinity;

     label22:
        goto label01;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.MullerSolver: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
