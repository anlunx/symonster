class org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule extends java.lang.Object implements org.apache.commons.lang.time.FastDateFormat$Rule
{
    static final org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON;
    static final org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON;
    final boolean mColon;

    void <init>(boolean)
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r0;
        boolean z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: boolean mColon> = z0;

        return;
    }

    public int estimateLength()
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        return 5;
    }

    public void appendTo(java.lang.StringBuffer, java.util.Calendar)
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule r0;
        java.lang.StringBuffer r1;
        java.util.Calendar r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, $i15, $i16, i18;
        char $c6, $c9, $c14, $c17;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.util.Calendar;

        $i2 = virtualinvoke r2.<java.util.Calendar: int get(int)>(15);

        $i3 = virtualinvoke r2.<java.util.Calendar: int get(int)>(16);

        i18 = $i2 + $i3;

        if i18 >= 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);

        i18 = neg i18;

        goto label2;

     label1:
        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);

     label2:
        i0 = i18 / 3600000;

        $i4 = i0 / 10;

        $i5 = $i4 + 48;

        $c6 = (char) $i5;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        $i7 = i0 % 10;

        $i8 = $i7 + 48;

        $c9 = (char) $i8;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c9);

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: boolean mColon>;

        if $z0 == 0 goto label3;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

     label3:
        $i11 = i18 / 60000;

        $i10 = 60 * i0;

        i1 = $i11 - $i10;

        $i12 = i1 / 10;

        $i13 = $i12 + 48;

        $c14 = (char) $i13;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14);

        $i15 = i1 % 10;

        $i16 = $i15 + 48;

        $c17 = (char) $i16;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c17);

        return;
    }

    static void <clinit>()
    {
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule $r0, $r1;

        $r0 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        specialinvoke $r0.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: void <init>(boolean)>(1);

        <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON> = $r0;

        $r1 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule;

        specialinvoke $r1.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: void <init>(boolean)>(0);

        <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON> = $r1;

        return;
    }
}
