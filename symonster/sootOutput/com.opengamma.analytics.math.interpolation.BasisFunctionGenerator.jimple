public class com.opengamma.analytics.math.interpolation.BasisFunctionGenerator extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.util.List generateSet(double, double, int, int)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double d0, d1;
        int i0, i1;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r1;
        java.util.List $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = staticinvoke <com.opengamma.analytics.math.interpolation.BasisFunctionKnots: com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromUniform(double,double,int,int)>(d0, d1, i0, i1);

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots)>(r1);

        return $r2;
    }

    public java.util.List generateSet(double[], int)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double[] r1;
        int i0;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r2;
        java.util.List $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 = staticinvoke <com.opengamma.analytics.math.interpolation.BasisFunctionKnots: com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromInternalKnots(double[],int)>(r1, i0);

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots)>(r2);

        return $r3;
    }

    public java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r1;
        double[] r2;
        int $i0, i1;
        java.util.List r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "knots");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: double[] getKnots()>();

        r4 = null;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int getDegree()>();

        if i1 > $i0 goto label2;

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: java.util.List generateSet(double[],int,java.util.List)>(r2, i1, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r4;
    }

    public java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots[])
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots[] r1;
        int i0, $i1, $i2, i3, i4, i5;
        int[] r2, r4;
        java.util.ArrayList $r6, $r7;
        com.opengamma.analytics.math.function.Function1D $r8;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots $r9, $r11;
        java.util.List $r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.BasisFunctionKnots[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r1, "knots");

        i0 = lengthof r1;

        r2 = newarray (int)[i0];

        i3 = 1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r9 = r1[i4];

        $r10 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots)>($r9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = r1[i4];

        $i1 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int getNumSplines()>();

        r2[i4] = $i1;

        $i2 = r2[i4];

        i3 = i3 * $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i3);

        i5 = 0;

     label3:
        if i5 >= i3 goto label4;

        r4 = staticinvoke <com.opengamma.analytics.math.FunctionUtils: int[] fromTensorIndex(int,int[])>(i5, r2);

        $r8 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generateMultiDim(java.util.List,int[])>($r6, r4);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        i5 = i5 + 1;

        goto label3;

     label4:
        return $r7;
    }

    public java.util.List generateSet(double[], double[], int[], int[])
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double[] r1, r2;
        int[] r3, r4;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots[] r5;
        java.util.List $r6;
        double $d0, $d1;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        i0 = lengthof r1;

        $i1 = lengthof r2;

        if i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "xb wrong dimension");

        $i2 = lengthof r3;

        if i0 != $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "nKnots wrong dimension");

        $i3 = lengthof r4;

        if i0 != $i3 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "degree wrong dimension");

        r5 = newarray (com.opengamma.analytics.math.interpolation.BasisFunctionKnots)[i0];

        i6 = 0;

     label7:
        if i6 >= i0 goto label8;

        $d1 = r1[i6];

        $d0 = r2[i6];

        $i5 = r3[i6];

        $i4 = r4[i6];

        $r7 = staticinvoke <com.opengamma.analytics.math.interpolation.BasisFunctionKnots: com.opengamma.analytics.math.interpolation.BasisFunctionKnots fromUniform(double,double,int,int)>($d1, $d0, $i5, $i4);

        r5[i6] = $r7;

        i6 = i6 + 1;

        goto label7;

     label8:
        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: java.util.List generateSet(com.opengamma.analytics.math.interpolation.BasisFunctionKnots[])>(r5);

        return $r6;
    }

    protected com.opengamma.analytics.math.function.Function1D generate(com.opengamma.analytics.math.interpolation.BasisFunctionKnots, int)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        com.opengamma.analytics.math.interpolation.BasisFunctionKnots r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Integer $r4, $r5;
        double[] $r6;
        com.opengamma.analytics.math.function.Function1D $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.BasisFunctionKnots;

        i0 := @parameter1: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "data");

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int getNumSplines()>();

        if i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3[0] = $r4;

        $i2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int getNumSplines()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r5;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z0, "index must be in range {} to {} (exclusive)", $r3);

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: double[] getKnots()>();

        $i3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.BasisFunctionKnots: int getDegree()>();

        $r7 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generate(double[],int,int)>($r6, $i3, i0);

        return $r7;
    }

    private com.opengamma.analytics.math.function.Function1D generateMultiDim(java.util.List, int[])
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        java.util.List r1, $r7;
        int[] r2;
        int i0, $i1, i2;
        java.util.ArrayList $r4;
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1 $r5;
        java.lang.Object $r6, $r8;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: int[];

        i0 = lengthof r2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r7 = (java.util.List) $r6;

        $i1 = r2[i2];

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = new com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$1: void <init>(com.opengamma.analytics.math.interpolation.BasisFunctionGenerator,int,java.util.List)>(r0, i0, $r4);

        return $r5;
    }

    private java.util.List generateSet(double[], int, java.util.List)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double[] r1;
        int i0, i1, $i2, $i3, i4;
        java.util.List r2;
        java.util.ArrayList $r4;
        com.opengamma.analytics.math.function.Function1D $r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.List;

        $i2 = lengthof r1;

        $i3 = $i2 - i0;

        i1 = $i3 - 1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(i1);

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generate(double[],int,int,java.util.List)>(r1, i0, i4, r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r4;
    }

    private com.opengamma.analytics.math.function.Function1D generate(double[], int, int, java.util.List)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.List r2;
        com.opengamma.analytics.math.function.Function1D r3, $r10, $r11;
        java.lang.Object $r5, $r6;
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$4 $r7;
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$3 $r8;
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$2 $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.util.List;

        if i0 != 0 goto label1;

        $r9 = new com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$2;

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$2: void <init>(com.opengamma.analytics.math.interpolation.BasisFunctionGenerator,double[],int)>(r0, r1, i1);

        return $r9;

     label1:
        if i0 != 1 goto label2;

        $r8 = new com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$3;

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$3: void <init>(com.opengamma.analytics.math.interpolation.BasisFunctionGenerator,double[],int)>(r0, r1, i1);

        return $r8;

     label2:
        if r2 != null goto label3;

        $i5 = i0 - 1;

        $r10 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generate(double[],int,int)>(r1, $i5, i1);

        goto label4;

     label3:
        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (com.opengamma.analytics.math.function.Function1D) $r5;

     label4:
        r3 = $r10;

        if r2 != null goto label5;

        $i4 = i0 - 1;

        $i3 = i1 + 1;

        $r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generate(double[],int,int)>(r1, $i4, $i3);

        goto label6;

     label5:
        $i2 = i1 + 1;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r11 = (com.opengamma.analytics.math.function.Function1D) $r6;

     label6:
        $r7 = new com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$4;

        specialinvoke $r7.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator$4: void <init>(com.opengamma.analytics.math.interpolation.BasisFunctionGenerator,double[],int,int,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.math.function.Function1D)>(r0, r1, i1, i0, r3, $r11);

        return $r7;
    }

    private com.opengamma.analytics.math.function.Function1D generate(double[], int, int)
    {
        com.opengamma.analytics.math.interpolation.BasisFunctionGenerator r0;
        double[] r1;
        int i0, i1;
        com.opengamma.analytics.math.function.Function1D $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.BasisFunctionGenerator;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.BasisFunctionGenerator: com.opengamma.analytics.math.function.Function1D generate(double[],int,int,java.util.List)>(r1, i0, i1, null);

        return $r2;
    }
}
