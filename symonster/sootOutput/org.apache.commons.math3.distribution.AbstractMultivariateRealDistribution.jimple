public abstract class org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.MultivariateRealDistribution
{
    protected final org.apache.commons.math3.random.RandomGenerator random;
    private final int dimension;

    protected void <init>(org.apache.commons.math3.random.RandomGenerator, int)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        int i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = r1;

        r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension> = i0;

        return;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        long l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>(l0);

        return;
    }

    public int getDimension()
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension>;

        return $i0;
    }

    public abstract double[] sample();

    public double[][] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution r0;
        int i0, $i1, i2;
        double[][] r1;
        double[] $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5;

        r0 := @this: org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r4, $r5);

        throw $r3;

     label1:
        $i1 = r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: int dimension>;

        r1 = newmultiarray (double)[i0][$i1];

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractMultivariateRealDistribution: double[] sample()>();

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }
}
