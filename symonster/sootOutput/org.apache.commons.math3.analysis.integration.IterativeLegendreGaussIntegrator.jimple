public class org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
{
    private static final org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY;
    private final int numberOfPoints;

    public void <init>(int, double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int i0, i1, i2;
        double d0, d1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(d0, d1, i1, i2);

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r2, $r3);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints> = i0;

        return;
    }

    public void <init>(int, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int i0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: void <init>(int,double,double,int,int)>(i0, d0, d1, 3, 2147483647);

        return;
    }

    public void <init>(int, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int i0, i1, i2;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: void <init>(int,double,double,int,int)>(i0, 1.0E-6, 1.0E-15, i1, i2);

        return;
    }

    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;
        org.apache.commons.math3.util.Incrementor $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7;
        byte $b6;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        d18 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double stage(int)>(1);

        i7 = 2;

     label1:
        d0 = specialinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double stage(int)>(i7);

        $d4 = d0 - d18;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getAbsoluteAccuracy()>();

        $d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getRelativeAccuracy()>();

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d18);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d9 = $d7 + $d8;

        $d10 = $d6 * $d9;

        $d11 = $d10 * 0.5;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, $d11);

        $r1 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        $i1 = $i0 + 1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int getMinimalIterationCount()>();

        if $i1 < $i2 goto label2;

        $b6 = d1 cmpg d2;

        if $b6 > 0 goto label2;

        return d0;

     label2:
        $d14 = d1 / d2;

        $i3 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints>;

        $d12 = (double) $i3;

        $d13 = 0.5 / $d12;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d14, $d13);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double min(double,double)>(4.0, $d15);

        $d16 = (double) i7;

        $d17 = d3 * $d16;

        $i5 = (int) $d17;

        $i4 = i7 + 1;

        i7 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>($i5, $i4);

        d18 = d0;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        goto label1;
    }

    private double stage(int) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator r0;
        int i0, $i1, i2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, d10;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator r2;
        org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1 $r3;
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator;

        i0 := @parameter0: int;

        $r3 = new org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1;

        specialinvoke $r3.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator$1: void <init>(org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator)>(r0);

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getMin()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: double getMax()>();

        $d6 = d1 - d0;

        $d5 = (double) i0;

        d2 = $d6 / $d5;

        d10 = 0.0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $d7 = (double) i2;

        $d8 = $d7 * d2;

        d3 = d0 + $d8;

        d4 = d3 + d2;

        $r4 = <org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY>;

        $i1 = r0.<org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: int numberOfPoints>;

        r2 = virtualinvoke $r4.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator legendreHighPrecision(int,double,double)>($i1, d3, d4);

        $d9 = virtualinvoke r2.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegrator: double integrate(org.apache.commons.math3.analysis.UnivariateFunction)>($r3);

        d10 = d10 + $d9;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d10;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory $r0;

        $r0 = new org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory;

        specialinvoke $r0.<org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory: void <init>()>();

        <org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegrator: org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorFactory FACTORY> = $r0;

        return;
    }
}
