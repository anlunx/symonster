class org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1 extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateVectorFunction
{
    final org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction this$1;

    void <init>(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1 r0;
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction r1;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1;

        r1 := @parameter0: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction;

        r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double[] value(double[])
    {
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1 r0;
        double[] r1, r2;
        java.util.Iterator r3;
        org.apache.commons.math3.fitting.WeightedObservedPoint r4;
        org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction $r5, $r8, $r12;
        org.apache.commons.math3.fitting.CurveFitter $r6, $r9;
        java.util.List $r7, $r10;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r11;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r13;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1;

        r1 := @parameter0: double[];

        $r5 = r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction this$1>;

        $r6 = $r5.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.fitting.CurveFitter this$0>;

        $r7 = staticinvoke <org.apache.commons.math3.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.fitting.CurveFitter)>($r6);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        r2 = newarray (double)[$i0];

        i2 = 0;

        $r8 = r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction this$1>;

        $r9 = $r8.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.fitting.CurveFitter this$0>;

        $r10 = staticinvoke <org.apache.commons.math3.fitting.CurveFitter: java.util.List access$000(org.apache.commons.math3.fitting.CurveFitter)>($r9);

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r11;

        $i1 = i2;

        i2 = i2 + 1;

        $r12 = r0.<org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction$1: org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction this$1>;

        $r13 = staticinvoke <org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.CurveFitter$TheoreticalValuesFunction)>($r12);

        $d0 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $d1 = interfaceinvoke $r13.<org.apache.commons.math3.analysis.ParametricUnivariateFunction: double value(double,double[])>($d0, r1);

        r2[$i1] = $d1;

        goto label1;

     label2:
        return r2;
    }
}
