public class org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer
{
    private final org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula;
    private final org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner;
    private final org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line;

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        $r3 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>(r1, r2, 1.0E-8, 1.0E-8, 1.0E-8, $r3);

        return;
    }

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r3;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        $r4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,org.apache.commons.math3.analysis.solvers.UnivariateSolver,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, double, double, double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        double d0, d1, d2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner $r3;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        $r3 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner;

        specialinvoke $r3.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$IdentityPreconditioner: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>(r1, r2, d0, d1, d2, $r3);

        return;
    }

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, org.apache.commons.math3.analysis.solvers.UnivariateSolver, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        org.apache.commons.math3.analysis.solvers.UnivariateSolver r3;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        r3 := @parameter2: org.apache.commons.math3.analysis.solvers.UnivariateSolver;

        r4 := @parameter3: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner;

        $d0 = interfaceinvoke r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getRelativeAccuracy()>();

        $d1 = interfaceinvoke r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        $d2 = interfaceinvoke r3.<org.apache.commons.math3.analysis.solvers.UnivariateSolver: double getAbsoluteAccuracy()>();

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula,org.apache.commons.math3.optim.ConvergenceChecker,double,double,double,org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)>(r1, r2, $d0, $d1, $d2, r4);

        return;
    }

    public void <init>(org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula, org.apache.commons.math3.optim.ConvergenceChecker, double, double, double, org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula r1;
        org.apache.commons.math3.optim.ConvergenceChecker r2;
        double d0, d1, d2;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner r3;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula;

        r2 := @parameter1: org.apache.commons.math3.optim.ConvergenceChecker;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner;

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r2);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula> = r1;

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner> = r3;

        $r4 = new org.apache.commons.math3.optim.nonlinear.scalar.LineSearch;

        specialinvoke $r4.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer,double,double,double)>(r0, d0, d1, d2);

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line> = $r4;

        return;
    }

    public transient org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[]) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected org.apache.commons.math3.optim.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.ConvergenceChecker r1;
        double[] r2, r5, r18, r19, r20, r22;
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType r3, $r6, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, i8, i9, i10, $i11, i12, i13, i14, i15;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24, d25, d26, d27;
        org.apache.commons.math3.optim.PointValuePair r4, $r9, r21;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner $r7, $r13;
        java.lang.Object $r8, $r16;
        org.apache.commons.math3.optim.nonlinear.scalar.LineSearch $r10;
        org.apache.commons.math3.optim.univariate.UnivariatePointValuePair $r11;
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula $r14;
        int[] $r15;
        byte $b6;
        org.apache.commons.math3.exception.MathInternalError $r17;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.ConvergenceChecker getConvergenceChecker()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getStartPoint()>();

        r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.GoalType getGoalType()>();

        i0 = lengthof r2;

        r18 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>(r2);

        $r6 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if r3 != $r6 goto label02;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $d22 = r18[i8];

        $d23 = neg $d22;

        r18[i8] = $d23;

        i8 = i8 + 1;

        goto label01;

     label02:
        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner>;

        r19 = interfaceinvoke $r7.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner: double[] precondition(double[],double[])>(r2, r18);

        $r8 = virtualinvoke r19.<java.lang.Object: java.lang.Object clone()>();

        r20 = (double[]) $r8;

        d24 = 0.0;

        i9 = 0;

     label03:
        if i9 >= i0 goto label04;

        $d20 = r18[i9];

        $d19 = r20[i9];

        $d21 = $d20 * $d19;

        d24 = d24 + $d21;

        i9 = i9 + 1;

        goto label03;

     label04:
        r21 = null;

     label05:
        virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void incrementIterationCount()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double computeObjectiveValue(double[])>(r2);

        r4 = r21;

        $r9 = new org.apache.commons.math3.optim.PointValuePair;

        specialinvoke $r9.<org.apache.commons.math3.optim.PointValuePair: void <init>(double[],double)>(r2, d0);

        r21 = $r9;

        if r4 == null goto label06;

        $i7 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: int getIterations()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.math3.optim.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>($i7, r4, $r9);

        if $z0 == 0 goto label06;

        return $r9;

     label06:
        $r10 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.LineSearch line>;

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.optim.nonlinear.scalar.LineSearch: org.apache.commons.math3.optim.univariate.UnivariatePointValuePair search(double[],double[])>(r2, r20);

        d1 = virtualinvoke $r11.<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair: double getPoint()>();

        i10 = 0;

     label07:
        $i11 = lengthof r2;

        if i10 >= $i11 goto label08;

        $d17 = r2[i10];

        $d15 = r20[i10];

        $d16 = d1 * $d15;

        $d18 = $d17 + $d16;

        r2[i10] = $d18;

        i10 = i10 + 1;

        goto label07;

     label08:
        r22 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] computeObjectiveGradient(double[])>(r2);

        $r12 = <org.apache.commons.math3.optim.nonlinear.scalar.GoalType: org.apache.commons.math3.optim.nonlinear.scalar.GoalType MINIMIZE>;

        if r3 != $r12 goto label10;

        i12 = 0;

     label09:
        if i12 >= i0 goto label10;

        $d13 = r22[i12];

        $d14 = neg $d13;

        r22[i12] = $d14;

        i12 = i12 + 1;

        goto label09;

     label10:
        d25 = d24;

        $r13 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner preconditioner>;

        r5 = interfaceinvoke $r13.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.Preconditioner: double[] precondition(double[],double[])>(r2, r22);

        d24 = 0.0;

        i13 = 0;

     label11:
        if i13 >= i0 goto label12;

        $d11 = r22[i13];

        $d10 = r5[i13];

        $d12 = $d11 * $d10;

        d24 = d24 + $d12;

        i13 = i13 + 1;

        goto label11;

     label12:
        $r15 = <org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$1: int[] $SwitchMap$org$apache$commons$math3$optim$nonlinear$scalar$gradient$NonLinearConjugateGradientOptimizer$Formula>;

        $r14 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula updateFormula>;

        $i1 = virtualinvoke $r14.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer$Formula: int ordinal()>();

        $i2 = $r15[$i1];

        lookupswitch($i2)
        {
            case 1: goto label13;
            case 2: goto label14;
            default: goto label17;
        };

     label13:
        d26 = d24 / d25;

        goto label18;

     label14:
        d27 = 0.0;

        i14 = 0;

     label15:
        $i3 = lengthof r22;

        if i14 >= $i3 goto label16;

        $d8 = r22[i14];

        $d7 = r19[i14];

        $d9 = $d8 * $d7;

        d27 = d27 + $d9;

        i14 = i14 + 1;

        goto label15;

     label16:
        $d2 = d24 - d27;

        d26 = $d2 / d25;

        goto label18;

     label17:
        $r17 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r17.<org.apache.commons.math3.exception.MathInternalError: void <init>()>();

        throw $r17;

     label18:
        r19 = r5;

        $i4 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: int getIterations()>();

        $i5 = $i4 % i0;

        if $i5 == 0 goto label19;

        $b6 = d26 cmpg 0.0;

        if $b6 >= 0 goto label20;

     label19:
        $r16 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>();

        r20 = (double[]) $r16;

        goto label22;

     label20:
        i15 = 0;

     label21:
        if i15 >= i0 goto label22;

        $d5 = r5[i15];

        $d3 = r20[i15];

        $d4 = d26 * $d3;

        $d6 = $d5 + $d4;

        r20[i15] = $d6;

        i15 = i15 + 1;

        goto label21;

     label22:
        goto label05;
    }

    protected transient void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.GradientMultivariateOptimizer: void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        specialinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: void checkParameters()>();

        return;
    }

    private void checkParameters()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        double[] $r1, $r5;
        org.apache.commons.math3.exception.MathUnsupportedOperationException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getLowerBound()>();

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: double[] getUpperBound()>();

        if $r5 == null goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.MathUnsupportedOperationException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CONSTRAINT>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathUnsupportedOperationException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        return;
    }

    public volatile java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.OptimizationData[] r1;
        org.apache.commons.math3.optim.PointValuePair $r2;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optim.OptimizationData[];

        $r2 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData[])>(r1);

        return $r2;
    }

    protected volatile java.lang.Object doOptimize()
    {
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer r0;
        org.apache.commons.math3.optim.PointValuePair $r1;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer: org.apache.commons.math3.optim.PointValuePair doOptimize()>();

        return $r1;
    }
}
