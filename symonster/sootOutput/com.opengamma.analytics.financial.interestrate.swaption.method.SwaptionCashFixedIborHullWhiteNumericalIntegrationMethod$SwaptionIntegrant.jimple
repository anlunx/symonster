final class com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant extends com.opengamma.analytics.math.function.Function1D
{
    private final double[] _discountedCashFlowFixed;
    private final double[] _alphaFixed;
    private final double[] _discountedCashFlowIbor;
    private final double[] _alphaIbor;
    private final int _nbFixedPaymentYear;
    private final int _nbFixedPeriod;
    private final double _strike;
    private final boolean _isPayer;

    public void <init>(double[], double[], double[], double[], int, double, boolean)
    {
        com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant r0;
        double[] r1, r2, r3, r4, $r5;
        int i0, $i1;
        double d0;
        boolean z0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 := @parameter4: int;

        d0 := @parameter5: double;

        z0 := @parameter6: boolean;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _discountedCashFlowFixed> = r1;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaFixed> = r2;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _discountedCashFlowIbor> = r3;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaIbor> = r4;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: int _nbFixedPaymentYear> = i0;

        $r5 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _discountedCashFlowFixed>;

        $i1 = lengthof $r5;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: int _nbFixedPeriod> = $i1;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double _strike> = d0;

        r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: boolean _isPayer> = z0;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant r0;
        java.lang.Double r1, $r9;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27;
        com.opengamma.analytics.financial.model.interestrate.HullWhiteOneFactorPiecewiseConstantInterestRateModel $r2;
        double[] $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant;

        r1 := @parameter0: java.lang.Double;

        $r2 = staticinvoke <com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod: com.opengamma.analytics.financial.model.interestrate.HullWhiteOneFactorPiecewiseConstantInterestRateModel access$000()>();

        $d4 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r6 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _discountedCashFlowFixed>;

        $r5 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaFixed>;

        $r4 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _discountedCashFlowIbor>;

        $r3 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaIbor>;

        d0 = virtualinvoke $r2.<com.opengamma.analytics.financial.model.interestrate.HullWhiteOneFactorPiecewiseConstantInterestRateModel: double swapRate(double,double[],double[],double[],double[])>($d4, $r6, $r5, $r4, $r3);

        $d9 = 1.0 / d0;

        $i0 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: int _nbFixedPaymentYear>;

        $d5 = (double) $i0;

        $d6 = d0 / $d5;

        $d8 = 1.0 + $d6;

        $i1 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: int _nbFixedPeriod>;

        $d7 = (double) $i1;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d8, $d7);

        $d11 = 1.0 / $d10;

        $d12 = 1.0 - $d11;

        d1 = $d9 * $d12;

        $d13 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r7 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaIbor>;

        $d14 = $r7[0];

        $d15 = $d13 + $d14;

        $d16 = neg $d15;

        $d17 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $r8 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double[] _alphaIbor>;

        $d18 = $r8[0];

        $d19 = $d17 + $d18;

        $d20 = $d16 * $d19;

        $d21 = $d20 / 2.0;

        d2 = staticinvoke <java.lang.Math: double exp(double)>($d21);

        $d25 = d2 * d1;

        $z0 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: boolean _isPayer>;

        if $z0 == 0 goto label1;

        $d27 = 1.0;

        goto label2;

     label1:
        $d27 = -1.0;

     label2:
        $d22 = r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: double _strike>;

        $d23 = d0 - $d22;

        $d24 = $d27 * $d23;

        $d26 = staticinvoke <java.lang.Math: double max(double,double)>($d24, 0.0);

        d3 = $d25 * $d26;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        return $r9;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.swaption.method.SwaptionCashFixedIborHullWhiteNumericalIntegrationMethod$SwaptionIntegrant: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
