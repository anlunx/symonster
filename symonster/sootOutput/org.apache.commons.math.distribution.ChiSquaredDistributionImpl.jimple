public class org.apache.commons.math.distribution.ChiSquaredDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.ChiSquaredDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private org.apache.commons.math.distribution.GammaDistribution gamma;
    private final double solverAbsoluteAccuracy;

    public void <init>(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.GammaDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.distribution.GammaDistributionImpl;

        $d1 = d0 / 2.0;

        specialinvoke $r1.<org.apache.commons.math.distribution.GammaDistributionImpl: void <init>(double,double)>($d1, 2.0);

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void <init>(double,org.apache.commons.math.distribution.GammaDistribution)>(d0, $r1);

        return;
    }

    public void <init>(double, org.apache.commons.math.distribution.GammaDistribution)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0;
        org.apache.commons.math.distribution.GammaDistribution r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.distribution.GammaDistribution;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void setGammaInternal(org.apache.commons.math.distribution.GammaDistribution)>(r1);

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void setDegreesOfFreedomInternal(double)>(d0);

        r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double solverAbsoluteAccuracy> = 1.0E-9;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math.distribution.GammaDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        $r1 = new org.apache.commons.math.distribution.GammaDistributionImpl;

        $d2 = d0 / 2.0;

        specialinvoke $r1.<org.apache.commons.math.distribution.GammaDistributionImpl: void <init>(double,double)>($d2, 2.0);

        r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma> = $r1;

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void setDegreesOfFreedomInternal(double)>(d0);

        r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double solverAbsoluteAccuracy> = d1;

        return;
    }

    public void setDegreesOfFreedom(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void setDegreesOfFreedomInternal(double)>(d0);

        return;
    }

    private void setDegreesOfFreedomInternal(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma>;

        $d1 = d0 / 2.0;

        interfaceinvoke $r1.<org.apache.commons.math.distribution.GammaDistribution: void setAlpha(double)>($d1);

        return;
    }

    public double getDegreesOfFreedom()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        org.apache.commons.math.distribution.GammaDistribution $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        $r1 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.distribution.GammaDistribution: double getAlpha()>();

        $d1 = $d0 * 2.0;

        return $d1;
    }

    public double density(java.lang.Double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        java.lang.Double r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        r1 := @parameter0: java.lang.Double;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double density(double)>($d0);

        return $d1;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.GammaDistribution $r1;
        java.lang.Double $r2;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.distribution.GammaDistribution: double density(java.lang.Double)>($r2);

        return $d1;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1;
        org.apache.commons.math.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.distribution.GammaDistribution: double cumulativeProbability(double)>(d0);

        return $d1;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return 0.0;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(d0);

        return $d1;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1, $d2;
        org.apache.commons.math.distribution.GammaDistribution $r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math.distribution.GammaDistribution: double getBeta()>();

        $d2 = 4.9E-324 * $d1;

        return $d2;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, d1;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        d1 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double getDegreesOfFreedom()>();

        goto label2;

     label1:
        d1 = 1.7976931348623157E308;

     label2:
        return d1;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double d0, $d1, d2;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.5;

        if $b0 >= 0 goto label1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double getDegreesOfFreedom()>();

        d2 = $d1 * 0.5;

        goto label2;

     label1:
        d2 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double getDegreesOfFreedom()>();

     label2:
        return d2;
    }

    public void setGamma(org.apache.commons.math.distribution.GammaDistribution)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        org.apache.commons.math.distribution.GammaDistribution r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.GammaDistribution;

        specialinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: void setGammaInternal(org.apache.commons.math.distribution.GammaDistribution)>(r1);

        return;
    }

    private void setGammaInternal(org.apache.commons.math.distribution.GammaDistribution)
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        org.apache.commons.math.distribution.GammaDistribution r1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.GammaDistribution;

        r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: org.apache.commons.math.distribution.GammaDistribution gamma> = r1;

        return;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        return 0.0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double getDegreesOfFreedom()>();

        return $d0;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double getDegreesOfFreedom()>();

        $d1 = 2.0 * $d0;

        return $d1;
    }

    public volatile double density(java.lang.Object) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.ChiSquaredDistributionImpl r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.ChiSquaredDistributionImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double density(java.lang.Double)>($r2);

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.ChiSquaredDistributionImpl: long serialVersionUID> = -8352658048349159782L;

        <org.apache.commons.math.distribution.ChiSquaredDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
