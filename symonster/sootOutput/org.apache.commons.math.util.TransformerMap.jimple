public class org.apache.commons.math.util.TransformerMap extends java.lang.Object implements org.apache.commons.math.util.NumberTransformer, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.commons.math.util.NumberTransformer defaultTransformer;
    private java.util.Map map;

    public void <init>()
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.util.HashMap $r1;
        org.apache.commons.math.util.DefaultTransformer $r2;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer> = null;

        r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map> = $r1;

        $r2 = new org.apache.commons.math.util.DefaultTransformer;

        specialinvoke $r2.<org.apache.commons.math.util.DefaultTransformer: void <init>()>();

        r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer> = $r2;

        return;
    }

    public boolean containsClass(java.lang.Class)
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.lang.Class r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsTransformer(org.apache.commons.math.util.NumberTransformer)
    {
        org.apache.commons.math.util.TransformerMap r0;
        org.apache.commons.math.util.NumberTransformer r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: org.apache.commons.math.util.NumberTransformer;

        $r2 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public org.apache.commons.math.util.NumberTransformer getTransformer(java.lang.Class)
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.commons.math.util.NumberTransformer $r4;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.math.util.NumberTransformer) $r3;

        return $r4;
    }

    public org.apache.commons.math.util.NumberTransformer putTransformer(java.lang.Class, org.apache.commons.math.util.NumberTransformer)
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.lang.Class r1;
        org.apache.commons.math.util.NumberTransformer r2, $r5;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.commons.math.util.NumberTransformer;

        $r3 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = (org.apache.commons.math.util.NumberTransformer) $r4;

        return $r5;
    }

    public org.apache.commons.math.util.NumberTransformer removeTransformer(java.lang.Class)
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.lang.Class r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.commons.math.util.NumberTransformer $r4;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = (org.apache.commons.math.util.NumberTransformer) $r3;

        return $r4;
    }

    public void clear()
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.util.Map $r1;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        $r1 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.util.Set classes()
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        $r1 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.util.Collection transformers()
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        $r1 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public double transform(java.lang.Object) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.lang.Object r1;
        org.apache.commons.math.util.NumberTransformer r2, $r3;
        boolean $z0, $z1;
        java.lang.Class $r4;
        double d0;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Object;

        d0 = #NaN;

        $z0 = r1 instanceof java.lang.Number;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

     label1:
        $r3 = r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer>;

        d0 = interfaceinvoke $r3.<org.apache.commons.math.util.NumberTransformer: double transform(java.lang.Object)>(r1);

        goto label3;

     label2:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer getTransformer(java.lang.Class)>($r4);

        if r2 == null goto label3;

        d0 = interfaceinvoke r2.<org.apache.commons.math.util.NumberTransformer: double transform(java.lang.Object)>(r1);

     label3:
        return d0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.util.TransformerMap r0, r2;
        java.lang.Object r1, $r11, $r12, $r15, $r16;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.math.util.NumberTransformer $r5, $r6, $r13;
        java.util.Map $r7, $r8, $r9, $r14;
        int $i0, $i1;
        java.util.Set $r10;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.util.TransformerMap;

        if $z0 == 0 goto label7;

        r2 = (org.apache.commons.math.util.TransformerMap) r1;

        $r6 = r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer>;

        $r5 = r2.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer>;

        $z1 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        $r8 = r2.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $i1 = interfaceinvoke $r8.<java.util.Map: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r9 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.apache.commons.math.util.NumberTransformer) $r12;

        $r14 = r2.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $z3 = virtualinvoke $r13.<java.lang.Object: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math.util.TransformerMap r0;
        java.util.Iterator r1;
        org.apache.commons.math.util.NumberTransformer r2, $r3;
        java.util.Map $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.util.TransformerMap;

        $r3 = r0.<org.apache.commons.math.util.TransformerMap: org.apache.commons.math.util.NumberTransformer defaultTransformer>;

        i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $r4 = r0.<org.apache.commons.math.util.TransformerMap: java.util.Map map>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math.util.NumberTransformer) $r6;

        $i0 = i2 * 31;

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i2 = $i0 + $i1;

        goto label1;

     label2:
        return i2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.util.TransformerMap: long serialVersionUID> = 4605318041528645258L;

        return;
    }
}
