public class org.apache.commons.math3.random.RandomDataGenerator extends java.lang.Object implements org.apache.commons.math3.random.RandomData, java.io.Serializable
{
    private static final long serialVersionUID;
    private org.apache.commons.math3.random.RandomGenerator rand;
    private org.apache.commons.math3.random.RandomGenerator secRand;

    public void <init>()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = null;

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = null;

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = r1;

        return;
    }

    public java.lang.String nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i8;
        org.apache.commons.math3.random.RandomGenerator r1;
        byte[] r3;
        java.lang.Integer r4, $r14;
        java.lang.StringBuilder $r5, $r9, $r10, $r11;
        java.lang.String $r6, $r7, r15;
        byte $b4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r12;
        org.apache.commons.math3.exception.util.LocalizedFormats $r13;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r12 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r12.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r13, $r14);

        throw $r12;

     label1:
        r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i1 = i0 / 2;

        $i2 = $i1 + 1;

        r3 = newarray (byte)[$i2];

        interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r3);

        i8 = 0;

     label2:
        $i3 = lengthof r3;

        if i8 >= $i3 goto label4;

        $b4 = r3[i8];

        r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        $i5 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        $i6 = $i5 + 128;

        r15 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $i7 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i7 != 1 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        i8 = i8 + 1;

        goto label2;

     label4:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r7;
    }

    public int nextInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, i1, $i2;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, i0, i1);

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        return $i2;
    }

    public long nextLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long l0, l1, l2, l3, $l5, $l8, $l9, $l12, $l13;
        org.apache.commons.math3.random.RandomGenerator r1, $r2, $r3;
        byte $b4, $b6, $b7, $b14, $b15;
        int $i10, $i11;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        java.lang.Long $r6, $r7;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b4 = l0 cmp l1;

        if $b4 < 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r5, $r6, $r7, 0);

        throw $r4;

     label1:
        $l5 = l1 - l0;

        l2 = $l5 + 1L;

        $b6 = l2 cmp 0L;

        if $b6 > 0 goto label4;

        r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

     label2:
        l3 = interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: long nextLong()>();

        $b14 = l3 cmp l0;

        if $b14 < 0 goto label3;

        $b15 = l3 cmp l1;

        if $b15 > 0 goto label3;

        return l3;

     label3:
        goto label2;

     label4:
        $b7 = l2 cmp 2147483647L;

        if $b7 >= 0 goto label5;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $i10 = (int) l2;

        $i11 = interfaceinvoke $r3.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i10);

        $l12 = (long) $i11;

        $l13 = l0 + $l12;

        return $l13;

     label5:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $l8 = staticinvoke <org.apache.commons.math3.random.RandomDataGenerator: long nextLong(org.apache.commons.math3.random.RandomGenerator,long)>($r2, l2);

        $l9 = l0 + $l8;

        return $l9;
    }

    private static long nextLong(org.apache.commons.math3.random.RandomGenerator, long) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.random.RandomGenerator r0;
        long l0, l1, $l5, $l6, $l7, $l9, $l10, $l11, l12, l14;
        byte[] r1;
        int i2, i13;
        byte b3, $b4, $b8;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Long $r4;

        r0 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        l0 := @parameter1: long;

        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label4;

        r1 = newarray (byte)[8];

     label1:
        interfaceinvoke r0.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r1);

        l12 = 0L;

        i2 = lengthof r1;

        i13 = 0;

     label2:
        if i13 >= i2 goto label3;

        b3 = r1[i13];

        $l11 = l12 << 8;

        $l9 = (long) b3;

        $l10 = $l9 & 255L;

        l12 = $l11 | $l10;

        i13 = i13 + 1;

        goto label2;

     label3:
        l14 = l12 & 9223372036854775807L;

        l1 = l14 % l0;

        $l6 = l14 - l1;

        $l5 = l0 - 1L;

        $l7 = $l6 + $l5;

        $b8 = $l7 cmp 0L;

        if $b8 < 0 goto label1;

        return l1;

     label4:
        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;
    }

    public java.lang.String nextSecureHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10;
        org.apache.commons.math3.random.RandomGenerator r1;
        byte[] r3, r4;
        java.lang.Integer r5, $r14;
        java.lang.StringBuilder $r6, $r9, $r10, $r11;
        java.lang.String $r7, $r8, r19;
        byte $b4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r12;
        org.apache.commons.math3.exception.util.LocalizedFormats $r13;
        java.security.NoSuchAlgorithmException $r15;
        org.apache.commons.math3.exception.MathInternalError $r16;
        java.security.MessageDigest r17;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        if i0 > 0 goto label01;

        $r12 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LENGTH>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r12.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r13, $r14);

        throw $r12;

     label01:
        r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

     label02:
        r17 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label03:
        goto label05;

     label04:
        $r15 := @caughtexception;

        $r16 = new org.apache.commons.math3.exception.MathInternalError;

        specialinvoke $r16.<org.apache.commons.math3.exception.MathInternalError: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label05:
        virtualinvoke r17.<java.security.MessageDigest: void reset()>();

        $i1 = i0 / 40;

        i8 = $i1 + 1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        i9 = 1;

     label06:
        $i2 = i8 + 1;

        if i9 >= $i2 goto label10;

        r3 = newarray (byte)[40];

        interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: void nextBytes(byte[])>(r3);

        virtualinvoke r17.<java.security.MessageDigest: void update(byte[])>(r3);

        r4 = virtualinvoke r17.<java.security.MessageDigest: byte[] digest()>();

        i10 = 0;

     label07:
        $i3 = lengthof r4;

        if i10 >= $i3 goto label09;

        $b4 = r4[i10];

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b4);

        $i5 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i6 = $i5 + 128;

        r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $i7 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i7 != 1 goto label08;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        i10 = i10 + 1;

        goto label07;

     label09:
        i9 = i9 + 1;

        goto label06;

     label10:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        return $r8;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label04;
    }

    public int nextSecureInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, i1, $i2;
        org.apache.commons.math3.distribution.UniformIntegerDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.distribution.UniformIntegerDistribution;

        $r2 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int)>($r2, i0, i1);

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.UniformIntegerDistribution: int sample()>();

        return $i2;
    }

    public long nextSecureLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long l0, l1, l2, l3, $l5, $l8, $l9, $l12, $l13;
        org.apache.commons.math3.random.RandomGenerator r1;
        byte $b4, $b6, $b7, $b14, $b15;
        int $i10, $i11;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Long $r4, $r5;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b4 = l0 cmp l1;

        if $b4 < 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 0);

        throw $r2;

     label1:
        r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        $l5 = l1 - l0;

        l2 = $l5 + 1L;

        $b6 = l2 cmp 0L;

        if $b6 > 0 goto label4;

     label2:
        l3 = interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: long nextLong()>();

        $b14 = l3 cmp l0;

        if $b14 < 0 goto label3;

        $b15 = l3 cmp l1;

        if $b15 > 0 goto label3;

        return l3;

     label3:
        goto label2;

     label4:
        $b7 = l2 cmp 2147483647L;

        if $b7 >= 0 goto label5;

        $i10 = (int) l2;

        $i11 = interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i10);

        $l12 = (long) $i11;

        $l13 = l0 + $l12;

        return $l13;

     label5:
        $l8 = staticinvoke <org.apache.commons.math3.random.RandomDataGenerator: long nextLong(org.apache.commons.math3.random.RandomGenerator,long)>(r1, l2);

        $l9 = l0 + $l8;

        return $l9;
    }

    public long nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0;
        org.apache.commons.math3.distribution.PoissonDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.PoissonDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.PoissonDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,int)>($r2, d0, 1.0E-12, 10000000);

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.distribution.PoissonDistribution: int sample()>();

        $l1 = (long) $i0;

        return $l1;
    }

    public double nextGaussian(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d1 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats STANDARD_DEVIATION>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $d2 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextGaussian()>();

        $d3 = d1 * $d2;

        $d4 = $d3 + d0;

        return $d4;
    }

    public double nextExponential(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.ExponentialDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.ExponentialDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ExponentialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, d0, 1.0E-9);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ExponentialDistribution: double sample()>();

        return $d1;
    }

    public double nextGamma(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.GammaDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.GammaDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, d0, d1, 1.0E-9);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.GammaDistribution: double sample()>();

        return $d2;
    }

    public int nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, i1, i2, $i3;
        org.apache.commons.math3.distribution.HypergeometricDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new org.apache.commons.math3.distribution.HypergeometricDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.HypergeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int,int)>($r2, i0, i1, i2);

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sample()>();

        return $i3;
    }

    public int nextPascal(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.distribution.PascalDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.PascalDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.PascalDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, i0, d0);

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.PascalDistribution: int sample()>();

        return $i1;
    }

    public double nextT(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.TDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.TDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.TDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, d0, 1.0E-9);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.TDistribution: double sample()>();

        return $d1;
    }

    public double nextWeibull(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.WeibullDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.WeibullDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.WeibullDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, d0, d1, 1.0E-9);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.WeibullDistribution: double sample()>();

        return $d2;
    }

    public int nextZipf(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.distribution.ZipfDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.ZipfDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ZipfDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, i0, d0);

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ZipfDistribution: int sample()>();

        return $i1;
    }

    public double nextBeta(double, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.BetaDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.BetaDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.BetaDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, d0, d1, 1.0E-9);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.BetaDistribution: double sample()>();

        return $d2;
    }

    public int nextBinomial(int, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.distribution.BinomialDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.BinomialDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.BinomialDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,double)>($r2, i0, d0);

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.BinomialDistribution: int sample()>();

        return $i1;
    }

    public double nextCauchy(double, double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.CauchyDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.CauchyDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.CauchyDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, d0, d1, 1.0E-9);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.CauchyDistribution: double sample()>();

        return $d2;
    }

    public double nextChiSquare(double)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, $d1;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double)>($r2, d0, 1.0E-9);

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double sample()>();

        return $d1;
    }

    public double nextF(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;
        org.apache.commons.math3.distribution.FDistribution $r1;
        org.apache.commons.math3.random.RandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = new org.apache.commons.math3.distribution.FDistribution;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        specialinvoke $r1.<org.apache.commons.math3.distribution.FDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r2, d0, d1, 1.0E-9);

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.distribution.FDistribution: double sample()>();

        return $d2;
    }

    public double nextUniform(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: double nextUniform(double,double,boolean)>(d0, d1, 0);

        return $d2;
    }

    public double nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        double d0, d1, $d2, $d3, $d4, $d5, d6;
        boolean z0, $z1, $z2, $z3, $z4;
        org.apache.commons.math3.random.RandomGenerator r1;
        byte $b0, $b1;
        org.apache.commons.math3.exception.NotANumberException $r2;
        org.apache.commons.math3.exception.NotFiniteNumberException $r3, $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4, $r8, $r12;
        java.lang.Double $r5, $r9, $r13, $r14;
        java.lang.Object[] $r6, $r10;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r11;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        z0 := @parameter2: boolean;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r11 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r12 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r11.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r12, $r13, $r14, 0);

        throw $r11;

     label1:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

        $r7 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_BOUND>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r7.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r8, $r9, $r10);

        throw $r7;

     label2:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z2 == 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NotFiniteNumberException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INFINITE_BOUND>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.NotFiniteNumberException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Object[])>($r4, $r5, $r6);

        throw $r3;

     label3:
        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z3 != 0 goto label4;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z4 == 0 goto label5;

     label4:
        $r2 = new org.apache.commons.math3.exception.NotANumberException;

        specialinvoke $r2.<org.apache.commons.math3.exception.NotANumberException: void <init>()>();

        throw $r2;

     label5:
        r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        d6 = interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

     label6:
        if z0 != 0 goto label7;

        $b1 = d6 cmpg 0.0;

        if $b1 > 0 goto label7;

        d6 = interfaceinvoke r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        goto label6;

     label7:
        $d4 = d6 * d1;

        $d2 = 1.0 - d6;

        $d3 = $d2 * d0;

        $d5 = $d4 + $d3;

        return $d5;
    }

    public int[] nextPermutation(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        int i0, i1;
        int[] r1, $r3;
        org.apache.commons.math3.random.RandomGenerator $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r8;
        java.lang.Integer $r6, $r9, $r10;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r7;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 <= i0 goto label1;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_EXCEEDS_N>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label1:
        if i1 > 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats PERMUTATION_SIZE>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r5, $r6);

        throw $r4;

     label2:
        r1 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] natural(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        staticinvoke <org.apache.commons.math3.util.MathArrays: void shuffle(int[],org.apache.commons.math3.random.RandomGenerator)>(r1, $r2);

        $r3 = staticinvoke <org.apache.commons.math3.util.MathArrays: int[] copyOf(int[],int)>(r1, i1);

        return $r3;
    }

    public java.lang.Object[] nextSample(java.util.Collection, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        java.util.Collection r1;
        int i0, i1, $i2, i3;
        java.lang.Object[] r2, r4;
        int[] r3;
        java.lang.Object $r5;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7, $r10;
        java.lang.Integer $r8, $r11, $r12;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r9;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i0 <= i1 goto label1;

        $r9 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r9.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r10, $r11, $r12, 1);

        throw $r9;

     label1:
        if i0 > 0 goto label2;

        $r6 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r7, $r8);

        throw $r6;

     label2:
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        r3 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: int[] nextPermutation(int,int)>(i1, i0);

        r4 = newarray (java.lang.Object)[i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $i2 = r3[i3];

        $r5 = r2[$i2];

        r4[i3] = $r5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r4;
    }

    public void reSeed(long)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>(l0);

        return;
    }

    public void reSeedSecure()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l0);

        return;
    }

    public void reSeedSecure(long)
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        long l0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getSecRan()>();

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>(l0);

        return;
    }

    public void reSeed()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        long $l0, $l2, $l3;
        int $i1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l3);

        return;
    }

    public void setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        java.lang.String r1, r2;
        java.security.SecureRandom $r3;
        org.apache.commons.math3.random.RandomGenerator $r4;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <org.apache.commons.math3.random.RandomGeneratorFactory: org.apache.commons.math3.random.RandomGenerator createRandomGenerator(java.util.Random)>($r3);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = $r4;

        return;
    }

    public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1, $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand>;

        if $r1 != null goto label1;

        specialinvoke r0.<org.apache.commons.math3.random.RandomDataGenerator: void initRan()>();

     label1:
        $r2 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand>;

        return $r2;
    }

    private void initRan()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.Well19937c $r1;
        long $l0, $l2, $l3;
        int $i1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>(long)>($l3);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator rand> = $r1;

        return;
    }

    private org.apache.commons.math3.random.RandomGenerator getSecRan()
    {
        org.apache.commons.math3.random.RandomDataGenerator r0;
        org.apache.commons.math3.random.RandomGenerator $r1, $r2, $r4, $r5;
        java.security.SecureRandom $r3;
        long $l0, $l2, $l3;
        int $i1;

        r0 := @this: org.apache.commons.math3.random.RandomDataGenerator;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        if $r1 != null goto label1;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        $r4 = staticinvoke <org.apache.commons.math3.random.RandomGeneratorFactory: org.apache.commons.math3.random.RandomGenerator createRandomGenerator(java.util.Random)>($r3);

        r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand> = $r4;

        $r5 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $l2 = (long) $i1;

        $l3 = $l0 + $l2;

        interfaceinvoke $r5.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>($l3);

     label1:
        $r2 = r0.<org.apache.commons.math3.random.RandomDataGenerator: org.apache.commons.math3.random.RandomGenerator secRand>;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.random.RandomDataGenerator: long serialVersionUID> = -626730818244969716L;

        return;
    }
}
