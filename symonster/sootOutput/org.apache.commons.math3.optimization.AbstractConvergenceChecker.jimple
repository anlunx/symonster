public abstract class org.apache.commons.math3.optimization.AbstractConvergenceChecker extends java.lang.Object implements org.apache.commons.math3.optimization.ConvergenceChecker
{
    private static final double DEFAULT_RELATIVE_THRESHOLD;
    private static final double DEFAULT_ABSOLUTE_THRESHOLD;
    private final double relativeThreshold;
    private final double absoluteThreshold;

    public void <init>()
    {
        org.apache.commons.math3.optimization.AbstractConvergenceChecker r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.optimization.AbstractConvergenceChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d0 = <org.apache.commons.math3.optimization.AbstractConvergenceChecker: double DEFAULT_RELATIVE_THRESHOLD>;

        r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double relativeThreshold> = $d0;

        $d1 = <org.apache.commons.math3.optimization.AbstractConvergenceChecker: double DEFAULT_ABSOLUTE_THRESHOLD>;

        r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double absoluteThreshold> = $d1;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.AbstractConvergenceChecker r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.AbstractConvergenceChecker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double relativeThreshold> = d0;

        r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double absoluteThreshold> = d1;

        return;
    }

    public double getRelativeThreshold()
    {
        org.apache.commons.math3.optimization.AbstractConvergenceChecker r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.AbstractConvergenceChecker;

        $d0 = r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double relativeThreshold>;

        return $d0;
    }

    public double getAbsoluteThreshold()
    {
        org.apache.commons.math3.optimization.AbstractConvergenceChecker r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.AbstractConvergenceChecker;

        $d0 = r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: double absoluteThreshold>;

        return $d0;
    }

    public abstract boolean converged(int, java.lang.Object, java.lang.Object);

    static void <clinit>()
    {
        double $d0, $d1, $d2, $d3;

        $d0 = <org.apache.commons.math3.util.Precision: double EPSILON>;

        $d1 = 100.0 * $d0;

        <org.apache.commons.math3.optimization.AbstractConvergenceChecker: double DEFAULT_RELATIVE_THRESHOLD> = $d1;

        $d2 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $d3 = 100.0 * $d2;

        <org.apache.commons.math3.optimization.AbstractConvergenceChecker: double DEFAULT_ABSOLUTE_THRESHOLD> = $d3;

        return;
    }
}
