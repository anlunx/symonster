public class org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction extends java.lang.Object
{
    private final double a;
    private final double oneOverB;

    public void <init>(double, double, long)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        long l0;
        byte $b1, $b2, $b3, $b4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1, $r6, $r8;
        java.lang.Long $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Double $r4, $r5, $r7, $r9;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = d0 cmpg 0.0;

        if $b1 > 0 goto label1;

        $r8 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r8.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r9);

        throw $r8;

     label1:
        $b2 = d1 cmpg 0.0;

        if $b2 > 0 goto label2;

        $r6 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r6.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r7);

        throw $r6;

     label2:
        $b3 = d1 cmpl d0;

        if $b3 < 0 goto label3;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 0);

        throw $r3;

     label3:
        $b4 = l0 cmp 0L;

        if $b4 > 0 goto label4;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label4:
        r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double a> = d0;

        $d2 = d1 / d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d5 = neg $d3;

        $d4 = (double) l0;

        $d6 = $d5 / $d4;

        r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double oneOverB> = $d6;

        return;
    }

    public double value(long)
    {
        org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction r0;
        long l0, $l1;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction;

        l0 := @parameter0: long;

        $d3 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double a>;

        $l1 = neg l0;

        $d1 = (double) $l1;

        $d0 = r0.<org.apache.commons.math3.ml.neuralnet.sofm.util.ExponentialDecayFunction: double oneOverB>;

        $d2 = $d1 * $d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d2);

        $d5 = $d3 * $d4;

        return $d5;
    }
}
