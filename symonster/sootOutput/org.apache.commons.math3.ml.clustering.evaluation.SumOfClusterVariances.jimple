public class org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances extends org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator
{

    public void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances r0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances;

        r1 := @parameter0: org.apache.commons.math3.ml.distance.DistanceMeasure;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>(r1);

        return;
    }

    public double score(java.util.List)
    {
        org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances r0;
        java.util.List r1, $r9, $r11;
        java.util.Iterator r2, r6;
        org.apache.commons.math3.ml.clustering.Cluster r3;
        org.apache.commons.math3.ml.clustering.Clusterable r4, r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r12;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r10;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances;

        r1 := @parameter0: java.util.List;

        d2 = 0.0;

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.ml.clustering.Cluster) $r8;

        $r9 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r4 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances: org.apache.commons.math3.ml.clustering.Clusterable centroidOf(org.apache.commons.math3.ml.clustering.Cluster)>(r3);

        $r10 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r11 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        r6 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.clustering.Clusterable) $r12;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.evaluation.SumOfClusterVariances: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r7, r4);

        virtualinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d1);

        goto label2;

     label3:
        $d0 = virtualinvoke $r10.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        d2 = d2 + $d0;

     label4:
        goto label1;

     label5:
        return d2;
    }
}
