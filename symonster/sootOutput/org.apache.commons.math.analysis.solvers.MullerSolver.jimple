public class org.apache.commons.math.analysis.solvers.MullerSolver extends org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
{

    public void <init>(org.apache.commons.math.analysis.UnivariateRealFunction)
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(org.apache.commons.math.analysis.UnivariateRealFunction,int,double)>(r1, 100, 1.0E-6);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        specialinvoke r0.<org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl: void <init>(int,double)>(100, 1.0E-6);

        return;
    }

    public double solve(double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        double d0, d1, $d2;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: org.apache.commons.math.analysis.UnivariateRealFunction f>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($r1, d0, d1);

        return $d2;
    }

    public double solve(double, double, double) throws org.apache.commons.math.ConvergenceException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        double d0, d1, d2, $d3;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: org.apache.commons.math.analysis.UnivariateRealFunction f>;

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>($r1, d0, d1, d2);

        return $d3;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setMaximalIterationCount(int)>(i0);

        $d3 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double)>(r1, d0, d1, d2);

        return $d3;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0, $b1, $b2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $d3 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        $b0 = $d3 cmpl 0.0;

        if $b0 != 0 goto label1;

        return d0;

     label1:
        $d4 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $b1 = $d4 cmpl 0.0;

        if $b1 != 0 goto label2;

        return d1;

     label2:
        $d5 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d2);

        $b2 = $d5 cmpl 0.0;

        if $b2 != 0 goto label3;

        return d2;

     label3:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void verifySequence(double,double,double)>(d0, d2, d1);

        $z0 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: boolean isBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d2, r1);

        if $z0 == 0 goto label4;

        $d7 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d2);

        return $d7;

     label4:
        $d6 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d2, d1);

        return $d6;
    }

    public double solve(int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        int i0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setMaximalIterationCount(int)>(i0);

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>(r1, d0, d1);

        return $d2;
    }

    public double solve(org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, d55, d56, d57, d58, d59, d60, d61, $d62, $d63, $d64, $d65, $d66;
        byte $b0, $b1, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15;
        int $i2, $i3, i16;
        org.apache.commons.math.MaxIterationsExceededException $r2;
        boolean $z1, $z2;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d55 = d0;

        d56 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        d57 = d1;

        d58 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $d14 = d0 + d1;

        d59 = 0.5 * $d14;

        d60 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d59);

        $b0 = d56 cmpl 0.0;

        if $b0 != 0 goto label01;

        return d0;

     label01:
        $b1 = d58 cmpl 0.0;

        if $b1 != 0 goto label02;

        return d1;

     label02:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        d61 = #Infinity;

        i16 = 1;

     label03:
        $i2 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: int maximalIterationCount>;

        if i16 > $i2 goto label25;

        $d16 = d60 - d56;

        $d15 = d59 - d55;

        d2 = $d16 / $d15;

        $d18 = d58 - d60;

        $d17 = d57 - d59;

        d3 = $d18 / $d17;

        $d20 = d3 - d2;

        $d19 = d57 - d55;

        d4 = $d20 / $d19;

        $d21 = d59 - d55;

        $d22 = $d21 * d4;

        d5 = d2 + $d22;

        $d25 = d5 * d5;

        $d23 = 4.0 * d60;

        $d24 = $d23 * d4;

        d6 = $d25 - $d24;

        $d26 = -2.0 * d60;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d6);

        $d28 = d5 + $d27;

        $d29 = $d26 / $d28;

        d7 = d59 + $d29;

        $d30 = -2.0 * d60;

        $d31 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d6);

        $d32 = d5 - $d31;

        $d33 = $d30 / $d32;

        d8 = d59 + $d33;

        $z1 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: boolean isSequence(double,double,double)>(d55, d7, d57);

        if $z1 == 0 goto label04;

        $d62 = d7;

        goto label05;

     label04:
        $d62 = d8;

     label05:
        d9 = $d62;

        d10 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>($d62);

        $d34 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double relativeAccuracy>;

        $d35 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d62);

        $d37 = $d34 * $d35;

        $d36 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double absoluteAccuracy>;

        d11 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d37, $d36);

        $d38 = $d62 - d61;

        $d39 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d38);

        $b4 = $d39 cmpg d11;

        if $b4 > 0 goto label06;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setResult(double,int)>($d62, i16);

        $d54 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double result>;

        return $d54;

     label06:
        $d40 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d10);

        $d41 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double functionValueAccuracy>;

        $b5 = $d40 cmpg $d41;

        if $b5 > 0 goto label07;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setResult(double,int)>($d62, i16);

        $d53 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double result>;

        return $d53;

     label07:
        $b6 = $d62 cmpg d59;

        if $b6 >= 0 goto label08;

        $d52 = d59 - d55;

        $d50 = d57 - d55;

        $d51 = 0.95 * $d50;

        $b15 = $d52 cmpl $d51;

        if $b15 > 0 goto label10;

     label08:
        $b7 = d9 cmpl d59;

        if $b7 <= 0 goto label09;

        $d49 = d57 - d59;

        $d47 = d57 - d55;

        $d48 = 0.95 * $d47;

        $b14 = $d49 cmpl $d48;

        if $b14 > 0 goto label10;

     label09:
        $b8 = d9 cmpl d59;

        if $b8 != 0 goto label11;

     label10:
        $z2 = 1;

        goto label12;

     label11:
        $z2 = 0;

     label12:
        if $z2 != 0 goto label21;

        $b10 = d9 cmpg d59;

        if $b10 >= 0 goto label13;

        $d63 = d55;

        goto label14;

     label13:
        $d63 = d59;

     label14:
        d55 = $d63;

        $b11 = d9 cmpg d59;

        if $b11 >= 0 goto label15;

        $d64 = d56;

        goto label16;

     label15:
        $d64 = d60;

     label16:
        d56 = $d64;

        $b12 = d9 cmpl d59;

        if $b12 <= 0 goto label17;

        $d65 = d57;

        goto label18;

     label17:
        $d65 = d59;

     label18:
        d57 = $d65;

        $b13 = d9 cmpl d59;

        if $b13 <= 0 goto label19;

        $d66 = d58;

        goto label20;

     label19:
        $d66 = d60;

     label20:
        d58 = $d66;

        d59 = d9;

        d60 = d10;

        d61 = d9;

        goto label24;

     label21:
        $d42 = d55 + d57;

        d12 = 0.5 * $d42;

        d13 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d12);

        $d43 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d56);

        $d44 = staticinvoke <org.apache.commons.math.util.MathUtils: double sign(double)>(d13);

        $d45 = $d43 + $d44;

        $b9 = $d45 cmpl 0.0;

        if $b9 != 0 goto label22;

        d57 = d12;

        d58 = d13;

        goto label23;

     label22:
        d55 = d12;

        d56 = d13;

     label23:
        $d46 = d55 + d57;

        d59 = 0.5 * $d46;

        d60 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d59);

        d61 = #Infinity;

     label24:
        i16 = i16 + 1;

        goto label03;

     label25:
        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: int maximalIterationCount>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        throw $r2;
    }

    public double solve2(double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        double d0, d1, $d2;
        org.apache.commons.math.analysis.UnivariateRealFunction $r1;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: org.apache.commons.math.analysis.UnivariateRealFunction f>;

        $d2 = virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double solve2(org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($r1, d0, d1);

        return $d2;
    }

    public double solve2(org.apache.commons.math.analysis.UnivariateRealFunction, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.solvers.MullerSolver r0;
        org.apache.commons.math.analysis.UnivariateRealFunction r1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, $d62, d63, d64, d65, d66;
        byte $b0, $b1, $b4, $b5, $b6, $b7, $b8, $b9, $b10;
        int $i2, $i3, i11;
        org.apache.commons.math.MaxIterationsExceededException $r2;

        r0 := @this: org.apache.commons.math.analysis.solvers.MullerSolver;

        r1 := @parameter0: org.apache.commons.math.analysis.UnivariateRealFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d53 = d0;

        d54 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d0);

        d55 = d1;

        d56 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d1);

        $d7 = d0 + d1;

        d57 = 0.5 * $d7;

        d58 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d57);

        $b0 = d54 cmpl 0.0;

        if $b0 != 0 goto label01;

        return d0;

     label01:
        $b1 = d56 cmpl 0.0;

        if $b1 != 0 goto label02;

        return d1;

     label02:
        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void verifyBracketing(double,double,org.apache.commons.math.analysis.UnivariateRealFunction)>(d0, d1, r1);

        d59 = #Infinity;

        i11 = 1;

     label03:
        $i2 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: int maximalIterationCount>;

        if i11 > $i2 goto label14;

        $d9 = d57 - d55;

        $d8 = d55 - d53;

        d2 = $d9 / $d8;

        $d10 = 1.0 + d2;

        $d11 = $d10 * d56;

        $d13 = d58 - $d11;

        $d12 = d2 * d54;

        $d14 = $d13 + $d12;

        d3 = d2 * $d14;

        $d15 = 2.0 * d2;

        $d16 = $d15 + 1.0;

        $d21 = $d16 * d58;

        $d18 = 1.0 + d2;

        $d17 = 1.0 + d2;

        $d19 = $d18 * $d17;

        $d20 = $d19 * d56;

        $d24 = $d21 - $d20;

        $d22 = d2 * d2;

        $d23 = $d22 * d54;

        d4 = $d24 + $d23;

        $d25 = 1.0 + d2;

        d5 = $d25 * d58;

        $d28 = d4 * d4;

        $d26 = 4.0 * d3;

        $d27 = $d26 * d5;

        d6 = $d28 - $d27;

        $b4 = d6 cmpl 0.0;

        if $b4 < 0 goto label06;

        $d49 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d6);

        d60 = d4 + $d49;

        $d50 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d6);

        d61 = d4 - $d50;

        $d51 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d60);

        $d52 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d61);

        $b10 = $d51 cmpl $d52;

        if $b10 <= 0 goto label04;

        $d62 = d60;

        goto label05;

     label04:
        $d62 = d61;

     label05:
        d63 = $d62;

        goto label07;

     label06:
        $d29 = d4 * d4;

        $d30 = $d29 - d6;

        d63 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d30);

     label07:
        $b5 = d63 cmpl 0.0;

        if $b5 == 0 goto label10;

        $d45 = 2.0 * d5;

        $d44 = d57 - d55;

        $d46 = $d45 * $d44;

        $d47 = $d46 / d63;

        d64 = d57 - $d47;

     label08:
        $b8 = d64 cmpl d55;

        if $b8 == 0 goto label09;

        $b9 = d64 cmpl d57;

        if $b9 != 0 goto label11;

     label09:
        $d48 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double absoluteAccuracy>;

        d64 = d64 + $d48;

        goto label08;

     label10:
        $d31 = staticinvoke <org.apache.commons.math.util.FastMath: double random()>();

        $d32 = d1 - d0;

        $d33 = $d31 * $d32;

        d64 = d0 + $d33;

        d59 = #Infinity;

     label11:
        d65 = interfaceinvoke r1.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d64);

        $d34 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double relativeAccuracy>;

        $d35 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d64);

        $d37 = $d34 * $d35;

        $d36 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double absoluteAccuracy>;

        d66 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d37, $d36);

        $d38 = d64 - d59;

        $d39 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d38);

        $b6 = $d39 cmpg d66;

        if $b6 > 0 goto label12;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setResult(double,int)>(d64, i11);

        $d43 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double result>;

        return $d43;

     label12:
        $d40 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d65);

        $d41 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double functionValueAccuracy>;

        $b7 = $d40 cmpg $d41;

        if $b7 > 0 goto label13;

        virtualinvoke r0.<org.apache.commons.math.analysis.solvers.MullerSolver: void setResult(double,int)>(d64, i11);

        $d42 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: double result>;

        return $d42;

     label13:
        d53 = d55;

        d54 = d56;

        d55 = d57;

        d56 = d58;

        d57 = d64;

        d58 = d65;

        d59 = d64;

        i11 = i11 + 1;

        goto label03;

     label14:
        $r2 = new org.apache.commons.math.MaxIterationsExceededException;

        $i3 = r0.<org.apache.commons.math.analysis.solvers.MullerSolver: int maximalIterationCount>;

        specialinvoke $r2.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($i3);

        throw $r2;
    }
}
