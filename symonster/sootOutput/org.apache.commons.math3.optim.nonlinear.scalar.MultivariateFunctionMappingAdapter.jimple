public class org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter extends java.lang.Object implements org.apache.commons.math3.analysis.MultivariateFunction
{
    private final org.apache.commons.math3.analysis.MultivariateFunction bounded;
    private final org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers;

    public void <init>(org.apache.commons.math3.analysis.MultivariateFunction, double[], double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        double[] r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i8, i9;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] $r4, $r5, $r7, $r9, $r11, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper $r6;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerBoundMapper $r8;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper $r10;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$NoBoundsMapper $r12;
        byte $b5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r14;
        java.lang.Double $r15, $r16;
        org.apache.commons.math3.exception.DimensionMismatchException $r17;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r2);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r3);

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label01;

        $r17 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i7 = lengthof r2;

        $i6 = lengthof r3;

        specialinvoke $r17.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i7, $i6);

        throw $r17;

     label01:
        i8 = 0;

     label02:
        $i2 = lengthof r2;

        if i8 >= $i2 goto label04;

        $d8 = r3[i8];

        $d7 = r2[i8];

        $b5 = $d8 cmpl $d7;

        if $b5 >= 0 goto label03;

        $r14 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $d9 = r3[i8];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d9);

        $d10 = r2[i8];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        specialinvoke $r14.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r15, $r16, 1);

        throw $r14;

     label03:
        i8 = i8 + 1;

        goto label02;

     label04:
        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded> = r1;

        $i3 = lengthof r2;

        $r4 = newarray (org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper)[$i3];

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers> = $r4;

        i9 = 0;

     label05:
        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i4 = lengthof $r5;

        if i9 >= $i4 goto label10;

        $d0 = r2[i9];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 == 0 goto label07;

        $d5 = r3[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        if $z2 == 0 goto label06;

        $r13 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r12 = new org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$NoBoundsMapper;

        specialinvoke $r12.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$NoBoundsMapper: void <init>(org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$1)>(null);

        $r13[i9] = $r12;

        goto label09;

     label06:
        $r11 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r10 = new org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper;

        $d6 = r3[i9];

        specialinvoke $r10.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper: void <init>(double)>($d6);

        $r11[i9] = $r10;

        goto label09;

     label07:
        $d1 = r3[i9];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 == 0 goto label08;

        $r9 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r8 = new org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerBoundMapper;

        $d4 = r2[i9];

        specialinvoke $r8.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerBoundMapper: void <init>(double)>($d4);

        $r9[i9] = $r8;

        goto label09;

     label08:
        $r7 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r6 = new org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper;

        $d3 = r2[i9];

        $d2 = r3[i9];

        specialinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$LowerUpperBoundMapper: void <init>(double,double)>($d3, $d2);

        $r7[i9] = $r6;

     label09:
        i9 = i9 + 1;

        goto label05;

     label10:
        return;
    }

    public double[] unboundedToBounded(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter r0;
        double[] r1, r2;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] $r3, $r4, $r5;
        int $i0, $i1, i2;
        double $d0, $d1;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper $r6;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;

        r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i0 = lengthof $r3;

        r2 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r6 = $r5[i2];

        $d0 = r1[i2];

        $d1 = interfaceinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper: double unboundedToBounded(double)>($d0);

        r2[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public double[] boundedToUnbounded(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter r0;
        double[] r1, r2;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] $r3, $r4, $r5;
        int $i0, $i1, i2;
        double $d0, $d1;
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper $r6;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;

        r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i0 = lengthof $r3;

        r2 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper[] mappers>;

        $r6 = $r5[i2];

        $d0 = r1[i2];

        $d1 = interfaceinvoke $r6.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper: double boundedToUnbounded(double)>($d0);

        r2[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public double value(double[])
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter r0;
        double[] r1, $r3;
        org.apache.commons.math3.analysis.MultivariateFunction $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: org.apache.commons.math3.analysis.MultivariateFunction bounded>;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter: double[] unboundedToBounded(double[])>(r1);

        $d0 = interfaceinvoke $r2.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>($r3);

        return $d0;
    }
}
