public abstract class org.apache.commons.math.linear.AbstractRealMatrix extends java.lang.Object implements org.apache.commons.math.linear.RealMatrix
{
    private org.apache.commons.math.linear.DecompositionSolver lu;

    protected void <init>()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        return;
    }

    protected void <init>(int, int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1;
        java.lang.Object[] $r1, $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r2, $r7;
        java.lang.Integer $r3, $r4, $r8, $r9;
        java.lang.IllegalArgumentException $r5, $r10;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 1 goto label1;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r6[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r10;

     label1:
        if i1 > 0 goto label2;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSUFFICIENT_DIMENSION>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label2:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        return;
    }

    public abstract org.apache.commons.math.linear.RealMatrix createMatrix(int, int) throws java.lang.IllegalArgumentException;

    public abstract org.apache.commons.math.linear.RealMatrix copy();

    public org.apache.commons.math.linear.RealMatrix add(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d0 + $d1;

        interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math.linear.RealMatrix subtract(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d0 - $d1;

        interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math.linear.RealMatrix scalarAdd(double)
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double d0, $d1, $d2;
        int i0, i1, i2, i3;
        org.apache.commons.math.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d1 + d0;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math.linear.RealMatrix scalarMultiply(double)
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double d0, $d1, $d2;
        int i0, i1, i2, i3;
        org.apache.commons.math.linear.RealMatrix r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        d0 := @parameter0: double;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i3);

        $d2 = $d1 * d0;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i2, i3, $d2);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrix r1, r2;
        int i0, i1, i2, i3, i4, i5;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math.linear.AnyMatrix,org.apache.commons.math.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i0, i1);

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i2 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i3, i5);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i5, i4);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i3, i4, d3);

        i4 = i4 + 1;

        goto label2;

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return r2;
    }

    public org.apache.commons.math.linear.RealMatrix preMultiply(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrix r1, $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>(r0);

        return $r2;
    }

    public double[][] getData()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double[][] r1;
        double[] r2;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = newmultiarray (double)[$i0][$i1];

        i4 = 0;

     label1:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label4;

        r2 = r1[i4];

        i5 = 0;

     label2:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        r2[i5] = $d0;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r1;
    }

    public double getNorm()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.AbstractRealMatrix$1 $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = new org.apache.commons.math.linear.AbstractRealMatrix$1;

        specialinvoke $r1.<org.apache.commons.math.linear.AbstractRealMatrix$1: void <init>(org.apache.commons.math.linear.AbstractRealMatrix)>(r0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)>($r1);

        return $d0;
    }

    public double getFrobeniusNorm()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.AbstractRealMatrix$2 $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = new org.apache.commons.math.linear.AbstractRealMatrix$2;

        specialinvoke $r1.<org.apache.commons.math.linear.AbstractRealMatrix$2: void <init>(org.apache.commons.math.linear.AbstractRealMatrix)>(r0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)>($r1);

        return $d0;
    }

    public org.apache.commons.math.linear.RealMatrix getSubMatrix(int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.apache.commons.math.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = i1 - i0;

        $i7 = $i4 + 1;

        $i5 = i3 - i2;

        $i6 = $i5 + 1;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>($i7, $i6);

        i10 = i0;

     label1:
        if i10 > i1 goto label4;

        i11 = i2;

     label2:
        if i11 > i3 goto label3;

        $i8 = i10 - i0;

        $i9 = i11 - i2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i10, i11);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>($i8, $i9, $d0);

        i11 = i11 + 1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        return r1;
    }

    public org.apache.commons.math.linear.RealMatrix getSubMatrix(int[], int[]) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int[] r1, r2;
        org.apache.commons.math.linear.RealMatrix r3;
        int $i0, $i1;
        org.apache.commons.math.linear.AbstractRealMatrix$3 $r4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int[],int[])>(r0, r1, r2);

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        r3 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>($i1, $i0);

        $r4 = new org.apache.commons.math.linear.AbstractRealMatrix$3;

        specialinvoke $r4.<org.apache.commons.math.linear.AbstractRealMatrix$3: void <init>(org.apache.commons.math.linear.AbstractRealMatrix,int[],int[])>(r0, r1, r2);

        interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)>($r4);

        return r3;
    }

    public void copySubMatrix(int, int, int, int, double[][]) throws org.apache.commons.math.linear.MatrixIndexException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        double[][] r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r6, $r7, $r8;
        double[] $r5, $r10;
        java.lang.IllegalArgumentException $r9;
        org.apache.commons.math.linear.AbstractRealMatrix$4 $r11;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: double[][];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i6 = i1 + 1;

        i4 = $i6 - i0;

        $i7 = i3 + 1;

        i5 = $i7 - i2;

        $i8 = lengthof r1;

        if $i8 < i4 goto label1;

        $r10 = r1[0];

        $i11 = lengthof $r10;

        if $i11 >= i5 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r2 = newarray (java.lang.Object)[4];

        $i9 = lengthof r1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r2[0] = $r4;

        $r5 = r1[0];

        $i10 = lengthof $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r2[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r2[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r2[3] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r9;

     label2:
        $r11 = new org.apache.commons.math.linear.AbstractRealMatrix$4;

        specialinvoke $r11.<org.apache.commons.math.linear.AbstractRealMatrix$4: void <init>(org.apache.commons.math.linear.AbstractRealMatrix,double[][])>(r0, r1);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)>($r11, i0, i1, i2, i3);

        return;
    }

    public void copySubMatrix(int[], int[], double[][]) throws org.apache.commons.math.linear.MatrixIndexException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int[] r1, r2;
        double[][] r3;
        double[] r4, $r8, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r12;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        r3 := @parameter2: double[][];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int[],int[])>(r0, r1, r2);

        $i1 = lengthof r3;

        $i0 = lengthof r1;

        if $i1 < $i0 goto label1;

        $r13 = r3[0];

        $i7 = lengthof $r13;

        $i6 = lengthof r2;

        if $i7 >= $i6 goto label2;

     label1:
        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r5 = newarray (java.lang.Object)[4];

        $i2 = lengthof r3;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[0] = $r7;

        $r8 = r3[0];

        $i3 = lengthof $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[1] = $r9;

        $i4 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r5[2] = $r10;

        $i5 = lengthof r2;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r5[3] = $r11;

        $r12 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r12;

     label2:
        i12 = 0;

     label3:
        $i8 = lengthof r1;

        if i12 >= $i8 goto label6;

        r4 = r3[i12];

        i13 = 0;

     label4:
        $i9 = lengthof r2;

        if i13 >= $i9 goto label5;

        $i11 = r1[i12];

        $i10 = r2[i13];

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>($i11, $i10);

        r4[i13] = $d0;

        i13 = i13 + 1;

        goto label4;

     label5:
        i12 = i12 + 1;

        goto label3;

     label6:
        return;
    }

    public void setSubMatrix(double[][], int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double[][] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14;
        double[] $r2, $r3, $r4, $r8;
        double $d0;
        java.lang.Object[] $r5, $r11, $r14;
        org.apache.commons.math.exception.util.LocalizedFormats $r6, $r12, $r15;
        java.lang.Integer $r7, $r9;
        java.lang.IllegalArgumentException $r10, $r13, $r16;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: double[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r1;

        if i2 != 0 goto label1;

        $r15 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        $r14 = newarray (java.lang.Object)[0];

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r16;

     label1:
        $r2 = r1[0];

        i3 = lengthof $r2;

        if i3 != 0 goto label2;

        $r12 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        $r11 = newarray (java.lang.Object)[0];

        $r13 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r12, $r11);

        throw $r13;

     label2:
        i12 = 1;

     label3:
        if i12 >= i2 goto label5;

        $r4 = r1[i12];

        $i10 = lengthof $r4;

        if $i10 == i3 goto label4;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIFFERENT_ROWS_LENGTHS>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r5[0] = $r7;

        $r8 = r1[i12];

        $i11 = lengthof $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r5[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r10;

     label4:
        i12 = i12 + 1;

        goto label3;

     label5:
        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i1);

        $i4 = i2 + i0;

        $i5 = $i4 - 1;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, $i5);

        $i6 = i3 + i1;

        $i7 = $i6 - 1;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, $i7);

        i13 = 0;

     label6:
        if i13 >= i2 goto label9;

        i14 = 0;

     label7:
        if i14 >= i3 goto label8;

        $i9 = i0 + i13;

        $i8 = i1 + i14;

        $r3 = r1[i13];

        $d0 = $r3[i14];

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>($i9, $i8, $d0);

        i14 = i14 + 1;

        goto label7;

     label8:
        i13 = i13 + 1;

        goto label6;

     label9:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        return;
    }

    public org.apache.commons.math.linear.RealMatrix getRowMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        org.apache.commons.math.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(1, i1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i2);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(0, i2, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setRowMatrix(int, org.apache.commons.math.linear.RealMatrix) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.math.linear.RealMatrix r1;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        if $i2 != 1 goto label1;

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        if $i5 == i1 goto label2;

     label1:
        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(0, i6);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i6, $d0);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public org.apache.commons.math.linear.RealMatrix getColumnMatrix(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        org.apache.commons.math.linear.RealMatrix r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i1, 1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i0);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i2, 0, $d0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setColumnMatrix(int, org.apache.commons.math.linear.RealMatrix) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.apache.commons.math.linear.RealMatrix r1;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        if $i2 != i1 goto label1;

        $i5 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        if $i5 == 1 goto label2;

     label1:
        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        i6 = 0;

     label3:
        if i6 >= i1 goto label4;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i6, 0);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i6, i0, $d0);

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public org.apache.commons.math.linear.RealVector getRowVector(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0;
        org.apache.commons.math.linear.ArrayRealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double[] getRow(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r2, 0);

        return $r1;
    }

    public void setRowVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math.linear.RealVector r1;
        double $d0;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealVector;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[0] = $r5;

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i4);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i4, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public org.apache.commons.math.linear.RealVector getColumnVector(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0;
        org.apache.commons.math.linear.ArrayRealVector $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        $r1 = new org.apache.commons.math.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double[] getColumn(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r2, 0);

        return $r1;
    }

    public void setColumnVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        org.apache.commons.math.linear.RealVector r1;
        double $d0;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealVector;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i4);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i0, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public double[] getRow(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i0, i2);

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setRow(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        double[] r1;
        double $d0;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkRowIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[0] = $r5;

        $i3 = lengthof r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i0, i4, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public double[] getColumn(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        r1 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i0);

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void setColumn(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4;
        double[] r1;
        double $d0;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkColumnIndex(org.apache.commons.math.linear.AnyMatrix,int)>(r0, i0);

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DIMENSIONS_MISMATCH_2x2>;

        $r3 = newarray (java.lang.Object)[4];

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[2] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3[3] = $r8;

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $d0 = r1[i4];

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i0, $d0);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    public abstract double getEntry(int, int) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void setEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void addToEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public abstract void multiplyEntry(int, int, double) throws org.apache.commons.math.linear.MatrixIndexException;

    public org.apache.commons.math.linear.RealMatrix transpose()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix r1;
        org.apache.commons.math.linear.AbstractRealMatrix$5 $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.RealMatrix createMatrix(int,int)>(i1, i0);

        $r2 = new org.apache.commons.math.linear.AbstractRealMatrix$5;

        specialinvoke $r2.<org.apache.commons.math.linear.AbstractRealMatrix$5: void <init>(org.apache.commons.math.linear.AbstractRealMatrix,org.apache.commons.math.linear.RealMatrix)>(r0, r1);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)>($r2);

        return r1;
    }

    public org.apache.commons.math.linear.RealMatrix inverse() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.DecompositionSolver $r1, $r2, $r5;
        org.apache.commons.math.linear.RealMatrix $r3;
        org.apache.commons.math.linear.LUDecompositionImpl $r4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        if $r1 != null goto label1;

        $r4 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r4.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $r5 = virtualinvoke $r4.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = $r5;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix getInverse()>();

        return $r3;
    }

    public double getDeterminant() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.LUDecompositionImpl $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r1.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $d0 = virtualinvoke $r1.<org.apache.commons.math.linear.LUDecompositionImpl: double getDeterminant()>();

        return $d0;
    }

    public boolean isSquare()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSingular()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.DecompositionSolver $r1, $r2, $r4;
        boolean $z0, $z1;
        org.apache.commons.math.linear.LUDecompositionImpl $r3;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        if $r1 != null goto label1;

        $r3 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r3.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $r4 = virtualinvoke $r3.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.math.linear.DecompositionSolver: boolean isNonSingular()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public abstract int getRowDimension();

    public abstract int getColumnDimension();

    public double getTrace() throws org.apache.commons.math.linear.NonSquareMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, i2;
        double $d0, d1;
        org.apache.commons.math.linear.NonSquareMatrixException $r1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        if i0 == i1 goto label1;

        $r1 = new org.apache.commons.math.linear.NonSquareMatrixException;

        specialinvoke $r1.<org.apache.commons.math.linear.NonSquareMatrixException: void <init>(int,int)>(i0, i1);

        throw $r1;

     label1:
        d1 = 0.0;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i2, i2);

        d1 = d1 + $d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        return d1;
    }

    public double[] operate(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double[] r1, r2;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, d3;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r3 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3[1] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r7;

     label1:
        r2 = newarray (double)[i0];

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i1 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        $d1 = r1[i5];

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math.linear.RealVector operate(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealVector r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r3, $r6, $r7;
        org.apache.commons.math.linear.ArrayRealVector $r4, $r5, $r9;
        java.lang.ClassCastException $r8;
        double $d0, $d1, $d2, d3;
        java.lang.Object[] $r10;
        org.apache.commons.math.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12, $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

     label1:
        $r4 = new org.apache.commons.math.linear.ArrayRealVector;

        $r5 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double[] operate(double[])>($r6);

        specialinvoke $r4.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r7, 0);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i2 == i1 goto label4;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r10 = newarray (java.lang.Object)[2];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[1] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r14;

     label4:
        r3 = newarray (double)[i0];

        i4 = 0;

     label5:
        if i4 >= i0 goto label8;

        d3 = 0.0;

        i5 = 0;

     label6:
        if i5 >= i1 goto label7;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i5);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label6;

     label7:
        r3[i4] = d3;

        i4 = i4 + 1;

        goto label5;

     label8:
        $r9 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r9.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public double[] preMultiply(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double[] r1, r2;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1, $d2, d3;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r3 = newarray (java.lang.Object)[2];

        $i3 = lengthof r1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r7;

     label1:
        r2 = newarray (double)[i1];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        $d1 = r1[i5];

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math.linear.RealVector preMultiply(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealVector r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r3, $r6, $r7;
        org.apache.commons.math.linear.ArrayRealVector $r4, $r5, $r9;
        java.lang.ClassCastException $r8;
        double $d0, $d1, $d2, d3;
        java.lang.Object[] $r10;
        org.apache.commons.math.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12, $r13;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

     label1:
        $r4 = new org.apache.commons.math.linear.ArrayRealVector;

        $r5 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.ArrayRealVector: double[] getDataRef()>();

        $r7 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double[] preMultiply(double[])>($r6);

        specialinvoke $r4.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>($r7, 0);

     label2:
        return $r4;

     label3:
        $r8 := @caughtexception;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i2 == i0 goto label4;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r10 = newarray (java.lang.Object)[2];

        $i3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r10[0] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[1] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r14;

     label4:
        r3 = newarray (double)[i1];

        i4 = 0;

     label5:
        if i4 >= i1 goto label8;

        d3 = 0.0;

        i5 = 0;

     label6:
        if i5 >= i0 goto label7;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i5);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label6;

     label7:
        r3[i4] = d3;

        i4 = i4 + 1;

        goto label5;

     label8:
        $r9 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r9.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[])>(r3);

        return $r9;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i4, i5, d0);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i4, i5, d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i4, i5, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i6, i7);

        d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i6, i7, d0);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i6, i7, d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i6, i7);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i6, i7, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i5, i4, d0);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i5, i4, d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i4);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i5, i4, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i7, i6);

        d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i7, i6, d0);

        virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: void setEntry(int,int,double)>(i7, i6, d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = null;

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixChangingVisitor: double end()>();

        return $d2;
    }

    public double walkInColumnOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i7, i6);

        interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i7, i6, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor) throws org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor)>(r1);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math.linear.RealMatrixChangingVisitor,int,int,int,int)>(r1, i0, i1, i2, i3);

        return $d0;
    }

    public double walkInOptimizedOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math.linear.MatrixIndexException, org.apache.commons.math.linear.MatrixVisitorException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double walkInRowOrder(org.apache.commons.math.linear.RealMatrixPreservingVisitor,int,int,int,int)>(r1, i0, i1, i2, i3);

        return $d0;
    }

    public double[] solve(double[]) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        double[] r1, $r4;
        org.apache.commons.math.linear.DecompositionSolver $r2, $r3, $r6;
        org.apache.commons.math.linear.LUDecompositionImpl $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        if $r2 != null goto label1;

        $r5 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = $r6;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math.linear.DecompositionSolver: double[] solve(double[])>(r1);

        return $r4;
    }

    public org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException, org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.RealMatrix r1, $r4;
        org.apache.commons.math.linear.DecompositionSolver $r2, $r3, $r6;
        org.apache.commons.math.linear.LUDecompositionImpl $r5;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        if $r2 != null goto label1;

        $r5 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = $r6;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        $r4 = interfaceinvoke $r3.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix)>(r1);

        return $r4;
    }

    public void luDecompose() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        org.apache.commons.math.linear.DecompositionSolver $r1, $r3;
        org.apache.commons.math.linear.LUDecompositionImpl $r2;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        $r1 = r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu>;

        if $r1 != null goto label1;

        $r2 = new org.apache.commons.math.linear.LUDecompositionImpl;

        specialinvoke $r2.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix,double)>(r0, 2.2250738585072014E-308);

        $r3 = virtualinvoke $r2.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r0.<org.apache.commons.math.linear.AbstractRealMatrix: org.apache.commons.math.linear.DecompositionSolver lu> = $r3;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String r2, r3, $r9;
        java.lang.StringBuilder $r4, $r6;
        java.lang.Class $r5;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i2 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = $i2 + 1;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        i4 = 0;

     label1:
        if i4 >= i0 goto label6;

        if i4 <= 0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        i5 = 0;

     label3:
        if i5 >= i1 goto label5;

        if i5 <= 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i4, i5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        i5 = i5 + 1;

        goto label3;

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        i4 = i4 + 1;

        goto label1;

     label6:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        java.lang.Object r1;
        org.apache.commons.math.linear.RealMatrix r2;
        int i0, i1, $i2, $i3, i5, i6;
        boolean $z0;
        double $d0, $d1;
        byte $b4;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.linear.RealMatrix;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math.linear.RealMatrix) r1;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        if $i2 != i1 goto label3;

        $i3 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        if $i3 == i0 goto label4;

     label3:
        return 0;

     label4:
        i5 = 0;

     label5:
        if i5 >= i0 goto label9;

        i6 = 0;

     label6:
        if i6 >= i1 goto label8;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i5, i6);

        $d1 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i5, i6);

        $b4 = $d0 cmpl $d1;

        if $b4 == 0 goto label7;

        return 0;

     label7:
        i6 = i6 + 1;

        goto label6;

     label8:
        i5 = i5 + 1;

        goto label5;

     label9:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.math.linear.AbstractRealMatrix r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.AbstractRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: int getColumnDimension()>();

        $i2 = 7 * 31;

        i13 = $i2 + i0;

        $i3 = i13 * 31;

        i14 = $i3 + i1;

        i15 = 0;

     label1:
        if i15 >= i0 goto label4;

        i16 = 0;

     label2:
        if i16 >= i1 goto label3;

        $i8 = i14 * 31;

        $i4 = i15 + 1;

        $i7 = 11 * $i4;

        $i5 = i16 + 1;

        $i6 = 17 * $i5;

        $i9 = $i7 + $i6;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.AbstractRealMatrix: double getEntry(int,int)>(i15, i16);

        $i10 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d0);

        $i11 = $i9 * $i10;

        i14 = $i8 + $i11;

        i16 = i16 + 1;

        goto label2;

     label3:
        i15 = i15 + 1;

        goto label1;

     label4:
        return i14;
    }
}
