public class com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction extends java.lang.Object
{
    private static final com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder QUADRATIC_FINDER;
    private static final com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder ROOT_FINDER;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.financial.model.option.definition.SABRDataBundle calibrate(com.opengamma.analytics.financial.model.option.definition.OptionDefinition, com.opengamma.analytics.financial.model.option.definition.SABRDataBundle)
    {
        com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction r0;
        com.opengamma.analytics.financial.model.option.definition.OptionDefinition r1;
        com.opengamma.analytics.financial.model.option.definition.SABRDataBundle r2, $r13, $r15;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36;
        java.lang.Double[] r3, r20;
        int i0, i3;
        java.lang.Double r4, $r6, $r11, $r14;
        org.threeten.bp.ZonedDateTime $r5;
        boolean $z0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r7, $r16;
        double[] $r8, $r17;
        com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder $r9, $r18;
        java.lang.Object[] $r10, $r19;
        byte $b1, $b2;
        com.opengamma.analytics.math.MathException $r12;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.definition.OptionDefinition;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.SABRDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "data");

        d0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getBeta()>();

        $r5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: org.threeten.bp.ZonedDateTime getDate()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.definition.OptionDefinition: double getTimeToExpiry(org.threeten.bp.ZonedDateTime)>($r5);

        d2 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getRho()>();

        d3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getVolOfVol()>();

        $r6 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.definition.OptionDefinition: java.lang.Double getStrike()>();

        $d13 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        d4 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getVolatility(double,double)>(d1, $d13);

        d5 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getCostOfCarry()>();

        $d14 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: double getSpot()>();

        $d15 = d5 * d1;

        $d16 = staticinvoke <java.lang.Math: double exp(double)>($d15);

        d6 = $d14 * $d16;

        d7 = 1.0 - d0;

        d8 = staticinvoke <java.lang.Math: double pow(double,double)>(d6, d7);

        $d17 = neg d4;

        d9 = $d17 * d8;

        $d18 = 3.0 * d2;

        $d19 = $d18 * d2;

        $d20 = 2.0 - $d19;

        $d21 = $d20 * d3;

        $d22 = $d21 * d3;

        $d23 = $d22 * d1;

        $d24 = $d23 / 24.0;

        d10 = 1.0 + $d24;

        $d25 = d2 * d0;

        $d26 = $d25 * d3;

        $d27 = $d26 * d1;

        $d28 = $d27 / 4.0;

        d11 = $d28 / d8;

        $d29 = d7 * d7;

        $d30 = $d29 * d1;

        $d31 = $d30 / 24.0;

        $d32 = $d31 / d8;

        d12 = $d32 / d8;

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d12, 0.0, 1.0E-16);

        if $z0 == 0 goto label1;

        $r18 = <com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction: com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder QUADRATIC_FINDER>;

        $r16 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r17 = newarray (double)[3];

        $r17[0] = d9;

        $r17[1] = d10;

        $r17[2] = d11;

        specialinvoke $r16.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r17);

        $r19 = interfaceinvoke $r18.<com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder: java.lang.Object[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)>($r16);

        r20 = (java.lang.Double[]) $r19;

        goto label2;

     label1:
        $r9 = <com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction: com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder ROOT_FINDER>;

        $r7 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r8 = newarray (double)[4];

        $r8[0] = d9;

        $r8[1] = d10;

        $r8[2] = d11;

        $r8[3] = d12;

        specialinvoke $r7.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r8);

        $r10 = interfaceinvoke $r9.<com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder: java.lang.Object[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)>($r7);

        r20 = (java.lang.Double[]) $r10;

     label2:
        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r20);

        $r11 = r20[0];

        $d33 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $b1 = $d33 cmpl 0.0;

        if $b1 <= 0 goto label3;

        $r14 = r20[0];

        $d36 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $r15 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: com.opengamma.analytics.financial.model.option.definition.SABRDataBundle withAlpha(double)>($d36);

        return $r15;

     label3:
        r3 = r20;

        i0 = lengthof r20;

        i3 = 0;

     label4:
        if i3 >= i0 goto label6;

        r4 = r3[i3];

        $d34 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $b2 = $d34 cmpl 0.0;

        if $b2 <= 0 goto label5;

        $d35 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $r13 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SABRDataBundle: com.opengamma.analytics.financial.model.option.definition.SABRDataBundle withAlpha(double)>($d35);

        return $r13;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        $r12 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r12.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("Could not find positive real root");

        throw $r12;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.rootfinding.QuadraticRealRootFinder $r0;
        com.opengamma.analytics.math.rootfinding.CubicRealRootFinder $r1;

        $r0 = new com.opengamma.analytics.math.rootfinding.QuadraticRealRootFinder;

        specialinvoke $r0.<com.opengamma.analytics.math.rootfinding.QuadraticRealRootFinder: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction: com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder QUADRATIC_FINDER> = $r0;

        $r1 = new com.opengamma.analytics.math.rootfinding.CubicRealRootFinder;

        specialinvoke $r1.<com.opengamma.analytics.math.rootfinding.CubicRealRootFinder: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.surface.SABRATMVolatilityCalibrationFunction: com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder ROOT_FINDER> = $r1;

        return;
    }
}
