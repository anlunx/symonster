public class org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution extends org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution
{

    public void <init>(double[], double[][], double[][][])
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        double[] r1;
        double[][] r2;
        double[][][] r3;
        java.util.List $r4;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[][][];

        $r4 = staticinvoke <org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution: java.util.List createComponents(double[],double[][],double[][][])>(r1, r2, r3);

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(java.util.List)>($r4);

        return;
    }

    public void <init>(java.util.List)
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        java.util.List r1;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(java.util.List)>(r1);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, java.util.List) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        java.util.List r2;

        r0 := @this: org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.apache.commons.math3.distribution.MixtureMultivariateRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,java.util.List)>(r1, r2);

        return;
    }

    private static java.util.List createComponents(double[], double[][], double[][][])
    {
        double[] r0, $r8;
        double[][] r1, $r7;
        double[][][] r2;
        java.util.ArrayList $r5;
        int $i0, $i1, i2;
        org.apache.commons.math3.distribution.MultivariateNormalDistribution $r6;
        org.apache.commons.math3.util.Pair $r9;
        double $d0;
        java.lang.Double $r10;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[][];

        r2 := @parameter2: double[][][];

        $r5 = new java.util.ArrayList;

        $i0 = lengthof r0;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r6 = new org.apache.commons.math3.distribution.MultivariateNormalDistribution;

        $r8 = r1[i2];

        $r7 = r2[i2];

        specialinvoke $r6.<org.apache.commons.math3.distribution.MultivariateNormalDistribution: void <init>(double[],double[][])>($r8, $r7);

        $r9 = new org.apache.commons.math3.util.Pair;

        $d0 = r0[i2];

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r9.<org.apache.commons.math3.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r10, $r6);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r5;
    }
}
