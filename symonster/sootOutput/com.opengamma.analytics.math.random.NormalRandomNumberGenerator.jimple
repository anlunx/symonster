public class com.opengamma.analytics.math.random.NormalRandomNumberGenerator extends java.lang.Object implements com.opengamma.analytics.math.random.RandomNumberGenerator
{
    private final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution _normal;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.random.NormalRandomNumberGenerator r0;
        double d0, d1;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r1;

        r0 := @this: com.opengamma.analytics.math.random.NormalRandomNumberGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d1, "standard deviation");

        $r1 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(d0, d1);

        r0.<com.opengamma.analytics.math.random.NormalRandomNumberGenerator: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution _normal> = $r1;

        return;
    }

    public void <init>(double, double, cern.jet.random.engine.RandomEngine)
    {
        com.opengamma.analytics.math.random.NormalRandomNumberGenerator r0;
        double d0, d1;
        cern.jet.random.engine.RandomEngine r1;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r2;

        r0 := @this: com.opengamma.analytics.math.random.NormalRandomNumberGenerator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: cern.jet.random.engine.RandomEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double notNegativeOrZero(double,java.lang.String)>(d1, "standard deviation");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "engine");

        $r2 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double,cern.jet.random.engine.RandomEngine)>(d0, d1, r1);

        r0.<com.opengamma.analytics.math.random.NormalRandomNumberGenerator: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution _normal> = $r2;

        return;
    }

    public double[] getVector(int)
    {
        com.opengamma.analytics.math.random.NormalRandomNumberGenerator r0;
        int i0, i2;
        double[] r1;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.random.NormalRandomNumberGenerator;

        i0 := @parameter0: int;

        staticinvoke <com.opengamma.util.ArgumentChecker: int notNegative(int,java.lang.String)>(i0, "dimension");

        r1 = newarray (double)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = r0.<com.opengamma.analytics.math.random.NormalRandomNumberGenerator: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution _normal>;

        $d0 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double nextRandom()>();

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public java.util.List getVectors(int, int)
    {
        com.opengamma.analytics.math.random.NormalRandomNumberGenerator r0;
        int i0, i1, i2, i3;
        double[] r2;
        java.util.ArrayList $r3;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r4;
        double $d0;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @this: com.opengamma.analytics.math.random.NormalRandomNumberGenerator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Dimension must be greater than zero");

        throw $r6;

     label1:
        if i1 >= 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of values must be greater than zero");

        throw $r5;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i1);

        i2 = 0;

     label3:
        if i2 >= i1 goto label6;

        r2 = newarray (double)[i0];

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        $r4 = r0.<com.opengamma.analytics.math.random.NormalRandomNumberGenerator: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution _normal>;

        $d0 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double nextRandom()>();

        r2[i3] = $d0;

        i3 = i3 + 1;

        goto label4;

     label5:
        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        i2 = i2 + 1;

        goto label3;

     label6:
        return $r3;
    }
}
