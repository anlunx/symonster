public class org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator extends org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator
{
    private final org.apache.commons.math.optimization.fitting.PolynomialFitter xFitter;
    private final org.apache.commons.math.optimization.fitting.PolynomialFitter yFitter;

    public void <init>()
    {
        org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        specialinvoke r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int)>(3);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int i0;

        r0 := @this: org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: void <init>(int,int)>(i0, i0);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        int i0, i1;
        org.apache.commons.math.optimization.fitting.PolynomialFitter $r1, $r3;
        org.apache.commons.math.optimization.general.GaussNewtonOptimizer $r2, $r4;

        r0 := @this: org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator: void <init>()>();

        $r1 = new org.apache.commons.math.optimization.fitting.PolynomialFitter;

        $r2 = new org.apache.commons.math.optimization.general.GaussNewtonOptimizer;

        specialinvoke $r2.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: void <init>(boolean)>(0);

        specialinvoke $r1.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void <init>(int,org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)>(i0, $r2);

        r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter xFitter> = $r1;

        $r3 = new org.apache.commons.math.optimization.fitting.PolynomialFitter;

        $r4 = new org.apache.commons.math.optimization.general.GaussNewtonOptimizer;

        specialinvoke $r4.<org.apache.commons.math.optimization.general.GaussNewtonOptimizer: void <init>(boolean)>(0);

        specialinvoke $r3.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void <init>(int,org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)>(i1, $r4);

        r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter yFitter> = $r3;

        return;
    }

    public org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] r1, r2, $r6, $r10, $r12, $r16, $r18, $r20;
        double[][] r3, r24, r27;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction r4, $r9, $r15, r25;
        org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        org.apache.commons.math.optimization.fitting.PolynomialFitter $r7, $r8, $r11, $r13, $r14, $r17;
        org.apache.commons.math.exception.DimensionMismatchException $r19, $r21;
        org.apache.commons.math.exception.NoDataException $r22;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction[] r23, r26;

        r0 := @this: org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        $i2 = lengthof r1;

        if $i2 == 0 goto label01;

        $i3 = lengthof r2;

        if $i3 == 0 goto label01;

        $i4 = lengthof r3;

        if $i4 != 0 goto label02;

     label01:
        $r22 = new org.apache.commons.math.exception.NoDataException;

        specialinvoke $r22.<org.apache.commons.math.exception.NoDataException: void <init>()>();

        throw $r22;

     label02:
        $i6 = lengthof r1;

        $i5 = lengthof r3;

        if $i6 == $i5 goto label03;

        $r21 = new org.apache.commons.math.exception.DimensionMismatchException;

        $i10 = lengthof r1;

        $i9 = lengthof r3;

        specialinvoke $r21.<org.apache.commons.math.exception.DimensionMismatchException: void <init>(int,int)>($i10, $i9);

        throw $r21;

     label03:
        i0 = lengthof r1;

        i1 = lengthof r2;

        i11 = 0;

     label04:
        if i11 >= i0 goto label06;

        $r18 = r3[i11];

        $i7 = lengthof $r18;

        if $i7 == i1 goto label05;

        $r19 = new org.apache.commons.math.exception.DimensionMismatchException;

        $r20 = r3[i11];

        $i8 = lengthof $r20;

        specialinvoke $r19.<org.apache.commons.math.exception.DimensionMismatchException: void <init>(int,int)>($i8, i1);

        throw $r19;

     label05:
        i11 = i11 + 1;

        goto label04;

     label06:
        staticinvoke <org.apache.commons.math.util.MathUtils: void checkOrder(double[])>(r1);

        staticinvoke <org.apache.commons.math.util.MathUtils: void checkOrder(double[])>(r2);

        r23 = newarray (org.apache.commons.math.analysis.polynomials.PolynomialFunction)[i1];

        i12 = 0;

     label07:
        if i12 >= i1 goto label10;

        $r13 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter xFitter>;

        virtualinvoke $r13.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void clearObservations()>();

        i13 = 0;

     label08:
        if i13 >= i0 goto label09;

        $r17 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter xFitter>;

        $d7 = r1[i13];

        $r16 = r3[i13];

        $d6 = $r16[i12];

        virtualinvoke $r17.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d7, $d6);

        i13 = i13 + 1;

        goto label08;

     label09:
        $r14 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter xFitter>;

        $r15 = virtualinvoke $r14.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.analysis.polynomials.PolynomialFunction fit()>();

        r23[i12] = $r15;

        i12 = i12 + 1;

        goto label07;

     label10:
        r24 = newmultiarray (double)[i0][i1];

        i14 = 0;

     label11:
        if i14 >= i1 goto label14;

        r25 = r23[i14];

        i15 = 0;

     label12:
        if i15 >= i0 goto label13;

        $r12 = r24[i15];

        $d4 = r1[i15];

        $d5 = virtualinvoke r25.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double value(double)>($d4);

        $r12[i14] = $d5;

        i15 = i15 + 1;

        goto label12;

     label13:
        i14 = i14 + 1;

        goto label11;

     label14:
        r26 = newarray (org.apache.commons.math.analysis.polynomials.PolynomialFunction)[i0];

        i16 = 0;

     label15:
        if i16 >= i0 goto label18;

        $r7 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter yFitter>;

        virtualinvoke $r7.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void clearObservations()>();

        i17 = 0;

     label16:
        if i17 >= i1 goto label17;

        $r11 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter yFitter>;

        $d3 = r2[i17];

        $r10 = r24[i16];

        $d2 = $r10[i17];

        virtualinvoke $r11.<org.apache.commons.math.optimization.fitting.PolynomialFitter: void addObservedPoint(double,double,double)>(1.0, $d3, $d2);

        i17 = i17 + 1;

        goto label16;

     label17:
        $r8 = r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.optimization.fitting.PolynomialFitter yFitter>;

        $r9 = virtualinvoke $r8.<org.apache.commons.math.optimization.fitting.PolynomialFitter: org.apache.commons.math.analysis.polynomials.PolynomialFunction fit()>();

        r26[i16] = $r9;

        i16 = i16 + 1;

        goto label15;

     label18:
        r27 = newmultiarray (double)[i0][i1];

        i18 = 0;

     label19:
        if i18 >= i0 goto label22;

        r4 = r26[i18];

        i19 = 0;

     label20:
        if i19 >= i1 goto label21;

        $r6 = r27[i18];

        $d0 = r2[i19];

        $d1 = virtualinvoke r4.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double value(double)>($d0);

        $r6[i19] = $d1;

        i19 = i19 + 1;

        goto label20;

     label21:
        i18 = i18 + 1;

        goto label19;

     label22:
        $r5 = specialinvoke r0.<org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolator: org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>(r1, r2, r27);

        return $r5;
    }

    public volatile org.apache.commons.math.analysis.BivariateRealFunction interpolate(double[], double[], double[][]) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator r0;
        double[] r1, r2;
        double[][] r3;
        org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction $r4;

        r0 := @this: org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        $r4 = virtualinvoke r0.<org.apache.commons.math.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator: org.apache.commons.math.analysis.interpolation.BicubicSplineInterpolatingFunction interpolate(double[],double[],double[][])>(r1, r2, r3);

        return $r4;
    }
}
