class org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTree$LeafMerger, org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler
{
    private final org.apache.commons.math3.geometry.partitioning.Region region1;
    private final org.apache.commons.math3.geometry.partitioning.Region region2;
    final org.apache.commons.math3.geometry.partitioning.RegionFactory this$0;

    public void <init>(org.apache.commons.math3.geometry.partitioning.RegionFactory, org.apache.commons.math3.geometry.partitioning.Region, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.RegionFactory r1;
        org.apache.commons.math3.geometry.partitioning.Region r2, r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.RegionFactory;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.Region;

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.RegionFactory this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = interfaceinvoke r2.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region copySelf()>();

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1> = $r4;

        $r5 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region copySelf()>();

        r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region2> = $r5;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTree merge(org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, org.apache.commons.math3.geometry.partitioning.BSPTree, boolean, boolean)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, r3, $r7, r8, $r9;
        boolean z0, z1, $z2;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r6;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.BSPTree;

        r3 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r4 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        $r5 = (java.lang.Boolean) $r4;

        $z2 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label3;

        $r6 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.RegionFactory this$0>;

        if z1 == 0 goto label1;

        $r7 = r2;

        goto label2;

     label1:
        $r7 = r1;

     label2:
        r8 = staticinvoke <org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.BSPTree access$400(org.apache.commons.math3.geometry.partitioning.RegionFactory,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r6, $r7);

        virtualinvoke r8.<org.apache.commons.math3.geometry.partitioning.BSPTree: void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r3, z0, r0);

        return r8;

     label3:
        if z1 == 0 goto label4;

        $r9 = r1;

        goto label5;

     label4:
        $r9 = r2;

     label5:
        virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: void insertInTree(org.apache.commons.math3.geometry.partitioning.BSPTree,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree$VanishingCutHandler)>(r3, z0, r0);

        return $r9;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTree fixNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1, r2, $r14;
        org.apache.commons.math3.geometry.partitioning.Region r3, $r7, $r8, $r11;
        org.apache.commons.math3.geometry.Point r4;
        java.lang.Boolean $r5, $r6, $r15;
        org.apache.commons.math3.geometry.partitioning.Region$Location $r9, $r10, $r12, $r13;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree pruneAroundConvexCell(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, $r5, null);

        $r7 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1>;

        r3 = interfaceinvoke $r7.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region buildNew(org.apache.commons.math3.geometry.partitioning.BSPTree)>(r2);

        r4 = interfaceinvoke r3.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.Point getBarycenter()>();

        $r14 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r8 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region1>;

        $r9 = interfaceinvoke $r8.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r4);

        $r10 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if $r9 != $r10 goto label1;

        $r11 = r0.<org.apache.commons.math3.geometry.partitioning.RegionFactory$DifferenceMerger: org.apache.commons.math3.geometry.partitioning.Region region2>;

        $r12 = interfaceinvoke $r11.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Point)>(r4);

        $r13 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if $r12 != $r13 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        specialinvoke $r14.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r15);

        return $r14;
    }
}
