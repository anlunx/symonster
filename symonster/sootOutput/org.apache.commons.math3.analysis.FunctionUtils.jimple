public class org.apache.commons.math3.analysis.FunctionUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.analysis.FunctionUtils r0;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient org.apache.commons.math3.analysis.UnivariateFunction compose(org.apache.commons.math3.analysis.UnivariateFunction[])
    {
        org.apache.commons.math3.analysis.UnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$1 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$1;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$1: void <init>(org.apache.commons.math3.analysis.UnivariateFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction compose(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])
    {
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$2 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$2;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$2: void <init>(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction compose(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])
    {
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$3 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$3;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$3: void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.UnivariateFunction add(org.apache.commons.math3.analysis.UnivariateFunction[])
    {
        org.apache.commons.math3.analysis.UnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$4 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$4;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$4: void <init>(org.apache.commons.math3.analysis.UnivariateFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction add(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])
    {
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$5 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$5;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$5: void <init>(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction add(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])
    {
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$6 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$6;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$6: void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.UnivariateFunction multiply(org.apache.commons.math3.analysis.UnivariateFunction[])
    {
        org.apache.commons.math3.analysis.UnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$7 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$7;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$7: void <init>(org.apache.commons.math3.analysis.UnivariateFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction multiply(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])
    {
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$8 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$8;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$8: void <init>(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction[])>(r0);

        return $r1;
    }

    public static transient org.apache.commons.math3.analysis.DifferentiableUnivariateFunction multiply(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])
    {
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[] r0;
        org.apache.commons.math3.analysis.FunctionUtils$9 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[];

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$9;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$9: void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction[])>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.UnivariateFunction combine(org.apache.commons.math3.analysis.BivariateFunction, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.BivariateFunction r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1, r2;
        org.apache.commons.math3.analysis.FunctionUtils$10 $r3;

        r0 := @parameter0: org.apache.commons.math3.analysis.BivariateFunction;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.analysis.UnivariateFunction;

        $r3 = new org.apache.commons.math3.analysis.FunctionUtils$10;

        specialinvoke $r3.<org.apache.commons.math3.analysis.FunctionUtils$10: void <init>(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction)>(r0, r1, r2);

        return $r3;
    }

    public static org.apache.commons.math3.analysis.MultivariateFunction collector(org.apache.commons.math3.analysis.BivariateFunction, org.apache.commons.math3.analysis.UnivariateFunction, double)
    {
        org.apache.commons.math3.analysis.BivariateFunction r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0;
        org.apache.commons.math3.analysis.FunctionUtils$11 $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.BivariateFunction;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        $r2 = new org.apache.commons.math3.analysis.FunctionUtils$11;

        specialinvoke $r2.<org.apache.commons.math3.analysis.FunctionUtils$11: void <init>(org.apache.commons.math3.analysis.BivariateFunction,double,org.apache.commons.math3.analysis.UnivariateFunction)>(r0, d0, r1);

        return $r2;
    }

    public static org.apache.commons.math3.analysis.MultivariateFunction collector(org.apache.commons.math3.analysis.BivariateFunction, double)
    {
        org.apache.commons.math3.analysis.BivariateFunction r0;
        double d0;
        org.apache.commons.math3.analysis.function.Identity $r1;
        org.apache.commons.math3.analysis.MultivariateFunction $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.BivariateFunction;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.analysis.function.Identity;

        specialinvoke $r1.<org.apache.commons.math3.analysis.function.Identity: void <init>()>();

        $r2 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.MultivariateFunction collector(org.apache.commons.math3.analysis.BivariateFunction,org.apache.commons.math3.analysis.UnivariateFunction,double)>(r0, $r1, d0);

        return $r2;
    }

    public static org.apache.commons.math3.analysis.UnivariateFunction fix1stArgument(org.apache.commons.math3.analysis.BivariateFunction, double)
    {
        org.apache.commons.math3.analysis.BivariateFunction r0;
        double d0;
        org.apache.commons.math3.analysis.FunctionUtils$12 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.BivariateFunction;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$12;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$12: void <init>(org.apache.commons.math3.analysis.BivariateFunction,double)>(r0, d0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.UnivariateFunction fix2ndArgument(org.apache.commons.math3.analysis.BivariateFunction, double)
    {
        org.apache.commons.math3.analysis.BivariateFunction r0;
        double d0;
        org.apache.commons.math3.analysis.FunctionUtils$13 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.BivariateFunction;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$13;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$13: void <init>(org.apache.commons.math3.analysis.BivariateFunction,double)>(r0, d0);

        return $r1;
    }

    public static double[] sample(org.apache.commons.math3.analysis.UnivariateFunction, double, double, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.UnivariateFunction r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int i0, i2;
        double[] r1;
        byte $b1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2;
        java.lang.Double $r3, $r4;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;

        r0 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        if i0 > 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_NUMBER_OF_SAMPLES>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r5.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r6, $r7);

        throw $r5;

     label1:
        $b1 = d0 cmpl d1;

        if $b1 < 0 goto label2;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r3, $r4, 0);

        throw $r2;

     label2:
        r1 = newarray (double)[i0];

        $d4 = d1 - d0;

        $d3 = (double) i0;

        d2 = $d4 / $d3;

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $d5 = (double) i2;

        $d6 = $d5 * d2;

        $d7 = d0 + $d6;

        $d8 = interfaceinvoke r0.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d7);

        r1[i2] = $d8;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)
    {
        org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$14 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$14;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$14: void <init>(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction toUnivariateDifferential(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)
    {
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$15 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$15;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$15: void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.DifferentiableMultivariateFunction toDifferentiableMultivariateFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)
    {
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$16 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$16;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$16: void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction toMultivariateDifferentiableFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)
    {
        org.apache.commons.math3.analysis.DifferentiableMultivariateFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$17 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$17;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$17: void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateFunction)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction toDifferentiableMultivariateVectorFunction(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)
    {
        org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$18 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$18;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$18: void <init>(org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction toMultivariateDifferentiableVectorFunction(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)
    {
        org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction r0;
        org.apache.commons.math3.analysis.FunctionUtils$19 $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction;

        $r1 = new org.apache.commons.math3.analysis.FunctionUtils$19;

        specialinvoke $r1.<org.apache.commons.math3.analysis.FunctionUtils$19: void <init>(org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction)>(r0);

        return $r1;
    }
}
