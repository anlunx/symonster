public class org.apache.commons.math3.analysis.differentiation.DerivativeStructure extends java.lang.Object implements org.apache.commons.math3.RealFieldElement, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient org.apache.commons.math3.analysis.differentiation.DSCompiler compiler;
    private final double[] data;

    private void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler r1;
        int $i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DSCompiler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler> = r1;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data> = $r2;

        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int i0, i1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: org.apache.commons.math3.analysis.differentiation.DSCompiler getCompiler(int,int)>(i0, i1);

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r1);

        return;
    }

    public void <init>(int, int, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int i0, i1;
        double d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int)>(i0, i1);

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r1[0] = d0;

        return;
    }

    public void <init>(int, int, int, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int i0, i1, i2, $i3;
        double d0;
        double[] $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        d0 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>(i0, i1, d0);

        if i2 < i0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 0);

        throw $r3;

     label1:
        if i1 <= 0 goto label2;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r2 = staticinvoke <org.apache.commons.math3.analysis.differentiation.DSCompiler: org.apache.commons.math3.analysis.differentiation.DSCompiler getCompiler(int,int)>(i2, i1);

        $i3 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getSize()>();

        $r1[$i3] = 1.0;

     label2:
        return;
    }

    public void <init>(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2;
        double d0, d1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r5, $r9;
        double[] $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r4 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r4);

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void linearCombination(double,double[],int,double,double[],int,double[],int)>(d0, $r8, 0, d1, $r7, 0, $r6, 0);

        return;
    }

    public void <init>(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3;
        double d0, d1, d2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r4, $r5, $r6, $r7, $r8, $r13;
        double[] $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r4);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r5);

        $r8 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r7 = r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r7);

        $r13 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r12 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r11 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r10 = r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void linearCombination(double,double[],int,double,double[],int,double,double[],int,double[],int)>(d0, $r12, 0, d1, $r11, 0, d2, $r10, 0, $r9, 0);

        return;
    }

    public void <init>(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4;
        double d0, d1, d2, d3;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r17;
        double[] $r12, $r13, $r14, $r15, $r16;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r5);

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r6 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r8 = r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r8);

        $r11 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r10 = r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r10);

        $r17 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r16 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r15 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r14 = r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r13 = r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r12 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r17.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void linearCombination(double,double[],int,double,double[],int,double,double[],int,double,double[],int,double[],int)>(d0, $r16, 0, d1, $r15, 0, d2, $r14, 0, d3, $r13, 0, $r12, 0);

        return;
    }

    public transient void <init>(int, int, double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        double[] r1, $r2, $r3, $r4, $r6;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: double[];

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int)>(i0, i1);

        $i3 = lengthof r1;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i2 = lengthof $r2;

        if $i3 == $i2 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i6 = lengthof r1;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i5 = lengthof $r6;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i6, $i5);

        throw $r5;

     label1:
        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i4 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i4);

        return;
    }

    private void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2;
        double[] $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler> = $r2;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data> = $r5;

        return;
    }

    public int getFreeParameters()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        return $i0;
    }

    public int getOrder()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        return $i0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure createConstant(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, $i1, d0);

        return $r1;
    }

    public double getReal()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r1[0];

        return $d0;
    }

    public double getValue()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r1[0];

        return $d0;
    }

    public transient double getPartialDerivative(int[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int[] r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2;
        double[] $r3;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: int[];

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getPartialDerivativeIndex(int[])>(r1);

        $d0 = $r3[$i0];

        return $d0;
    }

    public double[] getAllDerivatives()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0, $d1, $d2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        $r3 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r3[0];

        $d2 = $d1 + d0;

        $r3[0] = $d2;

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r9;
        double[] $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r8 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r6 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void add(double[],int,double[],int,double[],int)>($r8, 0, $r7, 0, $r6, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $d1 = neg d0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>($d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r9;
        double[] $r6, $r7, $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r8 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r6 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void subtract(double[],int,double[],int,double[],int)>($r8, 0, $r7, 0, $r6, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        int i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $d0 = (double) i0;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0, $d1, $d2;
        double[] $r3, $r4;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        i1 = 0;

     label1:
        $r3 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r4[i1];

        $d2 = $d1 * d0;

        $r4[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r6, $r10;
        double[] $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void multiply(double[],int,double[],int,double[],int)>($r9, 0, $r8, 0, $r7, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0, $d1, $d2;
        double[] $r3, $r4;
        int $i0, i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        i1 = 0;

     label1:
        $r3 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r4[i1];

        $d2 = $d1 / d0;

        $r4[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r6, $r10;
        double[] $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void divide(double[],int,double[],int,double[],int)>($r9, 0, $r8, 0, $r7, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0, $d1, $d2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r3 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r3[0];

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double IEEEremainder(double,double)>($d1, d0);

        $r4[0] = $d2;

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r6, $r10;
        double[] $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void remainder(double[],int,double[],int,double[],int)>($r9, 0, $r8, 0, $r7, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3;
        double[] $r4, $r5, $r6;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        i1 = 0;

     label1:
        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r5[i1];

        $d1 = neg $d0;

        $r6[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure abs()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double[] $r1;
        double $d0;
        long $l0;
        byte $b1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r1[0];

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        return $r2;

     label1:
        return r0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure ceil()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2, $r3;
        int $i0, $i1;
        double[] $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r4[0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, $i1, $d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure floor()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2, $r3;
        int $i0, $i1;
        double[] $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r4[0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, $i1, $d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure rint()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2, $r3;
        int $i0, $i1;
        double[] $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r4[0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, $i1, $d1);

        return $r1;
    }

    public long round()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] $r1;
        double $d0;
        long $l0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r1[0];

        $l0 = staticinvoke <org.apache.commons.math3.util.FastMath: long round(double)>($d0);

        return $l0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure signum()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2, $r3;
        int $i0, $i1;
        double[] $r4;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r4[0];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double signum(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i0, $i1, $d1);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r4;
        long l0, l1;
        double[] $r2, $r3;
        double $d0, $d1;
        byte $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r2[0];

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r3[0];

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label2;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label3;

        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

     label2:
        return r0;

     label3:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        return $r4;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0, $d1;
        long l0, l1;
        double[] $r1;
        byte $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r1[0];

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label1;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label2;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label3;

        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label3;

     label2:
        return r0;

     label3:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        return $r2;
    }

    public int getExponent()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r1[0];

        $i0 = staticinvoke <org.apache.commons.math3.util.FastMath: int getExponent(double)>($d0);

        return $i0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        int i0, $i1, i2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3;
        double[] $r4, $r5, $r6;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        i2 = 0;

     label1:
        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i1 = lengthof $r4;

        if i2 >= $i1 goto label2;

        $r6 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r5[i2];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double scalb(double,int)>($d0, i0);

        $r6[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, $r8, $r13, $r17, $r18, $r19, $r20, $r21, $r22;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r5, $r6, $r9, $r10, $r14, $r15;
        double[] $r7, $r11, $r12, $r16;
        double $d0, $d1, $d2, $d3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r5);

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r7[0];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        if $z0 != 0 goto label1;

        $r11 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d1 = $r11[0];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        if $z1 == 0 goto label2;

     label1:
        $r8 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i3 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i4 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        specialinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i3, $i4, #Infinity);

        return $r8;

     label2:
        $r12 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d2 = $r12[0];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z2 != 0 goto label3;

        $r16 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d3 = $r16[0];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        if $z3 == 0 goto label4;

     label3:
        $r13 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r14 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i5 = virtualinvoke $r14.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r15 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i6 = virtualinvoke $r15.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        specialinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i5, $i6, #NaN);

        return $r13;

     label4:
        i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getExponent()>();

        i1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getExponent()>();

        $i7 = i1 + 27;

        if i0 <= $i7 goto label5;

        $r22 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure abs()>();

        return $r22;

     label5:
        $i8 = i0 + 27;

        if i1 <= $i8 goto label6;

        $r21 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure abs()>();

        return $r21;

     label6:
        $i9 = i0 + i1;

        i2 = $i9 / 2;

        $i10 = neg i2;

        r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int)>($i10);

        $i11 = neg i2;

        r3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int)>($i11);

        $r17 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r2);

        $r18 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r3);

        $r19 = virtualinvoke $r17.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r18);

        r4 = virtualinvoke $r19.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure sqrt()>();

        $r20 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int)>(i2);

        return $r20;
    }

    public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r1);

        return $r2;
    }

    public transient org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r3;
        double[] r1, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r4, $r7;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i2 = $i1 + 1;

        if $i0 == $i2 goto label1;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        $i4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i5 = $i4 + 1;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, $i5);

        throw $r8;

     label1:
        $r3 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r4);

        $r7 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r5 = $r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void compose(double[],int,double[],double[],int)>($r6, 0, r1, $r5, 0);

        return $r3;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,int,double[],int)>($r5, 0, -1, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure rootN(int)>(2);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure rootN(int)>(3);

        return $r1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        int i0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void rootN(double[],int,int,double[],int)>($r5, 0, i0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.Field getField()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1 $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$1: void <init>(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r0);

        return $r1;
    }

    public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        double d0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double,double[],int,double[],int)>(d0, $r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        double d0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,double,double[],int)>($r5, 0, d0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        int i0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,int,double[],int)>($r5, 0, i0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r6, $r10;
        double[] $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void pow(double[],int,double[],int,double[],int)>($r9, 0, $r8, 0, $r7, 0);

        return $r5;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure exp()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void exp(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure expm1()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void expm1(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void log(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log1p()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void log1p(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure log10()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void log10(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cos()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void cos(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sin()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void sin(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure tan()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void tan(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure acos()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void acos(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure asin()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void asin(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r5;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r4, $r6, $r10;
        double[] $r7, $r8, $r9;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r3 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void checkCompatibility(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r5 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r6);

        $r10 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r9 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r8 = r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r7 = $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atan2(double[],int,double[],int,double[],int)>($r9, 0, $r8, 0, $r7, 0);

        return $r5;
    }

    public static org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure cosh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void cosh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure sinh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void sinh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure tanh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void tanh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure acosh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void acosh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure asinh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void asinh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure atanh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3, $r6;
        double[] $r4, $r5;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        $r6 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DSCompiler: void atanh(double[],int,double[],int)>($r5, 0, $r4, 0);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure toDegrees()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3;
        double[] $r4, $r5, $r6;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        i1 = 0;

     label1:
        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r5[i1];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toDegrees(double)>($d0);

        $r6[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure toRadians()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3;
        double[] $r4, $r5, $r6;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r2 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(org.apache.commons.math3.analysis.differentiation.DSCompiler)>($r3);

        i1 = 0;

     label1:
        $r4 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r6 = $r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r5 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = $r5[i1];

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double toRadians(double)>($d0);

        $r6[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public transient double taylor(double[]) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        double[] r1, $r2;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: double[];

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: double taylor(double[],int,double[])>($r2, 0, r1);

        return $d0;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r4, $r7, $r8, $r9, $r10, $r11, $r12, r14;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r1, r2;
        double[] r3, r13, r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        org.apache.commons.math3.Field $r5;
        java.lang.Object $r6;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $i0 = lengthof r1;

        r3 = newarray (double)[$i0];

        i7 = 0;

     label1:
        $i1 = lengthof r1;

        if i7 >= $i1 goto label2;

        $r12 = r1[i7];

        $d1 = virtualinvoke $r12.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r3[i7] = $d1;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i2 = lengthof r2;

        r13 = newarray (double)[$i2];

        i8 = 0;

     label3:
        $i3 = lengthof r2;

        if i8 >= $i3 goto label4;

        $r11 = r2[i8];

        $d0 = virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r13[i8] = $d0;

        i8 = i8 + 1;

        goto label3;

     label4:
        d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r3, r13);

        $r4 = r1[0];

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r14 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) $r6;

        i9 = 0;

     label5:
        $i4 = lengthof r1;

        if i9 >= $i4 goto label6;

        $r9 = r1[i9];

        $r8 = r2[i9];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8);

        r14 = virtualinvoke r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r10);

        i9 = i9 + 1;

        goto label5;

     label6:
        r15 = virtualinvoke r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r15[0] = d2;

        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i5 = virtualinvoke r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i6 = virtualinvoke r14.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i5, $i6, r15);

        return $r7;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double[], org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r4, $r7, $r8, $r9, $r10, r11;
        double[] r1, r3, r12;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.commons.math3.Field $r5;
        java.lang.Object $r6;
        double $d0, $d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure[];

        $i0 = lengthof r2;

        r3 = newarray (double)[$i0];

        i5 = 0;

     label1:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label2;

        $r10 = r2[i5];

        $d1 = virtualinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        r3[i5] = $d1;

        i5 = i5 + 1;

        goto label1;

     label2:
        d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double[],double[])>(r1, r3);

        $r4 = r2[0];

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.Field getField()>();

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.Field: java.lang.Object getZero()>();

        r11 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) $r6;

        i6 = 0;

     label3:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label4;

        $r8 = r2[i6];

        $d0 = r1[i6];

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d0);

        r11 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r9);

        i6 = i6 + 1;

        goto label3;

     label4:
        r12 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r12[0] = d2;

        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i3 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i4 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i3, $i4, r12);

        return $r7;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, r5, $r7, $r8, $r9;
        double d0, $d1, $d2, $d3, $d4;
        double[] r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d3 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d4 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d2, $d3, $d4);

        $r7 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r2);

        $r8 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        r5 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8);

        r6 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r6[0] = d0;

        $r9 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r6);

        return $r9;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, $r5, $r6, $r7;
        double d0, d1, d2, $d3, $d4;
        double[] r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d4 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d2 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>(d0, $d3, d1, $d4);

        $r5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d0);

        $r6 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d1);

        r3 = virtualinvoke $r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r6);

        r4 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r4[0] = d2;

        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r4);

        return $r7;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, r5, r6, r7, $r9, $r10, $r11, $r12, $r13;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[] r8;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d3 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d4 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d5 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d6 = virtualinvoke r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d1, $d2, $d3, $d4, $d5, $d6);

        $r9 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r2);

        $r10 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r10);

        $r12 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r6);

        r7 = virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r12);

        r8 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r8[0] = d0;

        $r13 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r8);

        return $r13;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, $r6, $r7, $r8, $r9, $r10;
        double d0, d1, d2, d3, $d4, $d5, $d6;
        double[] r5;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d5 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d6 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d3 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>(d0, $d4, d1, $d5, d2, $d6);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d0);

        $r7 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d1);

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r7);

        $r9 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d2);

        r4 = virtualinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r9);

        r5 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r5[0] = d3;

        $r10 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r5);

        return $r10;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        double[] r10;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r2 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r3 := @parameter2: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r4 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r5 := @parameter4: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r6 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r7 := @parameter6: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r8 := @parameter7: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d3 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d4 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d5 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d6 = virtualinvoke r6.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d7 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d8 = virtualinvoke r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>($d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8);

        $r11 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r2);

        $r12 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r4);

        $r13 = virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r12);

        $r14 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r6);

        $r15 = virtualinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r14);

        $r16 = virtualinvoke r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(r8);

        r9 = virtualinvoke $r15.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r16);

        r10 = virtualinvoke r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r10[0] = d0;

        $r17 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r17.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r10);

        return $r17;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r1, r2, r3, r4, r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8;
        double[] r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d1 := @parameter2: double;

        r2 := @parameter3: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d2 := @parameter4: double;

        r3 := @parameter5: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d3 := @parameter6: double;

        r4 := @parameter7: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d6 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d7 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d8 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d4 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double,double,double)>(d0, $d5, d1, $d6, d2, $d7, d3, $d8);

        $r7 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d0);

        $r8 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d1);

        $r9 = virtualinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8);

        $r10 = virtualinvoke r3.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d2);

        $r11 = virtualinvoke $r9.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r10);

        $r12 = virtualinvoke r4.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d3);

        r5 = virtualinvoke $r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r12);

        r6 = virtualinvoke r5.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        r6[0] = d4;

        $r13 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        specialinvoke $r13.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>($i0, $i1, r6);

        return $r13;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        if $z0 == 0 goto label4;

        r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        if $i0 != $i1 goto label2;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i3 = virtualinvoke r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        if $i2 != $i3 goto label2;

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $r3 = r2.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $z1 = staticinvoke <org.apache.commons.math3.util.MathArrays: boolean equals(double[],double[])>($r4, $r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i1 = 229 * $i0;

        $i2 = 227 + $i1;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i4 = 233 * $i3;

        $i5 = $i2 + $i4;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        $i6 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double[])>($r1);

        $i7 = 239 * $i6;

        $i8 = $i5 + $i7;

        return $i8;
    }

    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject $r1;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r2, $r3;
        int $i0, $i1;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject;

        $r2 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i0 = virtualinvoke $r2.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getFreeParameters()>();

        $r3 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        $i1 = virtualinvoke $r3.<org.apache.commons.math3.analysis.differentiation.DSCompiler: int getOrder()>();

        $r4 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] data>;

        specialinvoke $r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure$DataTransferObject: void <init>(int,int,double[])>($i0, $i1, $r4);

        return $r1;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r5, $r6, $r7, $r8, $r9;
        double d0, d1, d2, d3;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        d3 := @parameter6: double;

        r4 := @parameter7: java.lang.Object;

        $r8 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r7 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r6 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r3;

        $r5 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(d0, $r8, d1, $r7, d2, $r6, d3, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $r16 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r15 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r14 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r3;

        $r13 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r4;

        $r12 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r5;

        $r11 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r6;

        $r10 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r7;

        $r9 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r8;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r16, $r15, $r14, $r13, $r12, $r11, $r10, $r9);

        return $r17;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r4, $r5, $r6, $r7;
        double d0, d1, d2;
        java.lang.Object r1, r2, r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        d2 := @parameter4: double;

        r3 := @parameter5: java.lang.Object;

        $r6 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r5 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r4 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r3;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(d0, $r6, d1, $r5, d2, $r4);

        return $r7;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.Object r1, r2, r3, r4, r5, r6;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $r12 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r11 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r10 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r3;

        $r9 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r4;

        $r8 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r5;

        $r7 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r6;

        $r13 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r12, $r11, $r10, $r9, $r8, $r7);

        return $r13;
    }

    public volatile java.lang.Object linearCombination(double, java.lang.Object, double, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r3, $r4, $r5;
        double d0, d1;
        java.lang.Object r1, r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Object;

        d1 := @parameter2: double;

        r2 := @parameter3: java.lang.Object;

        $r4 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>(d0, $r4, d1, $r3);

        return $r5;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r1, r2, r3, r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r8 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r7 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r2;

        $r6 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r3;

        $r5 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r4;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure,org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8, $r7, $r6, $r5);

        return $r9;
    }

    public volatile java.lang.Object linearCombination(double[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r4;
        double[] r1;
        java.lang.Object[] r2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] $r3;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: double[];

        r2 := @parameter1: java.lang.Object[];

        $r3 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) r2;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(double[],org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>(r1, $r3);

        return $r4;
    }

    public volatile java.lang.Object linearCombination(java.lang.Object[], java.lang.Object[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r5;
        java.lang.Object[] r1, r2;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.lang.Object[];

        $r4 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) r1;

        $r3 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure[]) r2;

        $r5 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure linearCombination(org.apache.commons.math3.analysis.differentiation.DerivativeStructure[],org.apache.commons.math3.analysis.differentiation.DerivativeStructure[])>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object atanh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure atanh()>();

        return $r1;
    }

    public volatile java.lang.Object asinh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure asinh()>();

        return $r1;
    }

    public volatile java.lang.Object acosh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure acosh()>();

        return $r1;
    }

    public volatile java.lang.Object tanh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure tanh()>();

        return $r1;
    }

    public volatile java.lang.Object sinh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure sinh()>();

        return $r1;
    }

    public volatile java.lang.Object cosh()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure cosh()>();

        return $r1;
    }

    public volatile java.lang.Object atan2(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan2(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object atan()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure atan()>();

        return $r1;
    }

    public volatile java.lang.Object asin()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure asin()>();

        return $r1;
    }

    public volatile java.lang.Object acos()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure acos()>();

        return $r1;
    }

    public volatile java.lang.Object tan()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure tan()>();

        return $r1;
    }

    public volatile java.lang.Object sin()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure sin()>();

        return $r1;
    }

    public volatile java.lang.Object cos()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure cos()>();

        return $r1;
    }

    public volatile java.lang.Object log1p()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure log1p()>();

        return $r1;
    }

    public volatile java.lang.Object log()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure log()>();

        return $r1;
    }

    public volatile java.lang.Object expm1()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure expm1()>();

        return $r1;
    }

    public volatile java.lang.Object exp()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure exp()>();

        return $r1;
    }

    public volatile java.lang.Object pow(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object pow(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object pow(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure pow(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object rootN(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure rootN(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object cbrt()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure cbrt()>();

        return $r1;
    }

    public volatile java.lang.Object sqrt()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure sqrt()>();

        return $r1;
    }

    public volatile java.lang.Object reciprocal()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure reciprocal()>();

        return $r1;
    }

    public volatile java.lang.Object hypot(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure hypot(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object scalb(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure scalb(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object copySign(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object copySign(java.lang.Object)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure copySign(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object signum()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure signum()>();

        return $r1;
    }

    public volatile java.lang.Object rint()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure rint()>();

        return $r1;
    }

    public volatile java.lang.Object floor()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure floor()>();

        return $r1;
    }

    public volatile java.lang.Object ceil()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure ceil()>();

        return $r1;
    }

    public volatile java.lang.Object abs()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure abs()>();

        return $r1;
    }

    public volatile java.lang.Object remainder(java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object remainder(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure remainder(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object multiply(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object subtract(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object add(double)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(double)>(d0);

        return $r1;
    }

    public volatile java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure divide(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object multiply(int)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;
        int i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(int)>(i0);

        return $r1;
    }

    public volatile java.lang.Object negate()
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure negate()>();

        return $r1;
    }

    public volatile java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    public volatile java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0, $r2, $r3;
        java.lang.Object r1;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.apache.commons.math3.analysis.differentiation.DerivativeStructure) r1;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r2);

        return $r3;
    }

    static org.apache.commons.math3.analysis.differentiation.DSCompiler access$000(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r0;
        org.apache.commons.math3.analysis.differentiation.DSCompiler $r1;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $r1 = r0.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DSCompiler compiler>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.differentiation.DerivativeStructure: long serialVersionUID> = 20120730L;

        return;
    }
}
