class org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver extends java.lang.Object implements org.apache.commons.math.linear.DecompositionSolver
{
    private final org.apache.commons.math.linear.RealMatrix pseudoInverse;
    private boolean nonSingular;

    private void <init>(double[], org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, boolean)
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        double[] r1, r5;
        org.apache.commons.math.linear.RealMatrix r2, r3, $r7;
        boolean z0;
        double[][] r4;
        int $i0, i2, i3, $i4;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r6;
        double $d0, $d1, $d2, $d3, d4;
        byte $b1;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math.linear.RealMatrix;

        r3 := @parameter2: org.apache.commons.math.linear.RealMatrix;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r4 = interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label6;

        $d0 = r1[i2];

        $b1 = $d0 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $d3 = r1[i2];

        d4 = 1.0 / $d3;

        goto label3;

     label2:
        d4 = 0.0;

     label3:
        r5 = r4[i2];

        i3 = 0;

     label4:
        $i4 = lengthof r5;

        if i3 >= $i4 goto label5;

        $d1 = r5[i3];

        $d2 = $d1 * d4;

        r5[i3] = $d2;

        i3 = i3 + 1;

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        $r6 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r4, 0);

        $r7 = interfaceinvoke r3.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>($r6);

        r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix pseudoInverse> = $r7;

        r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: boolean nonSingular> = z0;

        return;
    }

    public double[] solve(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        double[] r1, $r3;
        org.apache.commons.math.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        $r2 = r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix pseudoInverse>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.linear.RealMatrix: double[] operate(double[])>(r1);

        return $r3;
    }

    public org.apache.commons.math.linear.RealVector solve(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealVector r1, $r3;
        org.apache.commons.math.linear.RealMatrix $r2;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $r2 = r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix pseudoInverse>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealVector operate(org.apache.commons.math.linear.RealVector)>(r1);

        return $r3;
    }

    public org.apache.commons.math.linear.RealMatrix solve(org.apache.commons.math.linear.RealMatrix) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealMatrix r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix pseudoInverse>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix multiply(org.apache.commons.math.linear.RealMatrix)>(r1);

        return $r3;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        $z0 = r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: boolean nonSingular>;

        return $z0;
    }

    public org.apache.commons.math.linear.RealMatrix getInverse()
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        org.apache.commons.math.linear.RealMatrix $r1;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        $r1 = r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: org.apache.commons.math.linear.RealMatrix pseudoInverse>;

        return $r1;
    }

    void <init>(double[], org.apache.commons.math.linear.RealMatrix, org.apache.commons.math.linear.RealMatrix, boolean, org.apache.commons.math.linear.SingularValueDecompositionImpl$1)
    {
        org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver r0;
        double[] r1;
        org.apache.commons.math.linear.RealMatrix r2, r3;
        boolean z0;
        org.apache.commons.math.linear.SingularValueDecompositionImpl$1 r4;

        r0 := @this: org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math.linear.RealMatrix;

        r3 := @parameter2: org.apache.commons.math.linear.RealMatrix;

        z0 := @parameter3: boolean;

        r4 := @parameter4: org.apache.commons.math.linear.SingularValueDecompositionImpl$1;

        specialinvoke r0.<org.apache.commons.math.linear.SingularValueDecompositionImpl$Solver: void <init>(double[],org.apache.commons.math.linear.RealMatrix,org.apache.commons.math.linear.RealMatrix,boolean)>(r1, r2, r3, z0);

        return;
    }
}
