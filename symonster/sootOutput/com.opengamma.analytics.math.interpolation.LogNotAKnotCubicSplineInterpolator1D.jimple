public class com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator1D
{
    private static final long serialVersionUID;
    private static final com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.CubicSplineInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        $r1 = new com.opengamma.analytics.math.interpolation.CubicSplineInterpolator;

        specialinvoke $r1.<com.opengamma.analytics.math.interpolation.CubicSplineInterpolator: void <init>()>();

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator1D: void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r1);

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r8, $r9;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r5;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r6;
        double $d0, $d1, $d2;
        int[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle) r1;

        $r5 = <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r4 = virtualinvoke $r5.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r6, $d0);

        $r7 = newarray (int)[1];

        $r7[0] = 0;

        $r8 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r7);

        $d1 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <java.lang.Math: double exp(double)>($d1);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        return $r9;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r11, $r13;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r6, $r8;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r7, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int[] $r10, $r12;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle) r1;

        $r6 = <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r4 = virtualinvoke $r6.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r7, $d0);

        $r8 = <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        r5 = virtualinvoke $r8.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r9, $d1);

        $r10 = newarray (int)[1];

        $r10[0] = 0;

        $r11 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        $d2 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $d3 = staticinvoke <java.lang.Math: double exp(double)>($d2);

        $r12 = newarray (int)[1];

        $r12[0] = 0;

        $r13 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r12);

        $d4 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 * $d4;

        return $d5;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, $r14;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle r3;
        double[] r4, r5, r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1;
        boolean $z0;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r7, $r10;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r8, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r12;
        int[] $r13;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        r3 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle) r1;

        $r7 = <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r8 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r9 = virtualinvoke $r7.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double)>($r8, $d1);

        r4 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r10 = <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r11 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity getPiecewisePolynomialResultsWithSensitivity()>();

        $d2 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>($r11, $d2);

        $r13 = newarray (int)[1];

        $r13[0] = 0;

        $r14 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r13);

        $d3 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        d0 = staticinvoke <java.lang.Math: double exp(double)>($d3);

        r5 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        i0 = lengthof r5;

        r6 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d4 = r4[i1];

        $d6 = $d4 * d0;

        $d5 = r5[i1];

        $d7 = $d6 / $d5;

        r6[i1] = $d7;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r6;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        double[] r1, r2, r3;
        int i0, i2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle $r4;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r5;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r6;
        double $d0, $d1, $d2;
        byte $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = lengthof r2;

        r3 = newarray (double)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d0 = r2[i2];

        $b1 = $d0 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "y should be positive");

        $d1 = r2[i2];

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        r3[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        $r5 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r3, 0);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getInterpolator()>();

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r5, $r6);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        double[] r1, r2, r3;
        int i0, i2;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle $r4;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r5;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r6;
        double $d0, $d1, $d2;
        byte $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        i0 = lengthof r2;

        r3 = newarray (double)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d0 = r2[i2];

        $b1 = $d0 cmpl 0.0;

        if $b1 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "y should be positive");

        $d1 = r2[i2];

        $d2 = staticinvoke <java.lang.Math: double log(double)>($d1);

        r3[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle;

        $r5 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r5.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r3, 1);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getInterpolator()>();

        specialinvoke $r4.<com.opengamma.analytics.math.interpolation.data.Interpolator1DLogPiecewisePoynomialDataBundle: void <init>(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)>($r5, $r6);

        return $r4;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[], double, double)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        double[] r1, r2;
        double d0, d1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No degrees of freedom at endpoints for this interpolation method");

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[], double, double)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        double[] r1, r2;
        double d0, d1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No degrees of freedom at endpoints for this interpolation method");

        throw $r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r0;

        <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: long serialVersionUID> = 1L;

        $r0 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r0.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        <com.opengamma.analytics.math.interpolation.LogNotAKnotCubicSplineInterpolator1D: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC> = $r0;

        return;
    }
}
