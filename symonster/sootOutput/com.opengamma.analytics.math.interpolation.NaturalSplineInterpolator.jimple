public class com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r1 = new com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver;

        specialinvoke $r1.<com.opengamma.analytics.math.interpolation.CubicSplineNaturalSolver: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = $r1;

        return;
    }

    public void <init>(com.opengamma.analytics.math.interpolation.CubicSplineSolver)
    {
        com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.CubicSplineSolver;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver> = r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator r0;
        double[] r1, r2, $r13, $r15, r16, r17, r18, r19;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i8, i9, i10, i11, i12;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r6, $r7, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8, $r11;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r9;
        double[][] $r12, $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b7;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "xValues length = yValues length");

        $i5 = lengthof r1;

        if $i5 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i8 = 0;

     label05:
        if i8 >= i0 goto label06;

        $d4 = r1[i8];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d5 = r1[i8];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        $d6 = r2[i8];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yData containing NaN");

        $d7 = r2[i8];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yData containing Infinity");

        i8 = i8 + 1;

        goto label05;

     label06:
        i9 = 0;

     label07:
        if i9 >= i0 goto label12;

        i10 = i9 + 1;

     label08:
        if i10 >= i0 goto label11;

        $d3 = r1[i9];

        $d2 = r1[i10];

        $b7 = $d3 cmpl $d2;

        if $b7 != 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "Data should be distinct");

        i10 = i10 + 1;

        goto label08;

     label11:
        i9 = i9 + 1;

        goto label07;

     label12:
        r16 = newarray (double)[i0];

        r17 = newarray (double)[i0];

        r18 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r19 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r18, r19);

        $r6 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        r3 = virtualinvoke $r6.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r18, r19);

        i1 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r7 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r18);

        $i6 = virtualinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i2 = $i6 - 1;

        i11 = 0;

     label13:
        if i11 >= i2 goto label16;

        i12 = 0;

     label14:
        if i12 >= i1 goto label15;

        $r12 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r13 = $r12[i11];

        $d0 = $r13[i12];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r14 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r15 = $r14[i11];

        $d1 = $r15[i12];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i12 = i12 + 1;

        goto label14;

     label15:
        i11 = i11 + 1;

        goto label13;

     label16:
        $r9 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r10 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r18);

        specialinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r11, r3, i1, 1);

        return $r9;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator r0;
        double[] r1, $r6, $r15, $r16, $r19, $r20, $r21, $r22, $r23, r24, r26;
        double[][] r2, r3, r25;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7, $r9, $r10, $r14, $r17;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r8, $r12;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        byte $b10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r27;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r6 = r2[0];

        $i3 = lengthof $r6;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "(xValues length = yValuesMatrix\'s row vector length)");

        $i5 = lengthof r1;

        if $i5 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i11 = 0;

     label05:
        if i11 >= i0 goto label08;

        $d4 = r1[i11];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d5 = r1[i11];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        i12 = 0;

     label06:
        if i12 >= i1 goto label07;

        $r22 = r2[i12];

        $d6 = $r22[i11];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValuesMatrix containing NaN");

        $r23 = r2[i12];

        $d7 = $r23[i11];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yValuesMatrix containing Infinity");

        i12 = i12 + 1;

        goto label06;

     label07:
        i11 = i11 + 1;

        goto label05;

     label08:
        i13 = 0;

     label09:
        if i13 >= i1 goto label16;

        i14 = 0;

     label10:
        if i14 >= i0 goto label15;

        i15 = i14 + 1;

     label11:
        if i15 >= i0 goto label14;

        $d3 = r1[i14];

        $d2 = r1[i15];

        $b10 = $d3 cmpl $d2;

        if $b10 != 0 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "Data should be distinct");

        i15 = i15 + 1;

        goto label11;

     label14:
        i14 = i14 + 1;

        goto label10;

     label15:
        i13 = i13 + 1;

        goto label09;

     label16:
        r24 = newarray (double)[i0];

        r25 = newmultiarray (double)[i1][i0];

        i16 = 0;

     label17:
        if i16 >= i1 goto label18;

        r24 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r20 = r2[i16];

        r26 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r20, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r24, r26);

        $r21 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r26, i0);

        r25[i16] = $r21;

        i16 = i16 + 1;

        goto label17;

     label18:
        $r8 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r25);

        r27 = virtualinvoke $r8.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[],com.opengamma.analytics.math.matrix.DoubleMatrix2D)>(r24, $r7);

        $r9 = r27[0];

        i17 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r10 = r27[0];

        i2 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i6 = i1 * i17;

        r3 = newmultiarray (double)[$i6][i2];

        i18 = 0;

     label19:
        if i18 >= i17 goto label22;

        i19 = 0;

     label20:
        if i19 >= i1 goto label21;

        $i8 = i1 * i18;

        $i9 = $i8 + i19;

        $r17 = r27[i19];

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i18);

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r3[$i9] = $r19;

        i19 = i19 + 1;

        goto label20;

     label21:
        i18 = i18 + 1;

        goto label19;

     label22:
        i20 = 0;

     label23:
        $i7 = i1 * i17;

        if i20 >= $i7 goto label26;

        i21 = 0;

     label24:
        if i21 >= i2 goto label25;

        $r15 = r3[i20];

        $d0 = $r15[i21];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r16 = r3[i20];

        $d1 = $r16[i21];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i21 = i21 + 1;

        goto label24;

     label25:
        i20 = i20 + 1;

        goto label23;

     label26:
        $r11 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r12 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r24);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        specialinvoke $r11.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r13, $r14, i2, i1);

        return $r11;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator r0;
        double[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18;
        com.opengamma.analytics.math.interpolation.CubicSplineSolver $r5, $r7;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8;
        int[] $r9;
        java.lang.Double $r10;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        byte $b8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r11, r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r12, r13;

        r0 := @this: com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 != $i3 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z5, "(xValues length = yValues length)");

        $i5 = lengthof r1;

        if $i5 <= 1 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i9 = 0;

     label05:
        if i9 >= i0 goto label06;

        $d5 = r1[i9];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing NaN");

        $d6 = r1[i9];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xData containing Infinity");

        i9 = i9 + 1;

        goto label05;

     label06:
        i10 = 0;

     label07:
        if i10 >= i1 goto label08;

        $d3 = r2[i10];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "yData containing NaN");

        $d4 = r2[i10];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yData containing Infinity");

        i10 = i10 + 1;

        goto label07;

     label08:
        i11 = 0;

     label09:
        if i11 >= i0 goto label14;

        i12 = i11 + 1;

     label10:
        if i12 >= i0 goto label13;

        $d2 = r1[i11];

        $d1 = r1[i12];

        $b8 = $d2 cmpl $d1;

        if $b8 != 0 goto label11;

        $z7 = 1;

        goto label12;

     label11:
        $z7 = 0;

     label12:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z7, "Data should be distinct");

        i12 = i12 + 1;

        goto label10;

     label13:
        i11 = i11 + 1;

        goto label09;

     label14:
        $r5 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        r11 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[])>(r1, r2);

        i13 = lengthof r11;

        i14 = 0;

     label15:
        if i14 >= i13 goto label20;

        r12 = r11[i14];

        i15 = virtualinvoke r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i2 = virtualinvoke r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i16 = 0;

     label16:
        if i16 >= i15 goto label19;

        i17 = 0;

     label17:
        if i17 >= i2 goto label18;

        $r9 = newarray (int)[2];

        $r9[0] = i16;

        $r9[1] = i17;

        $r10 = virtualinvoke r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r9);

        $d0 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i17 = i17 + 1;

        goto label17;

     label18:
        i16 = i16 + 1;

        goto label16;

     label19:
        i14 = i14 + 1;

        goto label15;

     label20:
        r13 = r11[0];

        $i6 = i13 - 1;

        r14 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i6];

        $i7 = i13 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 1, r14, 0, $i7);

        i18 = virtualinvoke r13.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r6 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r7 = r0.<com.opengamma.analytics.math.interpolation.NaturalSplineInterpolator: com.opengamma.analytics.math.interpolation.CubicSplineSolver _solver>;

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r1);

        specialinvoke $r6.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r8, r13, i18, 1, r14);

        return $r6;
    }
}
