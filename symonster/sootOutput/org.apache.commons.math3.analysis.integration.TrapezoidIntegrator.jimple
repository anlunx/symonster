public class org.apache.commons.math3.analysis.integration.TrapezoidIntegrator extends org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator
{
    public static final int TRAPEZOID_MAX_ITERATIONS_COUNT;
    private double s;

    public void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        double d0, d1;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(d0, d1, i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        int i0, i1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Integer $r2, $r3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(i0, i1);

        if i1 <= 64 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label1:
        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(int,int)>(3, 64);

        return;
    }

    double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator, int) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r1;
        int i0, $i1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20, d21, d22;
        byte $b2;
        long l3, l4;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        r1 := @parameter0: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        d19 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMax()>();

        d20 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMin()>();

        $d12 = d19 - d20;

        $d13 = 0.5 * $d12;

        $d14 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>(d20);

        $d15 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>(d19);

        $d16 = $d14 + $d15;

        $d17 = $d13 * $d16;

        r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s> = $d17;

        $d18 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        return $d18;

     label1:
        $i1 = i0 - 1;

        l3 = 1L << $i1;

        d21 = 0.0;

        d0 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMax()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double getMin()>();

        $d4 = d0 - d1;

        $d3 = (double) l3;

        d2 = $d4 / $d3;

        $d5 = 0.5 * d2;

        d22 = d1 + $d5;

        l4 = 0L;

     label2:
        $b2 = l4 cmp l3;

        if $b2 >= 0 goto label3;

        $d11 = virtualinvoke r1.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double computeObjectiveValue(double)>(d22);

        d21 = d21 + $d11;

        d22 = d22 + d2;

        l4 = l4 + 1L;

        goto label2;

     label3:
        $d7 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        $d6 = d21 * d2;

        $d8 = $d7 + $d6;

        $d9 = 0.5 * $d8;

        r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s> = $d9;

        $d10 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double s>;

        return $d10;
    }

    protected double doIntegrate() throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.analysis.integration.TrapezoidIntegrator r0;
        int i0, $i1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        org.apache.commons.math3.util.Incrementor $r1, $r2, $r3;
        byte $b2, $b3;

        r0 := @this: org.apache.commons.math3.analysis.integration.TrapezoidIntegrator;

        d10 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, 0);

        $r1 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        i0 = virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double stage(org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator,int)>(r0, i0);

        $i1 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: int getMinimalIterationCount()>();

        if i0 < $i1 goto label3;

        $d3 = d0 - d10;

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double getRelativeAccuracy()>();

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d10);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d7 = $d5 + $d6;

        $d8 = $d4 * $d7;

        d2 = $d8 * 0.5;

        $b2 = d1 cmpg d2;

        if $b2 <= 0 goto label2;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: double getAbsoluteAccuracy()>();

        $b3 = d1 cmpg $d9;

        if $b3 > 0 goto label3;

     label2:
        return d0;

     label3:
        d10 = d0;

        $r3 = r0.<org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

        goto label1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.integration.TrapezoidIntegrator: int TRAPEZOID_MAX_ITERATIONS_COUNT> = 64;

        return;
    }
}
