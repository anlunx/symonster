public class com.opengamma.analytics.math.function.special.KroneckerDeltaFunction extends com.opengamma.analytics.math.function.Function2D
{

    public void <init>()
    {
        com.opengamma.analytics.math.function.special.KroneckerDeltaFunction r0;

        r0 := @this: com.opengamma.analytics.math.function.special.KroneckerDeltaFunction;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function2D: void <init>()>();

        return;
    }

    public java.lang.Integer evaluate(java.lang.Integer, java.lang.Integer)
    {
        com.opengamma.analytics.math.function.special.KroneckerDeltaFunction r0;
        java.lang.Integer r1, r2, $r3;
        int $i0, $i1;
        byte $b2;

        r0 := @this: com.opengamma.analytics.math.function.special.KroneckerDeltaFunction;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Integer;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "i");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "j");

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i0 != $i1 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b2);

        return $r3;
    }

    public volatile java.lang.Object evaluate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.function.special.KroneckerDeltaFunction r0;
        java.lang.Object r1, r2;
        java.lang.Integer $r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.math.function.special.KroneckerDeltaFunction;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Integer) r1;

        $r3 = (java.lang.Integer) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.KroneckerDeltaFunction: java.lang.Integer evaluate(java.lang.Integer,java.lang.Integer)>($r4, $r3);

        return $r5;
    }
}
