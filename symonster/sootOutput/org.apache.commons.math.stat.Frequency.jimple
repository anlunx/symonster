public class org.apache.commons.math.stat.Frequency extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.TreeMap freqTable;

    public void <init>()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable> = $r1;

        return;
    }

    public void <init>(java.util.Comparator)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.Comparator r1;
        java.util.TreeMap $r2;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Comparator)>(r1);

        r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable> = $r2;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.text.NumberFormat r1;
        java.util.Iterator r3;
        java.lang.Comparable r4;
        java.lang.StringBuilder $r5;
        java.util.TreeMap $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.String $r9, $r15, $r18;
        java.lang.Object $r10;
        long $l0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value \t Freq. \t Pct. \t Cum Pct. \n");

        $r7 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r8 = virtualinvoke $r7.<java.util.TreeMap: java.util.Set keySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Comparable) $r10;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>(r4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getPct(java.lang.Comparable)>(r4);

        $r15 = virtualinvoke r1.<java.text.NumberFormat: java.lang.String format(double)>($d0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getCumPct(java.lang.Comparable)>(r4);

        $r18 = virtualinvoke r1.<java.text.NumberFormat: java.lang.String format(double)>($d1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label1;

     label2:
        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void addValue(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.Comparable $r7;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.Comparable) r1;

        virtualinvoke r0.<org.apache.commons.math.stat.Frequency: void addValue(java.lang.Comparable)>($r7);

        goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats CLASS_DOESNT_IMPLEMENT_COMPARABLE>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r2[0] = $r5;

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r6;

     label2:
        return;
    }

    public void addValue(java.lang.Comparable)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Comparable r1, r17;
        boolean $z0;
        java.util.TreeMap $r2, $r4, $r7;
        java.lang.Object $r3;
        long $l0, $l1, $l2;
        java.lang.Long $r5, $r8, r18;
        java.lang.Integer $r10;
        java.lang.ClassCastException $r11;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.lang.Class $r14;
        java.lang.String $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        r17 = r1;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r10 = (java.lang.Integer) r1;

        $l2 = virtualinvoke $r10.<java.lang.Integer: long longValue()>();

        r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

     label1:
        $r2 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (java.lang.Long) $r3;

        if r18 != null goto label2;

        $r7 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        virtualinvoke $r7.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r8);

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $l0 = virtualinvoke r18.<java.lang.Long: long longValue()>();

        $l1 = $l0 + 1L;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, $r5);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES>;

        $r12 = newarray (java.lang.Object)[1];

        $r14 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r15;

        $r16 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r16;

     label5:
        return;

        catch java.lang.ClassCastException from label1 to label3 with label4;
    }

    public void addValue(int)
    {
        org.apache.commons.math.stat.Frequency r0;
        int i0;
        long $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke r0.<org.apache.commons.math.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }

    public void addValue(java.lang.Integer)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Integer r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Integer;

        $l0 = virtualinvoke r1.<java.lang.Integer: long longValue()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke r0.<org.apache.commons.math.stat.Frequency: void addValue(java.lang.Comparable)>($r2);

        return;
    }

    public void addValue(long)
    {
        org.apache.commons.math.stat.Frequency r0;
        long l0;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<org.apache.commons.math.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }

    public void addValue(char)
    {
        org.apache.commons.math.stat.Frequency r0;
        char c0;
        java.lang.Character $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke r0.<org.apache.commons.math.stat.Frequency: void addValue(java.lang.Comparable)>($r1);

        return;
    }

    public void clear()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.TreeMap $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        $r1 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        virtualinvoke $r1.<java.util.TreeMap: void clear()>();

        return;
    }

    public java.util.Iterator valuesIterator()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.TreeMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        $r1 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public long getSumFreq()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.Iterator r1;
        java.util.TreeMap $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Long $r5;
        long $l0, l1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l1 = 0L;

        $r2 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Long) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        l1 = l1 + $l0;

        goto label1;

     label2:
        return l1;
    }

    public long getCount(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>($r2);

        return $l0;
    }

    public long getCount(java.lang.Comparable)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Comparable r1;
        boolean $z0;
        java.util.TreeMap $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        long $l0, $l1, l2;
        java.lang.ClassCastException $r5;
        java.lang.Long r6;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.Integer) r1;

        $l0 = virtualinvoke $r4.<java.lang.Integer: long longValue()>();

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(long)>($l0);

        return $l1;

     label1:
        l2 = 0L;

     label2:
        $r2 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Long) $r3;

        if r6 == null goto label3;

        l2 = virtualinvoke r6.<java.lang.Long: long longValue()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return l2;

        catch java.lang.ClassCastException from label2 to label3 with label4;
    }

    public long getCount(int)
    {
        org.apache.commons.math.stat.Frequency r0;
        int i0;
        long $l1, $l2;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l2 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l2;
    }

    public long getCount(long)
    {
        org.apache.commons.math.stat.Frequency r0;
        long l0, $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l1;
    }

    public long getCount(char)
    {
        org.apache.commons.math.stat.Frequency r0;
        char c0;
        java.lang.Character $r1;
        long $l1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>($r1);

        return $l1;
    }

    public int getUniqueCount()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.TreeMap $r1;
        java.util.Set $r2;
        int $i0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        $r1 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        return $i0;
    }

    public double getPct(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getPct(java.lang.Comparable)>($r2);

        return $d0;
    }

    public double getPct(java.lang.Comparable)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Comparable r1;
        long l0, $l2;
        byte $b1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getSumFreq()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $l2 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>(r1);

        $d1 = (double) $l2;

        $d0 = (double) l0;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public double getPct(int)
    {
        org.apache.commons.math.stat.Frequency r0;
        int i0;
        long $l1;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public double getPct(long)
    {
        org.apache.commons.math.stat.Frequency r0;
        long l0;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public double getPct(char)
    {
        org.apache.commons.math.stat.Frequency r0;
        char c0;
        java.lang.Character $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public long getCumFreq(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r2);

        return $l0;
    }

    public long getCumFreq(java.lang.Comparable)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Comparable r1, r2;
        long $l0, $l5, $l6, $l7, $l8, l9;
        byte $b1;
        boolean $z0, $z1;
        java.util.TreeMap $r3, $r4, $r6, $r8;
        java.lang.Object $r5, $r7, $r9, $r10;
        int $i2, $i3, $i4;
        org.apache.commons.math.stat.Frequency$NaturalComparator $r11;
        java.lang.Integer $r12;
        java.lang.ClassCastException $r13;
        java.util.Comparator r14;
        java.lang.Long r15;
        java.util.Iterator r17;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        $l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getSumFreq()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label01;

        return 0L;

     label01:
        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label02;

        $r12 = (java.lang.Integer) r1;

        $l7 = virtualinvoke $r12.<java.lang.Integer: long longValue()>();

        $l8 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(long)>($l7);

        return $l8;

     label02:
        $r3 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        r14 = virtualinvoke $r3.<java.util.TreeMap: java.util.Comparator comparator()>();

        if r14 != null goto label03;

        $r11 = new org.apache.commons.math.stat.Frequency$NaturalComparator;

        specialinvoke $r11.<org.apache.commons.math.stat.Frequency$NaturalComparator: void <init>(org.apache.commons.math.stat.Frequency$1)>(null);

        r14 = $r11;

     label03:
        l9 = 0L;

     label04:
        $r4 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1);

        r15 = (java.lang.Long) $r5;

        if r15 == null goto label05;

        l9 = virtualinvoke r15.<java.lang.Long: long longValue()>();

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        return 0L;

     label07:
        $r6 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r7 = virtualinvoke $r6.<java.util.TreeMap: java.lang.Object firstKey()>();

        $i2 = interfaceinvoke r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $i2 >= 0 goto label08;

        return 0L;

     label08:
        $r8 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r9 = virtualinvoke $r8.<java.util.TreeMap: java.lang.Object lastKey()>();

        $i3 = interfaceinvoke r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r9);

        if $i3 < 0 goto label09;

        $l6 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getSumFreq()>();

        return $l6;

     label09:
        r17 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: java.util.Iterator valuesIterator()>();

     label10:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r10 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Comparable) $r10;

        $i4 = interfaceinvoke r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, r2);

        if $i4 <= 0 goto label11;

        $l5 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCount(java.lang.Comparable)>(r2);

        l9 = l9 + $l5;

        goto label12;

     label11:
        return l9;

     label12:
        goto label10;

     label13:
        return l9;

        catch java.lang.ClassCastException from label04 to label05 with label06;
    }

    public long getCumFreq(int)
    {
        org.apache.commons.math.stat.Frequency r0;
        int i0;
        long $l1, $l2;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $l2 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l2;
    }

    public long getCumFreq(long)
    {
        org.apache.commons.math.stat.Frequency r0;
        long l0, $l1;
        java.lang.Long $r1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l1;
    }

    public long getCumFreq(char)
    {
        org.apache.commons.math.stat.Frequency r0;
        char c0;
        java.lang.Character $r1;
        long $l1;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(java.lang.Comparable)>($r1);

        return $l1;
    }

    public double getCumPct(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Object r1;
        java.lang.Comparable $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Comparable) r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getCumPct(java.lang.Comparable)>($r2);

        return $d0;
    }

    public double getCumPct(java.lang.Comparable)
    {
        org.apache.commons.math.stat.Frequency r0;
        java.lang.Comparable r1;
        long l0, $l2;
        byte $b1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Comparable;

        l0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getSumFreq()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return #NaN;

     label1:
        $l2 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: long getCumFreq(java.lang.Comparable)>(r1);

        $d1 = (double) $l2;

        $d0 = (double) l0;

        $d2 = $d1 / $d0;

        return $d2;
    }

    public double getCumPct(int)
    {
        org.apache.commons.math.stat.Frequency r0;
        int i0;
        long $l1;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public double getCumPct(long)
    {
        org.apache.commons.math.stat.Frequency r0;
        long l0;
        java.lang.Long $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public double getCumPct(char)
    {
        org.apache.commons.math.stat.Frequency r0;
        char c0;
        java.lang.Character $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.Frequency: double getCumPct(java.lang.Comparable)>($r1);

        return $d0;
    }

    public int hashCode()
    {
        org.apache.commons.math.stat.Frequency r0;
        java.util.TreeMap $r1, $r2;
        int $i1, $i3, i4;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        $i1 = 31 * 1;

        $r1 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $i3 = virtualinvoke $r2.<java.util.TreeMap: int hashCode()>();

     label2:
        i4 = $i1 + $i3;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.stat.Frequency r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.TreeMap $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math.stat.Frequency;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.stat.Frequency;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math.stat.Frequency) r1;

        $r3 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        if $r3 != null goto label3;

        $r6 = r2.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        if $r6 == null goto label4;

        return 0;

     label3:
        $r5 = r0.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $r4 = r2.<org.apache.commons.math.stat.Frequency: java.util.TreeMap freqTable>;

        $z1 = virtualinvoke $r5.<java.util.TreeMap: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.stat.Frequency: long serialVersionUID> = -3845586908418844111L;

        return;
    }
}
