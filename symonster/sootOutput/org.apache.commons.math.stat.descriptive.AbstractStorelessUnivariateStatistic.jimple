public abstract class org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic extends org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic implements org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic
{

    public void <init>()
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic: void <init>()>();

        return;
    }

    public double evaluate(double[])
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        double[] r1;
        int $i0;
        double $d0;
        org.apache.commons.math.exception.NullArgumentException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math.exception.NullArgumentException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INPUT_ARRAY>;

        specialinvoke $r2.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: double evaluate(double[],int,int)>(r1, 0, $i0);

        return $d0;
    }

    public double evaluate(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        double[] r1;
        int i0, i1;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void clear()>();

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void incrementAll(double[],int,int)>(r1, i0, i1);

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: double getResult()>();

        return $d0;
    }

    public abstract org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic copy();

    public abstract void clear();

    public abstract double getResult();

    public abstract void increment(double);

    public void incrementAll(double[])
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        double[] r1;
        int $i0;
        org.apache.commons.math.exception.NullArgumentException $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        r1 := @parameter0: double[];

        if r1 != null goto label1;

        $r2 = new org.apache.commons.math.exception.NullArgumentException;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats INPUT_ARRAY>;

        specialinvoke $r2.<org.apache.commons.math.exception.NullArgumentException: void <init>(org.apache.commons.math.exception.util.Localizable)>($r3);

        throw $r2;

     label1:
        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void incrementAll(double[],int,int)>(r1, 0, $i0);

        return;
    }

    public void incrementAll(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        double[] r1;
        int i0, i1, i2, i3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        i2 = i0 + i1;

        i3 = i0;

     label1:
        if i3 >= i2 goto label2;

        $d0 = r1[i3];

        virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void increment(double)>($d0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        double $d0, $d1;
        long $l0, $l1;
        float $f0, $f1;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic) r1;

        $d0 = virtualinvoke r2.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: double getResult()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: double getResult()>();

        $z1 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z1 == 0 goto label3;

        $l0 = virtualinvoke r2.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: long getN()>();

        $f0 = (float) $l0;

        $l1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: long getN()>();

        $f1 = (float) $l1;

        $z2 = staticinvoke <org.apache.commons.math.util.MathUtils: boolean equalsIncludingNaN(float,float)>($f0, $f1);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        double $d0, $d1;
        int $i0, $i1, $i2, $i4, $i5;
        long $l3;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        $d0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: double getResult()>();

        $i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d0);

        $i1 = 31 + $i0;

        $i2 = 31 * $i1;

        $l3 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: long getN()>();

        $d1 = (double) $l3;

        $i4 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double)>($d1);

        $i5 = $i2 + $i4;

        return $i5;
    }

    public volatile org.apache.commons.math.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic r0;
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic copy()>();

        return $r1;
    }
}
