public class org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric extends java.lang.Object implements org.apache.commons.math3.analysis.ParametricUnivariateFunction
{

    public void <init>()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric r0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient double[] gradient(double, double[])
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric r0;
        double d0, d1;
        double[] r1, r2;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $i0 = lengthof r1;

        r2 = newarray (double)[$i0];

        d1 = 1.0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        r2[i2] = d1;

        d1 = d1 * d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }

    public transient double value(double, double[]) throws org.apache.commons.math3.exception.NoDataException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric r0;
        double d0, $d1;
        double[] r1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialFunction$Parametric;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $d1 = staticinvoke <org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double evaluate(double[],double)>(r1, d0);

        return $d1;
    }
}
