public class org.apache.commons.math3.ml.neuralnet.oned.NeuronString extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.math3.ml.neuralnet.Network network;
    private final int size;
    private final boolean wrap;
    private final long[] identifiers;

    void <init>(boolean, double[][])
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        boolean z0;
        double[][] r1;
        int i0, $i1, $i2, $i3, $i4, $i6, i7;
        double[] $r2, $r5;
        org.apache.commons.math3.ml.neuralnet.Network $r3, $r6;
        long[] $r4, $r7;
        long $l5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r8;
        java.lang.Integer $r9, $r10;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        z0 := @parameter0: boolean;

        r1 := @parameter1: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r1;

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size> = $i1;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if $i2 >= 2 goto label1;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r9, $r10, 1);

        throw $r8;

     label1:
        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap> = z0;

        $r2 = r1[0];

        i0 = lengthof $r2;

        $r3 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r3.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i0);

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network> = $r3;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $r4 = newarray (long)[$i3];

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers> = $r4;

        i7 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if i7 >= $i4 goto label3;

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r5 = r1[i7];

        $l5 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>($r5);

        $r7[i7] = $l5;

        i7 = i7 + 1;

        goto label2;

     label3:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: void createLinks()>();

        return;
    }

    public void <init>(int, boolean, org.apache.commons.math3.ml.neuralnet.FeatureInitializer[])
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int i0, i1, i3, i4;
        boolean z0;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer[] r1;
        double[] r2;
        long[] $r3, $r6;
        org.apache.commons.math3.ml.neuralnet.Network $r4, $r5;
        long $l2;
        org.apache.commons.math3.ml.neuralnet.FeatureInitializer $r7;
        double $d0;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r8;
        java.lang.Integer $r9, $r10;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.FeatureInitializer[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 2 goto label1;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r9, $r10, 1);

        throw $r8;

     label1:
        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size> = i0;

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap> = z0;

        $r3 = newarray (long)[i0];

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers> = $r3;

        i1 = lengthof r1;

        $r4 = new org.apache.commons.math3.ml.neuralnet.Network;

        specialinvoke $r4.<org.apache.commons.math3.ml.neuralnet.Network: void <init>(long,int)>(0L, i1);

        r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network> = $r4;

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        r2 = newarray (double)[i1];

        i4 = 0;

     label3:
        if i4 >= i1 goto label4;

        $r7 = r1[i4];

        $d0 = interfaceinvoke $r7.<org.apache.commons.math3.ml.neuralnet.FeatureInitializer: double value()>();

        r2[i4] = $d0;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l2 = virtualinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Network: long createNeuron(double[])>(r2);

        $r6[i3] = $l2;

        i3 = i3 + 1;

        goto label2;

     label5:
        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: void createLinks()>();

        return;
    }

    public org.apache.commons.math3.ml.neuralnet.Network getNetwork()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        org.apache.commons.math3.ml.neuralnet.Network $r1;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        return $r1;
    }

    public int getSize()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        return $i0;
    }

    public double[] getFeatures(int)
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r4;
        long[] $r5;
        long $l4;
        org.apache.commons.math3.ml.neuralnet.Network $r6;
        org.apache.commons.math3.ml.neuralnet.Neuron $r7;
        double[] $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i2 = $i1 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long[] identifiers>;

        $l4 = $r5[i0];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l4);

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Neuron: double[] getFeatures()>();

        return $r8;
    }

    private void createLinks()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i10, $i13, i15, i16;
        boolean $z0;
        org.apache.commons.math3.ml.neuralnet.Network $r1, $r2, $r4, $r6, $r7, $r9, $r11, $r12, $r14, $r16, $r17, $r19;
        org.apache.commons.math3.ml.neuralnet.Neuron $r3, $r5, $r8, $r10, $r13, $r15, $r18, $r20;
        long $l5, $l8, $l9, $l11, $l12, $l14;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        i15 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i1 = $i0 - 1;

        if i15 >= $i1 goto label2;

        $r17 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r16 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l12 = (long) i15;

        $r18 = virtualinvoke $r16.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l12);

        $r19 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i13 = i15 + 1;

        $l14 = (long) $i13;

        $r20 = virtualinvoke $r19.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l14);

        virtualinvoke $r17.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r18, $r20);

        i15 = i15 + 1;

        goto label1;

     label2:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        i16 = $i2 - 1;

     label3:
        if i16 <= 0 goto label4;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r11 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $l9 = (long) i16;

        $r13 = virtualinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l9);

        $r14 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i10 = i16 - 1;

        $l11 = (long) $i10;

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l11);

        virtualinvoke $r12.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r13, $r15);

        i16 = i16 + -1;

        goto label3;

     label4:
        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap>;

        if $z0 == 0 goto label5;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(0L);

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i4 = $i3 - 1;

        $l5 = (long) $i4;

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l5);

        virtualinvoke $r2.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r3, $r5);

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $i6 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        $i7 = $i6 - 1;

        $l8 = (long) $i7;

        $r8 = virtualinvoke $r6.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l8);

        $r9 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: org.apache.commons.math3.ml.neuralnet.Network network>;

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(0L);

        virtualinvoke $r7.<org.apache.commons.math3.ml.neuralnet.Network: void addLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>($r8, $r10);

     label5:
        return;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        java.io.ObjectInputStream r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString r0;
        double[][] r1;
        int $i0, $i1, i2;
        org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy $r2;
        boolean $z0;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.oned.NeuronString;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        r1 = newarray (double[])[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: int size>;

        if i2 >= $i1 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: double[] getFeatures(int)>(i2);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy;

        $z0 = r0.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString: boolean wrap>;

        specialinvoke $r2.<org.apache.commons.math3.ml.neuralnet.oned.NeuronString$SerializationProxy: void <init>(boolean,double[][])>($z0, r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.neuralnet.oned.NeuronString: long serialVersionUID> = 1L;

        return;
    }
}
