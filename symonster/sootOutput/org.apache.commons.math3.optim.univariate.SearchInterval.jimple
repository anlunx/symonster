public class org.apache.commons.math3.optim.univariate.SearchInterval extends java.lang.Object implements org.apache.commons.math3.optim.OptimizationData
{
    private final double lower;
    private final double upper;
    private final double start;

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double d0, d1, d2;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2, $r3, $r4, $r6, $r7;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r5;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 0);

        throw $r5;

     label1:
        $b1 = d2 cmpg d0;

        if $b1 < 0 goto label2;

        $b2 = d2 cmpl d1;

        if $b2 <= 0 goto label3;

     label2:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label3:
        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double lower> = d0;

        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double upper> = d1;

        r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double start> = d2;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double d0, d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 + d1;

        $d3 = 0.5 * $d2;

        specialinvoke r0.<org.apache.commons.math3.optim.univariate.SearchInterval: void <init>(double,double,double)>(d0, d1, $d3);

        return;
    }

    public double getMin()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        $d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double lower>;

        return $d0;
    }

    public double getMax()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        $d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double upper>;

        return $d0;
    }

    public double getStartValue()
    {
        org.apache.commons.math3.optim.univariate.SearchInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optim.univariate.SearchInterval;

        $d0 = r0.<org.apache.commons.math3.optim.univariate.SearchInterval: double start>;

        return $d0;
    }
}
