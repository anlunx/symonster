public abstract class org.apache.commons.math3.distribution.AbstractIntegerDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.IntegerDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.commons.math3.random.RandomDataImpl randomData;
    protected final org.apache.commons.math3.random.RandomGenerator random;

    protected void <init>()
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r1;

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random> = null;

        return;
    }

    protected void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r2;

        r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random> = r1;

        return;
    }

    public double cumulativeProbability(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int i0, i1;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= i0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label1:
        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>(i1);

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>(i0);

        $d2 = $d0 - $d1;

        return $d2;
    }

    public int inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14, d15, d16;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b8, $b9;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;
        boolean $z1, $z2, $z3, $z4, $z5;
        int $i6, $i7, i10, i11, $i12;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label01;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label02;

     label01:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label02:
        i10 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int getSupportLowerBound()>();

        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label03;

        return i10;

     label03:
        if i10 != -2147483648 goto label04;

        $d12 = specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>(i10);

        $b9 = $d12 cmpl d0;

        if $b9 < 0 goto label05;

        return i10;

     label04:
        i10 = i10 + -1;

     label05:
        i11 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int getSupportUpperBound()>();

        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label06;

        return i11;

     label06:
        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double getNumericalMean()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double getNumericalVariance()>();

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d3);

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z1 != 0 goto label07;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 != 0 goto label07;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z3 != 0 goto label07;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z4 != 0 goto label07;

        $b8 = d2 cmpl 0.0;

        if $b8 == 0 goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        if $z5 == 0 goto label10;

        $d4 = 1.0 - d0;

        $d5 = $d4 / d0;

        d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d5);

        $d6 = d13 * d2;

        d14 = d1 - $d6;

        $d7 = (double) i10;

        $b4 = d14 cmpl $d7;

        if $b4 <= 0 goto label09;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d14);

        $i7 = (int) $d11;

        i10 = $i7 - 1;

     label09:
        d15 = 1.0 / d13;

        $d8 = d15 * d2;

        d16 = d1 + $d8;

        $d9 = (double) i11;

        $b5 = d16 cmpg $d9;

        if $b5 >= 0 goto label10;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d16);

        $i6 = (int) $d10;

        i11 = $i6 - 1;

     label10:
        $i12 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int solveInverseCumulativeProbability(double,int,int)>(d0, i10, i11);

        return $i12;
    }

    protected int solveInverseCumulativeProbability(double, int, int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        double d0, d1;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        byte $b7;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        d0 := @parameter0: double;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

     label1:
        $i0 = i4 + 1;

        if $i0 >= i5 goto label6;

        $i1 = i4 + i5;

        i6 = $i1 / 2;

        if i6 < i4 goto label2;

        if i6 <= i5 goto label3;

     label2:
        $i2 = i5 - i4;

        $i3 = $i2 / 2;

        i6 = i4 + $i3;

     label3:
        d1 = specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double checkedCumulativeProbability(int)>(i6);

        $b7 = d1 cmpl d0;

        if $b7 < 0 goto label4;

        i5 = i6;

        goto label5;

     label4:
        i4 = i6;

     label5:
        goto label1;

     label6:
        return i5;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        long l0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>(l0);

        $r2 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomDataImpl randomData>;

        virtualinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void reSeed(long)>(l0);

        return;
    }

    public int sample()
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int inverseCumulativeProbability(double)>($d0);

        return $i0;
    }

    public int[] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int i0, $i1, i2;
        int[] r1;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r1 = newarray (int)[i0];

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: int sample()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r1;
    }

    private double checkedCumulativeProbability(int) throws org.apache.commons.math3.exception.MathInternalError
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int i0;
        boolean $z0;
        org.apache.commons.math3.exception.MathInternalError $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;
        double d1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double cumulativeProbability(int)>(i0);

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z0 == 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.MathInternalError;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathInternalError: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label1:
        return d1;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.AbstractIntegerDistribution r0;
        int i0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractIntegerDistribution;

        i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: double probability(int)>(i0);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d0);

        return $d1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.AbstractIntegerDistribution: long serialVersionUID> = -1146319659338487221L;

        return;
    }
}
