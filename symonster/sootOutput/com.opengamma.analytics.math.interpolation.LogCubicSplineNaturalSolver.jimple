public class com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver extends com.opengamma.analytics.math.interpolation.CubicSplineSolver
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[] r1, r2, r3, $r5, $r6;
        double[][] $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[] getDiffs(double[])>(r1);

        $r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[][] getMatrix(double[])>(r3);

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[] getCommonVectorElements(double[],double[])>(r2, r3);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[] matrixEqnSolver(double[][],double[])>($r4, $r5);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, $r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[] r1, r2, r3, r5;
        double[][] r4, r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[] getDiffs(double[])>(r1);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[][] getMatrix(double[])>(r3);

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[] getCommonVectorElements(double[],double[])>(r2, r3);

        r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[][] getCommonVectorSensitivity(double[])>(r3);

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonCoefficientWithSensitivity(double[],double[],double[],double[][],double[],double[][])>(r1, r2, r3, r4, r5, r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[], com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[] r1, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2, $r6;
        int i0, i1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i1);

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r1, $r5);

        r3[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[][] getMatrix(double[])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[] r1, $r2, $r3;
        int i0, $i1, $i2, $i3;
        double[][] r4, r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r4 = newmultiarray (double)[i0][i0];

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver: double[][] getCommonMatrixElements(double[])>(r1);

        $r2 = r5[0];

        $r2[0] = 1.0;

        $i2 = i0 - 1;

        $r3 = r5[$i2];

        $i3 = i0 - 1;

        $r3[$i3] = 1.0;

        return r5;
    }

    protected double[] matrixEqnSolver(double[][], double[])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[][] r1;
        double[] r2, r3, r4, r5, $r6, $r8, $r9, $r10, $r11;
        int i0, $i1, $i2, $i3, $i4, i5;
        double $d0, $d1, $d2, $d3;
        com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        $i1 = lengthof r1;

        i0 = $i1 - 1;

        r3 = newarray (double)[i0];

        $i2 = i0 + 1;

        r4 = newarray (double)[$i2];

        r5 = newarray (double)[i0];

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r9 = r1[i5];

        $i3 = i5 + 1;

        $d1 = $r9[$i3];

        r3[i5] = $d1;

        $r10 = r1[i5];

        $d2 = $r10[i5];

        r4[i5] = $d2;

        $i4 = i5 + 1;

        $r11 = r1[$i4];

        $d3 = $r11[i5];

        r5[i5] = $d3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r6 = r1[i0];

        $d0 = $r6[i0];

        r4[i0] = $d0;

        $r7 = new com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        specialinvoke $r7.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: void <init>(double[],double[],double[])>(r4, r3, r5);

        $r8 = staticinvoke <com.opengamma.analytics.math.linearalgebra.TridiagonalSolver: double[] solvTriDag(com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix,double[])>($r7, r2);

        return $r8;
    }

    protected com.opengamma.analytics.math.matrix.DoubleMatrix1D[] combinedMatrixEqnSolver(double[][], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[][] r1, r3;
        double[] r2, r6, r7, r8, r9, $r11, $r14, $r17, $r18, $r19, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10;
        double $d0, $d1, $d2, $d3;
        com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix $r12;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r15, $r16;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        i0 = lengthof r2;

        $i1 = i0 + 1;

        r4 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i1];

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        $i2 = i0 - 1;

        r6 = newarray (double)[$i2];

        r7 = newarray (double)[i0];

        $i3 = i0 - 1;

        r8 = newarray (double)[$i3];

        i11 = 0;

     label1:
        $i4 = i0 - 1;

        if i11 >= $i4 goto label2;

        $r18 = r1[i11];

        $i9 = i11 + 1;

        $d1 = $r18[$i9];

        r6[i11] = $d1;

        $r19 = r1[i11];

        $d2 = $r19[i11];

        r7[i11] = $d2;

        $i10 = i11 + 1;

        $r20 = r1[$i10];

        $d3 = $r20[i11];

        r8[i11] = $d3;

        i11 = i11 + 1;

        goto label1;

     label2:
        $i7 = i0 - 1;

        $i5 = i0 - 1;

        $r11 = r1[$i5];

        $i6 = i0 - 1;

        $d0 = $r11[$i6];

        r7[$i7] = $d0;

        $r12 = new com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix;

        specialinvoke $r12.<com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix: void <init>(double[],double[],double[])>(r7, r6, r8);

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r14 = staticinvoke <com.opengamma.analytics.math.linearalgebra.TridiagonalSolver: double[] solvTriDag(com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix,double[])>($r12, r2);

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r14);

        r4[0] = $r13;

        i12 = 0;

     label3:
        if i12 >= i0 goto label4;

        $r15 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getColumnVector(int)>(i12);

        r9 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i8 = i12 + 1;

        $r16 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r17 = staticinvoke <com.opengamma.analytics.math.linearalgebra.TridiagonalSolver: double[] solvTriDag(com.opengamma.analytics.math.linearalgebra.TridiagonalMatrix,double[])>($r12, r9);

        specialinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r17);

        r4[$i8] = $r16;

        i12 = i12 + 1;

        goto label3;

     label4:
        return r4;
    }

    public volatile com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])
    {
        com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver r0;
        double[] r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2;

        r0 := @this: com.opengamma.analytics.math.interpolation.LogCubicSplineNaturalSolver;

        r1 := @parameter0: double[];

        $r2 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])>(r1);

        return $r2;
    }
}
