class org.apache.commons.math3.linear.SingularValueDecomposition$1 extends org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor
{
    final double[][] val$data;
    final org.apache.commons.math3.linear.SingularValueDecomposition this$0;

    void <init>(org.apache.commons.math3.linear.SingularValueDecomposition, double[][])
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$1 r0;
        org.apache.commons.math3.linear.SingularValueDecomposition r1;
        double[][] r2;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$1;

        r1 := @parameter0: org.apache.commons.math3.linear.SingularValueDecomposition;

        r2 := @parameter1: double[][];

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition$1: org.apache.commons.math3.linear.SingularValueDecomposition this$0> = r1;

        r0.<org.apache.commons.math3.linear.SingularValueDecomposition$1: double[][] val$data> = r2;

        specialinvoke r0.<org.apache.commons.math3.linear.DefaultRealMatrixPreservingVisitor: void <init>()>();

        return;
    }

    public void visit(int, int, double)
    {
        org.apache.commons.math3.linear.SingularValueDecomposition$1 r0;
        int i0, i1;
        double d0, $d1, $d2;
        double[][] $r1;
        org.apache.commons.math3.linear.SingularValueDecomposition $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math3.linear.SingularValueDecomposition$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        $r1 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$1: double[][] val$data>;

        $r3 = $r1[i0];

        $r2 = r0.<org.apache.commons.math3.linear.SingularValueDecomposition$1: org.apache.commons.math3.linear.SingularValueDecomposition this$0>;

        $r4 = staticinvoke <org.apache.commons.math3.linear.SingularValueDecomposition: double[] access$000(org.apache.commons.math3.linear.SingularValueDecomposition)>($r2);

        $d1 = $r4[i0];

        $d2 = d0 / $d1;

        $r3[i1] = $d2;

        return;
    }
}
