public class org.apache.commons.math.stat.descriptive.moment.Skewness extends org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment;
    protected boolean incMoment;

    public void <init>()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = null;

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment> = 1;

        $r1 = new org.apache.commons.math.stat.descriptive.moment.ThirdMoment;

        specialinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math.stat.descriptive.moment.ThirdMoment)
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        r1 := @parameter0: org.apache.commons.math.stat.descriptive.moment.ThirdMoment;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = null;

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment> = 0;

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = r1;

        return;
    }

    public void <init>(org.apache.commons.math.stat.descriptive.moment.Skewness)
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0, r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        r1 := @parameter0: org.apache.commons.math.stat.descriptive.moment.Skewness;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = null;

        staticinvoke <org.apache.commons.math.stat.descriptive.moment.Skewness: void copy(org.apache.commons.math.stat.descriptive.moment.Skewness,org.apache.commons.math.stat.descriptive.moment.Skewness)>(r1, r0);

        return;
    }

    public void increment(double)
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        double d0;
        boolean $z0;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: void increment(double)>(d0);

     label1:
        return;
    }

    public double getResult()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r1, $r2, $r3, $r4, $r5;
        long $l0, $l2, $l3, $l5;
        byte $b1, $b4;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $l0 = $r1.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: long n>;

        $b1 = $l0 cmp 3L;

        if $b1 >= 0 goto label1;

        return #NaN;

     label1:
        $r2 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $d3 = $r2.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: double m2>;

        $r3 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $l2 = $r3.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: long n>;

        $l3 = $l2 - 1L;

        $d2 = (double) $l3;

        d0 = $d3 / $d2;

        $b4 = d0 cmpg 1.0E-19;

        if $b4 >= 0 goto label2;

        return 0.0;

     label2:
        $r4 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $l5 = virtualinvoke $r4.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: long getN()>();

        d1 = (double) $l5;

        $r5 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $d4 = $r5.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: double m3>;

        $d7 = d1 * $d4;

        $d6 = d1 - 1.0;

        $d5 = d1 - 2.0;

        $d8 = $d6 * $d5;

        $d9 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d0);

        $d10 = $d8 * $d9;

        $d11 = $d10 * d0;

        $d12 = $d7 / $d11;

        return $d12;
    }

    public long getN()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r1;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: long getN()>();

        return $l0;
    }

    public void clear()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        boolean $z0;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $z0 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: void clear()>();

     label1:
        return;
    }

    public double evaluate(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0;
        double[] r1;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20, d21, d22, d23, d24, d25;
        boolean $z0;
        org.apache.commons.math.stat.descriptive.moment.Mean $r3;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d19 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label5;

        if i1 <= 2 goto label5;

        $r3 = new org.apache.commons.math.stat.descriptive.moment.Mean;

        specialinvoke $r3.<org.apache.commons.math.stat.descriptive.moment.Mean: void <init>()>();

        d0 = virtualinvoke $r3.<org.apache.commons.math.stat.descriptive.moment.Mean: double evaluate(double[],int,int)>(r1, i0, i1);

        d20 = 0.0;

        d21 = 0.0;

        i5 = i0;

     label1:
        $i2 = i0 + i1;

        if i5 >= $i2 goto label2;

        $d17 = r1[i5];

        d1 = $d17 - d0;

        $d18 = d1 * d1;

        d20 = d20 + $d18;

        d21 = d21 + d1;

        i5 = i5 + 1;

        goto label1;

     label2:
        $d4 = d21 * d21;

        $d3 = (double) i1;

        $d5 = $d4 / $d3;

        $d7 = d20 - $d5;

        $i3 = i1 - 1;

        $d6 = (double) $i3;

        d22 = $d7 / $d6;

        d23 = 0.0;

        i6 = i0;

     label3:
        $i4 = i0 + i1;

        if i6 >= $i4 goto label4;

        $d14 = r1[i6];

        d2 = $d14 - d0;

        $d15 = d2 * d2;

        $d16 = $d15 * d2;

        d23 = d23 + $d16;

        i6 = i6 + 1;

        goto label3;

     label4:
        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d22);

        $d9 = d22 * $d8;

        d24 = d23 / $d9;

        d25 = (double) i1;

        $d11 = d25 - 1.0;

        $d10 = d25 - 2.0;

        $d12 = $d11 * $d10;

        $d13 = d25 / $d12;

        d19 = $d13 * d24;

     label5:
        return d19;
    }

    public org.apache.commons.math.stat.descriptive.moment.Skewness copy()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0, $r2;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r2 = new org.apache.commons.math.stat.descriptive.moment.Skewness;

        specialinvoke $r2.<org.apache.commons.math.stat.descriptive.moment.Skewness: void <init>()>();

        staticinvoke <org.apache.commons.math.stat.descriptive.moment.Skewness: void copy(org.apache.commons.math.stat.descriptive.moment.Skewness,org.apache.commons.math.stat.descriptive.moment.Skewness)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math.stat.descriptive.moment.Skewness, org.apache.commons.math.stat.descriptive.moment.Skewness)
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0, r1;
        double[] $r2;
        org.apache.commons.math.stat.descriptive.moment.ThirdMoment $r3, $r4, $r5;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.moment.Skewness;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r2 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math.stat.descriptive.moment.Skewness: void setData(double[])>($r2);

        $r3 = new org.apache.commons.math.stat.descriptive.moment.ThirdMoment;

        $r4 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment>;

        $r5 = virtualinvoke $r4.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: org.apache.commons.math.stat.descriptive.moment.ThirdMoment copy()>();

        specialinvoke $r3.<org.apache.commons.math.stat.descriptive.moment.ThirdMoment: void <init>(org.apache.commons.math.stat.descriptive.moment.ThirdMoment)>($r5);

        r1.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.ThirdMoment moment> = $r3;

        $z0 = r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment>;

        r1.<org.apache.commons.math.stat.descriptive.moment.Skewness: boolean incMoment> = $z0;

        return;
    }

    public volatile org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0, $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.Skewness copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.moment.Skewness r0, $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.moment.Skewness;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.moment.Skewness: org.apache.commons.math.stat.descriptive.moment.Skewness copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.stat.descriptive.moment.Skewness: long serialVersionUID> = 7101857578996691352L;

        return;
    }
}
