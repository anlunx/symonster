public class org.apache.commons.math3.stat.inference.TestUtils extends java.lang.Object
{
    private static final org.apache.commons.math3.stat.inference.TTest T_TEST;
    private static final org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST;
    private static final org.apache.commons.math3.stat.inference.OneWayAnova ONE_WAY_ANANOVA;
    private static final org.apache.commons.math3.stat.inference.GTest G_TEST;
    private static final org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST;

    private void <init>()
    {
        org.apache.commons.math3.stat.inference.TestUtils r0;

        r0 := @this: org.apache.commons.math3.stat.inference.TestUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double homoscedasticT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double homoscedasticT(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticT(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static boolean homoscedasticTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: boolean homoscedasticTTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double homoscedasticTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double homoscedasticTTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double homoscedasticTTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static double pairedT(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double pairedT(double[],double[])>(r0, r1);

        return $d0;
    }

    public static boolean pairedTTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: boolean pairedTTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double pairedTTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double pairedTTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double t(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double d0, $d1;
        double[] r0;
        org.apache.commons.math3.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: double t(double,double[])>(d0, r0);

        return $d1;
    }

    public static double t(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double d0, $d1;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math3.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: double t(double,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(d0, r0);

        return $d1;
    }

    public static double t(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double t(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double t(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double t(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static boolean tTest(double, double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double d0, d1;
        double[] r0;
        org.apache.commons.math3.stat.inference.TTest $r1;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        d1 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: boolean tTest(double,double[],double)>(d0, r0, d1);

        return $z0;
    }

    public static double tTest(double, double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double d0, $d1;
        double[] r0;
        org.apache.commons.math3.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: double[];

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,double[])>(d0, r0);

        return $d1;
    }

    public static boolean tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double d0, d1;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math3.stat.inference.TTest $r1;
        boolean $z0;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        d1 := @parameter2: double;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: boolean tTest(double,org.apache.commons.math3.stat.descriptive.StatisticalSummary,double)>(d0, r0, d1);

        return $z0;
    }

    public static double tTest(double, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double d0, $d1;
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0;
        org.apache.commons.math3.stat.inference.TTest $r1;

        d0 := @parameter0: double;

        r0 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.TTest: double tTest(double,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(d0, r0);

        return $d1;
    }

    public static boolean tTest(double[], double[], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: boolean tTest(double[],double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double tTest(double[], double[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double tTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static boolean tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.TTest $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: boolean tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary,double)>(r0, r1, d0);

        return $z0;
    }

    public static double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary, org.apache.commons.math3.stat.descriptive.StatisticalSummary) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummary r0, r1;
        org.apache.commons.math3.stat.inference.TTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.StatisticalSummary;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.TTest: double tTest(org.apache.commons.math3.stat.descriptive.StatisticalSummary,org.apache.commons.math3.stat.descriptive.StatisticalSummary)>(r0, r1);

        return $d0;
    }

    public static double chiSquare(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(double[],long[])>(r0, r1);

        return $d0;
    }

    public static double chiSquare(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        long[][] r0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r1;
        double $d0;

        r0 := @parameter0: long[][];

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquare(long[][])>(r0);

        return $d0;
    }

    public static boolean chiSquareTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0;
        long[] r1;
        double d0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: boolean chiSquareTest(double[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double chiSquareTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(double[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean chiSquareTest(long[][], double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[][] r0;
        double d0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r1;
        boolean $z0;

        r0 := @parameter0: long[][];

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.ChiSquareTest: boolean chiSquareTest(long[][],double)>(r0, d0);

        return $z0;
    }

    public static double chiSquareTest(long[][]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[][] r0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r1;
        double $d0;

        r0 := @parameter0: long[][];

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTest(long[][])>(r0);

        return $d0;
    }

    public static double chiSquareDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        long[] r0, r1;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static double chiSquareTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[] r0, r1;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: double chiSquareTestDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean chiSquareTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[] r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r2;
        boolean $z0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.ChiSquareTest: boolean chiSquareTestDataSetsComparison(long[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double oneWayAnovaFValue(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        java.util.Collection r0;
        org.apache.commons.math3.stat.inference.OneWayAnova $r1;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.OneWayAnova ONE_WAY_ANANOVA>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.OneWayAnova: double anovaFValue(java.util.Collection)>(r0);

        return $d0;
    }

    public static double oneWayAnovaPValue(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        java.util.Collection r0;
        org.apache.commons.math3.stat.inference.OneWayAnova $r1;
        double $d0;

        r0 := @parameter0: java.util.Collection;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.OneWayAnova ONE_WAY_ANANOVA>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.OneWayAnova: double anovaPValue(java.util.Collection)>(r0);

        return $d0;
    }

    public static boolean oneWayAnovaTest(java.util.Collection, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.ConvergenceException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        java.util.Collection r0;
        double d0;
        org.apache.commons.math3.stat.inference.OneWayAnova $r1;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        d0 := @parameter1: double;

        $r1 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.OneWayAnova ONE_WAY_ANANOVA>;

        $z0 = virtualinvoke $r1.<org.apache.commons.math3.stat.inference.OneWayAnova: boolean anovaTest(java.util.Collection,double)>(r0, d0);

        return $z0;
    }

    public static double g(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math3.stat.inference.GTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: double g(double[],long[])>(r0, r1);

        return $d0;
    }

    public static double gTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math3.stat.inference.GTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: double gTest(double[],long[])>(r0, r1);

        return $d0;
    }

    public static double gTestIntrinsic(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0;
        long[] r1;
        org.apache.commons.math3.stat.inference.GTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: double gTestIntrinsic(double[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean gTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        double[] r0;
        long[] r1;
        double d0;
        org.apache.commons.math3.stat.inference.GTest $r2;
        boolean $z0;

        r0 := @parameter0: double[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: boolean gTest(double[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double gDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        long[] r0, r1;
        org.apache.commons.math3.stat.inference.GTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: double gDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static double rootLogLikelihoodRatio(long, long, long, long) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        long l0, l1, l2, l3;
        org.apache.commons.math3.stat.inference.GTest $r0;
        double $d0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        $r0 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r0.<org.apache.commons.math3.stat.inference.GTest: double rootLogLikelihoodRatio(long,long,long,long)>(l0, l1, l2, l3);

        return $d0;
    }

    public static double gTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[] r0, r1;
        org.apache.commons.math3.stat.inference.GTest $r2;
        double $d0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: double gTestDataSetsComparison(long[],long[])>(r0, r1);

        return $d0;
    }

    public static boolean gTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        long[] r0, r1;
        double d0;
        org.apache.commons.math3.stat.inference.GTest $r2;
        boolean $z0;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.GTest: boolean gTestDataSetsComparison(long[],long[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution, double[]) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.distribution.RealDistribution r0;
        double[] r1;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(org.apache.commons.math3.distribution.RealDistribution,double[])>(r0, r1);

        return $d0;
    }

    public static double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[]) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.distribution.RealDistribution r0;
        double[] r1;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[])>(r0, r1);

        return $d0;
    }

    public static double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], boolean) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.distribution.RealDistribution r0;
        double[] r1;
        boolean z0;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r1 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[],boolean)>(r0, r1, z0);

        return $d0;
    }

    public static boolean kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution, double[], double) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.distribution.RealDistribution r0;
        double[] r1;
        double d0;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $z0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: boolean kolmogorovSmirnovTest(org.apache.commons.math3.distribution.RealDistribution,double[],double)>(r0, r1, d0);

        return $z0;
    }

    public static double kolmogorovSmirnovStatistic(double[], double[]) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovStatistic(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double kolmogorovSmirnovTest(double[], double[]) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0, r1;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(double[],double[])>(r0, r1);

        return $d0;
    }

    public static double kolmogorovSmirnovTest(double[], double[], boolean) throws org.apache.commons.math3.exception.InsufficientDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        double[] r0, r1;
        boolean z0;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r2;
        double $d0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        z0 := @parameter2: boolean;

        $r2 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double kolmogorovSmirnovTest(double[],double[],boolean)>(r0, r1, z0);

        return $d0;
    }

    public static double exactP(double, int, int, boolean)
    {
        double d0, $d1;
        int i0, i1;
        boolean z0;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r0 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double exactP(double,int,int,boolean)>(d0, i1, i0, z0);

        return $d1;
    }

    public static double approximateP(double, int, int)
    {
        double d0, $d1;
        int i0, i1;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double approximateP(double,int,int)>(d0, i0, i1);

        return $d1;
    }

    public static double monteCarloP(double, int, int, boolean, int)
    {
        double d0, $d1;
        int i0, i1, i2;
        boolean z0;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        $r0 = <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST>;

        $d1 = virtualinvoke $r0.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: double monteCarloP(double,int,int,boolean,int)>(d0, i0, i1, z0, i2);

        return $d1;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.stat.inference.TTest $r0;
        org.apache.commons.math3.stat.inference.ChiSquareTest $r1;
        org.apache.commons.math3.stat.inference.OneWayAnova $r2;
        org.apache.commons.math3.stat.inference.GTest $r3;
        org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest $r4;

        $r0 = new org.apache.commons.math3.stat.inference.TTest;

        specialinvoke $r0.<org.apache.commons.math3.stat.inference.TTest: void <init>()>();

        <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.TTest T_TEST> = $r0;

        $r1 = new org.apache.commons.math3.stat.inference.ChiSquareTest;

        specialinvoke $r1.<org.apache.commons.math3.stat.inference.ChiSquareTest: void <init>()>();

        <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.ChiSquareTest CHI_SQUARE_TEST> = $r1;

        $r2 = new org.apache.commons.math3.stat.inference.OneWayAnova;

        specialinvoke $r2.<org.apache.commons.math3.stat.inference.OneWayAnova: void <init>()>();

        <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.OneWayAnova ONE_WAY_ANANOVA> = $r2;

        $r3 = new org.apache.commons.math3.stat.inference.GTest;

        specialinvoke $r3.<org.apache.commons.math3.stat.inference.GTest: void <init>()>();

        <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.GTest G_TEST> = $r3;

        $r4 = new org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest;

        specialinvoke $r4.<org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest: void <init>()>();

        <org.apache.commons.math3.stat.inference.TestUtils: org.apache.commons.math3.stat.inference.KolmogorovSmirnovTest KS_TEST> = $r4;

        return;
    }
}
