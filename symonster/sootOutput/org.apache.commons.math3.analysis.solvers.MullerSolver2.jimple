public class org.apache.commons.math3.analysis.solvers.MullerSolver2 extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
{
    private static final double DEFAULT_ABSOLUTE_ACCURACY;

    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: void <init>(double)>(1.0E-6);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>(d0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>(d0, d1);

        return;
    }

    protected double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.analysis.solvers.MullerSolver2 r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, $d62, d63, d64, d65, d66;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        org.apache.commons.math3.exception.NoBracketingException $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.MullerSolver2;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getMin()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getMax()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: void verifyInterval(double,double)>(d0, d1);

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getRelativeAccuracy()>();

        d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getAbsoluteAccuracy()>();

        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double getFunctionValueAccuracy()>();

        d53 = d0;

        d54 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>(d0);

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d54);

        $b0 = $d10 cmpg d4;

        if $b0 >= 0 goto label01;

        return d0;

     label01:
        d55 = d1;

        d56 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>(d1);

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d56);

        $b1 = $d11 cmpg d4;

        if $b1 >= 0 goto label02;

        return d1;

     label02:
        $d12 = d54 * d56;

        $b2 = $d12 cmpl 0.0;

        if $b2 <= 0 goto label03;

        $r1 = new org.apache.commons.math3.exception.NoBracketingException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>(d0, d1, d54, d56);

        throw $r1;

     label03:
        $d13 = d0 + d1;

        d57 = 0.5 * $d13;

        d58 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>(d57);

        d59 = #Infinity;

     label04:
        $d15 = d57 - d55;

        $d14 = d55 - d53;

        d5 = $d15 / $d14;

        $d16 = 1.0 + d5;

        $d17 = $d16 * d56;

        $d19 = d58 - $d17;

        $d18 = d5 * d54;

        $d20 = $d19 + $d18;

        d6 = d5 * $d20;

        $d21 = 2.0 * d5;

        $d22 = $d21 + 1.0;

        $d27 = $d22 * d58;

        $d24 = 1.0 + d5;

        $d23 = 1.0 + d5;

        $d25 = $d24 * $d23;

        $d26 = $d25 * d56;

        $d30 = $d27 - $d26;

        $d28 = d5 * d5;

        $d29 = $d28 * d54;

        d7 = $d30 + $d29;

        $d31 = 1.0 + d5;

        d8 = $d31 * d58;

        $d34 = d7 * d7;

        $d32 = 4.0 * d6;

        $d33 = $d32 * d8;

        d9 = $d34 - $d33;

        $b3 = d9 cmpl 0.0;

        if $b3 < 0 goto label07;

        $d49 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d9);

        d60 = d7 + $d49;

        $d50 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d9);

        d61 = d7 - $d50;

        $d51 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d60);

        $d52 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d61);

        $b9 = $d51 cmpl $d52;

        if $b9 <= 0 goto label05;

        $d62 = d60;

        goto label06;

     label05:
        $d62 = d61;

     label06:
        d63 = $d62;

        goto label08;

     label07:
        $d35 = d7 * d7;

        $d36 = $d35 - d9;

        d63 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d36);

     label08:
        $b4 = d63 cmpl 0.0;

        if $b4 == 0 goto label11;

        $d46 = 2.0 * d8;

        $d45 = d57 - d55;

        $d47 = $d46 * $d45;

        $d48 = $d47 / d63;

        d64 = d57 - $d48;

     label09:
        $b7 = d64 cmpl d55;

        if $b7 == 0 goto label10;

        $b8 = d64 cmpl d57;

        if $b8 != 0 goto label12;

     label10:
        d64 = d64 + d3;

        goto label09;

     label11:
        $d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double random()>();

        $d38 = d1 - d0;

        $d39 = $d37 * $d38;

        d64 = d0 + $d39;

        d59 = #Infinity;

     label12:
        d65 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.MullerSolver2: double computeObjectiveValue(double)>(d64);

        $d40 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d64);

        $d41 = d2 * $d40;

        d66 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d41, d3);

        $d42 = d64 - d59;

        $d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d42);

        $b5 = $d43 cmpg d66;

        if $b5 <= 0 goto label13;

        $d44 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d65);

        $b6 = $d44 cmpg d4;

        if $b6 > 0 goto label14;

     label13:
        return d64;

     label14:
        d53 = d55;

        d54 = d56;

        d55 = d57;

        d56 = d58;

        d57 = d64;

        d58 = d65;

        d59 = d64;

        goto label04;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.MullerSolver2: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
