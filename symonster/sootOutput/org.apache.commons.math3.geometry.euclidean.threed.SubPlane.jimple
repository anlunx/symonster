public class org.apache.commons.math3.geometry.euclidean.threed.SubPlane extends org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane
{

    public void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        specialinvoke r0.<org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return;
    }

    protected org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Region)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0, $r3;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.partitioning.Region r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 := @parameter1: org.apache.commons.math3.geometry.partitioning.Region;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r1, r2);

        return $r3;
    }

    public org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r6;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r2, r3;
        org.apache.commons.math3.geometry.euclidean.threed.Line r4;
        double d0, $d1, d2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r5, $r8, $r10, $r11, $r12, $r13;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r7, $r9;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r14;
        org.apache.commons.math3.geometry.partitioning.Region $r15;
        org.apache.commons.math3.geometry.partitioning.Side $r16, $r17;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r18, r19, r20;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r6 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r6;

        r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r3);

        d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getTolerance()>();

        if r4 != null goto label4;

        d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r3);

        $b1 = d2 cmpg -1.0E-10;

        if $b1 >= 0 goto label1;

        $r17 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side MINUS>;

        goto label3;

     label1:
        $b2 = d2 cmpl 1.0E-10;

        if $b2 <= 0 goto label2;

        $r17 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side PLUS>;

        goto label3;

     label2:
        $r17 = <org.apache.commons.math3.geometry.partitioning.Side: org.apache.commons.math3.geometry.partitioning.Side HYPER>;

     label3:
        return $r17;

     label4:
        $r7 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        $r8 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r7);

        r18 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r8);

        $r9 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE>;

        $r10 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r9);

        r19 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r10);

        $r11 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()>();

        $r12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        r5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r11, $r12);

        $r13 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r13);

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label5;

        r20 = r18;

        r18 = r19;

        r19 = r20;

     label5:
        $r14 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r14.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r18, r19, d0);

        $r15 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r16 = interfaceinvoke $r15.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.Side side(org.apache.commons.math3.geometry.partitioning.Hyperplane)>($r14);

        return $r16;
    }

    public org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane split(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane r0, $r33, $r36;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1, $r10;
        org.apache.commons.math3.geometry.euclidean.threed.Plane r2, r3, $r34, $r37;
        org.apache.commons.math3.geometry.euclidean.threed.Line r4;
        double d0, $d1, d2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r5, $r12, $r14, $r15, $r16, $r17;
        org.apache.commons.math3.geometry.euclidean.twod.SubLine r6, r45;
        org.apache.commons.math3.geometry.partitioning.BSPTree r7, r8, $r21, $r23, $r24, $r26, $r28, $r29, $r31, $r46, $r47;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r11, $r13;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r18, $r19;
        org.apache.commons.math3.geometry.partitioning.Region $r20, $r22, $r27;
        boolean $z0, $z1;
        java.lang.Boolean $r25, $r30, $r39, $r40;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane $r32, $r41;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet $r35, $r38;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r42, r43, r44;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) r1;

        $r10 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.euclidean.threed.Plane) $r10;

        r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r3);

        d0 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getTolerance()>();

        if r4 != null goto label3;

        d2 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane)>(r3);

        $b1 = d2 cmpg -1.0E-10;

        if $b1 >= 0 goto label1;

        $r41 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r41.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(null, r0);

        goto label2;

     label1:
        $r41 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        specialinvoke $r41.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r0, null);

     label2:
        return $r41;

     label3:
        $r11 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO>;

        $r12 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r11);

        r42 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r12);

        $r13 = <org.apache.commons.math3.geometry.euclidean.oned.Vector1D: org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE>;

        $r14 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Point)>($r13);

        r43 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Point)>($r14);

        $r15 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection()>();

        $r16 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        r5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r15, $r16);

        $r17 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal()>();

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r17);

        $b0 = $d1 cmpg 0.0;

        if $b0 >= 0 goto label4;

        r44 = r42;

        r42 = r43;

        r43 = r44;

     label4:
        $r18 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r18.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r42, r43, d0);

        r45 = virtualinvoke $r18.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        $r19 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r43, r42, d0);

        r6 = virtualinvoke $r19.<org.apache.commons.math3.geometry.euclidean.twod.Line: org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane()>();

        $r20 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r21 = interfaceinvoke $r20.<org.apache.commons.math3.geometry.partitioning.Region: org.apache.commons.math3.geometry.partitioning.BSPTree getTree(boolean)>(0);

        r7 = virtualinvoke $r21.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)>(r45);

        $r22 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r23 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        $z0 = interfaceinvoke $r22.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r23);

        if $z0 == 0 goto label5;

        $r46 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r40 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r46.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r40);

        goto label6;

     label5:
        $r46 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r24 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r25 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r24.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r25);

        $r26 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getPlus()>();

        specialinvoke $r46.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r6, $r24, $r26, null);

     label6:
        r8 = $r46;

        $r27 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r28 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        $z1 = interfaceinvoke $r27.<org.apache.commons.math3.geometry.partitioning.Region: boolean isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)>($r28);

        if $z1 == 0 goto label7;

        $r47 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r39 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r47.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r39);

        goto label8;

     label7:
        $r47 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r29 = new org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r30 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r29.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(java.lang.Object)>($r30);

        $r31 = virtualinvoke r7.<org.apache.commons.math3.geometry.partitioning.BSPTree: org.apache.commons.math3.geometry.partitioning.BSPTree getMinus()>();

        specialinvoke $r47.<org.apache.commons.math3.geometry.partitioning.BSPTree: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)>(r45, $r29, $r31, null);

     label8:
        $r32 = new org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane;

        $r33 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r34 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        $r35 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r35.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>(r8, d0);

        specialinvoke $r33.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r34, $r35);

        $r36 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane;

        $r37 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Plane: org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf()>();

        $r38 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet;

        specialinvoke $r38.<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet: void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)>($r47, d0);

        specialinvoke $r36.<org.apache.commons.math3.geometry.euclidean.threed.SubPlane: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>($r37, $r38);

        specialinvoke $r32.<org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane: void <init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)>($r33, $r36);

        return $r32;
    }
}
