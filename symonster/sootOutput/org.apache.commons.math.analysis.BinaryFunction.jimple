public abstract class org.apache.commons.math.analysis.BinaryFunction extends java.lang.Object implements org.apache.commons.math.analysis.BivariateRealFunction
{
    public static final org.apache.commons.math.analysis.BinaryFunction ADD;
    public static final org.apache.commons.math.analysis.BinaryFunction SUBTRACT;
    public static final org.apache.commons.math.analysis.BinaryFunction MULTIPLY;
    public static final org.apache.commons.math.analysis.BinaryFunction DIVIDE;
    public static final org.apache.commons.math.analysis.BinaryFunction POW;
    public static final org.apache.commons.math.analysis.BinaryFunction ATAN2;

    public void <init>()
    {
        org.apache.commons.math.analysis.BinaryFunction r0;

        r0 := @this: org.apache.commons.math.analysis.BinaryFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract double value(double, double) throws org.apache.commons.math.FunctionEvaluationException;

    public org.apache.commons.math.analysis.ComposableFunction fix1stArgument(double)
    {
        org.apache.commons.math.analysis.BinaryFunction r0;
        double d0;
        org.apache.commons.math.analysis.BinaryFunction$7 $r1;

        r0 := @this: org.apache.commons.math.analysis.BinaryFunction;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.analysis.BinaryFunction$7;

        specialinvoke $r1.<org.apache.commons.math.analysis.BinaryFunction$7: void <init>(org.apache.commons.math.analysis.BinaryFunction,double)>(r0, d0);

        return $r1;
    }

    public org.apache.commons.math.analysis.ComposableFunction fix2ndArgument(double)
    {
        org.apache.commons.math.analysis.BinaryFunction r0;
        double d0;
        org.apache.commons.math.analysis.BinaryFunction$8 $r1;

        r0 := @this: org.apache.commons.math.analysis.BinaryFunction;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.analysis.BinaryFunction$8;

        specialinvoke $r1.<org.apache.commons.math.analysis.BinaryFunction$8: void <init>(org.apache.commons.math.analysis.BinaryFunction,double)>(r0, d0);

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.math.analysis.BinaryFunction$1 $r0;
        org.apache.commons.math.analysis.BinaryFunction$2 $r1;
        org.apache.commons.math.analysis.BinaryFunction$3 $r2;
        org.apache.commons.math.analysis.BinaryFunction$4 $r3;
        org.apache.commons.math.analysis.BinaryFunction$5 $r4;
        org.apache.commons.math.analysis.BinaryFunction$6 $r5;

        $r0 = new org.apache.commons.math.analysis.BinaryFunction$1;

        specialinvoke $r0.<org.apache.commons.math.analysis.BinaryFunction$1: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction ADD> = $r0;

        $r1 = new org.apache.commons.math.analysis.BinaryFunction$2;

        specialinvoke $r1.<org.apache.commons.math.analysis.BinaryFunction$2: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction SUBTRACT> = $r1;

        $r2 = new org.apache.commons.math.analysis.BinaryFunction$3;

        specialinvoke $r2.<org.apache.commons.math.analysis.BinaryFunction$3: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction MULTIPLY> = $r2;

        $r3 = new org.apache.commons.math.analysis.BinaryFunction$4;

        specialinvoke $r3.<org.apache.commons.math.analysis.BinaryFunction$4: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction DIVIDE> = $r3;

        $r4 = new org.apache.commons.math.analysis.BinaryFunction$5;

        specialinvoke $r4.<org.apache.commons.math.analysis.BinaryFunction$5: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction POW> = $r4;

        $r5 = new org.apache.commons.math.analysis.BinaryFunction$6;

        specialinvoke $r5.<org.apache.commons.math.analysis.BinaryFunction$6: void <init>()>();

        <org.apache.commons.math.analysis.BinaryFunction: org.apache.commons.math.analysis.BinaryFunction ATAN2> = $r5;

        return;
    }
}
