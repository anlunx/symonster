public class org.apache.commons.math3.stat.inference.GTest extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.math3.stat.inference.GTest r0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double g(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] r1;
        long[] r2;
        int $i0, $i1, $i2, $i3, $i9, $i10, $i11, i12, i13, $i14;
        double $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, d16, d17, d18, $d19;
        byte $b4;
        long $l5, $l6, $l7, $l8;
        org.apache.commons.math3.exception.DimensionMismatchException $r3, $r4;
        boolean z0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i11 = lengthof r1;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i11, 2);

        throw $r4;

     label1:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label2;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i10 = lengthof r1;

        $i9 = lengthof r2;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, $i9);

        throw $r3;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkPositive(double[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r2);

        d15 = 0.0;

        d16 = 0.0;

        i12 = 0;

     label3:
        $i3 = lengthof r2;

        if i12 >= $i3 goto label4;

        $d13 = r1[i12];

        d15 = d15 + $d13;

        $l8 = r2[i12];

        $d14 = (double) $l8;

        d16 = d16 + $d14;

        i12 = i12 + 1;

        goto label3;

     label4:
        d17 = 1.0;

        z0 = 0;

        $d1 = d15 - d16;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d1);

        $b4 = $d2 cmpl 1.0E-5;

        if $b4 <= 0 goto label5;

        d17 = d16 / d15;

        z0 = 1;

     label5:
        d18 = 0.0;

        i13 = 0;

     label6:
        $i14 = lengthof r2;

        if i13 >= $i14 goto label9;

        if z0 == 0 goto label7;

        $l7 = r2[i13];

        $d11 = (double) $l7;

        $d9 = r1[i13];

        $d10 = d17 * $d9;

        $d12 = $d11 / $d10;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d12);

        goto label8;

     label7:
        $l5 = r2[i13];

        $d5 = (double) $l5;

        $d4 = r1[i13];

        $d6 = $d5 / $d4;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d6);

     label8:
        $l6 = r2[i13];

        $d7 = (double) $l6;

        $d8 = $d7 * $d19;

        d18 = d18 + $d8;

        i13 = i13 + 1;

        goto label6;

     label9:
        $d3 = 2.0 * d18;

        return $d3;
    }

    public double gTest(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] r1;
        long[] r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double g(double[],long[])>(r1, r2);

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public double gTestIntrinsic(double[], long[]) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] r1;
        long[] r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 2.0;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double g(double[],long[])>(r1, r2);

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean gTest(double[], long[], double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        double[] r1;
        long[] r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: double[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gTest(double[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private double entropy(long[][])
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[][] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        int $i0, $i1, $i2, $i6, i8, i9, i10, i11;
        long[] $r2, $r3, $r4, $r5, $r6;
        long $l3, $l5, $l7;
        byte $b4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: long[][];

        d6 = 0.0;

        d7 = 0.0;

        i8 = 0;

     label1:
        $i0 = lengthof r1;

        if i8 >= $i0 goto label4;

        i9 = 0;

     label2:
        $r5 = r1[i8];

        $i6 = lengthof $r5;

        if i9 >= $i6 goto label3;

        $r6 = r1[i8];

        $l7 = $r6[i9];

        $d5 = (double) $l7;

        d7 = d7 + $d5;

        i9 = i9 + 1;

        goto label2;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        i10 = 0;

     label5:
        $i1 = lengthof r1;

        if i10 >= $i1 goto label9;

        i11 = 0;

     label6:
        $r2 = r1[i10];

        $i2 = lengthof $r2;

        if i11 >= $i2 goto label8;

        $r3 = r1[i10];

        $l3 = $r3[i11];

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label7;

        $r4 = r1[i10];

        $l5 = $r4[i11];

        $d2 = (double) $l5;

        d0 = $d2 / d7;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d4 = d0 * $d3;

        d6 = d6 + $d4;

     label7:
        i11 = i11 + 1;

        goto label6;

     label8:
        i10 = i10 + 1;

        goto label5;

     label9:
        $d1 = neg d6;

        return $d1;
    }

    private double entropy(long[])
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] r1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        int $i0, $i1, i6, i7;
        long $l2, $l4, $l5;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: long[];

        d6 = 0.0;

        d7 = 0.0;

        i6 = 0;

     label1:
        $i0 = lengthof r1;

        if i6 >= $i0 goto label2;

        $l5 = r1[i6];

        $d5 = (double) $l5;

        d7 = d7 + $d5;

        i6 = i6 + 1;

        goto label1;

     label2:
        i7 = 0;

     label3:
        $i1 = lengthof r1;

        if i7 >= $i1 goto label5;

        $l2 = r1[i7];

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label4;

        $l4 = r1[i7];

        $d2 = (double) $l4;

        d0 = $d2 / d7;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d4 = d0 * $d3;

        d6 = d6 + $d4;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        $d1 = neg d6;

        return $d1;
    }

    public double gDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] r1, r2, r3, $r6, $r7, $r8;
        long[][] r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i19, $i20, $i21, i24;
        byte $b6, $b7, $b9, $b18;
        org.apache.commons.math3.exception.ZeroException $r5, $r9;
        long $l8, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, l22, l23;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12;
        org.apache.commons.math3.exception.DimensionMismatchException $r13, $r14;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r14 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i21 = lengthof r1;

        specialinvoke $r14.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i21, 2);

        throw $r14;

     label1:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label2;

        $r13 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i20 = lengthof r1;

        $i19 = lengthof r2;

        specialinvoke $r13.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i20, $i19);

        throw $r13;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r1);

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkNonNegative(long[])>(r2);

        l22 = 0L;

        l23 = 0L;

        $i3 = lengthof r1;

        r3 = newarray (long)[$i3];

        $i4 = lengthof r1;

        r4 = newmultiarray (long)[2][$i4];

        i24 = 0;

     label3:
        $i5 = lengthof r1;

        if i24 >= $i5 goto label5;

        $l8 = r1[i24];

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label4;

        $l17 = r2[i24];

        $b18 = $l17 cmp 0L;

        if $b18 != 0 goto label4;

        $r9 = new org.apache.commons.math3.exception.ZeroException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY>;

        $r10 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i24);

        $r10[0] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label4:
        $l10 = r1[i24];

        l22 = l22 + $l10;

        $l11 = r2[i24];

        l23 = l23 + $l11;

        $l13 = r1[i24];

        $l12 = r2[i24];

        $l14 = $l13 + $l12;

        r3[i24] = $l14;

        $r7 = r4[0];

        $l15 = r1[i24];

        $r7[i24] = $l15;

        $r8 = r4[1];

        $l16 = r2[i24];

        $r8[i24] = $l16;

        i24 = i24 + 1;

        goto label3;

     label5:
        $b6 = l22 cmp 0L;

        if $b6 == 0 goto label6;

        $b7 = l23 cmp 0L;

        if $b7 != 0 goto label7;

     label6:
        $r5 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r5.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r5;

     label7:
        $r6 = newarray (long)[2];

        $r6[0] = l22;

        $r6[1] = l23;

        $d2 = (double) l22;

        $d1 = (double) l23;

        d0 = $d2 + $d1;

        $d3 = 2.0 * d0;

        $d4 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[])>($r6);

        $d5 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[])>(r3);

        $d6 = $d4 + $d5;

        $d7 = specialinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double entropy(long[][])>(r4);

        $d8 = $d6 - $d7;

        $d9 = $d3 * $d8;

        return $d9;
    }

    public double rootLogLikelihoodRatio(long, long, long, long)
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long l0, l1, l2, l3, $l4, $l5;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        long[] $r1, $r2;
        byte $b6;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        $r1 = newarray (long)[2];

        $r1[0] = l0;

        $r1[1] = l1;

        $r2 = newarray (long)[2];

        $r2[0] = l2;

        $r2[1] = l3;

        d0 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gDataSetsComparison(long[],long[])>($r1, $r2);

        d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d2 = (double) l0;

        $l4 = l0 + l1;

        $d1 = (double) $l4;

        $d6 = $d2 / $d1;

        $d4 = (double) l2;

        $l5 = l2 + l3;

        $d3 = (double) $l5;

        $d5 = $d4 / $d3;

        $b6 = $d6 cmpg $d5;

        if $b6 >= 0 goto label1;

        d7 = neg d7;

     label1:
        return d7;
    }

    public double gTestDataSetsComparison(long[], long[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] r1, r2;
        org.apache.commons.math3.distribution.ChiSquaredDistribution $r4;
        int $i0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        $r4 = new org.apache.commons.math3.distribution.ChiSquaredDistribution;

        $i0 = lengthof r1;

        $d0 = (double) $i0;

        $d1 = $d0 - 1.0;

        specialinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double)>(null, $d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gDataSetsComparison(long[],long[])>(r1, r2);

        $d3 = virtualinvoke $r4.<org.apache.commons.math3.distribution.ChiSquaredDistribution: double cumulativeProbability(double)>($d2);

        $d4 = 1.0 - $d3;

        return $d4;
    }

    public boolean gTestDataSetsComparison(long[], long[], double) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.ZeroException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.MaxCountExceededException
    {
        org.apache.commons.math3.stat.inference.GTest r0;
        long[] r1, r2;
        double d0, $d1;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;
        java.lang.Double $r5, $r7;
        java.lang.Integer $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.stat.inference.GTest;

        r1 := @parameter0: long[];

        r2 := @parameter1: long[];

        d0 := @parameter2: double;

        $b0 = d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $b1 = d0 cmpl 0.5;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUND_SIGNIFICANCE_LEVEL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6, $r7);

        throw $r3;

     label2:
        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.inference.GTest: double gTestDataSetsComparison(long[],long[])>(r1, r2);

        $b2 = $d1 cmpg d0;

        if $b2 >= 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }
}
