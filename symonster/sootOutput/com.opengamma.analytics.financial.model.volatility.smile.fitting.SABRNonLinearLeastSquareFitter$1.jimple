class com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1 extends com.opengamma.analytics.math.function.ParameterizedFunction
{
    final com.opengamma.analytics.math.minimization.UncoupledParameterTransforms val$transforms;
    final boolean val$recoverATMVol;
    final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$atmOption;
    final double val$forward;
    final double val$atmVol;
    final double val$maturity;
    final com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter, com.opengamma.analytics.math.minimization.UncoupledParameterTransforms, boolean, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, double, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter r1;
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms r2;
        boolean z0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r3;
        double d0, d1, d2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter;

        r2 := @parameter1: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms;

        z0 := @parameter2: boolean;

        r3 := @parameter3: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter4: double;

        d1 := @parameter5: double;

        d2 := @parameter6: double;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms val$transforms> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: boolean val$recoverATMVol> = z0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$atmOption> = r3;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$forward> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$atmVol> = d1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$maturity> = d2;

        specialinvoke r0.<com.opengamma.analytics.math.function.ParameterizedFunction: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(java.lang.Double, com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1 r0;
        java.lang.Double r1, $r7, $r9, $r11, $r13, $r20;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8, d9;
        com.opengamma.analytics.math.minimization.UncoupledParameterTransforms $r5;
        int[] $r6, $r8, $r10, $r12;
        boolean $z0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r14, $r23, $r25, r26;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r15, $r24;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter $r16, $r21;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider $r17;
        com.opengamma.analytics.math.function.Function1D $r18;
        java.lang.Object $r19;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator $r22;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.math.minimization.UncoupledParameterTransforms val$transforms>;

        r3 = virtualinvoke $r5.<com.opengamma.analytics.math.minimization.UncoupledParameterTransforms: com.opengamma.analytics.math.matrix.DoubleMatrix1D inverseTransform(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r2);

        $r6 = newarray (int)[1];

        $r6[0] = 0;

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r6);

        d8 = virtualinvoke $r7.<java.lang.Double: double doubleValue()>();

        $r8 = newarray (int)[1];

        $r8[0] = 1;

        $r9 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r8);

        d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $r10 = newarray (int)[1];

        $r10[0] = 2;

        $r11 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r10);

        d1 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r12 = newarray (int)[1];

        $r12[0] = 3;

        $r13 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r12);

        d2 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $z0 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: boolean val$recoverATMVol>;

        if $z0 == 0 goto label1;

        $r21 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter this$0>;

        $r22 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator access$000(com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter)>($r21);

        $r23 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        specialinvoke $r23.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double,double,double,double)>(d8, d0, d1, d2);

        $r24 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$atmOption>;

        $d7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$forward>;

        $d6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$atmVol>;

        d9 = virtualinvoke $r22.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRATMVolatilityCalculator: double calculate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,double)>($r23, $r24, $d7, $d6);

        $r25 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        specialinvoke $r25.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double,double,double,double)>(d9, d0, d1, d2);

        r26 = $r25;

        goto label2;

     label1:
        $r14 = new com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        specialinvoke $r14.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: void <init>(double,double,double,double)>(d8, d0, d1, d2);

        r26 = $r14;

     label2:
        $r15 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$maturity>;

        specialinvoke $r15.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, $d4, 1);

        $r16 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter this$0>;

        $r17 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider access$100(com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter)>($r16);

        $d5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: double val$forward>;

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r15, $d5);

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r26);

        $r20 = (java.lang.Double) $r19;

        return $r20;
    }

    public int getNumberOfParameters()
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1 r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1;

        return 4;
    }

    public volatile java.lang.Object evaluate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1 r0;
        java.lang.Object r1, r2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r3;
        java.lang.Double $r4, $r5;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.Double) r1;

        $r3 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.SABRNonLinearLeastSquareFitter$1: java.lang.Double evaluate(java.lang.Double,com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r4, $r3);

        return $r5;
    }
}
