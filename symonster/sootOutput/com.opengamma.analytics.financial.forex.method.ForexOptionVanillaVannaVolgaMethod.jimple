public final class com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod extends java.lang.Object implements com.opengamma.analytics.financial.forex.method.ForexPricingMethod
{
    private static final com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod INSTANCE;
    private static final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION;

    public static com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod getInstance()
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod $r0;

        $r0 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod INSTANCE>;

        return $r0;
    }

    private void <init>()
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24, $d25, d26;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r3;
        double[] r4, r5, r6, r7, r51;
        com.opengamma.util.money.Currency $r12, $r13, $r25, $r26, $r27, $r28, $r37;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r14, $r18, $r19, $r23, $r34, $r36;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r15, $r20, $r35;
        java.lang.String $r16, $r21;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r17, $r22;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r24;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r29, $r40;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r30, $r42, $r46;
        com.opengamma.analytics.math.function.Function1D $r31, $r43, $r47;
        java.lang.Object $r32, $r44, $r48;
        java.lang.Double $r33, $r45, $r49;
        com.opengamma.util.money.CurrencyAmount[] $r38;
        com.opengamma.util.money.MultipleCurrencyAmount $r39;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r41;
        int i0, i1;
        com.opengamma.util.money.CurrencyAmount r52;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r12, $r13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r17 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r16);

        $r18 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r18.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d0 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d5);

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r21);

        $r23 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r23.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d1 = virtualinvoke $r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d6);

        $r24 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix getFxRates()>();

        $r25 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r26 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = virtualinvoke $r24.<com.opengamma.analytics.financial.forex.method.FXMatrix: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r25, $r26);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r27 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r28 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r27, $r28, $d8);

        r4 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r5 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r5[1];

        r6 = newarray (double)[3];

        r7 = newarray (double)[3];

        $r29 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r29.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r40 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d18 = r5[i0];

        specialinvoke $r40.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d18);

        $r41 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d19 = r4[i0];

        $d20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r41.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d19, $d20, 1);

        $r42 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r43 = virtualinvoke $r42.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r41);

        $r44 = virtualinvoke $r43.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r29);

        $r45 = (java.lang.Double) $r44;

        $d21 = virtualinvoke $r45.<java.lang.Double: double doubleValue()>();

        r6[i0] = $d21;

        $r46 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r47 = virtualinvoke $r46.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r41);

        $r48 = virtualinvoke $r47.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r40);

        $r49 = (java.lang.Double) $r48;

        $d22 = virtualinvoke $r49.<java.lang.Double: double doubleValue()>();

        r7[i0] = $d22;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r30 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>(r1);

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r29);

        $r33 = (java.lang.Double) $r32;

        d23 = virtualinvoke $r33.<java.lang.Double: double doubleValue()>();

        r51 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d3, d0, r4, r5);

        d24 = d23;

        i1 = 0;

     label3:
        if i1 >= 3 goto label4;

        $d16 = r51[i1];

        $d14 = r7[i1];

        $d13 = r6[i1];

        $d15 = $d14 - $d13;

        $d17 = $d16 * $d15;

        d24 = d24 + $d17;

        i1 = i1 + 2;

        goto label3;

     label4:
        $d12 = d24;

        $r34 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d9 = virtualinvoke $r35.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label5;

        $d25 = 1.0;

        goto label6;

     label5:
        $d25 = -1.0;

     label6:
        $d11 = $d10 * $d25;

        d26 = $d12 * $d11;

        $r36 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r37 = virtualinvoke $r36.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        r52 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r37, d26);

        $r38 = newarray (com.opengamma.util.money.CurrencyAmount)[1];

        $r38[0] = r52;

        $r39 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.CurrencyAmount[])>($r38);

        return $r39;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle $r3;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla $r4;
        com.opengamma.util.money.MultipleCurrencyAmount $r5;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        $z0 = r1 instanceof com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Vanilla Forex option");

        $z1 = r2 instanceof com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Smile delta data bundle required");

        $r4 = (com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla) r1;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.util.money.MultipleCurrencyAmount presentValue(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)>($r4, $r3);

        return $r5;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount currencyExposure(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38, $d39, d40, d41, d42, $d43;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r3;
        double[] r4, r5, $r44, $r45, $r46, $r47, $r51, $r53, r56, r57;
        double[][] r6, r7;
        com.opengamma.util.money.CurrencyAmount[] r9;
        com.opengamma.util.money.Currency $r12, $r13, $r25, $r26, $r27, $r28, $r34, $r39;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.financial.forex.derivative.Forex $r14, $r18, $r19, $r23, $r31, $r33, $r35, $r38, $r40;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r15, $r20, $r32, $r36, $r41;
        java.lang.String $r16, $r21;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r17, $r22;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r24;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r29, $r48;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r30, $r50, $r52;
        com.opengamma.util.money.CurrencyAmount $r37, $r42;
        com.opengamma.util.money.MultipleCurrencyAmount $r43;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r49;
        int i0, i1, i2;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r12 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r12, $r13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r17 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r16);

        $r18 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r18.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d0 = virtualinvoke $r17.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d5);

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $r21 = virtualinvoke $r20.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r22 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r21);

        $r23 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r23.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d1 = virtualinvoke $r22.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d6);

        $r24 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix getFxRates()>();

        $r25 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r26 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = virtualinvoke $r24.<com.opengamma.analytics.financial.forex.method.FXMatrix: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r25, $r26);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r27 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r28 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r27, $r28, $d8);

        r4 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r5 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r5[1];

        r6 = newarray (double[])[3];

        r7 = newarray (double[])[3];

        $r29 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r29.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label01:
        if i0 >= 3 goto label02;

        $r48 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d35 = r5[i0];

        specialinvoke $r48.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d35);

        $r49 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d36 = r4[i0];

        $d37 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r49.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d36, $d37, 1);

        $r50 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r51 = virtualinvoke $r50.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r49, $r29);

        r6[i0] = $r51;

        $r52 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r53 = virtualinvoke $r52.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r49, $r48);

        r7[i0] = $r53;

        i0 = i0 + 2;

        goto label01;

     label02:
        $r30 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        r56 = virtualinvoke $r30.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>(r1, $r29);

        r57 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d3, d0, r4, r5);

        d38 = r56[0];

        i1 = 0;

     label03:
        if i1 >= 3 goto label04;

        $d33 = r57[i1];

        $r46 = r7[i1];

        $d31 = $r46[0];

        $r47 = r6[i1];

        $d30 = $r47[0];

        $d32 = $d31 - $d30;

        $d34 = $d33 * $d32;

        d38 = d38 + $d34;

        i1 = i1 + 2;

        goto label03;

     label04:
        $d29 = d38;

        $r31 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r32 = virtualinvoke $r31.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d9 = virtualinvoke $r32.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d10 = staticinvoke <java.lang.Math: double abs(double)>($d9);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label05;

        $d39 = 1.0;

        goto label06;

     label05:
        $d39 = -1.0;

     label06:
        $d11 = $d10 * $d39;

        d40 = $d29 * $d11;

        d41 = r56[1];

        i2 = 0;

     label07:
        if i2 >= 3 goto label08;

        $d27 = r57[i2];

        $r44 = r7[i2];

        $d25 = $r44[1];

        $r45 = r6[i2];

        $d24 = $r45[1];

        $d26 = $d25 - $d24;

        $d28 = $d27 * $d26;

        d41 = d41 + $d28;

        i2 = i2 + 2;

        goto label07;

     label08:
        $d12 = d1 / d0;

        d42 = d41 * $d12;

        $z2 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z2 == 0 goto label09;

        $d43 = 1.0;

        goto label10;

     label09:
        $d43 = -1.0;

     label10:
        r9 = newarray (com.opengamma.util.money.CurrencyAmount)[2];

        $r33 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r34 = virtualinvoke $r33.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r35 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r36 = virtualinvoke $r35.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d13 = virtualinvoke $r36.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d14 = staticinvoke <java.lang.Math: double abs(double)>($d13);

        $d15 = d42 * $d14;

        $d16 = $d15 * $d43;

        $r37 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r34, $d16);

        r9[0] = $r37;

        $r38 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r39 = virtualinvoke $r38.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $d17 = neg d42;

        $r40 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r41 = virtualinvoke $r40.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d18 = virtualinvoke $r41.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d19 = staticinvoke <java.lang.Math: double abs(double)>($d18);

        $d20 = $d17 * $d19;

        $d21 = $d20 * d2;

        $d22 = $d21 * $d43;

        $d23 = $d22 + d40;

        $r42 = staticinvoke <com.opengamma.util.money.CurrencyAmount: com.opengamma.util.money.CurrencyAmount of(com.opengamma.util.money.Currency,double)>($r39, $d23);

        r9[1] = $r42;

        $r43 = staticinvoke <com.opengamma.util.money.MultipleCurrencyAmount: com.opengamma.util.money.MultipleCurrencyAmount of(com.opengamma.util.money.CurrencyAmount[])>(r9);

        return $r43;
    }

    public com.opengamma.util.money.MultipleCurrencyAmount currencyExposure(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle $r3;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla $r4;
        com.opengamma.util.money.MultipleCurrencyAmount $r5;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        $z0 = r1 instanceof com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Vanilla Forex option");

        $z1 = r2 instanceof com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Smile delta data bundle required");

        $r4 = (com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla) r1;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.util.money.MultipleCurrencyAmount currencyExposure(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)>($r4, $r3);

        return $r5;
    }

    public com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity presentValueBlackVolatilitySensitivity(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r3;
        double[] r4, r5, r6, r7, r8, r59, r60, r61;
        com.opengamma.util.tuple.DoublesPair r11;
        com.opengamma.util.money.Currency $r14, $r15, $r27, $r28, $r29, $r30, $r35, $r37;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r16, $r20, $r21, $r25, $r34, $r36, $r38;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r17, $r22, $r39;
        java.lang.String $r18, $r23;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r19, $r24;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r26;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r31, $r43;
        com.opengamma.analytics.util.amount.SurfaceValue $r32;
        com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity $r33;
        java.lang.Double $r40, $r48, $r52, $r56;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r44;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r45, $r49, $r53;
        com.opengamma.analytics.math.function.Function1D $r46, $r50, $r54;
        java.lang.Object $r47, $r51, $r55;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r14 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r15 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r14, $r15);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        $r16 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r19 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r18);

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d5 = virtualinvoke $r20.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d0 = virtualinvoke $r19.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d5);

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r24 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>($r23);

        $r25 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $d6 = virtualinvoke $r25.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        d1 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d6);

        $r26 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix getFxRates()>();

        $r27 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r28 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d2 = virtualinvoke $r26.<com.opengamma.analytics.financial.forex.method.FXMatrix: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r27, $r28);

        $d7 = d2 * d1;

        d3 = $d7 / d0;

        $r29 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r30 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d8 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r29, $r30, $d8);

        r4 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d3);

        r5 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d4 = r5[1];

        r6 = newarray (double)[3];

        r7 = newarray (double)[3];

        r8 = newarray (double)[3];

        $r31 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r31.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, d4);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r43 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d31 = r5[i0];

        specialinvoke $r43.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d3, d0, $d31);

        $r44 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d32 = r4[i0];

        $d33 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r44.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d32, $d33, 1);

        $r45 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r46 = virtualinvoke $r45.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r44);

        $r47 = virtualinvoke $r46.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r31);

        $r48 = (java.lang.Double) $r47;

        $d34 = virtualinvoke $r48.<java.lang.Double: double doubleValue()>();

        r6[i0] = $d34;

        $r49 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r50 = virtualinvoke $r49.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getPriceFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r44);

        $r51 = virtualinvoke $r50.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r43);

        $r52 = (java.lang.Double) $r51;

        $d35 = virtualinvoke $r52.<java.lang.Double: double doubleValue()>();

        r7[i0] = $d35;

        $r53 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r54 = virtualinvoke $r53.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r44);

        $r55 = virtualinvoke $r54.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r43);

        $r56 = (java.lang.Double) $r55;

        $d36 = virtualinvoke $r56.<java.lang.Double: double doubleValue()>();

        r8[i0] = $d36;

        i0 = i0 + 2;

        goto label1;

     label2:
        r59 = newarray (double)[3];

        r60 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[],double[])>(r1, d3, d0, r4, r5, r59);

        r61 = newarray (double)[3];

        $d10 = r60[0];

        $d9 = r8[0];

        $d11 = $d10 * $d9;

        r61[0] = $d11;

        $d13 = r60[2];

        $d12 = r8[2];

        $d14 = $d13 * $d12;

        r61[2] = $d14;

        $d18 = r59[1];

        $d16 = r60[0];

        $d15 = r59[0];

        $d17 = $d16 * $d15;

        $d22 = $d18 - $d17;

        $d20 = r60[2];

        $d19 = r59[2];

        $d21 = $d20 * $d19;

        $d23 = $d22 - $d21;

        r61[1] = $d23;

        $r32 = new com.opengamma.analytics.util.amount.SurfaceValue;

        specialinvoke $r32.<com.opengamma.analytics.util.amount.SurfaceValue: void <init>()>();

        i1 = 0;

     label3:
        if i1 >= 3 goto label6;

        $d24 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        $d25 = r4[i1];

        r11 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>($d24, $d25);

        $d26 = r61[i1];

        $r38 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r39 = virtualinvoke $r38.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d27 = virtualinvoke $r39.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d28 = staticinvoke <java.lang.Math: double abs(double)>($d27);

        $d29 = $d26 * $d28;

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label4;

        $d37 = 1.0;

        goto label5;

     label4:
        $d37 = -1.0;

     label5:
        $d30 = $d29 * $d37;

        $r40 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d30);

        virtualinvoke $r32.<com.opengamma.analytics.util.amount.SurfaceValue: void add(com.opengamma.util.tuple.DoublesPair,java.lang.Double)>(r11, $r40);

        i1 = i1 + 1;

        goto label3;

     label6:
        $r33 = new com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity;

        $r34 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r35 = virtualinvoke $r34.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency1()>();

        $r36 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r37 = virtualinvoke $r36.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        specialinvoke $r33.<com.opengamma.analytics.financial.forex.method.PresentValueForexBlackVolatilitySensitivity: void <init>(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,com.opengamma.analytics.util.amount.SurfaceValue)>($r35, $r37, $r32);

        return $r33;
    }

    public com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle r2;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters r3;
        double d0, d1, d2, d3, d4, d5, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, d51, d52, d53, d54, d55, d56, d57, d58;
        java.lang.String r4, r5;
        double[] r6, r7, r11, r12, $r50, $r51, $r52, $r53, $r57, $r59, r62, r63;
        double[][] r8, r9;
        com.opengamma.util.money.Currency $r19, $r20, $r21, $r22, $r31, $r32, $r48;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.forex.derivative.Forex $r23, $r24, $r26, $r35, $r47;
        com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed $r25, $r27, $r36;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r28, $r29;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r30;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r33, $r54;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r34, $r56, $r58;
        java.util.ArrayList $r37, $r42;
        com.opengamma.util.tuple.DoublesPair $r38, $r43;
        java.util.HashMap $r39, $r44;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity $r41, $r46, r65;
        com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity $r49;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r55;
        int i0, i1, i2;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        r2 := @parameter1: com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Forex option");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "Smile");

        $r19 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r20 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $z0 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: boolean checkCurrencies(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r19, $r20);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Option currencies not compatible with smile data");

        $r21 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r22 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        $d9 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        r3 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters getSmile(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency,double)>($r21, $r22, $d9);

        $r23 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        d0 = virtualinvoke $r23.<com.opengamma.analytics.financial.forex.derivative.Forex: double getPaymentTime()>();

        $r24 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r25 = virtualinvoke $r24.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency2()>();

        r4 = virtualinvoke $r25.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r26 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        r5 = virtualinvoke $r27.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: java.lang.String getFundingCurveName()>();

        $r28 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r4);

        d1 = virtualinvoke $r28.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r29 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r5);

        d2 = virtualinvoke $r29.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r30 = virtualinvoke r2.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle: com.opengamma.analytics.financial.forex.method.FXMatrix getFxRates()>();

        $r31 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency1()>();

        $r32 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.util.money.Currency getCurrency2()>();

        d3 = virtualinvoke $r30.<com.opengamma.analytics.financial.forex.method.FXMatrix: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>($r31, $r32);

        $d10 = d3 * d2;

        d4 = $d10 / d1;

        r6 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getStrike(double)>(d4);

        r7 = virtualinvoke r3.<com.opengamma.analytics.financial.model.option.definition.SmileDeltaParameters: double[] getVolatility()>();

        d5 = r7[1];

        r8 = newarray (double[])[3];

        r9 = newarray (double[])[3];

        $r33 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r33.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d4, d1, d5);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r54 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d47 = r7[i0];

        specialinvoke $r54.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d4, d1, $d47);

        $r55 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d48 = r6[i0];

        $d49 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r55.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d48, $d49, 1);

        $r56 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r57 = virtualinvoke $r56.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r55, $r33);

        r8[i0] = $r57;

        $r58 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r59 = virtualinvoke $r58.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>($r55, $r54);

        r9[i0] = $r59;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r34 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        r62 = virtualinvoke $r34.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: double[] getPriceAdjoint(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData)>(r1, $r33);

        r63 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[])>(r1, d4, d1, r6, r7);

        $r35 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r36 = virtualinvoke $r35.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed getPaymentCurrency1()>();

        $d11 = virtualinvoke $r36.<com.opengamma.analytics.financial.interestrate.payments.derivative.PaymentFixed: double getAmount()>();

        $d12 = staticinvoke <java.lang.Math: double abs(double)>($d11);

        $z1 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: boolean isLong()>();

        if $z1 == 0 goto label3;

        $d50 = 1.0;

        goto label4;

     label3:
        $d50 = -1.0;

     label4:
        d51 = $d12 * $d50;

        r11 = newarray (double)[3];

        r12 = newarray (double)[3];

        i1 = 0;

     label5:
        if i1 >= 3 goto label6;

        $d40 = r63[i1];

        $d41 = neg $d40;

        $d42 = $d41 * d51;

        $d43 = $d42 * 1.0;

        r11[i1] = $d43;

        $d44 = r63[i1];

        $d45 = $d44 * d51;

        $d46 = $d45 * 1.0;

        r12[i1] = $d46;

        i1 = i1 + 2;

        goto label5;

     label6:
        d52 = d51 * 1.0;

        $d13 = r62[1];

        d53 = $d13 * d52;

        $d14 = r62[0];

        $d15 = $d14 / d1;

        d54 = $d15 * d52;

        i2 = 0;

     label7:
        if i2 >= 3 goto label8;

        $r50 = r8[i2];

        $d27 = $r50[1];

        $d26 = r11[i2];

        $d28 = $d27 * $d26;

        d55 = d53 + $d28;

        $r51 = r9[i2];

        $d30 = $r51[1];

        $d29 = r12[i2];

        $d31 = $d30 * $d29;

        d53 = d55 + $d31;

        $r52 = r8[i2];

        $d32 = $r52[0];

        $d34 = $d32 / d1;

        $d33 = r11[i2];

        $d35 = $d34 * $d33;

        d56 = d54 + $d35;

        $r53 = r9[i2];

        $d36 = $r53[0];

        $d38 = $d36 / d1;

        $d37 = r12[i2];

        $d39 = $d38 * $d37;

        d54 = d56 + $d39;

        i2 = i2 + 2;

        goto label7;

     label8:
        $d16 = neg d3;

        $d18 = $d16 * d2;

        $d17 = d1 * d1;

        $d19 = $d18 / $d17;

        $d20 = $d19 * d53;

        d57 = d54 + $d20;

        $d21 = d3 / d1;

        d58 = $d21 * d53;

        $d22 = neg d0;

        $d23 = $d22 * d2;

        d7 = $d23 * d58;

        $d24 = neg d0;

        $d25 = $d24 * d1;

        d8 = $d25 * d57;

        $r37 = new java.util.ArrayList;

        specialinvoke $r37.<java.util.ArrayList: void <init>()>();

        $r38 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d0, d7);

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>($r38);

        $r39 = new java.util.HashMap;

        specialinvoke $r39.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r37);

        $r41 = new com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        specialinvoke $r41.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: void <init>(java.util.Map)>($r39);

        $r42 = new java.util.ArrayList;

        specialinvoke $r42.<java.util.ArrayList: void <init>()>();

        $r43 = staticinvoke <com.opengamma.util.tuple.DoublesPair: com.opengamma.util.tuple.DoublesPair of(double,double)>(d0, d8);

        interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r43);

        $r44 = new java.util.HashMap;

        specialinvoke $r44.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r42);

        $r46 = new com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        specialinvoke $r46.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: void <init>(java.util.Map)>($r44);

        r65 = virtualinvoke $r41.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity plus(com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity)>($r46);

        $r47 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: com.opengamma.analytics.financial.forex.derivative.Forex getUnderlyingForex()>();

        $r48 = virtualinvoke $r47.<com.opengamma.analytics.financial.forex.derivative.Forex: com.opengamma.util.money.Currency getCurrency2()>();

        $r49 = staticinvoke <com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity: com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity of(com.opengamma.util.money.Currency,com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity)>($r48, r65);

        return $r49;
    }

    public com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        boolean $z0, $z1;
        com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle $r3;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla $r4;
        com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity $r5;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        $z0 = r1 instanceof com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Vanilla Forex option");

        $z1 = r2 instanceof com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Smile delta data bundle required");

        $r4 = (com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla) r1;

        $r3 = (com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.forex.method.MultipleCurrencyInterestRateCurveSensitivity presentValueCurveSensitivity(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,com.opengamma.analytics.financial.model.option.definition.SmileDeltaTermStructureVannaVolgaDataBundle)>($r4, $r3);

        return $r5;
    }

    public double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, double, double, double[], double[])
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        double d0, d1;
        double[] r2, r3, $r4, $r5;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        $r4 = newarray (double)[3];

        $r5 = virtualinvoke r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla,double,double,double[],double[],double[])>(r1, d0, d1, r2, r3, $r4);

        return $r5;
    }

    public double[] vannaVolgaWeights(com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla, double, double, double[], double[], double[])
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod r0;
        com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla r1;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, d38;
        double[] r2, r3, r4, r7, r18;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r8;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r9, $r14;
        com.opengamma.analytics.math.function.Function1D $r10, $r15;
        java.lang.Object $r11, $r16;
        java.lang.Double $r12, $r17;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r13;
        int i0, i1;

        r0 := @this: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: double[];

        r3 := @parameter4: double[];

        r4 := @parameter5: double[];

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getStrike()>();

        d3 = r3[1];

        $r8 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        specialinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>(d0, d1, d3);

        i0 = 0;

     label1:
        if i0 >= 3 goto label2;

        $r13 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d35 = r2[i0];

        $d36 = virtualinvoke r1.<com.opengamma.analytics.financial.forex.derivative.ForexOptionVanilla: double getTimeToExpiry()>();

        specialinvoke $r13.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d35, $d36, 1);

        $r14 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>($r13);

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        $r17 = (java.lang.Double) $r16;

        $d37 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        r4[i0] = $d37;

        i0 = i0 + 2;

        goto label1;

     label2:
        $r9 = <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION>;

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: com.opengamma.analytics.math.function.Function1D getVegaFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)>(r1);

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        $r12 = (java.lang.Double) $r11;

        d38 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        r4[1] = d38;

        $d8 = r2[1];

        $d7 = r2[0];

        $d9 = $d8 / $d7;

        d4 = staticinvoke <java.lang.Math: double log(double)>($d9);

        $d11 = r2[2];

        $d10 = r2[0];

        $d12 = $d11 / $d10;

        d5 = staticinvoke <java.lang.Math: double log(double)>($d12);

        $d14 = r2[2];

        $d13 = r2[1];

        $d15 = $d14 / $d13;

        d6 = staticinvoke <java.lang.Math: double log(double)>($d15);

        r7 = newarray (double)[3];

        i1 = 0;

     label3:
        if i1 >= 3 goto label4;

        $d32 = r2[i1];

        $d33 = $d32 / d2;

        $d34 = staticinvoke <java.lang.Math: double log(double)>($d33);

        r7[i1] = $d34;

        i1 = i1 + 1;

        goto label3;

     label4:
        r18 = newarray (double)[3];

        $d16 = r7[1];

        $d18 = d38 * $d16;

        $d17 = r7[2];

        $d22 = $d18 * $d17;

        $d19 = r4[0];

        $d20 = $d19 * d4;

        $d21 = $d20 * d5;

        $d23 = $d22 / $d21;

        r18[0] = $d23;

        $d24 = r7[0];

        $d26 = d38 * $d24;

        $d25 = r7[1];

        $d30 = $d26 * $d25;

        $d27 = r4[2];

        $d28 = $d27 * d5;

        $d29 = $d28 * d6;

        $d31 = $d30 / $d29;

        r18[2] = $d31;

        return r18;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod $r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction $r1;

        $r0 = new com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod;

        specialinvoke $r0.<com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: void <init>()>();

        <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod INSTANCE> = $r0;

        $r1 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction: void <init>()>();

        <com.opengamma.analytics.financial.forex.method.ForexOptionVanillaVannaVolgaMethod: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackPriceFunction BLACK_FUNCTION> = $r1;

        return;
    }
}
