public abstract class com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator extends java.lang.Object
{

    void <init>()
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.opengamma.analytics.math.matrix.DoubleMatrix1D calculateSensitivities(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.YieldCurveBundle, com.opengamma.analytics.financial.interestrate.YieldCurveBundle);

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D calculateSensitivities(com.opengamma.analytics.financial.interestrate.InstrumentDerivative, com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor, com.opengamma.analytics.financial.interestrate.YieldCurveBundle, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative r1;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor r2;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r3, r4, r5;
        java.lang.String r6;
        java.lang.Object $r7, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8;
        java.util.Set $r9;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r11;
        java.util.Iterator r12;
        java.util.Map r13;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor;

        r3 := @parameter2: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        r4 := @parameter3: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null InterestRateDerivative");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "null calculator");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r4, "interpolated curves");

        r5 = virtualinvoke r4.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: com.opengamma.analytics.financial.interestrate.YieldCurveBundle copy()>();

        if r3 == null goto label5;

        $r9 = virtualinvoke r4.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        r12 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r10;

        $r11 = virtualinvoke r3.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.lang.Boolean containsName(java.lang.String)>(r6);

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z2, "fixed curves contain a name that is also in interpolated curves");

        goto label1;

     label4:
        virtualinvoke r5.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: void addAll(com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r3);

     label5:
        $r7 = interfaceinvoke r1.<com.opengamma.analytics.financial.interestrate.InstrumentDerivative: java.lang.Object accept(com.opengamma.analytics.financial.interestrate.InstrumentDerivativeVisitor,java.lang.Object)>(r2, r5);

        r13 = (java.util.Map) $r7;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: com.opengamma.analytics.math.matrix.DoubleMatrix1D curveToNodeSensitivities(java.util.Map,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>(r13, r4);

        return $r8;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D curveToNodeSensitivities(java.util.Map, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        java.util.Map r1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        java.util.Iterator r4;
        java.lang.String r5;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r6;
        java.util.ArrayList $r7;
        java.util.Set $r8;
        boolean $z0, $z1, $z2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9;
        int $i0;
        java.lang.Double[] $r10, $r12;
        java.lang.Object[] $r11;
        java.lang.Object $r13, $r15, $r19;
        java.lang.IllegalArgumentException $r14;
        com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve $r16;
        java.util.List $r17, $r18, $r21, $r22;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve $r20;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: java.util.Set getAllNames()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r13;

        r6 = virtualinvoke r2.<com.opengamma.analytics.financial.interestrate.YieldCurveBundle: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(java.lang.String)>(r5);

        $z1 = r6 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        if $z1 == 0 goto label2;

        $r19 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r21 = (java.util.List) $r19;

        $r20 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve) r6;

        $r22 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: java.util.List curveToNodeSensitivity(java.util.List,com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve)>($r21, $r20);

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r22);

        goto label4;

     label2:
        $z2 = r6 instanceof com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve;

        if $z2 == 0 goto label3;

        $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r17 = (java.util.List) $r15;

        $r16 = (com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve) r6;

        $r18 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: java.util.List curveToNodeSensitivity(java.util.List,com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve)>($r17, $r16);

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r18);

        goto label4;

     label3:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only handle YieldCurve and DiscountCurve at the moment");

        throw $r14;

     label4:
        goto label1;

     label5:
        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r10 = newarray (java.lang.Double)[$i0];

        $r11 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.Double[]) $r11;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(java.lang.Double[])>($r12);

        return $r9;
    }

    public java.util.List curveToNodeSensitivity(java.util.List, com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        java.util.List r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve r2;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r4;
        com.opengamma.analytics.math.interpolation.Interpolator1D r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r6;
        java.util.Iterator r7, r23;
        com.opengamma.util.tuple.DoublesPair r8, r24;
        java.util.ArrayList $r9;
        com.opengamma.analytics.math.curve.DoublesCurve $r10, $r11;
        boolean $z0, $z2, $z3;
        java.lang.Double $r12, $r14, $r16, $r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, $i9;
        double[] $r13, $r17, $r20;
        java.lang.Object $r15, $r18;
        double $d0, $d1, $d2, d3;
        java.lang.IllegalArgumentException $r21;
        double[][] r22;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = virtualinvoke r2.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        $z0 = $r10 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        if $z0 != 0 goto label01;

        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only handle interpolated curves at the moment");

        throw $r21;

     label01:
        $r11 = virtualinvoke r2.<com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve: com.opengamma.analytics.math.curve.DoublesCurve getCurve()>();

        r4 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r11;

        r5 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        r6 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle()>();

        if r1 == null goto label08;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label08;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        r22 = newarray (double[])[$i1];

        i5 = 0;

        r23 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $r18 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.opengamma.util.tuple.DoublesPair) $r18;

        $i4 = i5;

        i5 = i5 + 1;

        $r19 = virtualinvoke r24.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        $r20 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r6, $r19);

        r22[$i4] = $r20;

        goto label02;

     label03:
        i6 = 0;

     label04:
        $r13 = r22[0];

        $i2 = lengthof $r13;

        if i6 >= $i2 goto label07;

        d3 = 0.0;

        i7 = 0;

        r7 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r15 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.opengamma.util.tuple.DoublesPair) $r15;

        $r16 = virtualinvoke r8.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $d0 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $i3 = i7;

        i7 = i7 + 1;

        $r17 = r22[$i3];

        $d1 = $r17[i6];

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        goto label05;

     label06:
        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r14);

        i6 = i6 + 1;

        goto label04;

     label07:
        goto label10;

     label08:
        i8 = 0;

     label09:
        $i9 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: int size()>();

        if i8 >= $i9 goto label10;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        i8 = i8 + 1;

        goto label09;

     label10:
        return $r9;
    }

    public java.util.List curveToNodeSensitivity(java.util.List, com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        java.util.List r1;
        com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve r2;
        com.opengamma.analytics.math.curve.InterpolatedDoublesCurve r4;
        com.opengamma.analytics.math.interpolation.Interpolator1D r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r6;
        double[] r7, $r14, $r18, $r19, $r20, $r25;
        java.util.Iterator r8, r28;
        com.opengamma.util.tuple.DoublesPair r9, r29;
        java.util.ArrayList $r10;
        com.opengamma.analytics.math.curve.Curve $r11, $r12;
        boolean $z0, $z2, $z3;
        java.lang.Double $r13, $r15, $r17, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, $i10;
        java.lang.Object $r16, $r21;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        java.lang.IllegalArgumentException $r26;
        double[][] r27;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = virtualinvoke r2.<com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve: com.opengamma.analytics.math.curve.Curve getCurve()>();

        $z0 = $r11 instanceof com.opengamma.analytics.math.curve.InterpolatedDoublesCurve;

        if $z0 != 0 goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only handle interpolated curves at the moment");

        throw $r26;

     label01:
        $r12 = virtualinvoke r2.<com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve: com.opengamma.analytics.math.curve.Curve getCurve()>();

        r4 = (com.opengamma.analytics.math.curve.InterpolatedDoublesCurve) $r12;

        r5 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()>();

        r6 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle()>();

        if r1 == null goto label08;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label08;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        r27 = newarray (double[])[$i1];

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        r7 = newarray (double)[$i2];

        i6 = 0;

        r28 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label03;

        $r21 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        r29 = (com.opengamma.util.tuple.DoublesPair) $r21;

        $d11 = r29.<com.opengamma.util.tuple.DoublesPair: double first>;

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        $r23 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r6, $r22);

        $d12 = virtualinvoke $r23.<java.lang.Double: double doubleValue()>();

        r7[i6] = $d12;

        $i5 = i6;

        i6 = i6 + 1;

        $r24 = virtualinvoke r29.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        $r25 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.Interpolator1D: double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>(r6, $r24);

        r27[$i5] = $r25;

        goto label02;

     label03:
        i7 = 0;

     label04:
        $r14 = r27[0];

        $i3 = lengthof $r14;

        if i7 >= $i3 goto label07;

        d13 = 0.0;

        i8 = 0;

        r8 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label06;

        $r16 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.opengamma.util.tuple.DoublesPair) $r16;

        $r17 = virtualinvoke r9.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $d0 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $d2 = r9.<com.opengamma.util.tuple.DoublesPair: double first>;

        $d1 = r7[i8];

        $d3 = $d2 * $d1;

        $d5 = $d0 / $d3;

        $i4 = i8;

        i8 = i8 + 1;

        $r18 = r27[$i4];

        $d4 = $r18[i7];

        $d6 = $d5 * $d4;

        $r19 = interfaceinvoke r6.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $d7 = $r19[i7];

        $r20 = interfaceinvoke r6.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $d8 = $r20[i7];

        $d9 = $d7 * $d8;

        $d10 = $d6 * $d9;

        d13 = d13 + $d10;

        goto label05;

     label06:
        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d13);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15);

        i7 = i7 + 1;

        goto label04;

     label07:
        goto label10;

     label08:
        i9 = 0;

     label09:
        $i10 = virtualinvoke r4.<com.opengamma.analytics.math.curve.InterpolatedDoublesCurve: int size()>();

        if i9 >= $i10 goto label10;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r13);

        i9 = i9 + 1;

        goto label09;

     label10:
        return $r10;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D curveToNodeSensitivities(com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity, com.opengamma.analytics.financial.interestrate.YieldCurveBundle)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity r1;
        com.opengamma.analytics.financial.interestrate.YieldCurveBundle r2;
        java.util.Map $r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r4;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity;

        r2 := @parameter1: com.opengamma.analytics.financial.interestrate.YieldCurveBundle;

        $r3 = virtualinvoke r1.<com.opengamma.analytics.financial.interestrate.InterestRateCurveSensitivity: java.util.Map getSensitivities()>();

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: com.opengamma.analytics.math.matrix.DoubleMatrix1D curveToNodeSensitivities(java.util.Map,com.opengamma.analytics.financial.interestrate.YieldCurveBundle)>($r3, r2);

        return $r4;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D curveToNodeSensitivities(java.util.List, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator r0;
        java.util.List r1, $r7, $r13;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.ArrayList $r4;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r8;
        int $i0;
        java.lang.Double[] $r9, $r11;
        java.lang.Object[] $r10;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve $r12;

        r0 := @this: com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $z0 = r2 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve;

        if $z0 == 0 goto label1;

        $r12 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve) r2;

        $r13 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: java.util.List curveToNodeSensitivity(java.util.List,com.opengamma.analytics.financial.model.interestrate.curve.YieldCurve)>(r1, $r12);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r13);

        goto label3;

     label1:
        $z1 = r2 instanceof com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve;

        if $z1 == 0 goto label2;

        $r6 = (com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve) r2;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.financial.interestrate.NodeYieldSensitivityCalculator: java.util.List curveToNodeSensitivity(java.util.List,com.opengamma.analytics.financial.model.interestrate.curve.DiscountCurve)>(r1, $r6);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can only handle YieldCurve and DiscountCurve at the moment");

        throw $r5;

     label3:
        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r9 = newarray (java.lang.Double)[$i0];

        $r10 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.Double[]) $r10;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(java.lang.Double[])>($r11);

        return $r8;
    }
}
