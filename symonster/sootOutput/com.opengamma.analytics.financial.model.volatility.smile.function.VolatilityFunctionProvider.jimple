public abstract class com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider extends java.lang.Object
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MA;
    private static final double EPS;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double);

    public com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double d0, d1, $d2, $d3;
        double[] r1;
        int i0, i2;
        java.util.ArrayList $r3;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$1 $r4;
        byte $b1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r5;
        com.opengamma.analytics.math.function.Function1D $r6;
        boolean $z2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        i0 = lengthof r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d2 = r1[i2];

        $b1 = $d2 cmpl d0;

        if $b1 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r5 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = r1[i2];

        specialinvoke $r5.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, d1, $z2);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r5, d0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$1;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$1: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,java.util.List)>(r0, i0, $r3);

        return $r4;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        com.opengamma.analytics.math.function.Function1D r2;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$2 $r3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r1, d0);

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$2;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$2: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r0, r2, r1, d0);

        return $r3;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0;
        com.opengamma.analytics.math.function.Function1D r2;
        byte $b0;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$3 $r3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "option");

        $b0 = d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "forward must be greater than zero");

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r1, d0);

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$3;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$3: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,com.opengamma.analytics.math.function.Function1D)>(r0, r2);

        return $r3;
    }

    public com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double d0, d1;
        double[] r1;
        int i0;
        com.opengamma.analytics.math.function.Function1D r2;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$4 $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        i0 = lengthof r1;

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d0, r1, d1);

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$4;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$4: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,com.opengamma.analytics.math.function.Function1D,double[],double,double)>(r0, i0, r2, r1, d1, d0);

        return $r3;
    }

    protected com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunctionByCallingSingleStrikes(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double d0, d1, $d2, $d3;
        double[] r1;
        int i0, i2;
        java.util.ArrayList $r3;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$5 $r4;
        byte $b1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r5;
        com.opengamma.analytics.math.function.Function1D $r6;
        boolean $z2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        i0 = lengthof r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d2 = r1[i2];

        $b1 = $d2 cmpl d0;

        if $b1 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r5 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = r1[i2];

        specialinvoke $r5.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, d1, $z2);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r5, d0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$5;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$5: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,java.util.List)>(r0, i0, $r3);

        return $r4;
    }

    public com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double d0, d1;
        double[] r1;
        com.opengamma.analytics.math.function.Function1D r2;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$6 $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d0, r1, d1);

        $r3 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$6;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$6: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,com.opengamma.analytics.math.function.Function1D)>(r0, r2);

        return $r3;
    }

    protected com.opengamma.analytics.math.function.Function1D getModelAdjointFunctionByCallingSingleStrikes(double, double[], double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double d0, d1, $d2, $d3;
        double[] r1;
        int i0, i2;
        java.util.ArrayList $r3;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$7 $r4;
        byte $b1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r5;
        com.opengamma.analytics.math.function.Function1D $r6;
        boolean $z2;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        d1 := @parameter2: double;

        i0 = lengthof r1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $d2 = r1[i2];

        $b1 = $d2 cmpl d0;

        if $b1 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        $r5 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d3 = r1[i2];

        specialinvoke $r5.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d3, d1, $z2);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r5, d0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label1;

     label4:
        $r4 = new com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$7;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider$7: void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider,int,java.util.List)>(r0, i0, $r3);

        return $r4;
    }

    private double forwardBar(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        com.opengamma.analytics.math.function.Function1D r3, r4;
        java.lang.Object $r5, $r7;
        java.lang.Double $r6, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $d1 = d0 + 1.0E-6;

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r1, $d1);

        $d2 = d0 - 1.0E-6;

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>(r1, $d2);

        $r5 = virtualinvoke r3.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r6 = (java.lang.Double) $r5;

        $d3 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r7 = virtualinvoke r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r8 = (java.lang.Double) $r7;

        $d4 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $d6 = $d5 / 2.0;

        $d7 = $d6 / 1.0E-6;

        return $d7;
    }

    private double[] forwardBar(double[], double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double[] r1, r5, r6, r7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        int i0, i1;
        com.opengamma.analytics.math.function.Function1D r3, r4;
        java.lang.Object $r8, $r9;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 = lengthof r1;

        $d2 = d1 + 1.0E-6;

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>($d2, r1, d0);

        $d3 = d1 - 1.0E-6;

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>($d3, r1, d0);

        r5 = newarray (double)[i0];

        $r8 = virtualinvoke r3.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r6 = (double[]) $r8;

        $r9 = virtualinvoke r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r7 = (double[]) $r9;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d5 = r6[i1];

        $d4 = r7[i1];

        $d6 = $d5 - $d4;

        $d7 = $d6 / 2.0;

        $d8 = $d7 / 1.0E-6;

        r5[i1] = $d8;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r5;
    }

    private double strikeBar(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1, $r5, $r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        com.opengamma.analytics.math.function.Function1D r3, r4;
        java.lang.Object $r7, $r9;
        java.lang.Double $r8, $r10;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter1: double;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        $d2 = $d1 + 1.0E-6;

        $r5 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption withStrike(double)>($d2);

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r5, d0);

        $d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: double getStrike()>();

        $d4 = $d3 - 1.0E-6;

        $r6 = virtualinvoke r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption withStrike(double)>($d4);

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r6, d0);

        $r7 = virtualinvoke r3.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r8 = (java.lang.Double) $r7;

        $d5 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = virtualinvoke r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r10 = (java.lang.Double) $r9;

        $d6 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 - $d6;

        $d8 = $d7 / 2.0;

        $d9 = $d8 / 1.0E-6;

        return $d9;
    }

    private double[] strikeBar(double[], double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double[] r1, r3, r4, r5, r7, r8;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        int i0, i1, i2, i3;
        com.opengamma.analytics.math.function.Function1D r6, r11;
        java.lang.Object $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r2 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        r5 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d9 = r1[i1];

        $d10 = $d9 + 1.0E-6;

        r4[i1] = $d10;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $d7 = r1[i2];

        $d8 = $d7 - 1.0E-6;

        r5[i2] = $d8;

        i2 = i2 + 1;

        goto label3;

     label4:
        r11 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d1, r4, d0);

        r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d1, r5, d0);

        $r9 = virtualinvoke r11.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r7 = (double[]) $r9;

        $r10 = virtualinvoke r6.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r8 = (double[]) $r10;

        i3 = 0;

     label5:
        if i3 >= i0 goto label6;

        $d3 = r7[i3];

        $d2 = r8[i3];

        $d4 = $d3 - $d2;

        $d5 = $d4 / 2.0;

        $d6 = $d5 / 1.0E-6;

        r3[i3] = $d6;

        i3 = i3 + 1;

        goto label5;

     label6:
        return r3;
    }

    private double[] paramBar(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        int i0, i1;
        double[] r3;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: int getNumberOfParameters()>();

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double paramBar(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData,int)>(r1, r2, i1);

        r3[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double paramBar(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2, r3, r19, r20, r21;
        int i0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Double $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        java.lang.Object $r7, $r9, $r11, $r13, $r15, $r17;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 := @parameter2: int;

        d0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: double getParameter(int)>(i0);

        d1 = d0 + 1.0E-6;

        d2 = d0 - 1.0E-6;

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d2);

        if $z0 == 0 goto label2;

        $z2 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d1);

        if $z2 == 0 goto label1;

        r19 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d1);

        r3 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d2);

        $r15 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r19);

        $r16 = (java.lang.Double) $r15;

        $d11 = virtualinvoke $r16.<java.lang.Double: double doubleValue()>();

        $r17 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r3);

        $r18 = (java.lang.Double) $r17;

        $d12 = virtualinvoke $r18.<java.lang.Double: double doubleValue()>();

        $d13 = $d11 - $d12;

        $d14 = $d13 / 2.0;

        $d15 = $d14 / 1.0E-6;

        return $d15;

     label1:
        r20 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d2);

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r12 = (java.lang.Double) $r11;

        $d7 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $r13 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r20);

        $r14 = (java.lang.Double) $r13;

        $d8 = virtualinvoke $r14.<java.lang.Double: double doubleValue()>();

        $d9 = $d7 - $d8;

        $d10 = $d9 / 1.0E-6;

        return $d10;

     label2:
        $z1 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d1);

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "No values and index {} = {} are allowed", $r4);

        r21 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d1);

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r21);

        $r8 = (java.lang.Double) $r7;

        $d3 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        $r10 = (java.lang.Double) $r9;

        $d4 = virtualinvoke $r10.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $d6 = $d5 / 1.0E-6;

        return $d6;
    }

    private double[][] paramBarSet(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        int i0, i1;
        double[][] r3;
        double[] $r4;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: int getNumberOfParameters()>();

        r3 = newarray (double[])[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double[] paramBarSet(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData,int)>(r1, r2, i1);

        r3[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    private double[] paramBarSet(com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2, $r8, $r11, r15, r16;
        int i0, i1, i2, i3, i4, i5, i6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        double[] r3, r17, r18, r19, r20, r21, r22, r23, r24;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        java.lang.Double $r6;
        java.lang.Object $r7, $r9, $r10, $r12, $r13, $r14;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        i0 := @parameter2: int;

        d0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: double getParameter(int)>(i0);

        d1 = d0 + 1.0E-6;

        d2 = d0 - 1.0E-6;

        $z0 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d2);

        if $z0 == 0 goto label6;

        $z2 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d1);

        if $z2 == 0 goto label3;

        r15 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d1);

        r16 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d2);

        $r13 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r15);

        r17 = (double[]) $r13;

        $r14 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r16);

        r18 = (double[]) $r14;

        i1 = lengthof r17;

        r3 = newarray (double)[i1];

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $d14 = r17[i2];

        $d13 = r18[i2];

        $d15 = $d14 - $d13;

        $d16 = $d15 / 2.0;

        $d17 = $d16 / 1.0E-6;

        r3[i2] = $d17;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;

     label3:
        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r19 = (double[]) $r10;

        $r11 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d2);

        $r12 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r11);

        r20 = (double[]) $r12;

        i3 = lengthof r19;

        r21 = newarray (double)[i3];

        i4 = 0;

     label4:
        if i4 >= i3 goto label5;

        $d9 = r19[i4];

        $d8 = r20[i4];

        $d10 = $d9 - $d8;

        $d11 = $d10 / 2.0;

        $d12 = $d11 / 1.0E-6;

        r21[i4] = $d12;

        i4 = i4 + 1;

        goto label4;

     label5:
        return r21;

     label6:
        $z1 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: boolean isAllowed(int,double)>(i0, d1);

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[1] = $r6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z1, "No values and index {} = {} are allowed", $r4);

        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>(r2);

        r22 = (double[]) $r7;

        $r8 = interfaceinvoke r2.<com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData 'with'(int,double)>(i0, d1);

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        r23 = (double[]) $r9;

        i5 = lengthof r22;

        r24 = newarray (double)[i5];

        i6 = 0;

     label7:
        if i6 >= i5 goto label8;

        $d4 = r23[i6];

        $d3 = r22[i6];

        $d5 = $d4 - $d3;

        $d6 = $d5 / 2.0;

        $d7 = $d6 / 1.0E-6;

        r24[i6] = $d7;

        i6 = i6 + 1;

        goto label7;

     label8:
        return r24;
    }

    static double access$000(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, $d1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter2: double;

        r2 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double forwardBar(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, d0, r2);

        return $d1;
    }

    static double access$100(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r1;
        double d0, $d1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        d0 := @parameter2: double;

        r2 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $d1 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double strikeBar(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, d0, r2);

        return $d1;
    }

    static double[] access$200(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        double[] $r3;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double[] paramBar(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, r2);

        return $r3;
    }

    static double[] access$300(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, double[], double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double[] r1, $r3;
        double d0, d1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r2 := @parameter4: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double[] forwardBar(double[],double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, d0, d1, r2);

        return $r3;
    }

    static double[] access$400(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, double[], double, double, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        double[] r1, $r3;
        double d0, d1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        r2 := @parameter4: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double[] strikeBar(double[],double,double,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, d0, d1, r2);

        return $r3;
    }

    static double[][] access$500(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData r2;
        double[][] $r3;

        r0 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r1 := @parameter1: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter2: com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double[][] paramBarSet(com.opengamma.analytics.math.function.Function1D,com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData)>(r1, r2);

        return $r3;
    }

    static com.opengamma.analytics.math.matrix.MatrixAlgebra access$600()
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r0;

        $r0 = <com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        return $r0;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;

        <com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: double EPS> = 1.0E-6;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.matrix.MatrixAlgebra MA> = $r0;

        return;
    }
}
