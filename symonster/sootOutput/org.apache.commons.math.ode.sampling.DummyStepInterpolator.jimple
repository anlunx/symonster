public class org.apache.commons.math.ode.sampling.DummyStepInterpolator extends org.apache.commons.math.ode.sampling.AbstractStepInterpolator
{
    private static final long serialVersionUID;
    private double[] currentDerivative;

    public void <init>()
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        specialinvoke r0.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void <init>()>();

        r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative> = null;

        return;
    }

    public void <init>(double[], double[], boolean)
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0;
        double[] r1, r2;
        boolean z0;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void <init>(double[],boolean)>(r1, z0);

        r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative> = r2;

        return;
    }

    public void <init>(org.apache.commons.math.ode.sampling.DummyStepInterpolator)
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0, r1;
        double[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        specialinvoke r0.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void <init>(org.apache.commons.math.ode.sampling.AbstractStepInterpolator)>(r1);

        $r2 = r1.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r3;

        r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative> = $r4;

        return;
    }

    protected org.apache.commons.math.ode.sampling.StepInterpolator doCopy()
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0, $r1;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        $r1 = new org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        specialinvoke $r1.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: void <init>(org.apache.commons.math.ode.sampling.DummyStepInterpolator)>(r0);

        return $r1;
    }

    protected void computeInterpolatedStateAndDerivatives(double, double)
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0;
        double d0, d1;
        double[] $r1, $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r3 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentState>;

        $r2 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] interpolatedState>;

        $r1 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentState>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        $r6 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $r5 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] interpolatedDerivatives>;

        $r4 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i1);

        return;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0;
        java.io.ObjectOutput r1;
        double[] $r2, $r3, $r4;
        int $i0, i1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        r1 := @parameter0: java.io.ObjectOutput;

        virtualinvoke r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: void writeBaseExternal(java.io.ObjectOutput)>(r1);

        $r2 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        if $r2 == null goto label2;

        i1 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        $r4 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $d0 = $r4[i1];

        interfaceinvoke r1.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException
    {
        org.apache.commons.math.ode.sampling.DummyStepInterpolator r0;
        java.io.ObjectInput r1;
        double d0, $d1;
        double[] $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        r1 := @parameter0: java.io.ObjectInput;

        d0 = virtualinvoke r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double readBaseExternal(java.io.ObjectInput)>(r1);

        $r2 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentState>;

        if $r2 != null goto label1;

        r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative> = null;

        goto label3;

     label1:
        $r3 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentState>;

        $i0 = lengthof $r3;

        $r4 = newarray (double)[$i0];

        r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative> = $r4;

        i2 = 0;

     label2:
        $r5 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label3;

        $r6 = r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: double[] currentDerivative>;

        $d1 = interfaceinvoke r1.<java.io.ObjectInput: double readDouble()>();

        $r6[i2] = $d1;

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: void setInterpolatedTime(double)>(d0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.ode.sampling.DummyStepInterpolator: long serialVersionUID> = 1708010296707839488L;

        return;
    }
}
