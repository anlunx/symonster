class org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction extends java.lang.Object
{
    private double valueRange;
    private final boolean isRepairMode;
    final org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0;

    public void <init>(org.apache.commons.math3.optimization.direct.CMAESOptimizer)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter0: org.apache.commons.math3.optimization.direct.CMAESOptimizer;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double valueRange> = 1.0;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: boolean isRepairMode> = 1;

        return;
    }

    public double value(double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double[] r1, r2;
        boolean $z0, $z1;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer $r3, $r4, $r5;
        double $d0, $d1, d2, $d3;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter0: double[];

        $z0 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: boolean isRepairMode>;

        if $z0 == 0 goto label1;

        r2 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double[] repair(double[])>(r1);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        $d0 = virtualinvoke $r5.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double computeObjectiveValue(double[])>(r2);

        $d1 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double penalty(double[],double[])>(r1, r2);

        d2 = $d0 + $d1;

        goto label2;

     label1:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        d2 = virtualinvoke $r3.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double computeObjectiveValue(double[])>(r1);

     label2:
        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        $z1 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean access$200(org.apache.commons.math3.optimization.direct.CMAESOptimizer)>($r4);

        if $z1 == 0 goto label3;

        $d3 = d2;

        goto label4;

     label3:
        $d3 = neg d2;

     label4:
        return $d3;
    }

    public boolean isFeasible(double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double[] r1, r2, r3;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer $r4, $r5;
        int $i0, i3;
        double $d0, $d1, $d2, $d3;
        byte $b1, $b2;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter0: double[];

        $r4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        r2 = virtualinvoke $r4.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getLowerBound()>();

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        r3 = virtualinvoke $r5.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getUpperBound()>();

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label4;

        $d1 = r1[i3];

        $d0 = r2[i3];

        $b1 = $d1 cmpg $d0;

        if $b1 >= 0 goto label2;

        return 0;

     label2:
        $d3 = r1[i3];

        $d2 = r3[i3];

        $b2 = $d3 cmpl $d2;

        if $b2 <= 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return 1;
    }

    public void setValueRange(double)
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double valueRange> = d0;

        return;
    }

    private double[] repair(double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double[] r1, r2, r3, r4;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer $r5, $r6;
        int $i0, $i1, i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        byte $b2, $b3;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter0: double[];

        $r5 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        r2 = virtualinvoke $r5.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getLowerBound()>();

        $r6 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        r3 = virtualinvoke $r6.<org.apache.commons.math3.optimization.direct.CMAESOptimizer: double[] getUpperBound()>();

        $i0 = lengthof r1;

        r4 = newarray (double)[$i0];

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label5;

        $d1 = r1[i4];

        $d0 = r2[i4];

        $b2 = $d1 cmpg $d0;

        if $b2 >= 0 goto label2;

        $d6 = r2[i4];

        r4[i4] = $d6;

        goto label4;

     label2:
        $d3 = r1[i4];

        $d2 = r3[i4];

        $b3 = $d3 cmpl $d2;

        if $b3 <= 0 goto label3;

        $d5 = r3[i4];

        r4[i4] = $d5;

        goto label4;

     label3:
        $d4 = r1[i4];

        r4[i4] = $d4;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return r4;
    }

    private double penalty(double[], double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double[] r1, r2;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, $d7;
        int $i0, i1;
        org.apache.commons.math3.optimization.direct.CMAESOptimizer $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d6 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d2 = r1[i1];

        $d1 = r2[i1];

        $d3 = $d2 - $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $d4 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double valueRange>;

        $d5 = d0 * $d4;

        d6 = d6 + $d5;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: org.apache.commons.math3.optimization.direct.CMAESOptimizer this$0>;

        $z0 = staticinvoke <org.apache.commons.math3.optimization.direct.CMAESOptimizer: boolean access$200(org.apache.commons.math3.optimization.direct.CMAESOptimizer)>($r3);

        if $z0 == 0 goto label3;

        $d7 = d6;

        goto label4;

     label3:
        $d7 = neg d6;

     label4:
        return $d7;
    }

    static double[] access$000(org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction, double[])
    {
        org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction r0;
        double[] r1, $r2;

        r0 := @parameter0: org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction;

        r1 := @parameter1: double[];

        $r2 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.CMAESOptimizer$FitnessFunction: double[] repair(double[])>(r1);

        return $r2;
    }
}
