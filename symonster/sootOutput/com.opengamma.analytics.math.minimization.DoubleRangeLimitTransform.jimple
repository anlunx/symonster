public class com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform extends java.lang.Object implements com.opengamma.analytics.math.minimization.ParameterLimitsTransform
{
    private static final double TANH_MAX;
    private final double _lower;
    private final double _upper;
    private final double _scale;
    private final double _mid;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        byte $b0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d1 cmpl d0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "upper limit must be greater than lower");

        r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower> = d0;

        r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper> = d1;

        $d2 = d0 + d1;

        $d3 = $d2 / 2.0;

        r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _mid> = $d3;

        $d4 = d1 - d0;

        $d5 = $d4 / 2.0;

        r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale> = $d5;

        return;
    }

    public double inverseTransform(double)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0, $b1;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 25.0;

        if $b0 <= 0 goto label1;

        $d7 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        return $d7;

     label1:
        $b1 = d0 cmpg -25.0;

        if $b1 >= 0 goto label2;

        $d6 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        return $d6;

     label2:
        $d1 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _mid>;

        $d2 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale>;

        $d3 = staticinvoke <com.opengamma.analytics.math.TrigonometricFunctionUtils: double tanh(double)>(d0);

        $d4 = $d2 * $d3;

        $d5 = $d1 + $d4;

        return $d5;
    }

    public double transform(double)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        d0 := @parameter0: double;

        $d1 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        $b0 = d0 cmpg $d1;

        if $b0 > 0 goto label1;

        $d8 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        $b2 = d0 cmpl $d8;

        if $b2 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "parameter out of range");

        $d9 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        $b3 = d0 cmpl $d9;

        if $b3 != 0 goto label3;

        return 25.0;

     label3:
        $d2 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        $b1 = d0 cmpl $d2;

        if $b1 != 0 goto label4;

        return -25.0;

     label4:
        $d3 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _mid>;

        $d5 = d0 - $d3;

        $d4 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale>;

        $d6 = $d5 / $d4;

        $d7 = staticinvoke <com.opengamma.analytics.math.TrigonometricFunctionUtils: double atanh(double)>($d6);

        return $d7;
    }

    public double inverseTransformGradient(double)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0, $b1;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 25.0;

        if $b0 > 0 goto label1;

        $b1 = d0 cmpg -25.0;

        if $b1 >= 0 goto label2;

     label1:
        return 0.0;

     label2:
        d1 = 2.0 * d0;

        d2 = staticinvoke <java.lang.Math: double exp(double)>(d1);

        d3 = d2 + 1.0;

        $d4 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale>;

        $d5 = $d4 * 4.0;

        $d7 = $d5 * d2;

        $d6 = d3 * d3;

        $d8 = $d7 / $d6;

        return $d8;
    }

    public double transformGradient(double)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0, $b1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        d0 := @parameter0: double;

        $d2 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        $b0 = d0 cmpg $d2;

        if $b0 > 0 goto label1;

        $d3 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        $b1 = d0 cmpl $d3;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "parameter out of range");

        $d4 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _mid>;

        $d5 = d0 - $d4;

        $d6 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale>;

        d1 = $d5 / $d6;

        $d7 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _scale>;

        $d8 = d1 * d1;

        $d9 = 1.0 - $d8;

        $d10 = $d7 * $d9;

        $d11 = 1.0 / $d10;

        return $d11;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0;
        double $d0, $d1;
        long $l1, $l2, $l5, $l6, l10, l12;
        int $i3, $i4, $i7, $i8, i11, i13;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        $d0 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i4 = 31 * 1;

        $l1 = l10 >>> 32;

        $l2 = l10 ^ $l1;

        $i3 = (int) $l2;

        i11 = $i4 + $i3;

        $d1 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        l12 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i8 = 31 * i11;

        $l5 = l12 >>> 32;

        $l6 = l12 ^ $l5;

        $i7 = (int) $l6;

        i13 = $i8 + $i7;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1, $d2, $d3;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform) r1;

        $d0 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _lower>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label4;

        return 0;

     label4:
        $d2 = r0.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r2.<com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double _upper>;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.minimization.DoubleRangeLimitTransform: double TANH_MAX> = 25.0;

        return;
    }
}
