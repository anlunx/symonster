public class org.apache.commons.math3.stat.interval.ConfidenceInterval extends java.lang.Object
{
    private double lowerBound;
    private double upperBound;
    private double confidenceLevel;

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: void checkParameters(double,double,double)>(d0, d1, d2);

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound> = d0;

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound> = d1;

        r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel> = d2;

        return;
    }

    public double getLowerBound()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound>;

        return $d0;
    }

    public double getUpperBound()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound>;

        return $d0;
    }

    public double getConfidenceLevel()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel>;

        return $d0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        double $d0, $d1, $d2;
        java.lang.String $r9;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $d0 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double lowerBound>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $d1 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double upperBound>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] (confidence level:");

        $d2 = r0.<org.apache.commons.math3.stat.interval.ConfidenceInterval: double confidenceLevel>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private void checkParameters(double, double, double)
    {
        org.apache.commons.math3.stat.interval.ConfidenceInterval r0;
        double d0, d1, d2;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1, $r7;
        java.lang.Object[] $r2, $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3, $r9;
        java.lang.Double $r4, $r10, $r11;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.interval.ConfidenceInterval;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r7 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r8 = newarray (java.lang.Object)[2];

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r8[1] = $r11;

        specialinvoke $r7.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r9, $r8);

        throw $r7;

     label1:
        $b1 = d2 cmpg 0.0;

        if $b1 <= 0 goto label2;

        $b2 = d2 cmpl 1.0;

        if $b2 < 0 goto label3;

     label2:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_BOUNDS_CONFIDENCE_LEVEL>;

        $r2 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[2] = $r6;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label3:
        return;
    }
}
