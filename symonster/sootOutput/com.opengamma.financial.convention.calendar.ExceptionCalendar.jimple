public abstract class com.opengamma.financial.convention.calendar.ExceptionCalendar extends com.opengamma.financial.convention.calendar.AbstractCalendar
{
    private static final long serialVersionUID;
    private final java.util.concurrent.ConcurrentMap _workingDays;

    protected void <init>(java.lang.String)
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.opengamma.financial.convention.calendar.AbstractCalendar: void <init>(java.lang.String)>(r1);

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap _workingDays> = $r2;

        return;
    }

    protected java.util.concurrent.ConcurrentMap getWorkingDays()
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        java.util.concurrent.ConcurrentMap $r1;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        $r1 = r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap _workingDays>;

        return $r1;
    }

    protected boolean isWorkingDayException(org.threeten.bp.LocalDate)
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        org.threeten.bp.LocalDate r1;
        java.lang.Boolean r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        $r3 = virtualinvoke r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap getWorkingDays()>();

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Boolean) $r4;

        if r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected boolean isNonWorkingDayException(org.threeten.bp.LocalDate)
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        org.threeten.bp.LocalDate r1;
        java.lang.Boolean r2;
        java.util.concurrent.ConcurrentMap $r3;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        $r3 = virtualinvoke r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap getWorkingDays()>();

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.Boolean) $r4;

        if r2 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected void addWorkingDay(org.threeten.bp.LocalDate)
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        org.threeten.bp.LocalDate r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        $r2 = virtualinvoke r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap getWorkingDays()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    protected void addNonWorkingDay(org.threeten.bp.LocalDate)
    {
        com.opengamma.financial.convention.calendar.ExceptionCalendar r0;
        org.threeten.bp.LocalDate r1;
        java.util.concurrent.ConcurrentMap $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.opengamma.financial.convention.calendar.ExceptionCalendar;

        r1 := @parameter0: org.threeten.bp.LocalDate;

        $r2 = virtualinvoke r0.<com.opengamma.financial.convention.calendar.ExceptionCalendar: java.util.concurrent.ConcurrentMap getWorkingDays()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <com.opengamma.financial.convention.calendar.ExceptionCalendar: long serialVersionUID> = 1L;

        return;
    }
}
