public abstract class org.apache.commons.math.util.CompositeFormat extends java.text.Format
{
    private static final long serialVersionUID;

    public void <init>()
    {
        org.apache.commons.math.util.CompositeFormat r0;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        specialinvoke r0.<java.text.Format: void <init>()>();

        return;
    }

    protected static java.text.NumberFormat getDefaultNumberFormat()
    {
        java.util.Locale $r0;
        java.text.NumberFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <org.apache.commons.math.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)>($r0);

        return $r1;
    }

    protected static java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.NumberFormat r1;

        r0 := @parameter0: java.util.Locale;

        r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>(r0);

        virtualinvoke r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(2);

        return r1;
    }

    protected void parseAndIgnoreWhitespace(java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        int $i1, $i2;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        virtualinvoke r0.<org.apache.commons.math.util.CompositeFormat: char parseNextCharacter(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $i1 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        $i2 = $i1 - 1;

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>($i2);

        return;
    }

    protected char parseNextCharacter(java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        int i0, $i2, i3;
        char c1, c4;
        boolean $z0;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        i3 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        c4 = 0;

        if i3 >= i0 goto label3;

     label1:
        $i2 = i3;

        i3 = i3 + 1;

        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c1);

        if $z0 == 0 goto label2;

        if i3 < i0 goto label1;

     label2:
        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i3);

        if i3 >= i0 goto label3;

        c4 = c1;

     label3:
        return c4;
    }

    private java.lang.Number parseNumber(java.lang.String, double, java.text.ParsePosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        java.lang.String r1, $r8, $r9;
        double d0;
        java.text.ParsePosition r2;
        int i0, i1, i2, $i3, $i4;
        java.lang.StringBuilder $r4;
        java.lang.Double r10;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 := @parameter2: java.text.ParsePosition;

        r10 = null;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        i0 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        i1 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        i2 = i1 + i0;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i3 goto label1;

        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = virtualinvoke $r8.<java.lang.String: int compareTo(java.lang.String)>($r9);

        if $i4 != 0 goto label1;

        r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i2);

     label1:
        return r10;
    }

    protected java.lang.Number parseNumber(java.lang.String, java.text.NumberFormat, java.text.ParsePosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        java.lang.String r1;
        java.text.NumberFormat r2;
        java.text.ParsePosition r3;
        int i0, i1, $i2, i3;
        double[] $r5;
        double $d0;
        java.lang.Number r6;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.NumberFormat;

        r3 := @parameter2: java.text.ParsePosition;

        i0 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();

        r6 = virtualinvoke r2.<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>(r1, r3);

        i1 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();

        if i0 != i1 goto label3;

        $r5 = newarray (double)[3];

        $r5[0] = #NaN;

        $r5[1] = #Infinity;

        $r5[2] = #-Infinity;

        i3 = 0;

     label1:
        $i2 = lengthof $r5;

        if i3 >= $i2 goto label3;

        $d0 = $r5[i3];

        r6 = specialinvoke r0.<org.apache.commons.math.util.CompositeFormat: java.lang.Number parseNumber(java.lang.String,double,java.text.ParsePosition)>(r1, $d0, r3);

        if r6 == null goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return r6;
    }

    protected boolean parseFixedstring(java.lang.String, java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        java.lang.String r1, r2, $r4;
        java.text.ParsePosition r3;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.text.ParsePosition;

        i0 = virtualinvoke r3.<java.text.ParsePosition: int getIndex()>();

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        i1 = i0 + $i2;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 >= $i3 goto label1;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 > $i4 goto label1;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $i5 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>(r2);

        if $i5 == 0 goto label2;

     label1:
        virtualinvoke r3.<java.text.ParsePosition: void setIndex(int)>(i0);

        virtualinvoke r3.<java.text.ParsePosition: void setErrorIndex(int)>(i0);

        return 0;

     label2:
        virtualinvoke r3.<java.text.ParsePosition: void setIndex(int)>(i1);

        return 1;
    }

    protected java.lang.StringBuffer formatDouble(double, java.text.NumberFormat, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.math.util.CompositeFormat r0;
        double d0;
        java.text.NumberFormat r1;
        java.lang.StringBuffer r2;
        java.text.FieldPosition r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math.util.CompositeFormat;

        d0 := @parameter0: double;

        r1 := @parameter1: java.text.NumberFormat;

        r2 := @parameter2: java.lang.StringBuffer;

        r3 := @parameter3: java.text.FieldPosition;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(40);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label3;

     label2:
        virtualinvoke r1.<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>(d0, r2, r3);

     label3:
        return r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.util.CompositeFormat: long serialVersionUID> = 5358685519349262494L;

        return;
    }
}
