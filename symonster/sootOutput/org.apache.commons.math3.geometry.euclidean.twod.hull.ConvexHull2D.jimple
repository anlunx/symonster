public class org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D extends java.lang.Object implements org.apache.commons.math3.geometry.hull.ConvexHull, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices;
    private final double tolerance;
    private transient org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments;

    public void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[], double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1, $r3;
        double d0;
        boolean $z0;
        java.lang.Object $r2;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance> = d0;

        $z0 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: boolean isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])>(r1);

        if $z0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_CONVEX>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r2;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices> = $r3;

        return;
    }

    private boolean isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r3, r4, r5, r6;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int i0, $i1, $i2, $i3, $i4, $i7, i8, i9, $i10, $i11;
        byte $b5, $b6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[];

        $i1 = lengthof r1;

        if $i1 >= 3 goto label1;

        return 1;

     label1:
        i8 = 0;

        i9 = 0;

     label2:
        $i2 = lengthof r1;

        if i9 >= $i2 goto label9;

        if i9 != 0 goto label3;

        $i7 = lengthof r1;

        $i10 = $i7 - 1;

        goto label4;

     label3:
        $i10 = i9 - 1;

     label4:
        r2 = r1[$i10];

        r3 = r1[i9];

        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        if i9 != $i4 goto label5;

        $i11 = 0;

        goto label6;

     label5:
        $i11 = i9 + 1;

     label6:
        r4 = r1[$i11];

        r5 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)>(r2);

        r6 = virtualinvoke r4.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector)>(r3);

        $d1 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        $d2 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d3 = virtualinvoke r5.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getY()>();

        $d4 = neg $d3;

        $d5 = virtualinvoke r6.<org.apache.commons.math3.geometry.euclidean.twod.Vector2D: double getX()>();

        d0 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double)>($d1, $d2, $d4, $d5);

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        i0 = staticinvoke <org.apache.commons.math3.util.Precision: int compareTo(double,double,double)>(d0, 0.0, $d6);

        $d7 = (double) i0;

        $b5 = $d7 cmpl 0.0;

        if $b5 == 0 goto label8;

        $d8 = (double) i8;

        $b6 = $d8 cmpl 0.0;

        if $b6 == 0 goto label7;

        if i0 == i8 goto label7;

        return 0;

     label7:
        i8 = i0;

     label8:
        i9 = i9 + 1;

        goto label2;

     label9:
        return 1;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r2;

        return $r3;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.Segment[] getLineSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.commons.math3.geometry.euclidean.twod.Segment[]) $r2;

        return $r3;
    }

    private org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        int i0, i1, $i2, i3, i4;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] r1, $r4, $r13, $r14;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D r2, r19, r20, r21, r22;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] $r3, $r5, $r8, $r11, $r12, $r17, $r18, $r23;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r6, $r9, $r15;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r7, $r10, $r16;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r3 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        if $r3 != null goto label7;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        i0 = lengthof $r4;

        if i0 > 1 goto label1;

        $r18 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r18;

        goto label7;

     label1:
        if i0 != 2 goto label2;

        $r12 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[1];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r12;

        $r13 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        r19 = $r13[0];

        $r14 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        r20 = $r14[1];

        $r17 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        $r15 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r16 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r16.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r19, r20, $d2);

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r19, r20, $r16);

        $r17[0] = $r15;

        goto label7;

     label2:
        $r5 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Segment)[i0];

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments> = $r5;

        r21 = null;

        r22 = null;

        i3 = 0;

        r1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        i1 = lengthof r1;

        i4 = 0;

     label3:
        if i4 >= i1 goto label6;

        r2 = r1[i4];

        if r22 != null goto label4;

        r21 = r2;

        r22 = r2;

        goto label5;

     label4:
        $r11 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        $i2 = i3;

        i3 = i3 + 1;

        $r9 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r10 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r22, r2, $d1);

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r22, r2, $r10);

        $r11[$i2] = $r9;

        r22 = r2;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        $r8 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        $r6 = new org.apache.commons.math3.geometry.euclidean.twod.Segment;

        $r7 = new org.apache.commons.math3.geometry.euclidean.twod.Line;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: double tolerance>;

        specialinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Line: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)>(r22, r21, $d0);

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.twod.Segment: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)>(r22, r21, $r7);

        $r8[i3] = $r6;

     label7:
        $r23 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] lineSegments>;

        return $r23;
    }

    public org.apache.commons.math3.geometry.partitioning.Region createRegion() throws org.apache.commons.math3.exception.InsufficientDataException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Segment[] r2;
        org.apache.commons.math3.geometry.euclidean.twod.Line[] r3;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r4;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.geometry.partitioning.RegionFactory $r5;
        org.apache.commons.math3.geometry.partitioning.Region $r6;
        org.apache.commons.math3.geometry.euclidean.twod.Segment $r7;
        org.apache.commons.math3.geometry.euclidean.twod.Line $r8;
        org.apache.commons.math3.exception.InsufficientDataException $r9;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r4 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] vertices>;

        $i0 = lengthof $r4;

        if $i0 >= 3 goto label1;

        $r9 = new org.apache.commons.math3.exception.InsufficientDataException;

        specialinvoke $r9.<org.apache.commons.math3.exception.InsufficientDataException: void <init>()>();

        throw $r9;

     label1:
        $r5 = new org.apache.commons.math3.geometry.partitioning.RegionFactory;

        specialinvoke $r5.<org.apache.commons.math3.geometry.partitioning.RegionFactory: void <init>()>();

        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Segment[] retrieveLineSegments()>();

        $i1 = lengthof r2;

        r3 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Line)[$i1];

        i3 = 0;

     label2:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label3;

        $r7 = r2[i3];

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.twod.Segment: org.apache.commons.math3.geometry.euclidean.twod.Line getLine()>();

        r3[i3] = $r8;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.partitioning.RegionFactory: org.apache.commons.math3.geometry.partitioning.Region buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])>(r3);

        return $r6;
    }

    public volatile org.apache.commons.math3.geometry.Point[] getVertices()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D r0;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] getVertices()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: long serialVersionUID> = 20140129L;

        return;
    }
}
