public abstract class org.apache.commons.math.estimation.AbstractEstimator extends java.lang.Object implements org.apache.commons.math.estimation.Estimator
{
    public static final int DEFAULT_MAX_COST_EVALUATIONS;
    protected org.apache.commons.math.estimation.WeightedMeasurement[] measurements;
    protected org.apache.commons.math.estimation.EstimatedParameter[] parameters;
    protected double[] jacobian;
    protected int cols;
    protected int rows;
    protected double[] residuals;
    protected double cost;
    private int maxCostEval;
    private int costEvaluations;
    private int jacobianEvaluations;

    protected void <init>()
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.estimation.AbstractEstimator: void setMaxCostEval(int)>(100);

        return;
    }

    public final void setMaxCostEval(int)
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        int i0;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        i0 := @parameter0: int;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int maxCostEval> = i0;

        return;
    }

    public final int getCostEvaluations()
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        int $i0;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        $i0 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int costEvaluations>;

        return $i0;
    }

    public final int getJacobianEvaluations()
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        int $i0;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        $i0 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int jacobianEvaluations>;

        return $i0;
    }

    protected void updateJacobian()
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.WeightedMeasurement r1;
        double d0, $d1, $d2, $d3, $d4;
        double[] $r2, $r6;
        int $i0, $i1, $i2, i3, i4, i5;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r3;
        org.apache.commons.math.estimation.EstimatedParameter[] $r4;
        org.apache.commons.math.estimation.EstimatedParameter $r5;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        virtualinvoke r0.<org.apache.commons.math.estimation.AbstractEstimator: void incrementJacobianEvaluationsCounter()>();

        $r2 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] jacobian>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r2, 0.0);

        i3 = 0;

        i4 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int rows>;

        if i4 >= $i0 goto label4;

        $r3 = r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.WeightedMeasurement[] measurements>;

        r1 = $r3[i4];

        $d1 = virtualinvoke r1.<org.apache.commons.math.estimation.WeightedMeasurement: double getWeight()>();

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        d0 = neg $d2;

        i5 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int cols>;

        if i5 >= $i1 goto label3;

        $r6 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] jacobian>;

        $i2 = i3;

        i3 = i3 + 1;

        $r4 = r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.EstimatedParameter[] parameters>;

        $r5 = $r4[i5];

        $d3 = virtualinvoke r1.<org.apache.commons.math.estimation.WeightedMeasurement: double getPartial(org.apache.commons.math.estimation.EstimatedParameter)>($r5);

        $d4 = d0 * $d3;

        $r6[$i2] = $d4;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    protected final void incrementJacobianEvaluationsCounter()
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        $i0 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int jacobianEvaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int jacobianEvaluations> = $i1;

        return;
    }

    protected void updateResidualsAndCost() throws org.apache.commons.math.estimation.EstimationException
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.WeightedMeasurement r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        int $i0, $i1, $i2, $i3, $i5, i7;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r2;
        double[] $r3;
        org.apache.commons.math.estimation.EstimationException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        $i0 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int costEvaluations>;

        $i1 = $i0 + 1;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int costEvaluations> = $i1;

        $i2 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int maxCostEval>;

        if $i1 <= $i2 goto label1;

        $r4 = new org.apache.commons.math.estimation.EstimationException;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats MAX_EVALUATIONS_EXCEEDED>;

        $r5 = newarray (java.lang.Object)[1];

        $i5 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int maxCostEval>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r5[0] = $r7;

        specialinvoke $r4.<org.apache.commons.math.estimation.EstimationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost> = 0.0;

        i7 = 0;

     label2:
        $i3 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int rows>;

        if i7 >= $i3 goto label3;

        $r2 = r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.WeightedMeasurement[] measurements>;

        r1 = $r2[i7];

        d0 = virtualinvoke r1.<org.apache.commons.math.estimation.WeightedMeasurement: double getResidual()>();

        $r3 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] residuals>;

        $d3 = virtualinvoke r1.<org.apache.commons.math.estimation.WeightedMeasurement: double getWeight()>();

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d3);

        $d5 = $d4 * d0;

        $r3[i7] = $d5;

        $d6 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost>;

        $d7 = virtualinvoke r1.<org.apache.commons.math.estimation.WeightedMeasurement: double getWeight()>();

        $d8 = $d7 * d0;

        $d9 = $d8 * d0;

        $d10 = $d6 + $d9;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost> = $d10;

        i7 = i7 + 1;

        goto label2;

     label3:
        $d1 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost>;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d1);

        r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost> = $d2;

        return;
    }

    public double getRMS(org.apache.commons.math.estimation.EstimationProblem)
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.EstimationProblem r1;
        org.apache.commons.math.estimation.WeightedMeasurement[] r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        int $i0, $i1, i2;
        org.apache.commons.math.estimation.WeightedMeasurement $r3, $r4;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimationProblem;

        r2 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()>();

        d7 = 0.0;

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label2;

        $r3 = r2[i2];

        d0 = virtualinvoke $r3.<org.apache.commons.math.estimation.WeightedMeasurement: double getResidual()>();

        $r4 = r2[i2];

        $d4 = virtualinvoke $r4.<org.apache.commons.math.estimation.WeightedMeasurement: double getWeight()>();

        $d5 = $d4 * d0;

        $d6 = $d5 * d0;

        d7 = d7 + $d6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = lengthof r2;

        $d1 = (double) $i1;

        $d2 = d7 / $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d2);

        return $d3;
    }

    public double getChiSquare(org.apache.commons.math.estimation.EstimationProblem)
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.EstimationProblem r1;
        org.apache.commons.math.estimation.WeightedMeasurement[] r2;
        double d0, $d1, $d2, $d3, d4;
        int $i0, i1;
        org.apache.commons.math.estimation.WeightedMeasurement $r3, $r4;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimationProblem;

        r2 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()>();

        d4 = 0.0;

        i1 = 0;

     label1:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label2;

        $r3 = r2[i1];

        d0 = virtualinvoke $r3.<org.apache.commons.math.estimation.WeightedMeasurement: double getResidual()>();

        $d1 = d0 * d0;

        $r4 = r2[i1];

        $d2 = virtualinvoke $r4.<org.apache.commons.math.estimation.WeightedMeasurement: double getWeight()>();

        $d3 = $d1 / $d2;

        d4 = d4 + $d3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d4;
    }

    public double[][] getCovariances(org.apache.commons.math.estimation.EstimationProblem) throws org.apache.commons.math.estimation.EstimationException
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.EstimationProblem r1;
        int i0, i1, i2, $i3, $i4, i5, i6, i7;
        double[][] r2, $r8;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r3;
        org.apache.commons.math.estimation.EstimatedParameter[] $r4;
        org.apache.commons.math.linear.LUDecompositionImpl $r5;
        org.apache.commons.math.linear.RealMatrix $r6, r17;
        org.apache.commons.math.linear.DecompositionSolver $r7;
        double[] $r9, $r10, $r11, $r12;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math.linear.InvalidMatrixException $r13;
        org.apache.commons.math.estimation.EstimationException $r14;
        java.lang.Object[] $r15;
        org.apache.commons.math.exception.util.LocalizedFormats $r16;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimationProblem;

        virtualinvoke r0.<org.apache.commons.math.estimation.AbstractEstimator: void updateJacobian()>();

        $r3 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()>();

        i0 = lengthof $r3;

        $r4 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.EstimatedParameter[] getUnboundParameters()>();

        i1 = lengthof $r4;

        i2 = i1 * i0;

        r2 = newmultiarray (double)[i1][i1];

        i5 = 0;

     label1:
        if i5 >= i1 goto label6;

        i6 = i5;

     label2:
        if i6 >= i1 goto label5;

        d3 = 0.0;

        i7 = 0;

     label3:
        if i7 >= i2 goto label4;

        $r11 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] jacobian>;

        $i3 = i7 + i5;

        $d1 = $r11[$i3];

        $r12 = r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] jacobian>;

        $i4 = i7 + i6;

        $d0 = $r12[$i4];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i7 = i7 + i1;

        goto label3;

     label4:
        $r9 = r2[i5];

        $r9[i6] = d3;

        $r10 = r2[i6];

        $r10[i5] = d3;

        i6 = i6 + 1;

        goto label2;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        $r5 = new org.apache.commons.math.linear.LUDecompositionImpl;

        $r6 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(double[][])>(r2);

        specialinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: void <init>(org.apache.commons.math.linear.RealMatrix)>($r6);

        $r7 = virtualinvoke $r5.<org.apache.commons.math.linear.LUDecompositionImpl: org.apache.commons.math.linear.DecompositionSolver getSolver()>();

        r17 = interfaceinvoke $r7.<org.apache.commons.math.linear.DecompositionSolver: org.apache.commons.math.linear.RealMatrix getInverse()>();

        $r8 = interfaceinvoke r17.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

     label7:
        return $r8;

     label8:
        $r13 := @caughtexception;

        $r14 = new org.apache.commons.math.estimation.EstimationException;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM>;

        $r15 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.apache.commons.math.estimation.EstimationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

        catch org.apache.commons.math.linear.InvalidMatrixException from label6 to label7 with label8;
    }

    public double[] guessParametersErrors(org.apache.commons.math.estimation.EstimationProblem) throws org.apache.commons.math.estimation.EstimationException
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.EstimationProblem r1;
        int i0, i1, $i2, $i3, $i4, i5;
        double[] r2, $r7;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[][] r3;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r4;
        org.apache.commons.math.estimation.EstimatedParameter[] $r5, $r6;
        org.apache.commons.math.estimation.EstimationException $r8;
        java.lang.Object[] $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11, $r12;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimationProblem;

        $r4 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()>();

        i0 = lengthof $r4;

        $r5 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.EstimatedParameter[] getUnboundParameters()>();

        i1 = lengthof $r5;

        if i0 > i1 goto label1;

        $r8 = new org.apache.commons.math.estimation.EstimationException;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_DEGREES_OF_FREEDOM>;

        $r9 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9[1] = $r12;

        specialinvoke $r8.<org.apache.commons.math.estimation.EstimationException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r8;

     label1:
        $r6 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.EstimatedParameter[] getUnboundParameters()>();

        $i2 = lengthof $r6;

        r2 = newarray (double)[$i2];

        $d1 = virtualinvoke r0.<org.apache.commons.math.estimation.AbstractEstimator: double getChiSquare(org.apache.commons.math.estimation.EstimationProblem)>(r1);

        $i3 = i0 - i1;

        $d2 = (double) $i3;

        $d3 = $d1 / $d2;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d3);

        r3 = virtualinvoke r0.<org.apache.commons.math.estimation.AbstractEstimator: double[][] getCovariances(org.apache.commons.math.estimation.EstimationProblem)>(r1);

        i5 = 0;

     label2:
        $i4 = lengthof r2;

        if i5 >= $i4 goto label3;

        $r7 = r3[i5];

        $d4 = $r7[i5];

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d4);

        $d6 = $d5 * d0;

        r2[i5] = $d6;

        i5 = i5 + 1;

        goto label2;

     label3:
        return r2;
    }

    protected void initializeEstimate(org.apache.commons.math.estimation.EstimationProblem)
    {
        org.apache.commons.math.estimation.AbstractEstimator r0;
        org.apache.commons.math.estimation.EstimationProblem r1;
        org.apache.commons.math.estimation.WeightedMeasurement[] $r2, $r4;
        org.apache.commons.math.estimation.EstimatedParameter[] $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double[] $r6, $r7;

        r0 := @this: org.apache.commons.math.estimation.AbstractEstimator;

        r1 := @parameter0: org.apache.commons.math.estimation.EstimationProblem;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int costEvaluations> = 0;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int jacobianEvaluations> = 0;

        $r2 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.WeightedMeasurement[] getMeasurements()>();

        r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.WeightedMeasurement[] measurements> = $r2;

        $r3 = interfaceinvoke r1.<org.apache.commons.math.estimation.EstimationProblem: org.apache.commons.math.estimation.EstimatedParameter[] getUnboundParameters()>();

        r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.EstimatedParameter[] parameters> = $r3;

        $r4 = r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.WeightedMeasurement[] measurements>;

        $i0 = lengthof $r4;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int rows> = $i0;

        $r5 = r0.<org.apache.commons.math.estimation.AbstractEstimator: org.apache.commons.math.estimation.EstimatedParameter[] parameters>;

        $i1 = lengthof $r5;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: int cols> = $i1;

        $i3 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int rows>;

        $i2 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int cols>;

        $i4 = $i3 * $i2;

        $r6 = newarray (double)[$i4];

        r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] jacobian> = $r6;

        $i5 = r0.<org.apache.commons.math.estimation.AbstractEstimator: int rows>;

        $r7 = newarray (double)[$i5];

        r0.<org.apache.commons.math.estimation.AbstractEstimator: double[] residuals> = $r7;

        r0.<org.apache.commons.math.estimation.AbstractEstimator: double cost> = #Infinity;

        return;
    }

    public abstract void estimate(org.apache.commons.math.estimation.EstimationProblem) throws org.apache.commons.math.estimation.EstimationException;

    public static void <clinit>()
    {
        <org.apache.commons.math.estimation.AbstractEstimator: int DEFAULT_MAX_COST_EVALUATIONS> = 100;

        return;
    }
}
