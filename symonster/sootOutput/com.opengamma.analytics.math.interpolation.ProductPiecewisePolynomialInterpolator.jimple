public class com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private final com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod;
    private final double[] _xValuesClamped;
    private final double[] _yValuesClamped;
    private final boolean _isClamped;
    private static final com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC;
    private static final double EPS;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "baseMethod");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "baseMethod should not be ProductPiecewisePolynomialInterpolator");

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod> = r1;

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _xValuesClamped> = null;

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _yValuesClamped> = null;

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: boolean _isClamped> = 0;

        return;
    }

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator, double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        double[] r2, r3, $r7, $r8;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "method");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "xValuesClamped");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "yValuesClamped");

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "baseMethod should not be ProductPiecewisePolynomialInterpolator");

        i0 = lengthof r2;

        $i1 = lengthof r3;

        if $i1 != i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "xValuesClamped and yValuesClamped should be the same length");

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod> = r1;

        $r7 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _xValuesClamped> = $r7;

        $r8 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r3, i0);

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _yValuesClamped> = $r8;

        r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: boolean _isClamped> = 1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        double[] r1, r2, $r7, $r8, r12;
        int $i0, $i1;
        boolean $z0, $z1;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r5, $r9;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r6, r11;
        double[][] r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "xValues length = yValues length");

        $z0 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: boolean _isClamped>;

        if $z0 == 0 goto label3;

        r10 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[][] getDataTotal(double[],double[])>(r1, r2);

        $r9 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod>;

        $r8 = r10[0];

        $r7 = r10[1];

        r11 = virtualinvoke $r9.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>($r8, $r7);

        goto label4;

     label3:
        r12 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] getProduct(double[],double[])>(r1, r2);

        $r5 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod>;

        r11 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r12);

     label4:
        $r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult extrapolateByLinearFunction(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r11, r1);

        return $r6;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        double[] r1;
        double[][] r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Use 1D interpolation method");

        throw $r3;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        double[] r1, r2, $r8, $r9, r13;
        int $i0, $i1;
        boolean $z0, $z1;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r5, $r10;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r6;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r7, r12;
        double[][] r11;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "xValues length = yValues length");

        $z0 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: boolean _isClamped>;

        if $z0 == 0 goto label3;

        r11 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[][] getDataTotal(double[],double[])>(r1, r2);

        $r10 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod>;

        $r9 = r11[0];

        $r8 = r11[1];

        r12 = virtualinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>($r9, $r8);

        goto label4;

     label3:
        r13 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] getProduct(double[],double[])>(r1, r2);

        $r5 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod>;

        r12 = virtualinvoke $r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>(r1, r13);

     label4:
        $r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult extrapolateByLinearFunction(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r12, r1);

        $r7 = (com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity) $r6;

        return $r7;
    }

    private com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult extrapolateByLinearFunction(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult, double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r1, $r23;
        double[] r2, r3, r4, r6, r7, $r19, $r20, $r21, $r22, $r30, $r31, $r39, $r40;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[][] r5, r42;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r11, $r15, $r18, $r24, $r27, $r29, $r34, $r38;
        byte $b3;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r10, $r14, $r26, $r28;
        int[] $r12, $r16;
        java.lang.Double $r13, $r17;
        boolean $z0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r25, $r32, $r35, $r36, $r37;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity $r33, r41;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        r2 := @parameter1: double[];

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getNumberOfIntervals()>();

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        r3 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        $d5 = r2[$i2];

        $d4 = r3[i0];

        $d6 = $d5 - $d4;

        $d7 = staticinvoke <java.lang.Math: double abs(double)>($d6);

        $b3 = $d7 cmpg 1.0E-15;

        if $b3 >= 0 goto label6;

        d0 = r3[i0];

        $r10 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>(r1, d0);

        $r12 = newarray (int)[1];

        $r12[0] = 0;

        $r13 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r12);

        d1 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d8 = r3[i0];

        $d10 = 2.0 * $d8;

        $i4 = i0 - 1;

        $d9 = r3[$i4];

        d2 = $d10 - $d9;

        $r14 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double)>(r1, d0);

        $r16 = newarray (int)[1];

        $r16[0] = 0;

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r16);

        d3 = virtualinvoke $r17.<java.lang.Double: double doubleValue()>();

        $i5 = i0 + 2;

        r4 = newarray (double)[$i5];

        $r18 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots()>();

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i6 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r4, 0, $i6);

        $i7 = i0 + 1;

        r4[$i7] = d2;

        $i8 = i0 + 1;

        r5 = newarray (double[])[$i8];

        i26 = 0;

     label1:
        if i26 >= i0 goto label2;

        $r37 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefMatrix()>();

        $r38 = virtualinvoke $r37.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i26);

        $r39 = virtualinvoke $r38.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i25 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $r40 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r39, $i25);

        r5[i26] = $r40;

        i26 = i26 + 1;

        goto label1;

     label2:
        $i9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $r20 = newarray (double)[$i9];

        r5[i0] = $r20;

        $r21 = r5[i0];

        $i10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $i11 = $i10 - 1;

        $r21[$i11] = d1;

        $r22 = r5[i0];

        $i12 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        $i13 = $i12 - 2;

        $r22[$i13] = d3;

        $z0 = r1 instanceof com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        if $z0 == 0 goto label5;

        r41 = (com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity) r1;

        $r26 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D nodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double)>(r41, d0);

        r6 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r28 = <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC>;

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double)>(r41, d0);

        r7 = virtualinvoke $r29.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $i15 = i0 + 1;

        r8 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i15];

        i27 = 0;

     label3:
        if i27 >= i0 goto label4;

        $r36 = virtualinvoke r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCoefficientSensitivity(int)>(i27);

        r8[i27] = $r36;

        i27 = i27 + 1;

        goto label3;

     label4:
        $i16 = virtualinvoke r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        $i17 = lengthof r6;

        r42 = newmultiarray (double)[$i16][$i17];

        $i18 = virtualinvoke r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        $i20 = $i18 - 1;

        $i19 = lengthof r6;

        $r30 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r6, $i19);

        r42[$i20] = $r30;

        $i21 = virtualinvoke r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        $i23 = $i21 - 2;

        $i22 = lengthof r7;

        $r31 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r7, $i22);

        r42[$i23] = $r31;

        $r32 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r42);

        r8[i0] = $r32;

        $r33 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        $r35 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        $i24 = virtualinvoke r41.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        specialinvoke $r33.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r34, $r35, $i24, 1, r8);

        return $r33;

     label5:
        $r23 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r24 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r24.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r4);

        $r25 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        $i14 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        specialinvoke $r23.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r24, $r25, $i14, 1);

        return $r23;

     label6:
        return r1;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getPrimaryMethod()
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _baseMethod>;

        return $r1;
    }

    private double[][] getDataTotal(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        double[] r1, r2, r3, r4, r5, $r6, $r7, $r8;
        int i0, i1, i2;
        double[][] $r9;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r6 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _xValuesClamped>;

        i0 = lengthof $r6;

        i1 = lengthof r1;

        i2 = i0 + i1;

        r3 = newarray (double)[i2];

        r4 = newarray (double)[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 0, i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r4, 0, i1);

        $r7 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _xValuesClamped>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r3, i1, i0);

        $r8 = r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] _yValuesClamped>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r4, i1, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r3, r4);

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double[] getProduct(double[],double[])>(r3, r4);

        $r9 = newarray (double[])[2];

        $r9[0] = r3;

        $r9[1] = r5;

        return $r9;
    }

    private double[] getProduct(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator r0;
        double[] r1, r2, r3;
        int i0, i1;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r1[i1];

        $d0 = r2[i1];

        $d2 = $d1 * $d0;

        r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r0;

        <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: double EPS> = 1.0E-15;

        $r0 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r0.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        <com.opengamma.analytics.math.interpolation.ProductPiecewisePolynomialInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D FUNC> = $r0;

        return;
    }
}
