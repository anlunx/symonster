public class org.apache.commons.lang.Validate extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang.Validate r0;

        r0 := @this: org.apache.commons.lang.Validate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void isTrue(boolean, java.lang.String, java.lang.Object)
    {
        boolean z0;
        java.lang.String r0, $r6;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3, $r4, $r5;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        if z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String, long)
    {
        boolean z0;
        java.lang.String r0, $r5;
        long l0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String, double)
    {
        boolean z0;
        java.lang.String r0, $r5;
        double d0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuffer $r2, $r3, $r4;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        d0 := @parameter2: double;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>(d0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public static void isTrue(boolean, java.lang.String)
    {
        boolean z0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label1:
        return;
    }

    public static void isTrue(boolean)
    {
        boolean z0;
        java.lang.IllegalArgumentException $r0;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The validated expression is false");

        throw $r0;

     label1:
        return;
    }

    public static void notNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r0, "The validated object is null");

        return;
    }

    public static void notNull(java.lang.Object, java.lang.String)
    {
        java.lang.Object r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    public static void notEmpty(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = lengthof r0;

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label2:
        return;
    }

    public static void notEmpty(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "The validated array is empty");

        return;
    }

    public static void notEmpty(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label2:
        return;
    }

    public static void notEmpty(java.util.Collection)
    {
        java.util.Collection r0;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Collection,java.lang.String)>(r0, "The validated collection is empty");

        return;
    }

    public static void notEmpty(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label2:
        return;
    }

    public static void notEmpty(java.util.Map)
    {
        java.util.Map r0;

        r0 := @parameter0: java.util.Map;

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.util.Map,java.lang.String)>(r0, "The validated map is empty");

        return;
    }

    public static void notEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label2:
        return;
    }

    public static void notEmpty(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notEmpty(java.lang.String,java.lang.String)>(r0, "The validated string is empty");

        return;
    }

    public static void noNullElements(java.lang.Object[], java.lang.String)
    {
        java.lang.Object[] r0;
        java.lang.String r1;
        int $i0, i1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r2 = r0[i1];

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void noNullElements(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1;
        java.lang.Object $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuffer $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        $r1 = r0[i1];

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The validated array contains null element at index: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void noNullElements(java.util.Collection, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.String r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label2:
        return;
    }

    public static void noNullElements(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuffer $r4, $r5, $r6;
        java.lang.String $r7;
        int i0;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        i0 = 0;

        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The validated collection contains null element at index: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public static void allElementsOfType(java.util.Collection, java.lang.Class, java.lang.String)
    {
        java.util.Collection r0;
        java.lang.Class r1;
        java.lang.String r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r5;

     label2:
        return;
    }

    public static void allElementsOfType(java.util.Collection, java.lang.Class)
    {
        java.util.Collection r0;
        java.lang.Class r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r10;
        java.lang.String $r7, $r11;
        int i0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        i0 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The validated collection contains an element not of type ");

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" at index: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }
}
