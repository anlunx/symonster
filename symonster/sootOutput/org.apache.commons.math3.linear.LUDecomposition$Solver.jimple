class org.apache.commons.math3.linear.LUDecomposition$Solver extends java.lang.Object implements org.apache.commons.math3.linear.DecompositionSolver
{
    private final double[][] lu;
    private final int[] pivot;
    private final boolean singular;

    private void <init>(double[][], int[], boolean)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        double[][] r1;
        int[] r2;
        boolean z0;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu> = r1;

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot> = r2;

        r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular> = z0;

        return;
    }

    public boolean isNonSingular()
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.apache.commons.math3.linear.RealVector solve(org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealVector r1;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        double[] r2, $r6, $r8, $r10;
        int[] $r3, $r11;
        boolean $z0;
        org.apache.commons.math3.linear.ArrayRealVector $r4;
        double[][] $r5, $r7, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13;
        org.apache.commons.math3.linear.SingularMatrixException $r12;
        org.apache.commons.math3.exception.DimensionMismatchException $r13;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealVector;

        $r3 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i0 = lengthof $r3;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        if $i1 == i0 goto label01;

        $r13 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: int getDimension()>();

        specialinvoke $r13.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r13;

     label01:
        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 == 0 goto label02;

        $r12 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r12.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r12;

     label02:
        r2 = newarray (double)[i0];

        i4 = 0;

     label03:
        if i4 >= i0 goto label04;

        $r11 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        $i2 = $r11[i4];

        $d11 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double getEntry(int)>($i2);

        r2[i4] = $d11;

        i4 = i4 + 1;

        goto label03;

     label04:
        i5 = 0;

     label05:
        if i5 >= i0 goto label08;

        d12 = r2[i5];

        i6 = i5 + 1;

     label06:
        if i6 >= i0 goto label07;

        $d9 = r2[i6];

        $r9 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r10 = $r9[i6];

        $d7 = $r10[i5];

        $d8 = d12 * $d7;

        $d10 = $d9 - $d8;

        r2[i6] = $d10;

        i6 = i6 + 1;

        goto label06;

     label07:
        i5 = i5 + 1;

        goto label05;

     label08:
        i7 = i0 - 1;

     label09:
        if i7 < 0 goto label12;

        $d1 = r2[i7];

        $r5 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r6 = $r5[i7];

        $d0 = $r6[i7];

        $d2 = $d1 / $d0;

        r2[i7] = $d2;

        d13 = r2[i7];

        i8 = 0;

     label10:
        if i8 >= i7 goto label11;

        $d5 = r2[i8];

        $r7 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r8 = $r7[i8];

        $d3 = $r8[i7];

        $d4 = d13 * $d3;

        $d6 = $d5 - $d4;

        r2[i8] = $d6;

        i8 = i8 + 1;

        goto label10;

     label11:
        i7 = i7 + -1;

        goto label09;

     label12:
        $r4 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r4.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r4;
    }

    public org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        int i0, i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        double[][] r2, $r6, $r8, $r10;
        double[] r3, $r7, $r9, $r11, r15, r16, r17, r18;
        int[] $r4, $r12;
        boolean $z0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11, d12, d13;
        org.apache.commons.math3.linear.SingularMatrixException $r13;
        org.apache.commons.math3.exception.DimensionMismatchException $r14;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r4 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i0 = lengthof $r4;

        $i2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        if $i2 == i0 goto label01;

        $r14 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        specialinvoke $r14.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r14;

     label01:
        $z0 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: boolean singular>;

        if $z0 == 0 goto label02;

        $r13 = new org.apache.commons.math3.linear.SingularMatrixException;

        specialinvoke $r13.<org.apache.commons.math3.linear.SingularMatrixException: void <init>()>();

        throw $r13;

     label02:
        i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        i4 = 0;

     label03:
        if i4 >= i0 goto label06;

        r15 = r2[i4];

        $r12 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        i5 = $r12[i4];

        i6 = 0;

     label04:
        if i6 >= i1 goto label05;

        $d10 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i5, i6);

        r15[i6] = $d10;

        i6 = i6 + 1;

        goto label04;

     label05:
        i4 = i4 + 1;

        goto label03;

     label06:
        i7 = 0;

     label07:
        if i7 >= i0 goto label12;

        r16 = r2[i7];

        i8 = i7 + 1;

     label08:
        if i8 >= i0 goto label11;

        r17 = r2[i8];

        $r10 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r11 = $r10[i8];

        d11 = $r11[i7];

        i9 = 0;

     label09:
        if i9 >= i1 goto label10;

        $d8 = r17[i9];

        $d6 = r16[i9];

        $d7 = $d6 * d11;

        $d9 = $d8 - $d7;

        r17[i9] = $d9;

        i9 = i9 + 1;

        goto label09;

     label10:
        i8 = i8 + 1;

        goto label08;

     label11:
        i7 = i7 + 1;

        goto label07;

     label12:
        i10 = i0 - 1;

     label13:
        if i10 < 0 goto label20;

        r18 = r2[i10];

        $r6 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r7 = $r6[i10];

        d12 = $r7[i10];

        i11 = 0;

     label14:
        if i11 >= i1 goto label15;

        $d4 = r18[i11];

        $d5 = $d4 / d12;

        r18[i11] = $d5;

        i11 = i11 + 1;

        goto label14;

     label15:
        i12 = 0;

     label16:
        if i12 >= i10 goto label19;

        r3 = r2[i12];

        $r8 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: double[][] lu>;

        $r9 = $r8[i12];

        d13 = $r9[i10];

        i13 = 0;

     label17:
        if i13 >= i1 goto label18;

        $d2 = r3[i13];

        $d0 = r18[i13];

        $d1 = $d0 * d13;

        $d3 = $d2 - $d1;

        r3[i13] = $d3;

        i13 = i13 + 1;

        goto label17;

     label18:
        i12 = i12 + 1;

        goto label16;

     label19:
        i10 = i10 + -1;

        goto label13;

     label20:
        $r5 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r5.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r5;
    }

    public org.apache.commons.math3.linear.RealMatrix getInverse()
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        int[] $r1;
        int $i0;
        org.apache.commons.math3.linear.RealMatrix $r2, $r3;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        $r1 = r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: int[] pivot>;

        $i0 = lengthof $r1;

        $r2 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealIdentityMatrix(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: org.apache.commons.math3.linear.RealMatrix solve(org.apache.commons.math3.linear.RealMatrix)>($r2);

        return $r3;
    }

    void <init>(double[][], int[], boolean, org.apache.commons.math3.linear.LUDecomposition$1)
    {
        org.apache.commons.math3.linear.LUDecomposition$Solver r0;
        double[][] r1;
        int[] r2;
        boolean z0;
        org.apache.commons.math3.linear.LUDecomposition$1 r3;

        r0 := @this: org.apache.commons.math3.linear.LUDecomposition$Solver;

        r1 := @parameter0: double[][];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: org.apache.commons.math3.linear.LUDecomposition$1;

        specialinvoke r0.<org.apache.commons.math3.linear.LUDecomposition$Solver: void <init>(double[][],int[],boolean)>(r1, r2, z0);

        return;
    }
}
