public class com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver extends java.lang.Object
{
    private static final double RHO2;
    private static final double RHO;
    private static final double RHO_STAR;
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL;
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static double[] getCallDualDeltaGamma(double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, d286, d287, d288, d289, d290, d291;
        double[] r0, r1, r2, r3, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, $r21;
        byte $b0, $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        r0 = newarray (double)[3];

        $b0 = d3 cmpl d2;

        if $b0 < 0 goto label1;

        $d277 = d3 * d4;

        d286 = staticinvoke <java.lang.Math: double exp(double)>($d277);

        d287 = d0 * d286;

        $d278 = neg d2;

        $d279 = $d278 * d4;

        d288 = staticinvoke <java.lang.Math: double exp(double)>($d279);

        $d280 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>(d287, d1, d4, d5, 1);

        $d281 = d288 * $d280;

        r0[0] = $d281;

        $d282 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d287, d1, d4, d5, 1);

        $d283 = d288 * $d282;

        r0[1] = $d283;

        $d284 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualGamma(double,double,double,double)>(d287, d1, d4, d5);

        $d285 = d288 * $d284;

        r0[2] = $d285;

        return r0;

     label1:
        d289 = d5 * d5;

        $d46 = d3 / d289;

        d290 = 0.5 - $d46;

        $d49 = d290 * d290;

        $d47 = 2.0 * d2;

        $d48 = $d47 / d289;

        $d50 = $d49 + $d48;

        $d51 = staticinvoke <java.lang.Math: double sqrt(double)>($d50);

        d291 = d290 + $d51;

        r1 = newarray (double)[3];

        $d53 = d2 * d1;

        $d52 = d2 - d3;

        $d54 = staticinvoke <java.lang.Math: double abs(double)>($d52);

        $d55 = $d53 / $d54;

        $d56 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d55);

        r1[0] = $d56;

        $d57 = d2 - d3;

        $d58 = staticinvoke <java.lang.Math: double abs(double)>($d57);

        $d59 = d2 / $d58;

        $d60 = staticinvoke <java.lang.Math: double max(double,double)>(1.0, $d59);

        r1[1] = $d60;

        r1[2] = 0.0;

        r2 = newarray (double)[3];

        $d62 = d291 * d1;

        $d61 = d291 - 1.0;

        $d63 = $d62 / $d61;

        r2[0] = $d63;

        $d64 = d291 - 1.0;

        $d65 = d291 / $d64;

        r2[1] = $d65;

        r2[2] = 0.0;

        r3 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getHDualDeltaGamma(double,double,double,double,double[],double[])>(d3, d4, d5, d1, r1, r2);

        r4 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getXDualDeltaGamma(double[],double[],double[])>(r1, r2, r3);

        $d66 = r4[0];

        $b1 = d0 cmpl $d66;

        if $b1 < 0 goto label2;

        $d276 = d0 - d1;

        r0[0] = $d276;

        r0[1] = -1.0;

        r0[2] = 0.0;

        return r0;

     label2:
        $r21 = newarray (double)[3];

        $r21[0] = d1;

        $r21[1] = 1.0;

        $r21[2] = 0.0;

        $d67 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2>;

        d6 = $d67 * d4;

        r6 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getHDualDeltaGamma(double,double,double,double,double[],double[])>(d3, d6, d5, d1, r1, r2);

        r7 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getXDualDeltaGamma(double[],double[],double[])>(r1, r2, r6);

        r8 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getAlphaDualDeltaGamma(double[],double,double)>(r7, d291, d1);

        r9 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getAlphaDualDeltaGamma(double[],double,double)>(r4, d291, d1);

        r10 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, d291, r4, r4, d2, d3, d5);

        r11 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, 1.0, r4, r4, d2, d3, d5);

        r12 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, 1.0, r7, r4, d2, d3, d5);

        r13 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, 0.0, r4, r4, d2, d3, d5);

        r14 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, 0.0, r7, r4, d2, d3, d5);

        r15 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPhiDualDeltaGamma(double,double,double,double[],double[],double,double,double)>(d0, d4, d291, r7, r4, d2, d3, d5);

        r16 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPsiDualDeltaGamma(double,double,double,double[],double[],double[],double,double,double)>(d0, d4, d291, r7, r4, r7, d2, d3, d5);

        r17 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPsiDualDeltaGamma(double,double,double,double[],double[],double[],double,double,double)>(d0, d4, 1.0, r7, r4, r7, d2, d3, d5);

        r18 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPsiDualDeltaGamma(double,double,double,double[],double[],double[],double,double,double)>(d0, d4, 1.0, $r21, r4, r7, d2, d3, d5);

        r19 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPsiDualDeltaGamma(double,double,double,double[],double[],double[],double,double,double)>(d0, d4, 0.0, r7, r4, r7, d2, d3, d5);

        r20 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getPsiDualDeltaGamma(double,double,double,double[],double[],double[],double,double,double)>(d0, d4, 0.0, $r21, r4, r7, d2, d3, d5);

        $d68 = r9[0];

        $d69 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d291);

        d7 = $d68 * $d69;

        $d70 = r9[0];

        $d72 = neg $d70;

        $d71 = r10[0];

        d8 = $d72 * $d71;

        d9 = r11[0];

        $d73 = r12[0];

        d10 = neg $d73;

        $d74 = $r21[0];

        $d76 = neg $d74;

        $d75 = r13[0];

        d11 = $d76 * $d75;

        $d78 = $r21[0];

        $d77 = r14[0];

        d12 = $d78 * $d77;

        $d80 = r8[0];

        $d79 = r15[0];

        d13 = $d80 * $d79;

        $d81 = r8[0];

        $d83 = neg $d81;

        $d82 = r16[0];

        d14 = $d83 * $d82;

        d15 = r17[0];

        $d84 = r18[0];

        d16 = neg $d84;

        $d85 = $r21[0];

        $d87 = neg $d85;

        $d86 = r19[0];

        d17 = $d87 * $d86;

        $d89 = $r21[0];

        $d88 = r20[0];

        d18 = $d89 * $d88;

        $d90 = d7 + d8;

        $d91 = $d90 + d9;

        $d92 = $d91 + d10;

        $d93 = $d92 + d11;

        $d94 = $d93 + d12;

        $d95 = $d94 + d13;

        $d96 = $d95 + d14;

        $d97 = $d96 + d15;

        $d98 = $d97 + d16;

        $d99 = $d98 + d17;

        d19 = $d99 + d18;

        $d100 = r9[1];

        $d101 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d291);

        d20 = $d100 * $d101;

        $d102 = r9[1];

        $d104 = neg $d102;

        $d103 = r10[0];

        $d108 = $d104 * $d103;

        $d106 = r9[0];

        $d105 = r10[1];

        $d107 = $d106 * $d105;

        d21 = $d108 - $d107;

        d22 = r11[1];

        $d109 = r12[1];

        d23 = neg $d109;

        $d110 = $r21[1];

        $d112 = neg $d110;

        $d111 = r13[0];

        $d116 = $d112 * $d111;

        $d114 = $r21[0];

        $d113 = r13[1];

        $d115 = $d114 * $d113;

        d24 = $d116 - $d115;

        $d118 = $r21[1];

        $d117 = r14[0];

        $d122 = $d118 * $d117;

        $d120 = $r21[0];

        $d119 = r14[1];

        $d121 = $d120 * $d119;

        d25 = $d122 + $d121;

        $d124 = r8[1];

        $d123 = r15[0];

        $d128 = $d124 * $d123;

        $d126 = r8[0];

        $d125 = r15[1];

        $d127 = $d126 * $d125;

        d26 = $d128 + $d127;

        $d129 = r8[1];

        $d131 = neg $d129;

        $d130 = r16[0];

        $d135 = $d131 * $d130;

        $d133 = r8[0];

        $d132 = r16[1];

        $d134 = $d133 * $d132;

        d27 = $d135 - $d134;

        d28 = r17[1];

        $d136 = r18[1];

        d29 = neg $d136;

        $d137 = $r21[1];

        $d139 = neg $d137;

        $d138 = r19[0];

        $d143 = $d139 * $d138;

        $d141 = $r21[0];

        $d140 = r19[1];

        $d142 = $d141 * $d140;

        d30 = $d143 - $d142;

        $d145 = $r21[0];

        $d144 = r20[1];

        $d149 = $d145 * $d144;

        $d147 = $r21[1];

        $d146 = r20[0];

        $d148 = $d147 * $d146;

        d31 = $d149 + $d148;

        $d150 = d20 + d21;

        $d151 = $d150 + d22;

        $d152 = $d151 + d23;

        $d153 = $d152 + d24;

        $d154 = $d153 + d25;

        $d155 = $d154 + d26;

        $d156 = $d155 + d27;

        $d157 = $d156 + d28;

        $d158 = $d157 + d29;

        $d159 = $d158 + d30;

        d32 = $d159 + d31;

        $d160 = r9[2];

        $d161 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d291);

        d33 = $d160 * $d161;

        $d162 = r9[2];

        $d164 = neg $d162;

        $d163 = r10[0];

        $d168 = $d164 * $d163;

        $d166 = r9[0];

        $d165 = r10[2];

        $d167 = $d166 * $d165;

        $d172 = $d168 - $d167;

        $d170 = r9[1];

        $d169 = r10[1];

        $d171 = $d170 * $d169;

        $d176 = $d172 - $d171;

        $d174 = r9[1];

        $d173 = r10[1];

        $d175 = $d174 * $d173;

        d34 = $d176 - $d175;

        d35 = r11[2];

        $d177 = r12[2];

        d36 = neg $d177;

        $d178 = $r21[2];

        $d180 = neg $d178;

        $d179 = r13[0];

        $d184 = $d180 * $d179;

        $d182 = $r21[0];

        $d181 = r13[2];

        $d183 = $d182 * $d181;

        $d188 = $d184 - $d183;

        $d186 = $r21[1];

        $d185 = r13[1];

        $d187 = $d186 * $d185;

        $d192 = $d188 - $d187;

        $d190 = $r21[1];

        $d189 = r13[1];

        $d191 = $d190 * $d189;

        d37 = $d192 - $d191;

        $d194 = $r21[2];

        $d193 = r14[0];

        $d198 = $d194 * $d193;

        $d196 = $r21[0];

        $d195 = r14[2];

        $d197 = $d196 * $d195;

        $d202 = $d198 + $d197;

        $d200 = $r21[1];

        $d199 = r14[1];

        $d201 = $d200 * $d199;

        $d206 = $d202 + $d201;

        $d204 = $r21[1];

        $d203 = r14[1];

        $d205 = $d204 * $d203;

        d38 = $d206 + $d205;

        $d208 = r8[2];

        $d207 = r15[0];

        $d212 = $d208 * $d207;

        $d210 = r8[0];

        $d209 = r15[2];

        $d211 = $d210 * $d209;

        $d216 = $d212 + $d211;

        $d214 = r8[1];

        $d213 = r15[1];

        $d215 = $d214 * $d213;

        $d220 = $d216 + $d215;

        $d218 = r8[1];

        $d217 = r15[1];

        $d219 = $d218 * $d217;

        d39 = $d220 + $d219;

        $d221 = r8[2];

        $d223 = neg $d221;

        $d222 = r16[0];

        $d227 = $d223 * $d222;

        $d225 = r8[0];

        $d224 = r16[2];

        $d226 = $d225 * $d224;

        $d231 = $d227 - $d226;

        $d229 = r8[1];

        $d228 = r16[1];

        $d230 = $d229 * $d228;

        $d235 = $d231 - $d230;

        $d233 = r8[1];

        $d232 = r16[1];

        $d234 = $d233 * $d232;

        d40 = $d235 - $d234;

        d41 = r17[2];

        $d236 = r18[2];

        d42 = neg $d236;

        $d237 = $r21[2];

        $d239 = neg $d237;

        $d238 = r19[0];

        $d243 = $d239 * $d238;

        $d241 = $r21[0];

        $d240 = r19[2];

        $d242 = $d241 * $d240;

        $d247 = $d243 - $d242;

        $d245 = $r21[1];

        $d244 = r19[1];

        $d246 = $d245 * $d244;

        $d251 = $d247 - $d246;

        $d249 = $r21[1];

        $d248 = r19[1];

        $d250 = $d249 * $d248;

        d43 = $d251 - $d250;

        $d253 = $r21[1];

        $d252 = r20[1];

        $d257 = $d253 * $d252;

        $d255 = $r21[1];

        $d254 = r20[1];

        $d256 = $d255 * $d254;

        $d261 = $d257 + $d256;

        $d259 = $r21[0];

        $d258 = r20[2];

        $d260 = $d259 * $d258;

        $d265 = $d261 + $d260;

        $d263 = $r21[2];

        $d262 = r20[0];

        $d264 = $d263 * $d262;

        d44 = $d265 + $d264;

        $d266 = d33 + d34;

        $d267 = $d266 + d35;

        $d268 = $d267 + d36;

        $d269 = $d268 + d37;

        $d270 = $d269 + d38;

        $d271 = $d270 + d39;

        $d272 = $d271 + d40;

        $d273 = $d272 + d41;

        $d274 = $d273 + d42;

        $d275 = $d274 + d43;

        d45 = $d275 + d44;

        r0[0] = d19;

        r0[1] = d32;

        r0[2] = d45;

        return r0;
    }

    static double[] getPhiDualDeltaGamma(double, double, double, double[], double[], double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169;
        double[] r0, r1, r2;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        java.lang.Double $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: double[];

        r1 := @parameter4: double[];

        d3 := @parameter5: double;

        d4 := @parameter6: double;

        d5 := @parameter7: double;

        $d42 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2>;

        d6 = $d42 * d1;

        d7 = d5 * d5;

        $d43 = staticinvoke <java.lang.Math: double sqrt(double)>(d6);

        d8 = d5 * $d43;

        $d45 = neg d3;

        $d44 = d2 * d4;

        $d50 = $d45 + $d44;

        $d47 = 0.5 * d2;

        $d46 = d2 - 1.0;

        $d48 = $d47 * $d46;

        $d49 = $d48 * d7;

        d9 = $d50 + $d49;

        $d51 = 2.0 * d4;

        $d53 = $d51 / d7;

        $d52 = 2.0 * d2;

        $d54 = $d53 + $d52;

        d10 = $d54 - 1.0;

        $d55 = d2 - 0.5;

        $d56 = $d55 * d5;

        $d57 = $d56 * d5;

        $d58 = d4 + $d57;

        d11 = $d58 * d6;

        d12 = r0[0];

        d13 = r1[0];

        d14 = d13 * d13;

        $d59 = d0 / d12;

        $d60 = staticinvoke <java.lang.Math: double log(double)>($d59);

        $d61 = $d60 + d11;

        d15 = $d61 / d8;

        $d62 = d14 / d0;

        $d63 = $d62 / d12;

        $d64 = staticinvoke <java.lang.Math: double log(double)>($d63);

        $d65 = $d64 + d11;

        d16 = $d65 / d8;

        $r3 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d66 = neg d15;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d66);

        d17 = interfaceinvoke $r3.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r4);

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d67 = neg d16;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d67);

        d18 = interfaceinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r6);

        $d68 = d13 / d0;

        d19 = staticinvoke <java.lang.Math: double pow(double,double)>($d68, d10);

        d20 = d18 * d19;

        $d69 = d9 * d6;

        $d70 = staticinvoke <java.lang.Math: double exp(double)>($d69);

        $d71 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d73 = $d70 * $d71;

        $d72 = d17 - d20;

        d21 = $d73 * $d72;

        d22 = r0[1];

        d23 = r1[1];

        $d74 = 2.0 * d13;

        d24 = $d74 * d23;

        $d75 = -1.0 * d22;

        $d76 = $d75 / d12;

        d25 = $d76 / d8;

        $d78 = d24 / d14;

        $d77 = d22 / d12;

        $d79 = $d78 - $d77;

        d26 = $d79 / d8;

        $r7 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d80 = neg d15;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d80);

        $d81 = interfaceinvoke $r7.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r8);

        $d82 = neg d25;

        d27 = $d81 * $d82;

        $r9 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d83 = neg d16;

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d83);

        $d84 = interfaceinvoke $r9.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r10);

        $d85 = neg d26;

        d28 = $d84 * $d85;

        $d87 = d13 / d0;

        $d86 = d10 - 1.0;

        $d88 = staticinvoke <java.lang.Math: double pow(double,double)>($d87, $d86);

        $d89 = d10 * $d88;

        $d90 = $d89 / d0;

        d29 = $d90 * d23;

        $d92 = d28 * d19;

        $d91 = d18 * d29;

        d30 = $d92 + $d91;

        $d93 = d9 * d6;

        $d94 = staticinvoke <java.lang.Math: double exp(double)>($d93);

        $d95 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d97 = $d94 * $d95;

        $d96 = d27 - d30;

        d31 = $d97 * $d96;

        d32 = r0[2];

        d33 = r1[2];

        $d98 = 2.0 * d23;

        $d101 = $d98 * d23;

        $d99 = 2.0 * d13;

        $d100 = $d99 * d33;

        d34 = $d101 + $d100;

        $d102 = -1.0 * d32;

        $d103 = $d102 / d12;

        $d109 = $d103 / d8;

        $d104 = 1.0 * d22;

        $d105 = $d104 * d22;

        $d106 = $d105 / d12;

        $d107 = $d106 / d12;

        $d108 = $d107 / d8;

        d35 = $d109 + $d108;

        $d111 = d34 / d14;

        $d110 = d32 / d12;

        $d112 = $d111 - $d110;

        $d121 = $d112 / d8;

        $d113 = d24 * d24;

        $d114 = $d113 / d14;

        $d118 = $d114 / d14;

        $d115 = d22 * d22;

        $d116 = $d115 / d12;

        $d117 = $d116 / d12;

        $d119 = $d118 - $d117;

        $d120 = $d119 / d8;

        d36 = $d121 - $d120;

        $r11 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d122 = neg d15;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d122);

        $d123 = interfaceinvoke $r11.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r12);

        $d124 = neg d35;

        $d126 = $d123 * $d124;

        $r13 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d125 = neg d15;

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d125);

        $d127 = interfaceinvoke $r13.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r14);

        $d129 = $d127 * d15;

        $d128 = neg d25;

        $d131 = $d129 * $d128;

        $d130 = neg d25;

        $d132 = $d131 * $d130;

        d37 = $d126 + $d132;

        $r15 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d133 = neg d16;

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d133);

        $d134 = interfaceinvoke $r15.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r16);

        $d135 = neg d36;

        $d137 = $d134 * $d135;

        $r17 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d136 = neg d16;

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d136);

        $d138 = interfaceinvoke $r17.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r18);

        $d140 = $d138 * d16;

        $d139 = neg d26;

        $d142 = $d140 * $d139;

        $d141 = neg d26;

        $d143 = $d142 * $d141;

        d38 = $d137 + $d143;

        $d145 = d13 / d0;

        $d144 = d10 - 1.0;

        $d146 = staticinvoke <java.lang.Math: double pow(double,double)>($d145, $d144);

        $d147 = d10 * $d146;

        $d148 = $d147 / d0;

        $d152 = $d148 * d33;

        $d149 = d10 - 1.0;

        $d153 = d10 * $d149;

        $d151 = d13 / d0;

        $d150 = d10 - 2.0;

        $d154 = staticinvoke <java.lang.Math: double pow(double,double)>($d151, $d150);

        $d155 = $d153 * $d154;

        $d156 = $d155 / d0;

        $d157 = $d156 / d0;

        $d158 = $d157 * d23;

        $d159 = $d158 * d23;

        d39 = $d152 + $d159;

        $d161 = d38 * d19;

        $d160 = d18 * d39;

        $d164 = $d161 + $d160;

        $d162 = 2.0 * d28;

        $d163 = $d162 * d29;

        d40 = $d164 + $d163;

        $d165 = d9 * d6;

        $d166 = staticinvoke <java.lang.Math: double exp(double)>($d165);

        $d167 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d169 = $d166 * $d167;

        $d168 = d37 - d40;

        d41 = $d169 * $d168;

        r2 = newarray (double)[3];

        r2[0] = d21;

        r2[1] = d31;

        r2[2] = d41;

        return r2;
    }

    static double[] getPsiDualDeltaGamma(double, double, double, double[], double[], double[], double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, $d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345, $d346, $d347, $d348, $d349, $d350, $d351, $d352, $d353, $d354, $d355, $d356, $d357, $d358, $d359, $d360, $d361, $d362, $d363, $d364, $d365, $d366, $d367, $d368, $d369, $d370, $d371, $d372, $d373, $d374, $d375, $d376, $d377, $d378, $d379, $d380, $d381, $d382, $d383, $d384, $d385, $d386, $d387, $d388, $d389, $d390, $d391, $d392, $d393, $d394, $d395, $d396, $d397, $d398, $d399, $d400, $d401, $d402, $d403, $d404, $d405, $d406, $d407, $d408, $d409, $d410, $d411, $d412, $d413, $d414, $d415, $d416, $d417, $d418, $d419, $d420, $d421, $d422, $d423, $d424, $d425, $d426, $d427, $d428, $d429, $d430, $d431, $d432, $d433, $d434, $d435, $d436, $d437, $d438, $d439, $d440, $d441, $d442, $d443, $d444, $d445, $d446, $d447, $d448, $d449, $d450, $d451, $d452, $d453, $d454, $d455, $d456, $d457, $d458, $d459, $d460, $d461, $d462, $d463, $d464, $d465, $d466, $d467, $d468, $d469, $d470, $d471, $d472, $d473, $d474, $d475, $d476, $d477, $d478, $d479, $d480, $d481, $d482, $d483, $d484, $d485, $d486, $d487, $d488, $d489, $d490, $d491, $d492, $d493, $d494, $d495, $d496, $d497, $d498, $d499, $d500, $d501, $d502, $d503, $d504, $d505, $d506, $d507, $d508, $d509, $d510;
        double[] r0, r1, r2, r3, $r4, $r6, $r8, $r10;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r5, $r7, $r9, $r11, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42;
        java.lang.Double $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r0 := @parameter3: double[];

        r1 := @parameter4: double[];

        r2 := @parameter5: double[];

        d3 := @parameter6: double;

        d4 := @parameter7: double;

        d5 := @parameter8: double;

        d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        d7 = d5 * d6;

        $d73 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2>;

        d8 = $d73 * d1;

        $d74 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        d9 = $d74 * d6;

        d10 = d5 * d9;

        d11 = d5 * d5;

        $d76 = neg d3;

        $d75 = d2 * d4;

        $d81 = $d76 + $d75;

        $d78 = 0.5 * d2;

        $d77 = d2 - 1.0;

        $d79 = $d78 * $d77;

        $d80 = $d79 * d11;

        d12 = $d81 + $d80;

        $d82 = 2.0 * d4;

        $d84 = $d82 / d11;

        $d83 = 2.0 * d2;

        $d85 = $d84 + $d83;

        d13 = $d85 - 1.0;

        $d86 = d2 - 0.5;

        $d87 = $d86 * d5;

        $d88 = $d87 * d5;

        $d89 = d4 + $d88;

        d14 = $d89 * d1;

        $d90 = d2 - 0.5;

        $d91 = $d90 * d5;

        $d92 = $d91 * d5;

        $d93 = d4 + $d92;

        d15 = $d93 * d8;

        d16 = r2[0];

        d17 = r1[0];

        d18 = r0[0];

        $d94 = d0 / d16;

        $d95 = staticinvoke <java.lang.Math: double log(double)>($d94);

        $d96 = $d95 + d15;

        d19 = $d96 / d10;

        $d97 = d17 * d17;

        $d98 = $d97 / d0;

        $d99 = $d98 / d16;

        $d100 = staticinvoke <java.lang.Math: double log(double)>($d99);

        $d101 = $d100 + d15;

        d20 = $d101 / d10;

        $d102 = d0 / d16;

        $d103 = staticinvoke <java.lang.Math: double log(double)>($d102);

        $d104 = $d103 - d15;

        d21 = $d104 / d10;

        $d105 = d17 * d17;

        $d106 = $d105 / d0;

        $d107 = $d106 / d16;

        $d108 = staticinvoke <java.lang.Math: double log(double)>($d107);

        $d109 = $d108 - d15;

        d22 = $d109 / d10;

        $d110 = d0 / d18;

        $d111 = staticinvoke <java.lang.Math: double log(double)>($d110);

        $d112 = $d111 + d14;

        d23 = $d112 / d7;

        $d113 = d17 * d17;

        $d114 = $d113 / d0;

        $d115 = $d114 / d18;

        $d116 = staticinvoke <java.lang.Math: double log(double)>($d115);

        $d117 = $d116 + d14;

        d24 = $d117 / d7;

        $d118 = d16 * d16;

        $d119 = $d118 / d0;

        $d120 = $d119 / d18;

        $d121 = staticinvoke <java.lang.Math: double log(double)>($d120);

        $d122 = $d121 + d14;

        d25 = $d122 / d7;

        $d123 = d16 * d16;

        $d124 = $d123 * d0;

        $d125 = $d124 / d18;

        $d126 = $d125 / d17;

        $d127 = $d126 / d17;

        $d128 = staticinvoke <java.lang.Math: double log(double)>($d127);

        $d129 = $d128 + d14;

        d26 = $d129 / d7;

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r4 = newarray (double)[3];

        $d130 = neg d19;

        $r4[0] = $d130;

        $d131 = neg d23;

        $r4[1] = $d131;

        $d132 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $r4[2] = $d132;

        d27 = interfaceinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r4);

        $r7 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r6 = newarray (double)[3];

        $d133 = neg d20;

        $r6[0] = $d133;

        $d134 = neg d24;

        $r6[1] = $d134;

        $d135 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $r6[2] = $d135;

        d28 = interfaceinvoke $r7.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r6);

        $r9 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r8 = newarray (double)[3];

        $d136 = neg d21;

        $r8[0] = $d136;

        $d137 = neg d25;

        $r8[1] = $d137;

        $d138 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d139 = neg $d138;

        $r8[2] = $d139;

        d29 = interfaceinvoke $r9.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r8);

        $r11 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r10 = newarray (double)[3];

        $d140 = neg d22;

        $r10[0] = $d140;

        $d141 = neg d26;

        $r10[1] = $d141;

        $d142 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d143 = neg $d142;

        $r10[2] = $d143;

        d30 = interfaceinvoke $r11.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r10);

        $d144 = d16 / d0;

        d31 = staticinvoke <java.lang.Math: double pow(double,double)>($d144, d13);

        $d145 = d17 / d0;

        d32 = staticinvoke <java.lang.Math: double pow(double,double)>($d145, d13);

        $d146 = d16 / d17;

        d33 = staticinvoke <java.lang.Math: double pow(double,double)>($d146, d13);

        $d147 = d12 * d1;

        $d148 = staticinvoke <java.lang.Math: double exp(double)>($d147);

        $d149 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d156 = $d148 * $d149;

        $d150 = d32 * d28;

        $d152 = d27 - $d150;

        $d151 = d31 * d29;

        $d154 = $d152 - $d151;

        $d153 = d33 * d30;

        $d155 = $d154 + $d153;

        d34 = $d156 * $d155;

        d35 = r2[1];

        d36 = r1[1];

        d37 = r0[1];

        $d157 = neg d35;

        $d158 = $d157 / d16;

        d38 = $d158 / d10;

        $d159 = 2.0 * d36;

        $d161 = $d159 / d17;

        $d160 = d35 / d16;

        $d162 = $d161 - $d160;

        d39 = $d162 / d10;

        $d163 = neg d35;

        $d164 = $d163 / d16;

        d40 = $d164 / d10;

        $d165 = 2.0 * d36;

        $d167 = $d165 / d17;

        $d166 = d35 / d16;

        $d168 = $d167 - $d166;

        d41 = $d168 / d10;

        $d169 = neg d37;

        $d170 = $d169 / d18;

        d42 = $d170 / d7;

        $d171 = 2.0 * d36;

        $d173 = $d171 / d17;

        $d172 = d37 / d18;

        $d174 = $d173 - $d172;

        d43 = $d174 / d7;

        $d175 = 2.0 * d35;

        $d177 = $d175 / d16;

        $d176 = d37 / d18;

        $d178 = $d177 - $d176;

        d44 = $d178 / d7;

        $d179 = 2.0 * d35;

        $d181 = $d179 / d16;

        $d180 = d37 / d18;

        $d184 = $d181 - $d180;

        $d182 = 2.0 * d36;

        $d183 = $d182 / d17;

        $d185 = $d184 - $d183;

        d45 = $d185 / d7;

        $r12 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d186 = neg d19;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d186);

        $d187 = interfaceinvoke $r12.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r13);

        $d194 = neg $d187;

        $r14 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d188 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d189 = $d188 * d19;

        $d190 = d23 - $d189;

        $d192 = neg $d190;

        $d191 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d193 = $d192 / $d191;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d193);

        $d195 = interfaceinvoke $r14.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r15);

        $d196 = $d194 * $d195;

        $d198 = $d196 * d38;

        $r16 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d197 = neg d23;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d197);

        $d199 = interfaceinvoke $r16.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r17);

        $r18 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d200 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d201 = $d200 * d23;

        $d202 = d19 - $d201;

        $d204 = neg $d202;

        $d203 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d205 = $d204 / $d203;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d205);

        $d206 = interfaceinvoke $r18.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r19);

        $d207 = $d199 * $d206;

        $d208 = $d207 * d42;

        d46 = $d198 - $d208;

        $r20 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d209 = neg d20;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d209);

        $d210 = interfaceinvoke $r20.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r21);

        $d217 = neg $d210;

        $r22 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d211 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d212 = $d211 * d20;

        $d213 = d24 - $d212;

        $d215 = neg $d213;

        $d214 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d216 = $d215 / $d214;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d216);

        $d218 = interfaceinvoke $r22.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r23);

        $d219 = $d217 * $d218;

        $d221 = $d219 * d39;

        $r24 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d220 = neg d24;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d220);

        $d222 = interfaceinvoke $r24.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r25);

        $r26 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d223 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d224 = $d223 * d24;

        $d225 = d20 - $d224;

        $d227 = neg $d225;

        $d226 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d228 = $d227 / $d226;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d228);

        $d229 = interfaceinvoke $r26.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r27);

        $d230 = $d222 * $d229;

        $d231 = $d230 * d43;

        d47 = $d221 - $d231;

        $r28 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d232 = neg d21;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d232);

        $d233 = interfaceinvoke $r28.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r29);

        $d240 = neg $d233;

        $r30 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d234 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d235 = $d234 * d21;

        $d236 = d25 + $d235;

        $d238 = neg $d236;

        $d237 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d239 = $d238 / $d237;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d239);

        $d241 = interfaceinvoke $r30.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r31);

        $d242 = $d240 * $d241;

        $d244 = $d242 * d40;

        $r32 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d243 = neg d25;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d243);

        $d245 = interfaceinvoke $r32.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r33);

        $r34 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d246 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d247 = $d246 * d25;

        $d248 = d21 + $d247;

        $d250 = neg $d248;

        $d249 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d251 = $d250 / $d249;

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d251);

        $d252 = interfaceinvoke $r34.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r35);

        $d253 = $d245 * $d252;

        $d254 = $d253 * d44;

        d48 = $d244 - $d254;

        $r36 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d255 = neg d22;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d255);

        $d256 = interfaceinvoke $r36.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r37);

        $d263 = neg $d256;

        $r38 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d257 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d258 = $d257 * d22;

        $d259 = d26 + $d258;

        $d261 = neg $d259;

        $d260 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d262 = $d261 / $d260;

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d262);

        $d264 = interfaceinvoke $r38.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r39);

        $d265 = $d263 * $d264;

        $d267 = $d265 * d41;

        $r40 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d266 = neg d26;

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d266);

        $d268 = interfaceinvoke $r40.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r41);

        $r42 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d269 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d270 = $d269 * d26;

        $d271 = d22 + $d270;

        $d273 = neg $d271;

        $d272 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d274 = $d273 / $d272;

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d274);

        $d275 = interfaceinvoke $r42.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r43);

        $d276 = $d268 * $d275;

        $d277 = $d276 * d45;

        d49 = $d267 - $d277;

        $d279 = d16 / d0;

        $d278 = d13 - 1.0;

        $d280 = staticinvoke <java.lang.Math: double pow(double,double)>($d279, $d278);

        $d281 = $d280 * d13;

        $d282 = $d281 * d35;

        d50 = $d282 / d0;

        $d284 = d17 / d0;

        $d283 = d13 - 1.0;

        $d285 = staticinvoke <java.lang.Math: double pow(double,double)>($d284, $d283);

        $d286 = $d285 * d13;

        $d287 = $d286 * d36;

        d51 = $d287 / d0;

        $d289 = d16 / d17;

        $d288 = d13 - 1.0;

        $d290 = staticinvoke <java.lang.Math: double pow(double,double)>($d289, $d288);

        $d296 = $d290 * d13;

        $d294 = d35 / d17;

        $d291 = d16 * d36;

        $d292 = $d291 / d17;

        $d293 = $d292 / d17;

        $d295 = $d294 - $d293;

        d52 = $d296 * $d295;

        $d297 = d12 * d1;

        $d298 = staticinvoke <java.lang.Math: double exp(double)>($d297);

        $d299 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d312 = $d298 * $d299;

        $d300 = d51 * d28;

        $d302 = d46 - $d300;

        $d301 = d32 * d47;

        $d304 = $d302 - $d301;

        $d303 = d50 * d29;

        $d306 = $d304 - $d303;

        $d305 = d31 * d48;

        $d308 = $d306 - $d305;

        $d307 = d52 * d30;

        $d310 = $d308 + $d307;

        $d309 = d33 * d49;

        $d311 = $d310 + $d309;

        d53 = $d312 * $d311;

        d54 = r2[2];

        d55 = r1[2];

        d56 = r0[2];

        $d313 = neg d54;

        $d314 = $d313 / d16;

        $d319 = $d314 / d10;

        $d315 = d35 * d35;

        $d316 = $d315 / d16;

        $d317 = $d316 / d16;

        $d318 = $d317 / d10;

        d57 = $d319 + $d318;

        $d320 = 2.0 * d55;

        $d322 = $d320 / d17;

        $d321 = d54 / d16;

        $d327 = $d322 - $d321;

        $d323 = 2.0 * d36;

        $d324 = $d323 * d36;

        $d325 = $d324 / d17;

        $d326 = $d325 / d17;

        $d331 = $d327 - $d326;

        $d328 = d35 * d35;

        $d329 = $d328 / d16;

        $d330 = $d329 / d16;

        $d332 = $d331 + $d330;

        d58 = $d332 / d10;

        $d333 = neg d54;

        $d337 = $d333 / d16;

        $d334 = d35 * d35;

        $d335 = $d334 / d16;

        $d336 = $d335 / d16;

        $d338 = $d337 + $d336;

        d59 = $d338 / d10;

        $d339 = 2.0 * d55;

        $d341 = $d339 / d17;

        $d340 = d54 / d16;

        $d346 = $d341 - $d340;

        $d342 = 2.0 * d36;

        $d343 = $d342 * d36;

        $d344 = $d343 / d17;

        $d345 = $d344 / d17;

        $d350 = $d346 - $d345;

        $d347 = d35 * d35;

        $d348 = $d347 / d16;

        $d349 = $d348 / d16;

        $d351 = $d350 + $d349;

        d60 = $d351 / d10;

        $d352 = neg d56;

        $d356 = $d352 / d18;

        $d353 = d37 * d37;

        $d354 = $d353 / d18;

        $d355 = $d354 / d18;

        $d357 = $d356 + $d355;

        d61 = $d357 / d7;

        $d358 = 2.0 * d55;

        $d360 = $d358 / d17;

        $d359 = d56 / d18;

        $d365 = $d360 - $d359;

        $d361 = 2.0 * d36;

        $d362 = $d361 * d36;

        $d363 = $d362 / d17;

        $d364 = $d363 / d17;

        $d369 = $d365 - $d364;

        $d366 = d37 * d37;

        $d367 = $d366 / d18;

        $d368 = $d367 / d18;

        $d370 = $d369 + $d368;

        d62 = $d370 / d7;

        $d371 = 2.0 * d54;

        $d373 = $d371 / d16;

        $d372 = d56 / d18;

        $d378 = $d373 - $d372;

        $d374 = 2.0 * d35;

        $d375 = $d374 * d35;

        $d376 = $d375 / d16;

        $d377 = $d376 / d16;

        $d382 = $d378 - $d377;

        $d379 = d37 * d37;

        $d380 = $d379 / d18;

        $d381 = $d380 / d18;

        $d383 = $d382 + $d381;

        d63 = $d383 / d7;

        $d384 = 2.0 * d54;

        $d386 = $d384 / d16;

        $d385 = d56 / d18;

        $d389 = $d386 - $d385;

        $d387 = 2.0 * d55;

        $d388 = $d387 / d17;

        $d394 = $d389 - $d388;

        $d390 = 2.0 * d35;

        $d391 = $d390 * d35;

        $d392 = $d391 / d16;

        $d393 = $d392 / d16;

        $d398 = $d394 - $d393;

        $d395 = d37 * d37;

        $d396 = $d395 / d18;

        $d397 = $d396 / d18;

        $d403 = $d398 + $d397;

        $d399 = 2.0 * d36;

        $d400 = $d399 * d36;

        $d401 = $d400 / d17;

        $d402 = $d401 / d17;

        $d404 = $d403 + $d402;

        d64 = $d404 / d7;

        $d405 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        d65 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double getMdd(double,double,double,double,double,double,double)>(d19, d38, d57, d23, d42, d61, $d405);

        $d406 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        d66 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double getMdd(double,double,double,double,double,double,double)>(d20, d39, d58, d24, d43, d62, $d406);

        $d407 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d408 = neg $d407;

        d67 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double getMdd(double,double,double,double,double,double,double)>(d21, d40, d59, d25, d44, d63, $d408);

        $d409 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO>;

        $d410 = neg $d409;

        d68 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double getMdd(double,double,double,double,double,double,double)>(d22, d41, d60, d26, d45, d64, $d410);

        $d412 = d16 / d0;

        $d411 = d13 - 1.0;

        $d413 = staticinvoke <java.lang.Math: double pow(double,double)>($d412, $d411);

        $d414 = $d413 * d13;

        $d415 = $d414 * d54;

        $d418 = $d415 / d0;

        $d417 = d16 / d0;

        $d416 = d13 - 2.0;

        $d419 = staticinvoke <java.lang.Math: double pow(double,double)>($d417, $d416);

        $d421 = $d419 * d13;

        $d420 = d13 - 1.0;

        $d422 = $d421 * $d420;

        $d423 = $d422 * d35;

        $d424 = $d423 / d0;

        $d425 = $d424 * d35;

        $d426 = $d425 / d0;

        d69 = $d418 + $d426;

        $d428 = d17 / d0;

        $d427 = d13 - 1.0;

        $d429 = staticinvoke <java.lang.Math: double pow(double,double)>($d428, $d427);

        $d430 = $d429 * d13;

        $d431 = $d430 * d55;

        $d434 = $d431 / d0;

        $d433 = d17 / d0;

        $d432 = d13 - 2.0;

        $d435 = staticinvoke <java.lang.Math: double pow(double,double)>($d433, $d432);

        $d437 = $d435 * d13;

        $d436 = d13 - 1.0;

        $d438 = $d437 * $d436;

        $d439 = $d438 * d36;

        $d440 = $d439 / d0;

        $d441 = $d440 * d36;

        $d442 = $d441 / d0;

        d70 = $d434 + $d442;

        $d444 = d16 / d17;

        $d443 = d13 - 1.0;

        $d445 = staticinvoke <java.lang.Math: double pow(double,double)>($d444, $d443);

        $d466 = $d445 * d13;

        $d449 = d54 / d17;

        $d446 = d16 * d55;

        $d447 = $d446 / d17;

        $d448 = $d447 / d17;

        $d453 = $d449 - $d448;

        $d450 = d35 * d36;

        $d451 = $d450 / d17;

        $d452 = $d451 / d17;

        $d457 = $d453 - $d452;

        $d454 = d35 * d36;

        $d455 = $d454 / d17;

        $d456 = $d455 / d17;

        $d464 = $d457 - $d456;

        $d458 = 2.0 * d16;

        $d459 = $d458 * d36;

        $d460 = $d459 * d36;

        $d461 = $d460 / d17;

        $d462 = $d461 / d17;

        $d463 = $d462 / d17;

        $d465 = $d464 + $d463;

        $d469 = $d466 * $d465;

        $d468 = d16 / d17;

        $d467 = d13 - 2.0;

        $d470 = staticinvoke <java.lang.Math: double pow(double,double)>($d468, $d467);

        $d472 = $d470 * d13;

        $d471 = d13 - 1.0;

        $d478 = $d472 * $d471;

        $d476 = d35 / d17;

        $d473 = d16 * d36;

        $d474 = $d473 / d17;

        $d475 = $d474 / d17;

        $d477 = $d476 - $d475;

        $d484 = $d478 * $d477;

        $d482 = d35 / d17;

        $d479 = d16 * d36;

        $d480 = $d479 / d17;

        $d481 = $d480 / d17;

        $d483 = $d482 - $d481;

        $d485 = $d484 * $d483;

        d71 = $d469 + $d485;

        $d486 = d12 * d1;

        $d487 = staticinvoke <java.lang.Math: double exp(double)>($d486);

        $d488 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d510 = $d487 * $d488;

        $d489 = d70 * d28;

        $d491 = d65 - $d489;

        $d490 = d32 * d66;

        $d494 = $d491 - $d490;

        $d492 = 2.0 * d51;

        $d493 = $d492 * d47;

        $d496 = $d494 - $d493;

        $d495 = d69 * d29;

        $d498 = $d496 - $d495;

        $d497 = d31 * d67;

        $d501 = $d498 - $d497;

        $d499 = 2.0 * d50;

        $d500 = $d499 * d48;

        $d503 = $d501 - $d500;

        $d502 = d71 * d30;

        $d505 = $d503 + $d502;

        $d504 = d33 * d68;

        $d508 = $d505 + $d504;

        $d506 = 2.0 * d52;

        $d507 = $d506 * d49;

        $d509 = $d508 + $d507;

        d72 = $d510 * $d509;

        r3 = newarray (double)[3];

        r3[0] = d34;

        r3[1] = d53;

        r3[2] = d72;

        return r3;
    }

    static double getMdd(double, double, double, double, double, double, double)
    {
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r0, $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        java.lang.Double $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $r0 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d7 = neg d0;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $d8 = interfaceinvoke $r0.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r1);

        $d14 = neg $d8;

        $r2 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d9 = d6 * d0;

        $d10 = d3 - $d9;

        $d12 = neg $d10;

        $d11 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d13 = $d12 / $d11;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        $d15 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r3);

        $d16 = $d14 * $d15;

        $d18 = $d16 * d2;

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d17 = neg d3;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d17);

        $d19 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r5);

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d20 = d6 * d3;

        $d21 = d0 - $d20;

        $d23 = neg $d21;

        $d22 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d24 = $d23 / $d22;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d24);

        $d25 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r7);

        $d26 = $d19 * $d25;

        $d27 = $d26 * d5;

        $d29 = $d18 - $d27;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d28 = neg d0;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d28);

        $d30 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $r10 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d31 = d6 * d0;

        $d32 = d3 - $d31;

        $d34 = neg $d32;

        $d33 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d35 = $d34 / $d33;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d35);

        $d36 = interfaceinvoke $r10.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r11);

        $d37 = $d30 * $d36;

        $d43 = $d37 * d1;

        $d38 = d6 * d1;

        $d39 = d4 - $d38;

        $d41 = neg $d39;

        $d40 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d42 = $d41 / $d40;

        $d44 = $d43 * $d42;

        $d46 = $d29 - $d44;

        $r12 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d45 = neg d3;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d45);

        $d47 = interfaceinvoke $r12.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r13);

        $r14 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d48 = d6 * d3;

        $d49 = d0 - $d48;

        $d51 = neg $d49;

        $d50 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d52 = $d51 / $d50;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d52);

        $d53 = interfaceinvoke $r14.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r15);

        $d54 = $d47 * $d53;

        $d60 = $d54 * d4;

        $d55 = d6 * d4;

        $d56 = d1 - $d55;

        $d58 = neg $d56;

        $d57 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d59 = $d58 / $d57;

        $d61 = $d60 * $d59;

        $d63 = $d46 - $d61;

        $r16 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d62 = neg d0;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d62);

        $d64 = interfaceinvoke $r16.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r17);

        $r18 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d65 = d6 * d0;

        $d66 = d3 - $d65;

        $d68 = neg $d66;

        $d67 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d69 = $d68 / $d67;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d69);

        $d70 = interfaceinvoke $r18.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r19);

        $d71 = $d64 * $d70;

        $d74 = $d71 * d1;

        $d72 = neg d0;

        $d73 = $d72 * d1;

        $d75 = $d74 * $d73;

        $d77 = $d63 - $d75;

        $r20 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d76 = neg d3;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d76);

        $d78 = interfaceinvoke $r20.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r21);

        $r22 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d79 = d6 * d3;

        $d80 = d0 - $d79;

        $d82 = neg $d80;

        $d81 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR>;

        $d83 = $d82 / $d81;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d83);

        $d84 = interfaceinvoke $r22.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r23);

        $d85 = $d78 * $d84;

        $d88 = $d85 * d4;

        $d86 = neg d3;

        $d87 = $d86 * d4;

        $d89 = $d88 * $d87;

        $d90 = $d77 - $d89;

        return $d90;
    }

    static double[] getHDualDeltaGamma(double, double, double, double, double[], double[])
    {
        double d0, d1, d2, d3, d5, d6, d7, d8, d9, d10, d11, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70;
        double[] r0, r1, r2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        r0 := @parameter4: double[];

        r1 := @parameter5: double[];

        d5 = d3 * d3;

        d6 = r0[0];

        d7 = r1[0];

        d8 = d7 - d6;

        d9 = d8 * d6;

        d10 = d5 / d9;

        d11 = 2.0 * d3;

        d13 = r0[1];

        d14 = r0[2];

        d15 = r1[1];

        d16 = r1[2];

        d17 = d15 - d13;

        d18 = d16 - d14;

        $d24 = d17 * d6;

        $d23 = d8 * d13;

        d19 = $d24 + $d23;

        $d26 = d18 * d6;

        $d25 = d8 * d14;

        $d29 = $d26 + $d25;

        $d27 = 2.0 * d17;

        $d28 = $d27 * d13;

        d20 = $d29 + $d28;

        $d33 = d11 / d9;

        $d30 = d5 / d9;

        $d31 = $d30 / d9;

        $d32 = $d31 * d19;

        d21 = $d33 - $d32;

        $d40 = 2.0 / d9;

        $d34 = 2.0 * d5;

        $d35 = $d34 / d9;

        $d36 = $d35 / d9;

        $d37 = $d36 / d9;

        $d38 = $d37 * d19;

        $d39 = $d38 * d19;

        $d45 = $d40 + $d39;

        $d41 = 2.0 * d11;

        $d42 = $d41 / d9;

        $d43 = $d42 / d9;

        $d44 = $d43 * d19;

        $d49 = $d45 - $d44;

        $d46 = d5 / d9;

        $d47 = $d46 / d9;

        $d48 = $d47 * d20;

        d22 = $d49 - $d48;

        r2 = newarray (double)[3];

        $d50 = d0 * d1;

        $d51 = 2.0 * d2;

        $d52 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        $d53 = $d51 * $d52;

        $d54 = $d50 + $d53;

        $d55 = neg $d54;

        $d56 = $d55 * d10;

        r2[0] = $d56;

        $d57 = d0 * d1;

        $d58 = 2.0 * d2;

        $d59 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        $d60 = $d58 * $d59;

        $d61 = $d57 + $d60;

        $d62 = neg $d61;

        $d63 = $d62 * d21;

        r2[1] = $d63;

        $d64 = d0 * d1;

        $d65 = 2.0 * d2;

        $d66 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        $d67 = $d65 * $d66;

        $d68 = $d64 + $d67;

        $d69 = neg $d68;

        $d70 = $d69 * d22;

        r2[2] = $d70;

        return r2;
    }

    static double[] getXDualDeltaGamma(double[], double[], double[])
    {
        double[] r0, r1, r2, r3;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        d0 = r2[0];

        d1 = r0[0];

        d2 = r1[0];

        $d21 = staticinvoke <java.lang.Math: double exp(double)>(d0);

        d3 = 1.0 - $d21;

        d4 = d2 - d1;

        d5 = d3 * d4;

        d6 = d1 + d5;

        d7 = r2[1];

        d8 = r2[2];

        d9 = r0[1];

        d10 = r0[2];

        d11 = r1[1];

        d12 = r1[2];

        $d22 = staticinvoke <java.lang.Math: double exp(double)>(d0);

        $d23 = neg $d22;

        d13 = $d23 * d7;

        $d24 = staticinvoke <java.lang.Math: double exp(double)>(d0);

        $d25 = neg $d24;

        $d26 = $d25 * d8;

        $d27 = staticinvoke <java.lang.Math: double exp(double)>(d0);

        $d28 = $d27 * d7;

        $d29 = $d28 * d7;

        d14 = $d26 - $d29;

        d15 = d11 - d9;

        d16 = d12 - d10;

        $d31 = d13 * d4;

        $d30 = d3 * d15;

        d17 = $d31 + $d30;

        $d34 = d14 * d4;

        $d32 = 2.0 * d13;

        $d33 = $d32 * d15;

        $d36 = $d34 + $d33;

        $d35 = d3 * d16;

        d18 = $d36 + $d35;

        d19 = d9 + d17;

        d20 = d10 + d18;

        r3 = newarray (double)[3];

        r3[0] = d6;

        r3[1] = d19;

        r3[2] = d20;

        return r3;
    }

    static double[] getAlphaDualDeltaGamma(double[], double, double)
    {
        double[] r0, r1;
        double d0, d1, d3, d4, d5, d6, d7, d8, d9, d10, d11, d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d3 = r0[0];

        d4 = d3 - d1;

        $d15 = neg d0;

        d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, $d15);

        d6 = d4 * d5;

        d7 = r0[1];

        d8 = d7 - 1.0;

        $d18 = neg d0;

        $d16 = neg d0;

        $d17 = $d16 - 1.0;

        $d19 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, $d17);

        $d20 = $d18 * $d19;

        d9 = $d20 * d7;

        $d22 = d8 * d5;

        $d21 = d4 * d9;

        d10 = $d22 + $d21;

        d11 = r0[2];

        $d25 = neg d0;

        $d23 = neg d0;

        $d24 = $d23 - 1.0;

        $d28 = $d25 * $d24;

        $d26 = neg d0;

        $d27 = $d26 - 2.0;

        $d29 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, $d27);

        $d30 = $d28 * $d29;

        $d31 = $d30 * d7;

        $d34 = $d31 * d7;

        $d35 = neg d0;

        $d32 = neg d0;

        $d33 = $d32 - 1.0;

        $d36 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, $d33);

        $d37 = $d35 * $d36;

        $d38 = $d37 * d11;

        d13 = $d34 + $d38;

        $d40 = d11 * d5;

        $d39 = d4 * d13;

        $d43 = $d40 + $d39;

        $d41 = 2.0 * d8;

        $d42 = $d41 * d9;

        d14 = $d43 + $d42;

        r1 = newarray (double)[3];

        r1[0] = d6;

        r1[1] = d10;

        r1[2] = d14;

        return r1;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution $r0;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r1;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(5.0);

        $d1 = $d0 - 1.0;

        $d2 = 0.5 * $d1;

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2> = $d2;

        $d3 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2>;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO> = $d4;

        $d5 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO2>;

        $d6 = 1.0 - $d5;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double RHO_STAR> = $d7;

        $r0 = new com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution: void <init>()>();

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL> = $r0;

        $r1 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL> = $r1;

        return;
    }
}
