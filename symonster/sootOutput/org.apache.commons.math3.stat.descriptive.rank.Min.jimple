public class org.apache.commons.math3.stat.descriptive.rank.Min extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable
{
    private static final long serialVersionUID;
    private long n;
    private double value;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = 0L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = #NaN;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.rank.Min) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Min: void copy(org.apache.commons.math3.stat.descriptive.rank.Min,org.apache.commons.math3.stat.descriptive.rank.Min)>(r1, r0);

        return;
    }

    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double d0, $d1, $d2;
        byte $b0;
        boolean $z0;
        long $l1, $l2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 == 0 goto label2;

     label1:
        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = d0;

     label2:
        $l1 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        $l2 = $l1 + 1L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = $l2;

        return;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = #NaN;

        r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = 0L;

        return;
    }

    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        return $d0;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        return $l0;
    }

    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0;
        double[] r1;
        int i0, i1, $i2, i4;
        boolean $z0, $z1;
        double $d0, $d1, d2, $d3;
        byte $b3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d2 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label5;

        d2 = r1[i0];

        i4 = i0;

     label1:
        $i2 = i0 + i1;

        if i4 >= $i2 goto label5;

        $d0 = r1[i4];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 != 0 goto label4;

        $d1 = r1[i4];

        $b3 = d2 cmpg $d1;

        if $b3 >= 0 goto label2;

        $d3 = d2;

        goto label3;

     label2:
        $d3 = r1[i4];

     label3:
        d2 = $d3;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        return d2;
    }

    public org.apache.commons.math3.stat.descriptive.rank.Min copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.Min;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.Min: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.rank.Min: void copy(org.apache.commons.math3.stat.descriptive.rank.Min,org.apache.commons.math3.stat.descriptive.rank.Min)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.rank.Min, org.apache.commons.math3.stat.descriptive.rank.Min) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, r1;
        double[] $r2;
        long $l0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.rank.Min;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.rank.Min;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.rank.Min: void setData(double[])>($r2);

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: long n>;

        r1.<org.apache.commons.math3.stat.descriptive.rank.Min: long n> = $l0;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.Min: double value>;

        r1.<org.apache.commons.math3.stat.descriptive.rank.Min: double value> = $d0;

        return;
    }

    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: org.apache.commons.math3.stat.descriptive.rank.Min copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.Min r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.Min;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.Min: org.apache.commons.math3.stat.descriptive.rank.Min copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.rank.Min: long serialVersionUID> = -2941995784909003131L;

        return;
    }
}
