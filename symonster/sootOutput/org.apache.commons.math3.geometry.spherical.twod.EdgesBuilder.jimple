class org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor
{
    private final org.apache.commons.math3.geometry.partitioning.BSPTree root;
    private final double tolerance;
    private final java.util.Map edgeToNode;
    private final java.util.Map nodeToEdgesList;

    public void <init>(org.apache.commons.math3.geometry.partitioning.BSPTree, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        double d0;
        java.util.IdentityHashMap $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree root> = r1;

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance> = d0;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode> = $r2;

        $r3 = new java.util.IdentityHashMap;

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList> = $r3;

        return;
    }

    public org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order visitOrder(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r2 = <org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order: org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor$Order MINUS_SUB_PLUS>;

        return $r2;
    }

    public void visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;
        org.apache.commons.math3.geometry.partitioning.BoundaryAttribute r2;
        java.util.ArrayList $r3;
        java.util.Map $r4;
        java.lang.Object $r6;
        org.apache.commons.math3.geometry.partitioning.SubHyperplane $r7, $r8, $r9, $r11;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r10, $r12;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.lang.Object getAttribute()>();

        r2 = (org.apache.commons.math3.geometry.partitioning.BoundaryAttribute) $r6;

        $r7 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        if $r7 == null goto label1;

        $r11 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusOutside()>();

        $r12 = (org.apache.commons.math3.geometry.spherical.twod.SubCircle) $r11;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r12, 0, r1);

     label1:
        $r8 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        if $r8 == null goto label2;

        $r9 = virtualinvoke r2.<org.apache.commons.math3.geometry.partitioning.BoundaryAttribute: org.apache.commons.math3.geometry.partitioning.SubHyperplane getPlusInside()>();

        $r10 = (org.apache.commons.math3.geometry.spherical.twod.SubCircle) $r9;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle,boolean,org.apache.commons.math3.geometry.partitioning.BSPTree)>($r10, 1, r1);

     label2:
        return;
    }

    public void visitLeafNode(org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.partitioning.BSPTree r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.BSPTree;

        return;
    }

    private void addContribution(org.apache.commons.math3.geometry.spherical.twod.SubCircle, boolean, org.apache.commons.math3.geometry.partitioning.BSPTree)
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle r1;
        boolean z0, $z1;
        org.apache.commons.math3.geometry.partitioning.BSPTree r2;
        org.apache.commons.math3.geometry.spherical.twod.Circle r3, $r26;
        java.util.List r4, $r24;
        java.util.Iterator r5;
        org.apache.commons.math3.geometry.spherical.oned.Arc r6;
        org.apache.commons.math3.geometry.partitioning.Hyperplane $r9;
        org.apache.commons.math3.geometry.partitioning.Region $r10;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r11;
        java.lang.Object $r12, $r23;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r13, $r16;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r14, $r17;
        double $d0, $d1, $d2, $d3;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r15, $r18;
        org.apache.commons.math3.geometry.spherical.twod.Edge $r19, $r25, r27;
        java.util.Map $r20, $r22;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.SubCircle;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.commons.math3.geometry.partitioning.BSPTree;

        $r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.SubCircle: org.apache.commons.math3.geometry.partitioning.Hyperplane getHyperplane()>();

        r3 = (org.apache.commons.math3.geometry.spherical.twod.Circle) $r9;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.SubCircle: org.apache.commons.math3.geometry.partitioning.Region getRemainingRegion()>();

        $r11 = (org.apache.commons.math3.geometry.spherical.oned.ArcsSet) $r10;

        r4 = virtualinvoke $r11.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: java.util.List asList()>();

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.spherical.oned.Arc) $r12;

        $r13 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r14 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d0 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getInf()>();

        specialinvoke $r14.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        $r15 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>($r14);

        specialinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r15);

        $r16 = new org.apache.commons.math3.geometry.spherical.twod.Vertex;

        $r17 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $d1 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSup()>();

        specialinvoke $r17.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d1);

        $r18 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>($r17);

        specialinvoke $r16.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point)>($r18);

        virtualinvoke $r13.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r3);

        virtualinvoke $r16.<org.apache.commons.math3.geometry.spherical.twod.Vertex: void bindWith(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r3);

        if z0 == 0 goto label2;

        $r25 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $d3 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSize()>();

        $r26 = virtualinvoke r3.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.Circle getReverse()>();

        specialinvoke $r25.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r16, $r13, $d3, $r26);

        r27 = $r25;

        goto label3;

     label2:
        $r19 = new org.apache.commons.math3.geometry.spherical.twod.Edge;

        $d2 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.oned.Arc: double getSize()>();

        specialinvoke $r19.<org.apache.commons.math3.geometry.spherical.twod.Edge: void <init>(org.apache.commons.math3.geometry.spherical.twod.Vertex,org.apache.commons.math3.geometry.spherical.twod.Vertex,double,org.apache.commons.math3.geometry.spherical.twod.Circle)>($r13, $r16, $d2, r3);

        r27 = $r19;

     label3:
        $r20 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, r2);

        $r22 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r24 = (java.util.List) $r23;

        interfaceinvoke $r24.<java.util.List: boolean add(java.lang.Object)>(r27);

        goto label1;

     label4:
        return;
    }

    private org.apache.commons.math3.geometry.spherical.twod.Edge getFollowingEdge(org.apache.commons.math3.geometry.spherical.twod.Edge) throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        org.apache.commons.math3.geometry.spherical.twod.Edge r1, r6, $r22, r26;
        org.apache.commons.math3.geometry.spherical.twod.S2Point r2, $r11, $r24;
        java.util.List r3, $r19;
        org.apache.commons.math3.geometry.partitioning.BSPTree r4, $r9;
        java.util.Iterator r5, r27;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r7, $r12, $r25, r28;
        double d0, $d1, $d2, $d3, d4;
        org.apache.commons.math3.geometry.spherical.twod.Vertex $r8, $r10, $r21, $r23;
        boolean $z0, $z1;
        byte $b0, $b1;
        org.apache.commons.math3.exception.MathIllegalStateException $r13;
        java.lang.Object[] $r14;
        org.apache.commons.math3.exception.util.LocalizedFormats $r15;
        java.lang.Object $r16, $r18, $r20;
        java.util.Map $r17;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Edge;

        $r8 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getEnd()>();

        r2 = virtualinvoke $r8.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        $r9 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.partitioning.BSPTree root>;

        $d1 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        r3 = virtualinvoke $r9.<org.apache.commons.math3.geometry.partitioning.BSPTree: java.util.List getCloseCuts(org.apache.commons.math3.geometry.Point,double)>(r2, $d1);

        d4 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        r26 = null;

        r27 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r16 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.geometry.partitioning.BSPTree) $r16;

        $r17 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map nodeToEdgesList>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r19 = (java.util.List) $r18;

        r5 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r20;

        if r6 == r1 goto label3;

        $r21 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r22 = virtualinvoke $r21.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.Edge getIncoming()>();

        if $r22 != null goto label3;

        $r23 = virtualinvoke r6.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r24 = virtualinvoke $r23.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        r7 = virtualinvoke $r24.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r25 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r25, r7);

        $b1 = d0 cmpg d4;

        if $b1 > 0 goto label3;

        d4 = d0;

        r26 = r6;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        if r26 != null goto label7;

        $r10 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.Edge: org.apache.commons.math3.geometry.spherical.twod.Vertex getStart()>();

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.geometry.spherical.twod.Vertex: org.apache.commons.math3.geometry.spherical.twod.S2Point getLocation()>();

        r28 = virtualinvoke $r11.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r12 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d2 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r12, r28);

        $d3 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: double tolerance>;

        $b0 = $d2 cmpg $d3;

        if $b0 > 0 goto label6;

        return r1;

     label6:
        $r13 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUTLINE_BOUNDARY_LOOP_OPEN>;

        $r14 = newarray (java.lang.Object)[0];

        specialinvoke $r13.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r15, $r14);

        throw $r13;

     label7:
        return r26;
    }

    public java.util.List getEdges() throws org.apache.commons.math3.exception.MathIllegalStateException
    {
        org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder r0;
        java.util.Iterator r1;
        org.apache.commons.math3.geometry.spherical.twod.Edge r2, $r9;
        java.util.Map $r3, $r6;
        java.util.Set $r4, $r7;
        boolean $z0;
        java.util.ArrayList $r5;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.geometry.spherical.twod.Edge) $r8;

        $r9 = specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: org.apache.commons.math3.geometry.spherical.twod.Edge getFollowingEdge(org.apache.commons.math3.geometry.spherical.twod.Edge)>(r2);

        virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.Edge: void setNextEdge(org.apache.commons.math3.geometry.spherical.twod.Edge)>($r9);

        goto label1;

     label2:
        $r5 = new java.util.ArrayList;

        $r6 = r0.<org.apache.commons.math3.geometry.spherical.twod.EdgesBuilder: java.util.Map edgeToNode>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        return $r5;
    }
}
