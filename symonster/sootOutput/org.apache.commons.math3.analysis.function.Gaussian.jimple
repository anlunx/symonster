public class org.apache.commons.math3.analysis.function.Gaussian extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double mean;
    private final double is;
    private final double i2s2;
    private final double norm;

    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Double $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b0 = d2 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm> = d0;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean> = d1;

        $d3 = 1.0 / d2;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double is> = $d3;

        $d4 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d6 = 0.5 * $d4;

        $d5 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d7 = $d6 * $d5;

        r0.<org.apache.commons.math3.analysis.function.Gaussian: double i2s2> = $d7;

        return;
    }

    public void <init>(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double d0, d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(6.283185307179586);

        $d3 = d1 * $d2;

        $d4 = 1.0 / $d3;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double,double)>($d4, d0, d1);

        return;
    }

    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Gaussian: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        double d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean>;

        $d4 = d0 - $d1;

        $d3 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm>;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double i2s2>;

        $d5 = staticinvoke <org.apache.commons.math3.analysis.function.Gaussian: double value(double,double,double)>($d4, $d3, $d2);

        return $d5;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }

    private static double value(double, double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = neg d0;

        $d4 = $d3 * d0;

        $d5 = $d4 * d2;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d5);

        $d7 = d1 * $d6;

        return $d7;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.Gaussian r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23;
        double[] r2, r3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        byte $b3;

        r0 := @this: org.apache.commons.math3.analysis.function.Gaussian;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        $d3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d4 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double mean>;

        $d5 = $d3 - $d4;

        d0 = $d2 * $d5;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i1 = $i0 + 1;

        r2 = newarray (double)[$i1];

        $i2 = lengthof r2;

        r3 = newarray (double)[$i2];

        r3[0] = 1.0;

        d1 = d0 * d0;

        $d7 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double norm>;

        $d6 = -0.5 * d1;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d6);

        d22 = $d7 * $d8;

        $d9 = <org.apache.commons.math3.util.Precision: double SAFE_MIN>;

        $b3 = d22 cmpg $d9;

        if $b3 > 0 goto label1;

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r2, 0.0);

        goto label8;

     label1:
        r2[0] = d22;

        i11 = 1;

     label2:
        $i4 = lengthof r2;

        if i11 >= $i4 goto label8;

        d23 = 0.0;

        $i5 = i11 - 1;

        $d10 = r3[$i5];

        $d11 = neg $d10;

        r3[i11] = $d11;

        i12 = i11;

     label3:
        if i12 < 0 goto label6;

        $d15 = d23 * d1;

        $d14 = r3[i12];

        d23 = $d15 + $d14;

        if i12 <= 2 goto label4;

        $i10 = i12 - 2;

        $i7 = i12 - 1;

        $d18 = (double) $i7;

        $i8 = i12 - 1;

        $d17 = r3[$i8];

        $d20 = $d18 * $d17;

        $i9 = i12 - 3;

        $d19 = r3[$i9];

        $d21 = $d20 - $d19;

        r3[$i10] = $d21;

        goto label5;

     label4:
        if i12 != 2 goto label5;

        $d16 = r3[1];

        r3[0] = $d16;

     label5:
        i12 = i12 + -2;

        goto label3;

     label6:
        $i6 = i11 & 1;

        if $i6 != 1 goto label7;

        d23 = d23 * d0;

     label7:
        $d12 = r0.<org.apache.commons.math3.analysis.function.Gaussian: double is>;

        d22 = d22 * $d12;

        $d13 = d22 * d23;

        r2[i11] = $d13;

        i11 = i11 + 1;

        goto label2;

     label8:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r4;
    }

    static double access$000(double, double, double)
    {
        double d0, d1, d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <org.apache.commons.math3.analysis.function.Gaussian: double value(double,double,double)>(d0, d1, d2);

        return $d3;
    }
}
