class com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1 extends com.opengamma.analytics.math.function.Function1D
{
    final double val$forward;
    final double val$k;
    final double val$t;
    final com.opengamma.analytics.math.function.Function1D val$priceFunction;
    final com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option;
    final com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction, double, double, double, com.opengamma.analytics.math.function.Function1D, com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction r1;
        double d0, d1, d2;
        com.opengamma.analytics.math.function.Function1D r2;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        r2 := @parameter4: com.opengamma.analytics.math.function.Function1D;

        r3 := @parameter5: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$k> = d1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$t> = d2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: com.opengamma.analytics.math.function.Function1D val$priceFunction> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option> = r3;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public final java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1 r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, d75, d76, d77, d78, d79;
        boolean $z0, $z1, $z2;
        byte $b0;
        org.apache.commons.lang.NotImplementedException $r2, $r11;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.CEVFunctionData $r3;
        com.opengamma.analytics.math.function.Function1D $r4;
        java.lang.Object $r5;
        java.lang.Double $r6, $r10, $r12;
        com.opengamma.analytics.financial.model.volatility.BlackImpliedVolatilityFormula $r7;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData $r8;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r9;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data");

        d0 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getAlpha()>();

        d1 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getBeta()>();

        d2 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getRho()>();

        d3 = virtualinvoke r1.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData: double getNu()>();

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d3, 0.0, 1.0E-15);

        if $z0 == 0 goto label2;

        $z2 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d1, 1.0, 1.0E-15);

        if $z2 == 0 goto label1;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        return $r12;

     label1:
        $r11 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r11.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Have not implemented the case where nu = 0, beta != 0");

        throw $r11;

     label2:
        $b0 = d1 cmpl 0.0;

        if $b0 <= 0 goto label5;

        $d11 = d0 * d1;

        $d10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        $d9 = d1 - 1.0;

        $d12 = staticinvoke <java.lang.Math: double pow(double,double)>($d10, $d9);

        d4 = $d11 * $d12;

        $d13 = 1.0 - d1;

        $d15 = $d13 / d1;

        $d14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        d5 = $d15 * $d14;

        $d17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        $d16 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$k>;

        $z1 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>($d17, $d16, 1.0E-15);

        if $z1 == 0 goto label3;

        d75 = d4;

        goto label4;

     label3:
        $d23 = d3 / d4;

        $d18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        $d21 = $d18 + d5;

        $d19 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$k>;

        $d20 = $d19 + d5;

        $d22 = $d21 / $d20;

        $d24 = staticinvoke <java.lang.Math: double log(double)>($d22);

        d76 = $d23 * $d24;

        $d30 = d4 * d76;

        $d31 = d76 - d2;

        $d25 = 2.0 * d2;

        $d26 = $d25 * d76;

        $d28 = 1.0 - $d26;

        $d27 = d76 * d76;

        $d29 = $d28 + $d27;

        $d32 = staticinvoke <java.lang.Math: double sqrt(double)>($d29);

        $d34 = $d31 + $d32;

        $d33 = 1.0 - d2;

        $d35 = $d34 / $d33;

        $d36 = staticinvoke <java.lang.Math: double log(double)>($d35);

        d77 = $d30 / $d36;

        $d37 = 4.0 * d2;

        $d38 = $d37 * d76;

        $d44 = 1.0 - $d38;

        $d39 = 5.0 * d2;

        $d40 = $d39 * d2;

        $d41 = 1.3333333333333333 + $d40;

        $d42 = $d41 * d76;

        $d43 = $d42 * d76;

        $d45 = $d44 + $d43;

        $d46 = staticinvoke <java.lang.Math: double pow(double,double)>($d45, 0.125);

        d7 = d4 * $d46;

        $d48 = 1.0 / d3;

        $d47 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$t>;

        $d49 = staticinvoke <java.lang.Math: double sqrt(double)>($d47);

        $d50 = $d48 / $d49;

        d8 = staticinvoke <java.lang.Math: double min(double,double)>(1.0, $d50);

        $d53 = d8 / d77;

        $d51 = 1.0 - d8;

        $d52 = $d51 / d7;

        $d54 = $d53 + $d52;

        d75 = 1.0 / $d54;

     label4:
        $d55 = d2 * d3;

        $d56 = $d55 * d4;

        $d63 = $d56 / 4.0;

        $d57 = 3.0 * d2;

        $d58 = $d57 * d2;

        $d59 = 2.0 - $d58;

        $d60 = $d59 * d3;

        $d61 = $d60 * d3;

        $d62 = $d61 / 24.0;

        $d65 = $d63 + $d62;

        $d64 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$t>;

        $d66 = $d65 * $d64;

        $d67 = 1.0 + $d66;

        d78 = d75 * $d67;

        $d69 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        $d68 = 1.0 - d1;

        $d70 = staticinvoke <java.lang.Math: double pow(double,double)>($d69, $d68);

        $d71 = d78 * $d70;

        d79 = $d71 / d1;

        $r3 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.CEVFunctionData;

        $d72 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.CEVFunctionData: void <init>(double,double,double,double)>($d72, 1.0, d79, d1);

        $r4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: com.opengamma.analytics.math.function.Function1D val$priceFunction>;

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r3);

        $r6 = (java.lang.Double) $r5;

        d6 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction: com.opengamma.analytics.financial.model.volatility.BlackImpliedVolatilityFormula access$000()>();

        $r8 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData;

        $d73 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: double val$forward>;

        specialinvoke $r8.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData: void <init>(double,double,double)>($d73, 1.0, d79);

        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption val$option>;

        $d74 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.volatility.BlackImpliedVolatilityFormula: double getImpliedVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.BlackFunctionData,com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double)>($r8, $r9, d6);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d74);

        return $r10;

     label5:
        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Have not implemented the case where b <= 0");

        throw $r2;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1 r0;
        java.lang.Object r1;
        com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData $r2;
        java.lang.Double $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.function.SABRJohnsonVolatilityFunction$1: java.lang.Double evaluate(com.opengamma.analytics.financial.model.volatility.smile.function.SABRFormulaData)>($r2);

        return $r3;
    }
}
