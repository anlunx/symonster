public class com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction extends com.opengamma.analytics.math.function.VectorFunction
{
    private final double[] _samplePoints;
    private final com.opengamma.analytics.math.function.ParameterizedCurve _curve;

    public void <init>(double[], com.opengamma.analytics.math.function.ParameterizedCurve)
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        double[] r1, $r5;
        com.opengamma.analytics.math.function.ParameterizedCurve r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.math.function.ParameterizedCurve;

        specialinvoke r0.<com.opengamma.analytics.math.function.VectorFunction: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r1, "samplePoints");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $i0 = lengthof r1;

        $r5 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, $i0);

        r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: double[] _samplePoints> = $r5;

        r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: com.opengamma.analytics.math.function.ParameterizedCurve _curve> = r2;

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D calculateJacobian(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r10;
        com.opengamma.analytics.math.function.Function1D r2;
        int i0, $i1, i2;
        com.opengamma.analytics.math.function.ParameterizedCurve $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r5;
        double[][] $r6;
        double[] $r7, $r11;
        double $d0;
        java.lang.Double $r8;
        java.lang.Object $r9;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r4 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: com.opengamma.analytics.math.function.ParameterizedCurve _curve>;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.function.ParameterizedCurve: com.opengamma.analytics.math.function.Function1D getYParameterSensitivity(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>(r1);

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: int getLengthOfRange()>();

        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $i1 = virtualinvoke r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: int getLengthOfDomain()>();

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(int,int)>(i0, $i1);

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r7 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: double[] _samplePoints>;

        $d0 = $r7[i2];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r9 = virtualinvoke r2.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r8);

        $r10 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) $r9;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r6[i2] = $r11;

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r5;
    }

    public int getLengthOfDomain()
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        com.opengamma.analytics.math.function.ParameterizedCurve $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        $r1 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: com.opengamma.analytics.math.function.ParameterizedCurve _curve>;

        $i0 = virtualinvoke $r1.<com.opengamma.analytics.math.function.ParameterizedCurve: int getNumberOfParameters()>();

        return $i0;
    }

    public int getLengthOfRange()
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        double[] $r1;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        $r1 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: double[] _samplePoints>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r1, $r6;
        com.opengamma.analytics.math.function.Function1D r2;
        int i0, i1;
        com.opengamma.analytics.math.function.ParameterizedCurve $r4;
        double[] $r5, $r7, $r8;
        double $d0, $d1;
        java.lang.Double $r9, $r11;
        java.lang.Object $r10;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r4 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: com.opengamma.analytics.math.function.ParameterizedCurve _curve>;

        r2 = virtualinvoke $r4.<com.opengamma.analytics.math.function.ParameterizedCurve: com.opengamma.analytics.math.function.Function1D asFunctionOfArguments(java.lang.Object)>(r1);

        $r5 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: double[] _samplePoints>;

        i0 = lengthof $r5;

        $r6 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r8 = r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: double[] _samplePoints>;

        $d0 = $r8[i1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r10 = virtualinvoke r2.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r9);

        $r11 = (java.lang.Double) $r10;

        $d1 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        $r7[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r6;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction r0;
        java.lang.Object r1;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.opengamma.analytics.math.matrix.DoubleMatrix1D) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunction: com.opengamma.analytics.math.matrix.DoubleMatrix1D evaluate(com.opengamma.analytics.math.matrix.DoubleMatrix1D)>($r2);

        return $r3;
    }
}
