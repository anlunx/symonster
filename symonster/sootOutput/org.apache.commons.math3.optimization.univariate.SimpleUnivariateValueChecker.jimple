public class org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker extends org.apache.commons.math3.optimization.AbstractConvergenceChecker
{
    private static final int ITERATION_CHECK_DISABLED;
    private final int maxIterationCount;

    public void <init>()
    {
        org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker r0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: void <init>()>();

        r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int maxIterationCount> = -1;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: void <init>(double,double)>(d0, d1);

        r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int maxIterationCount> = -1;

        return;
    }

    public void <init>(double, double, int)
    {
        org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker r0;
        double d0, d1;
        int i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.AbstractConvergenceChecker: void <init>(double,double)>(d0, d1);

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int maxIterationCount> = i0;

        return;
    }

    public boolean converged(int, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair, org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair)
    {
        org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker r0;
        int i0, $i1, $i4;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair r1, r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b2, $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        r2 := @parameter2: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;

        $i1 = r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int maxIterationCount>;

        if $i1 == -1 goto label1;

        $i4 = r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int maxIterationCount>;

        if i0 < $i4 goto label1;

        return 1;

     label1:
        d0 = virtualinvoke r1.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        d1 = virtualinvoke r2.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        $d4 = d0 - d1;

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, $d6);

        $d7 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: double getRelativeThreshold()>();

        $d8 = d3 * $d7;

        $b2 = d2 cmpg $d8;

        if $b2 <= 0 goto label2;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: double getAbsoluteThreshold()>();

        $b3 = d2 cmpg $d9;

        if $b3 > 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public volatile boolean converged(int, java.lang.Object, java.lang.Object)
    {
        org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker r0;
        int i0;
        java.lang.Object r1, r2;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r4 = (org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair) r1;

        $r3 = (org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair) r2;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: boolean converged(int,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair,org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair)>(i0, $r4, $r3);

        return $z0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker: int ITERATION_CHECK_DISABLED> = -1;

        return;
    }
}
