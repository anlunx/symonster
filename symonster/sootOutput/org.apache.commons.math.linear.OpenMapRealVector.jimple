public class org.apache.commons.math.linear.OpenMapRealVector extends org.apache.commons.math.linear.AbstractRealVector implements org.apache.commons.math.linear.SparseRealVector, java.io.Serializable
{
    public static final double DEFAULT_ZERO_TOLERANCE;
    private static final long serialVersionUID;
    private final org.apache.commons.math.util.OpenIntToDoubleHashMap entries;
    private final int virtualSize;
    private final double epsilon;

    public void <init>()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(int,double)>(0, 1.0E-12);

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(int,double)>(i0, 1.0E-12);

        return;
    }

    public void <init>(int, double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0;
        double d0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = i0;

        $r1 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r1;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = d0;

        return;
    }

    protected void <init>(org.apache.commons.math.linear.OpenMapRealVector, int)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        int i0, $i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i1 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        $i2 = $i1 + i0;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = $i2;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        $r3 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math.util.OpenIntToDoubleHashMap)>($r3);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        $d0 = r1.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(int,int,double)>(i0, i1, 1.0E-12);

        return;
    }

    public void <init>(int, int, double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0, i1;
        double d0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = i0;

        $r1 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(int,double)>(i1, 0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r1;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = d0;

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(double[],double)>(r1, 1.0E-12);

        return;
    }

    public void <init>(double[], double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        double d0, d1;
        int $i0, $i1, i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = lengthof r1;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = d0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        d1 = r1[i2];

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: boolean isDefaultValue(double)>(d1);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i2, d1);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void <init>(java.lang.Double[])
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        java.lang.Double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: java.lang.Double[];

        specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(java.lang.Double[],double)>(r1, 1.0E-12);

        return;
    }

    public void <init>(java.lang.Double[], double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        java.lang.Double[] r1;
        double d0, d1;
        int $i0, $i1, i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r4;
        java.lang.Double $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: java.lang.Double[];

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = lengthof r1;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = d0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label3;

        $r3 = r1[i2];

        d1 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: boolean isDefaultValue(double)>(d1);

        if $z0 != 0 goto label2;

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i2, d1);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    public void <init>(org.apache.commons.math.linear.OpenMapRealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        int $i0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        $r3 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(org.apache.commons.math.util.OpenIntToDoubleHashMap)>($r3);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        $d0 = r1.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = $d0;

        return;
    }

    public void <init>(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        double d0;
        int $i0, $i1, i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize> = $i0;

        $r2 = new org.apache.commons.math.util.OpenIntToDoubleHashMap;

        specialinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: void <init>(double)>(0.0);

        r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries> = $r2;

        r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon> = 1.0E-12;

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        if i2 >= $i1 goto label3;

        d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i2);

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: boolean isDefaultValue(double)>(d0);

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i2, d0);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return;
    }

    private org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        return $r1;
    }

    protected boolean isDefaultValue(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double d0, $d1, $d2;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        $b0 = $d1 cmpg $d2;

        if $b0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3, $r4;
        org.apache.commons.math.linear.RealVector r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $r4 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector add(org.apache.commons.math.linear.OpenMapRealVector)>($r3);

        return $r4;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector)>(r1);

        return $r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector add(org.apache.commons.math.linear.OpenMapRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1, r2, $r9;
        boolean z0, $z1, $z2, $z3;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3, $r10;
        org.apache.commons.math.util.OpenIntToDoubleHashMap r4, $r5, $r6, $r7, $r8, $r11;
        int i0, $i1, $i2, $i3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $i1 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i1);

        $r5 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i2 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: int size()>();

        $r6 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i3 = virtualinvoke $r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap: int size()>();

        if $i2 <= $i3 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        if $z2 == 0 goto label03;

        $r9 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        goto label04;

     label03:
        $r9 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

     label04:
        r2 = $r9;

        if z0 == 0 goto label05;

        $r8 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $r10 = virtualinvoke $r8.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

        goto label06;

     label05:
        $r7 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $r10 = virtualinvoke $r7.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label06:
        r3 = $r10;

        if z0 == 0 goto label07;

        $r11 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        goto label08;

     label07:
        $r11 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

     label08:
        r4 = $r11;

     label09:
        $z3 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $z1 = virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i0);

        if $z1 == 0 goto label10;

        $d1 = virtualinvoke r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i0);

        $d2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d3 = $d1 + $d2;

        virtualinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i0, $d3);

        goto label11;

     label10:
        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i0, $d0);

     label11:
        goto label09;

     label12:
        return r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.OpenMapRealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1, $r4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $r4 = new org.apache.commons.math.linear.OpenMapRealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector,int)>(r0, $i0);

        $r5 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $i2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        $i3 = $i1 + $i2;

        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i3, $d0);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3, $r4, $r5;
        org.apache.commons.math.linear.RealVector r1;
        boolean $z0;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.OpenMapRealVector)>($r4);

        return $r5;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector append(double[])>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.OpenMapRealVector append(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double d0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $r2 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector,int)>(r0, 1);

        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        virtualinvoke $r2.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i0, d0);

        return $r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector append(double[])
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        double[] r1;
        int $i0, $i1, $i2, $i3, i4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r3 = new org.apache.commons.math.linear.OpenMapRealVector;

        $i0 = lengthof r1;

        specialinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector,int)>(r0, $i0);

        i4 = 0;

     label1:
        $i1 = lengthof r1;

        if i4 >= $i1 goto label2;

        $i2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        $i3 = i4 + $i2;

        $d0 = r1[i4];

        virtualinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i3, $d0);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public org.apache.commons.math.linear.OpenMapRealVector copy()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r1.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        return $r1;
    }

    public double dotProduct(org.apache.commons.math.linear.OpenMapRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        boolean z0, $z1, $z2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r2, $r8;
        org.apache.commons.math.util.OpenIntToDoubleHashMap r3, $r4, $r5, $r6, $r7, $r9;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $i0 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i1 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: int size()>();

        $r5 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i2 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: int size()>();

        if $i1 >= $i2 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if $z1 == 0 goto label3;

        $r7 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $r8 = virtualinvoke $r7.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

        goto label4;

     label3:
        $r6 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $r8 = virtualinvoke $r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label4:
        r2 = $r8;

        if z0 == 0 goto label5;

        $r9 = r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        goto label6;

     label5:
        $r9 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

     label6:
        r3 = $r9;

        d3 = 0.0;

     label7:
        $z2 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i3 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>($i3);

        $d2 = $d0 * $d1;

        d3 = d3 + $d2;

        goto label7;

     label8:
        return d3;
    }

    public double dotProduct(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        org.apache.commons.math.linear.RealVector r1;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double dotProduct(org.apache.commons.math.linear.OpenMapRealVector)>($r2);

        return $d1;

     label1:
        $d0 = specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        return $d0;
    }

    public org.apache.commons.math.linear.OpenMapRealVector ebeDivide(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r4;
        org.apache.commons.math.linear.RealVector r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        $r5 = $r4.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i2);

        $d2 = $d0 / $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealVector ebeDivide(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r4;
        double[] r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        $r5 = $r4.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = r1[$i2];

        $d2 = $d0 / $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r4;
        org.apache.commons.math.linear.RealVector r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        $r5 = $r4.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i2);

        $d2 = $d0 * $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r4;
        double[] r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int $i0, $i1, $i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r4 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        $r5 = $r4.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i2 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = r1[$i2];

        $d2 = $d0 * $d1;

        virtualinvoke $r4.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i1, $d2);

        goto label1;

     label2:
        return $r4;
    }

    public org.apache.commons.math.linear.OpenMapRealVector getSubVector(int, int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r4;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>(i0);

        $i4 = i0 + i1;

        $i5 = $i4 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>($i5);

        $r3 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(int)>(i1);

        i2 = i0 + i1;

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r2 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i3 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        if i3 < i0 goto label2;

        if i3 >= i2 goto label2;

        $i6 = i3 - i0;

        $d0 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        virtualinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i6, $d0);

     label2:
        goto label1;

     label3:
        return $r3;
    }

    public double[] getData()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r2;
        int $i0, $i1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r3;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        r1 = newarray (double)[$i0];

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r2 = virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i1 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d0 = virtualinvoke r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        r1[$i1] = $d0;

        goto label1;

     label2:
        return r1;
    }

    public int getDimension()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        return $i0;
    }

    public double getDistance(org.apache.commons.math.linear.OpenMapRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4, d5, d6, d7;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r5, r6;
        int i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r5 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

        d5 = 0.0;

     label1:
        $z0 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d2 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d3 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>(i0);

        d6 = $d2 - $d3;

        $d4 = d6 * d6;

        d5 = d5 + $d4;

        goto label1;

     label2:
        $r3 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        r6 = virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label3:
        $z1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z2 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i1);

        if $z2 != 0 goto label4;

        d7 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d1 = d7 * d7;

        d5 = d5 + $d1;

     label4:
        goto label3;

     label5:
        $d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d5);

        return $d0;
    }

    public double getDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double[] $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getDistance(org.apache.commons.math.linear.OpenMapRealVector)>($r3);

        return $d1;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getDistance(double[])>($r2);

        return $d0;
    }

    public double getDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        int $i0, $i1, i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        d5 = 0.0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i2);

        $d3 = r1[i2];

        d0 = $d2 - $d3;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        i2 = i2 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public double getEntry(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>(i0);

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i0);

        return $d0;
    }

    public double getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6, d7;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        int $i0, i1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r5, r6;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        d6 = 0.0;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r5 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d3 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i0 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>($i0);

        $d5 = $d3 - $d4;

        d7 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d5);

        d6 = d6 + d7;

        goto label1;

     label2:
        $r3 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        r6 = virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label3:
        $z1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z2 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i1);

        if $z2 != 0 goto label4;

        $d1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d1);

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d6 = d6 + $d2;

     label4:
        goto label3;

     label5:
        return d6;
    }

    public double getL1Distance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double[] $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getL1Distance(org.apache.commons.math.linear.OpenMapRealVector)>($r3);

        return $d1;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getL1Distance(double[])>($r2);

        return $d0;
    }

    public double getL1Distance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        double d0, $d1, $d2, $d3, d4;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>(i2);

        $d2 = r1[i2];

        $d3 = $d1 - $d2;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        d4 = d4 + d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d4;
    }

    private double getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, d4, d5;
        byte $b0, $b2;
        int $i1, i3;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r5, r6;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        d4 = 0.0;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r5 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d1 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $i1 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d2 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>($i1);

        $d3 = $d1 - $d2;

        d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        $b2 = d5 cmpl d4;

        if $b2 <= 0 goto label2;

        d4 = d5;

     label2:
        goto label1;

     label3:
        $r3 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        r6 = virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label4:
        $z1 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i3 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z2 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i3);

        if $z2 != 0 goto label5;

        $d0 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $b0 = $d0 cmpl d4;

        if $b0 <= 0 goto label5;

        d4 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

     label5:
        goto label4;

     label6:
        return d4;
    }

    public double getLInfDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double[] $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r3 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $d1 = specialinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getLInfDistance(org.apache.commons.math.linear.OpenMapRealVector)>($r3);

        return $d1;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getLInfDistance(double[])>($r2);

        return $d0;
    }

    public double getLInfDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        double d0, $d1, $d2, $d3, d4;
        int $i0, $i1, i3;
        byte $b2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label3;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>(i3);

        $d2 = r1[i3];

        $d3 = $d1 - $d2;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        $b2 = d0 cmpl d4;

        if $b2 <= 0 goto label2;

        d4 = d0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return d4;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r1;
        double d0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        z3 = 0;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r1 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        d0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z2 == 0 goto label3;

        z3 = 1;

     label3:
        goto label1;

     label4:
        return z3;
    }

    public boolean isNaN()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2;
        boolean $z0, $z1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r1 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z1 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public org.apache.commons.math.linear.OpenMapRealVector mapAdd(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1, $r2;
        double d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector mapAddToSelf(double)>(d0);

        return $r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector mapAddToSelf(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double d0, $d1, $d2;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        $d1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>(i1);

        $d2 = $d1 + d0;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i1, $d2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] r1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int i0, $i1, $i2, $i3, $i4, i5;
        double d0, $d1, $d2;
        org.apache.commons.math.linear.OpenMapRealMatrix $r4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r5;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i1);

        $r4 = new org.apache.commons.math.linear.OpenMapRealMatrix;

        $i3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        $i2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        specialinvoke $r4.<org.apache.commons.math.linear.OpenMapRealMatrix: void <init>(int,int)>($i3, $i2);

        $r5 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r3 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        i5 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        if i5 >= $i4 goto label3;

        $d1 = r1[i5];

        $d2 = d0 * $d1;

        interfaceinvoke $r4.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i0, i5, $d2);

        i5 = i5 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return $r4;
    }

    public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.linear.RealVector r1, $r2;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        $d2 = $d0 / $d1;

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: org.apache.commons.math.linear.RealVector mapMultiply(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector projection(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2, $r4;
        double[] r1;
        int $i0;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r2 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(double[])>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector)>($r2);

        $r4 = (org.apache.commons.math.linear.OpenMapRealVector) $r3;

        return $r4;
    }

    public void setEntry(int, double) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0;
        double d0;
        boolean $z0, $z1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>(i0);

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: boolean isDefaultValue(double)>(d0);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>(i0, d0);

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z1 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i0);

        if $z1 == 0 goto label2;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double remove(int)>(i0);

     label2:
        return;
    }

    public void setSubVector(int, org.apache.commons.math.linear.RealVector) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math.linear.RealVector r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealVector;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>(i0);

        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $i2 = i0 + $i1;

        $i3 = $i2 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>($i3);

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void setSubVector(int,double[])>(i0, $r2);

        return;
    }

    public void setSubVector(int, double[]) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double[] r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>(i0);

        $i1 = lengthof r1;

        $i2 = i0 + $i1;

        $i3 = $i2 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkIndex(int)>($i3);

        i6 = 0;

     label1:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label2;

        $i5 = i6 + i0;

        $d0 = r1[i6];

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>($i5, $d0);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void set(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double d0;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i1, d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.OpenMapRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1, r2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r3;
        int i0, $i1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r4, $r5, $r6;
        boolean $z0, $z1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $i1 = virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i1);

        r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        $r4 = specialinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        r3 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        i0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $r5 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z1 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i0);

        if $z1 == 0 goto label2;

        $r6 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i0);

        $d3 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d4 = $d2 - $d3;

        virtualinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i0, $d4);

        goto label3;

     label2:
        $d0 = virtualinvoke r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d1 = neg $d0;

        virtualinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i0, $d1);

     label3:
        goto label1;

     label4:
        return r2;
    }

    public org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3, $r4, $r5;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;
        boolean $z0;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.OpenMapRealVector)>($r4);

        return $r5;

     label1:
        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector subtract(double[])>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.OpenMapRealVector subtract(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r3;
        double[] r1;
        int $i0, $i1, i2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r4, $r5;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: void checkVectorDimensions(int)>($i0);

        $r3 = new org.apache.commons.math.linear.OpenMapRealVector;

        specialinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        $r4 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $z0 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: boolean containsKey(int)>(i2);

        if $z0 == 0 goto label2;

        $r5 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $d2 = virtualinvoke $r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double get(int)>(i2);

        $d3 = r1[i2];

        $d4 = $d2 - $d3;

        virtualinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i2, $d4);

        goto label3;

     label2:
        $d0 = r1[i2];

        $d1 = neg $d0;

        virtualinvoke $r3.<org.apache.commons.math.linear.OpenMapRealVector: void setEntry(int,double)>(i2, $d1);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public org.apache.commons.math.linear.OpenMapRealVector unitVector()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        virtualinvoke r1.<org.apache.commons.math.linear.OpenMapRealVector: void unitize()>();

        return r1;
    }

    public void unitize()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double d0, $d1, $d2;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r1;
        boolean $z0, $z1;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2, $r3;
        int $i0;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;
        java.lang.ArithmeticException $r6;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getNorm()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: boolean isDefaultValue(double)>(d0);

        if $z0 == 0 goto label1;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r4 = newarray (java.lang.Object)[0];

        $r6 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r6;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r1 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label2:
        $z1 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $d2 = $d1 / d0;

        virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: double put(int,double)>($i0, $d2);

        goto label2;

     label3:
        return;
    }

    public double[] toArray()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double[] getData()>();

        return $r1;
    }

    public int hashCode()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r1;
        double $d0, $d1;
        long $l1, $l2, $l7, $l8, l12, l15;
        int $i3, $i4, $i5, $i6, $i9, $i10, i13, i14;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r2;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $d0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        l12 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i4 = 31 * 1;

        $l1 = l12 >>> 32;

        $l2 = l12 ^ $l1;

        $i3 = (int) $l2;

        i13 = $i4 + $i3;

        $i6 = 31 * i13;

        $i5 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        i14 = $i6 + $i5;

        $r2 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r1 = virtualinvoke $r2.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label1:
        $z0 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $d1 = virtualinvoke r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        l15 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i10 = 31 * i14;

        $l7 = l15 >> 32;

        $l8 = l15 ^ $l7;

        $i9 = (int) $l8;

        i14 = $i10 + $i9;

        goto label1;

     label2:
        return i14;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i6, $i9;
        double $d0, $d1, $d2, $d3, d4, d5;
        long $l2, $l3, $l5, $l7, $l10, $l11;
        byte $b4, $b8, $b12;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r3, $r4;
        org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator r5, r6;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.apache.commons.math.linear.OpenMapRealVector;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (org.apache.commons.math.linear.OpenMapRealVector) r1;

        $i1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        $i0 = r2.<org.apache.commons.math.linear.OpenMapRealVector: int virtualSize>;

        if $i1 == $i0 goto label03;

        return 0;

     label03:
        $d0 = r0.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<org.apache.commons.math.linear.OpenMapRealVector: double epsilon>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b4 = $l2 cmp $l3;

        if $b4 == 0 goto label04;

        return 0;

     label04:
        $r3 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        r5 = virtualinvoke $r3.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label05:
        $z1 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        $i9 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        d4 = virtualinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>($i9);

        $l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d4);

        $d3 = virtualinvoke r5.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $l11 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b12 = $l10 cmp $l11;

        if $b12 == 0 goto label06;

        return 0;

     label06:
        goto label05;

     label07:
        $r4 = specialinvoke r2.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap getEntries()>();

        r6 = virtualinvoke $r4.<org.apache.commons.math.util.OpenIntToDoubleHashMap: org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator iterator()>();

     label08:
        $z2 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: void advance()>();

        d5 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: double value()>();

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d5);

        $i6 = virtualinvoke r6.<org.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator: int key()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getEntry(int)>($i6);

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $b8 = $l5 cmp $l7;

        if $b8 == 0 goto label09;

        return 0;

     label09:
        goto label08;

     label10:
        return 1;
    }

    public double getSparcity()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: double getSparsity()>();

        return $d0;
    }

    public double getSparsity()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;
        int $i0, $i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math.util.OpenIntToDoubleHashMap: int size()>();

        $d0 = (double) $i0;

        $i1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: int getDimension()>();

        $d1 = (double) $i1;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public java.util.Iterator sparseIterator()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = new org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator;

        specialinvoke $r1.<org.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator: void <init>(org.apache.commons.math.linear.OpenMapRealVector)>(r0);

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector unitVector()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector unitVector()>();

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector projection(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector projection(double[])>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector ebeMultiply(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(double[])>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector ebeDivide(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector ebeDivide(double[])>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.AbstractRealVector copy()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector mapAddToSelf(double)>(d0);

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector mapAdd(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector mapAdd(double)>(d0);

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        org.apache.commons.math.linear.RealVector r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector subtract(org.apache.commons.math.linear.RealVector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector subtract(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector subtract(double[])>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector getSubVector(int, int)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector getSubVector(int,int)>(i0, i1);

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector append(double[])
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: double[];

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector append(double[])>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector append(double)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;
        double d0;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector append(double)>(d0);

        return $r1;
    }

    public volatile org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        org.apache.commons.math.linear.RealVector r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector append(org.apache.commons.math.linear.RealVector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        org.apache.commons.math.linear.RealVector r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector ebeDivide(org.apache.commons.math.linear.RealVector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r2;
        org.apache.commons.math.linear.RealVector r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $r2 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math.linear.RealVector)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math.linear.RealVector copy()
    {
        org.apache.commons.math.linear.OpenMapRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.linear.OpenMapRealVector copy()>();

        return $r1;
    }

    static org.apache.commons.math.util.OpenIntToDoubleHashMap access$000(org.apache.commons.math.linear.OpenMapRealVector)
    {
        org.apache.commons.math.linear.OpenMapRealVector r0;
        org.apache.commons.math.util.OpenIntToDoubleHashMap $r1;

        r0 := @parameter0: org.apache.commons.math.linear.OpenMapRealVector;

        $r1 = r0.<org.apache.commons.math.linear.OpenMapRealVector: org.apache.commons.math.util.OpenIntToDoubleHashMap entries>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.linear.OpenMapRealVector: long serialVersionUID> = 8772222695580707260L;

        <org.apache.commons.math.linear.OpenMapRealVector: double DEFAULT_ZERO_TOLERANCE> = 1.0E-12;

        return;
    }
}
