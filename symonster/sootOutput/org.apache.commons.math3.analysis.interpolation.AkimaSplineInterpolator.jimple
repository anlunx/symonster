public class org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
{
    private static final int MINIMUM_NUMBER_POINTS;

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] r1, r2, r3, r4, r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i43, i44;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35;
        org.apache.commons.math3.exception.NullArgumentException $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r6;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.lang.Integer $r9, $r10;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r5 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r5.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r5;

     label02:
        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label03;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i41 = lengthof r1;

        $i40 = lengthof r2;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i41, $i40);

        throw $r11;

     label03:
        $i3 = lengthof r1;

        if $i3 >= 5 goto label04;

        $r7 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $i39 = lengthof r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i39);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        specialinvoke $r7.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r8, $r9, $r10, 1);

        throw $r7;

     label04:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        $i4 = lengthof r1;

        i0 = $i4 - 1;

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        i42 = 0;

     label05:
        $i5 = lengthof r3;

        if i42 >= $i5 goto label06;

        $i37 = i42 + 1;

        $d30 = r2[$i37];

        $d29 = r2[i42];

        $d34 = $d30 - $d29;

        $i38 = i42 + 1;

        $d32 = r1[$i38];

        $d31 = r1[i42];

        $d33 = $d32 - $d31;

        $d35 = $d34 / $d33;

        r3[i42] = $d35;

        i42 = i42 + 1;

        goto label05;

     label06:
        i43 = 1;

     label07:
        $i6 = lengthof r4;

        if i43 >= $i6 goto label08;

        $d26 = r3[i43];

        $i36 = i43 - 1;

        $d25 = r3[$i36];

        $d27 = $d26 - $d25;

        $d28 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d27);

        r4[i43] = $d28;

        i43 = i43 + 1;

        goto label07;

     label08:
        $i7 = lengthof r1;

        r12 = newarray (double)[$i7];

        i44 = 2;

     label09:
        $i8 = lengthof r12;

        $i9 = $i8 - 2;

        if i44 >= $i9 goto label12;

        $i30 = i44 + 1;

        d0 = r4[$i30];

        $i31 = i44 - 1;

        d1 = r4[$i31];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d0, 0.0);

        if $z0 == 0 goto label10;

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d1, 0.0);

        if $z1 == 0 goto label10;

        d2 = r1[i44];

        $i33 = i44 + 1;

        d3 = r1[$i33];

        $i34 = i44 - 1;

        d4 = r1[$i34];

        $d17 = d3 - d2;

        $i35 = i44 - 1;

        $d16 = r3[$i35];

        $d21 = $d17 * $d16;

        $d19 = d2 - d4;

        $d18 = r3[i44];

        $d20 = $d19 * $d18;

        $d23 = $d21 + $d20;

        $d22 = d3 - d4;

        $d24 = $d23 / $d22;

        r12[i44] = $d24;

        goto label11;

     label10:
        $i32 = i44 - 1;

        $d9 = r3[$i32];

        $d12 = d0 * $d9;

        $d10 = r3[i44];

        $d11 = d1 * $d10;

        $d14 = $d12 + $d11;

        $d13 = d0 + d1;

        $d15 = $d14 / $d13;

        r12[i44] = $d15;

     label11:
        i44 = i44 + 1;

        goto label09;

     label12:
        $d5 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>(r1, r2, 0, 0, 1, 2);

        r12[0] = $d5;

        $d6 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>(r1, r2, 1, 0, 1, 2);

        r12[1] = $d6;

        $i10 = lengthof r1;

        $i19 = $i10 - 2;

        $i11 = lengthof r1;

        $i18 = $i11 - 2;

        $i12 = lengthof r1;

        $i17 = $i12 - 3;

        $i13 = lengthof r1;

        $i16 = $i13 - 2;

        $i14 = lengthof r1;

        $i15 = $i14 - 1;

        $d7 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>(r1, r2, $i18, $i17, $i16, $i15);

        r12[$i19] = $d7;

        $i20 = lengthof r1;

        $i29 = $i20 - 1;

        $i21 = lengthof r1;

        $i28 = $i21 - 1;

        $i22 = lengthof r1;

        $i27 = $i22 - 3;

        $i23 = lengthof r1;

        $i26 = $i23 - 2;

        $i24 = lengthof r1;

        $i25 = $i24 - 1;

        $d8 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: double differentiateThreePoint(double[],double[],int,int,int,int)>(r1, r2, $i28, $i27, $i26, $i25);

        r12[$i29] = $d8;

        $r6 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolateHermiteSorted(double[],double[],double[])>(r1, r2, r12);

        return $r6;
    }

    private double differentiateThreePoint(double[], double[], int, int, int, int)
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] r1, r2;
        int i0, i1, i2, i3;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        d0 = r2[i1];

        d1 = r2[i2];

        d2 = r2[i3];

        $d9 = r1[i0];

        $d8 = r1[i1];

        d3 = $d9 - $d8;

        $d11 = r1[i2];

        $d10 = r1[i1];

        d4 = $d11 - $d10;

        $d13 = r1[i3];

        $d12 = r1[i1];

        d5 = $d13 - $d12;

        $d17 = d2 - d0;

        $d15 = d5 / d4;

        $d14 = d1 - d0;

        $d16 = $d15 * $d14;

        $d21 = $d17 - $d16;

        $d19 = d5 * d5;

        $d18 = d4 * d5;

        $d20 = $d19 - $d18;

        d6 = $d21 / $d20;

        $d24 = d1 - d0;

        $d22 = d6 * d4;

        $d23 = $d22 * d4;

        $d25 = $d24 - $d23;

        d7 = $d25 / d4;

        $d26 = 2.0 * d6;

        $d27 = $d26 * d3;

        $d28 = $d27 + d7;

        return $d28;
    }

    private org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolateHermiteSorted(double[], double[], double[])
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] r1, r2, r3, r5;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r4;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r7;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r9;
        java.lang.Integer $r10, $r11;
        org.apache.commons.math3.exception.DimensionMismatchException $r12, $r13;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label1;

        $r13 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i16 = lengthof r1;

        $i15 = lengthof r2;

        specialinvoke $r13.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i16, $i15);

        throw $r13;

     label1:
        $i5 = lengthof r1;

        $i4 = lengthof r3;

        if $i5 == $i4 goto label2;

        $r12 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i14 = lengthof r1;

        $i13 = lengthof r3;

        specialinvoke $r12.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i14, $i13);

        throw $r12;

     label2:
        $i6 = lengthof r1;

        if $i6 >= 2 goto label3;

        $r8 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $i12 = lengthof r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        specialinvoke $r8.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r9, $r10, $r11, 1);

        throw $r8;

     label3:
        $i7 = lengthof r1;

        i1 = $i7 - 1;

        r4 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i1];

        r5 = newarray (double)[4];

        i17 = 0;

     label4:
        $i8 = lengthof r4;

        if i17 >= $i8 goto label5;

        $i9 = i17 + 1;

        $d7 = r1[$i9];

        $d6 = r1[i17];

        d0 = $d7 - $d6;

        d1 = d0 * d0;

        d2 = r2[i17];

        $i10 = i17 + 1;

        d3 = r2[$i10];

        d4 = r3[i17];

        $i11 = i17 + 1;

        d5 = r3[$i11];

        r5[0] = d2;

        $d8 = r3[i17];

        r5[1] = $d8;

        $d9 = d3 - d2;

        $d10 = 3.0 * $d9;

        $d12 = $d10 / d0;

        $d11 = 2.0 * d4;

        $d13 = $d12 - $d11;

        $d14 = $d13 - d5;

        $d15 = $d14 / d0;

        r5[2] = $d15;

        $d16 = d2 - d3;

        $d17 = 2.0 * $d16;

        $d18 = $d17 / d0;

        $d19 = $d18 + d4;

        $d20 = $d19 + d5;

        $d21 = $d20 / d1;

        r5[3] = $d21;

        $r7 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r7.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r5);

        r4[i17] = $r7;

        i17 = i17 + 1;

        goto label4;

     label5:
        $r6 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        specialinvoke $r6.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>(r1, r4);

        return $r6;
    }

    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator r0;
        double[] r1, r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.interpolation.AkimaSplineInterpolator: int MINIMUM_NUMBER_POINTS> = 5;

        return;
    }
}
