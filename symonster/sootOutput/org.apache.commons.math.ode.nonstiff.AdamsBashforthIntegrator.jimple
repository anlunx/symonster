public class org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator extends org.apache.commons.math.ode.nonstiff.AdamsIntegrator
{
    private static final java.lang.String METHOD_NAME;

    public void <init>(int, double, double, double, double) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator r0;
        int i0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Bashforth", i0, i0, d0, d1, d2, d3);

        return;
    }

    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator r0;
        int i0;
        double d0, d1;
        double[] r1, r2;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 := @parameter3: double[];

        r2 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Bashforth", i0, i0, d0, d1, r1, r2);

        return;
    }

    public double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, d39, d40, d41, $d42, d44, d45, $d46, d47;
        double[] r2, r3, r4, r6, $r10, $r12, $r14, $r16, $r18, $r19, $r20, $r21;
        int i0, $i2, $i3, $i4, $i5, $i10, $i11, i13, i15, i16;
        boolean z0, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        byte $b1, $b6, $b7, $b8, $b9, $b12, $b14;
        org.apache.commons.math.ode.sampling.NordsieckStepInterpolator $r7;
        java.util.Collection $r8;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r9, $r11, $r13, $r15, $r17, $r22, r26;
        java.lang.Object $r23;
        java.util.Iterator r24;
        org.apache.commons.math.ode.sampling.StepHandler r25;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        i0 = lengthof r2;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>(r1, d0, r2, d1, r3);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)>(r1);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void resetEvaluations()>();

        $b1 = d1 cmpl d0;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        if r3 == r2 goto label03;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);

     label03:
        r4 = newarray (double)[i0];

        $r7 = new org.apache.commons.math.ode.sampling.NordsieckStepInterpolator;

        specialinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean)>(r3, z0);

        $r8 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: java.util.Collection stepHandlers>;

        r24 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z6 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label05;

        $r23 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (org.apache.commons.math.ode.sampling.StepHandler) $r23;

        interfaceinvoke r25.<org.apache.commons.math.ode.sampling.StepHandler: void reset()>();

        goto label04;

     label05:
        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void setStateInitialized(boolean)>(0);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>(d0, r3, d1);

        $d9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d8 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r10 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($d9, $d8, $r10, $r9);

        $d10 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d10);

        $r11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        $i2 = virtualinvoke $r11.<org.apache.commons.math.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i13 = $i2 - 1;

        d39 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d39);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep> = 0;

     label06:
        d40 = 10.0;

     label07:
        $b14 = d40 cmpl 1.0;

        if $b14 < 0 goto label12;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize> = d39;

        d41 = 0.0;

        i15 = 0;

     label08:
        $i10 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        if i15 >= $i10 goto label11;

        $d30 = r3[i15];

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d30);

        $r19 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        if $r19 != null goto label09;

        $d38 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double scalAbsoluteTolerance>;

        $d36 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double scalRelativeTolerance>;

        $d37 = $d36 * d2;

        $d42 = $d38 + $d37;

        goto label10;

     label09:
        $r20 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        $d33 = $r20[i15];

        $r21 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] vecRelativeTolerance>;

        $d31 = $r21[i15];

        $d32 = $d31 * d2;

        $d42 = $d33 + $d32;

     label10:
        $r22 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        $d34 = virtualinvoke $r22.<org.apache.commons.math.linear.Array2DRowRealMatrix: double getEntry(int,int)>(i13, i15);

        d4 = $d34 / $d42;

        $d35 = d4 * d4;

        d41 = d41 + $d35;

        i15 = i15 + 1;

        goto label08;

     label11:
        $i11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        $d26 = (double) $i11;

        $d27 = d41 / $d26;

        d40 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d27);

        $b12 = d40 cmpl 1.0;

        if $b12 < 0 goto label07;

        d44 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>(d40);

        $d28 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $d29 = $d28 * d44;

        d39 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>($d29, z0, 0);

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d39);

        goto label07;

     label12:
        $d12 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d45 = $d12 + $d11;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void shift()>();

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>(d45);

        $r12 = virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r3, 0, $i3);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void computeDerivatives(double,double[],double[])>(d45, r3, r4);

        $i4 = lengthof r2;

        r6 = newarray (double)[$i4];

        i16 = 0;

     label13:
        $i5 = lengthof r2;

        if i16 >= $i5 goto label14;

        $d24 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $d23 = r4[i16];

        $d25 = $d24 * $d23;

        r6[i16] = $d25;

        i16 = i16 + 1;

        goto label13;

     label14:
        $r13 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        r26 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix)>($r13);

        $r14 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($r14, r6, r26);

        $d13 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>(d45, $d13, r6, r26);

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d45);

        $d14 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r7, r3, r4, d1);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart> = $d14;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled> = r6;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck> = r26;

        $d15 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r16 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r15 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>(d45, $d15, $r16, $r15);

        $z3 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z3 != 0 goto label25;

        $d16 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d16);

        $z4 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: boolean resetOccurred>;

        if $z4 == 0 goto label15;

        $d20 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>($d20, r3, d1);

        $d22 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d21 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r18 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r17 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math.linear.Array2DRowRealMatrix)>($d22, $d21, $r18, $r17);

     label15:
        d3 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>(d40);

        $d17 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d5 = $d17 * d3;

        $d18 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d6 = $d18 + d5;

        if z0 == 0 goto label17;

        $b9 = d6 cmpl d1;

        if $b9 < 0 goto label16;

        $z7 = 1;

        goto label19;

     label16:
        $z7 = 0;

        goto label19;

     label17:
        $b6 = d6 cmpg d1;

        if $b6 > 0 goto label18;

        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        d39 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>(d5, z0, $z7);

        $d46 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d7 = $d46 + d39;

        if z0 == 0 goto label21;

        $b8 = d7 cmpl d1;

        if $b8 < 0 goto label20;

        $z8 = 1;

        goto label23;

     label20:
        $z8 = 0;

        goto label23;

     label21:
        $b7 = d7 cmpg d1;

        if $b7 > 0 goto label22;

        $z8 = 1;

        goto label23;

     label22:
        $z8 = 0;

     label23:
        if $z8 == 0 goto label24;

        $d19 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d39 = d1 - $d19;

     label24:
        virtualinvoke $r7.<org.apache.commons.math.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d39);

     label25:
        $z9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z9 == 0 goto label06;

        d47 = r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: void resetInternalState()>();

        return d47;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegrator: java.lang.String METHOD_NAME> = "Adams-Bashforth";

        return;
    }
}
