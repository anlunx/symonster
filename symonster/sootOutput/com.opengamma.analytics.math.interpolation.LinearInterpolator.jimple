public class com.opengamma.analytics.math.interpolation.LinearInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final double ERROR;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator r0;
        double[] r1, r2, $r9, $r11, $r13, $r15, $r17, r18, r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i13, i14, i15, i16, i17, i18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r3;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, d26;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7;
        byte $b10, $b12;
        double[][] $r8, $r10, $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "xValues length = yValues length");

        $i3 = lengthof r1;

        if $i3 <= 1 goto label03;

        $z9 = 1;

        goto label04;

     label03:
        $z9 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 1");

        i0 = lengthof r1;

        i13 = 0;

     label05:
        if i13 >= i0 goto label06;

        $d21 = r1[i13];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d21);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xData containing NaN");

        $d22 = r1[i13];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d22);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xData containing Infinity");

        $d23 = r2[i13];

        $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d23);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z6, "yData containing NaN");

        $d24 = r2[i13];

        $z7 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d24);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z7, "yData containing Infinity");

        i13 = i13 + 1;

        goto label05;

     label06:
        i14 = 0;

     label07:
        if i14 >= i0 goto label12;

        i15 = i14 + 1;

     label08:
        if i15 >= i0 goto label11;

        $d20 = r1[i14];

        $d19 = r1[i15];

        $b12 = $d20 cmpl $d19;

        if $b12 != 0 goto label09;

        $z10 = 1;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i15 = i15 + 1;

        goto label08;

     label11:
        i14 = i14 + 1;

        goto label07;

     label12:
        r18 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r19 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r18, r19);

        r3 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.LinearInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r18, r19);

        i16 = 0;

     label13:
        $i4 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        if i16 >= $i4 goto label20;

        i17 = 0;

     label14:
        $i6 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        if i17 >= $i6 goto label15;

        $r14 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r15 = $r14[i16];

        $d17 = $r15[i17];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d17);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "Too large input");

        $r16 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r17 = $r16[i16];

        $d18 = $r17[i17];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d18);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "Too large input");

        i17 = i17 + 1;

        goto label14;

     label15:
        d25 = 0.0;

        $i7 = i16 + 1;

        $d2 = r18[$i7];

        $d1 = r18[i16];

        d0 = $d2 - $d1;

        i18 = 0;

     label16:
        if i18 >= 2 goto label17;

        $r8 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r9 = $r8[i16];

        $d12 = $r9[i18];

        $i11 = 1 - i18;

        $d11 = (double) $i11;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d11);

        $d14 = $d12 * $d13;

        d25 = d25 + $d14;

        $r10 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r11 = $r10[i16];

        $d15 = $r11[i18];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d15);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r12 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r13 = $r12[i16];

        $d16 = $r13[i18];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d16);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i18 = i18 + 1;

        goto label16;

     label17:
        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d25);

        $i8 = i16 + 1;

        $d4 = r19[$i8];

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $d6 = $d3 + $d5;

        d26 = staticinvoke <java.lang.Math: double max(double,double)>($d6, 0.1);

        $i9 = i16 + 1;

        $d7 = r19[$i9];

        $d8 = d25 - $d7;

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        $d10 = 1.0E-13 * d26;

        $b10 = $d9 cmpg $d10;

        if $b10 >= 0 goto label18;

        $z11 = 1;

        goto label19;

     label18:
        $z11 = 0;

     label19:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Input is too large/small or data are not distinct enough");

        i16 = i16 + 1;

        goto label13;

     label20:
        $r6 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r7 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r18);

        $i5 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        specialinvoke $r6.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r7, r3, $i5, 1);

        return $r6;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator r0;
        double[] r1, $r5, $r13, $r14, $r18, $r21, $r24, $r25, $r26, r27, r29;
        double[][] r2, $r17, $r20, $r23, r30;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, d23, d24;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r6, $r7, $r10, $r11, $r15, $r16, $r19, $r22;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r12;
        byte $b13, $b15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r28;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i3 = lengthof r1;

        $r5 = r2[0];

        $i2 = lengthof $r5;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z6, "(xValues length = yValuesMatrix\'s row vector length)");

        $i4 = lengthof r1;

        if $i4 <= 1 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Data points should be more than 1");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i16 = 0;

     label05:
        if i16 >= i0 goto label08;

        $d19 = r1[i16];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d19);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "xData containing NaN");

        $d20 = r1[i16];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d20);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xData containing Infinity");

        i17 = 0;

     label06:
        if i17 >= i1 goto label07;

        $r25 = r2[i17];

        $d21 = $r25[i16];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d21);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "yValuesMatrix containing NaN");

        $r26 = r2[i17];

        $d22 = $r26[i16];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d22);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "yValuesMatrix containing Infinity");

        i17 = i17 + 1;

        goto label06;

     label07:
        i16 = i16 + 1;

        goto label05;

     label08:
        i18 = 0;

     label09:
        if i18 >= i1 goto label16;

        i19 = 0;

     label10:
        if i19 >= i0 goto label15;

        i20 = i19 + 1;

     label11:
        if i20 >= i0 goto label14;

        $d18 = r1[i19];

        $d17 = r1[i20];

        $b15 = $d18 cmpl $d17;

        if $b15 != 0 goto label12;

        $z8 = 1;

        goto label13;

     label12:
        $z8 = 0;

     label13:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z8, "xValues should be distinct");

        i20 = i20 + 1;

        goto label11;

     label14:
        i19 = i19 + 1;

        goto label10;

     label15:
        i18 = i18 + 1;

        goto label09;

     label16:
        r27 = newarray (double)[i0];

        r28 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i1];

        i21 = 0;

     label17:
        if i21 >= i1 goto label24;

        r27 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        $r14 = r2[i21];

        r29 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r14, i0);

        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r27, r29);

        $r15 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.LinearInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r27, r29);

        r28[i21] = $r15;

        i22 = 0;

     label18:
        $i8 = lengthof r27;

        $i9 = $i8 - 1;

        if i22 >= $i9 goto label23;

        d23 = 0.0;

        $i10 = i22 + 1;

        $d2 = r27[$i10];

        $d1 = r27[i22];

        d0 = $d2 - $d1;

        i23 = 0;

     label19:
        if i23 >= 2 goto label20;

        $r16 = r28[i21];

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i22];

        $d12 = $r18[i23];

        $i14 = 1 - i23;

        $d11 = (double) $i14;

        $d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d11);

        $d14 = $d12 * $d13;

        d23 = d23 + $d14;

        $r19 = r28[i21];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i22];

        $d15 = $r21[i23];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d15);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r22 = r28[i21];

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r24 = $r23[i22];

        $d16 = $r24[i23];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d16);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i23 = i23 + 1;

        goto label19;

     label20:
        $d3 = staticinvoke <java.lang.Math: double abs(double)>(d23);

        $i11 = i22 + 1;

        $d4 = r29[$i11];

        $d5 = staticinvoke <java.lang.Math: double abs(double)>($d4);

        $d6 = $d3 + $d5;

        d24 = staticinvoke <java.lang.Math: double max(double,double)>($d6, 0.1);

        $i12 = i22 + 1;

        $d7 = r29[$i12];

        $d8 = d23 - $d7;

        $d9 = staticinvoke <java.lang.Math: double abs(double)>($d8);

        $d10 = 1.0E-13 * d24;

        $b13 = $d9 cmpg $d10;

        if $b13 >= 0 goto label21;

        $z9 = 1;

        goto label22;

     label21:
        $z9 = 0;

     label22:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Input is too large/small or data points are too close");

        i22 = i22 + 1;

        goto label18;

     label23:
        i21 = i21 + 1;

        goto label17;

     label24:
        $r6 = r28[0];

        i24 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r7 = r28[0];

        i25 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i5 = i1 * i24;

        r30 = newmultiarray (double)[$i5][i25];

        i26 = 0;

     label25:
        if i26 >= i24 goto label28;

        i27 = 0;

     label26:
        if i27 >= i1 goto label27;

        $i6 = i1 * i26;

        $i7 = $i6 + i27;

        $r11 = r28[i27];

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i26);

        $r13 = virtualinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r30[$i7] = $r13;

        i27 = i27 + 1;

        goto label26;

     label27:
        i26 = i26 + 1;

        goto label25;

     label28:
        $r8 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r9 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r27);

        $r10 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r30);

        specialinvoke $r8.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r9, $r10, i25, i1);

        return $r8;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator r0;
        double[] r1, r2;
        org.apache.commons.lang.NotImplementedException $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r3.<org.apache.commons.lang.NotImplementedException: void <init>(java.lang.String)>("Use LinearInterpolator1D for node sensitivity");

        throw $r3;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.LinearInterpolator r0;
        double[] r1, r2, $r5, $r6;
        int i0, $i1, $i2, $i3, $i4, i5;
        double[][] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.opengamma.analytics.math.interpolation.LinearInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        $i1 = i0 - 1;

        r3 = newmultiarray (double)[$i1][2];

        i5 = 0;

     label1:
        $i2 = i0 - 1;

        if i5 >= $i2 goto label2;

        $r5 = r3[i5];

        $d0 = r2[i5];

        $r5[1] = $d0;

        $r6 = r3[i5];

        $i3 = i5 + 1;

        $d2 = r2[$i3];

        $d1 = r2[i5];

        $d6 = $d2 - $d1;

        $i4 = i5 + 1;

        $d4 = r1[$i4];

        $d3 = r1[i5];

        $d5 = $d4 - $d3;

        $d7 = $d6 / $d5;

        $r6[0] = $d7;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r4 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.LinearInterpolator: double ERROR> = 1.0E-13;

        return;
    }
}
