public class org.apache.commons.math3.ml.neuralnet.Network extends java.lang.Object implements java.lang.Iterable, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.ConcurrentHashMap neuronMap;
    private final java.util.concurrent.atomic.AtomicLong nextId;
    private final int featureSize;
    private final java.util.concurrent.ConcurrentHashMap linkMap;

    void <init>(long, int, org.apache.commons.math3.ml.neuralnet.Neuron[], long[][])
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long l0, l3, $l6, $l7, l11;
        int i1, i2, i4, $i5, i9, i10, i12;
        org.apache.commons.math3.ml.neuralnet.Neuron[] r1;
        long[][] r2;
        java.util.Set r3;
        long[] r4;
        java.lang.Long r5, $r11, $r17, $r20;
        java.util.concurrent.ConcurrentHashMap $r6, $r7, $r10, $r13, $r16, $r19;
        java.util.concurrent.atomic.AtomicLong $r8;
        org.apache.commons.math3.ml.neuralnet.Neuron $r9, r25;
        java.lang.Object $r12, $r14;
        org.apache.commons.math3.exception.MathIllegalStateException $r15, $r23, $r24;
        byte $b8;
        java.util.HashSet $r21;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.ml.neuralnet.Neuron[];

        r2 := @parameter3: long[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap> = $r6;

        $r7 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap> = $r7;

        i2 = lengthof r1;

        $i5 = lengthof r2;

        if i2 == $i5 goto label1;

        $r24 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r24.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r24;

     label1:
        i9 = 0;

     label2:
        if i9 >= i2 goto label4;

        r25 = r1[i9];

        l3 = virtualinvoke r25.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $b8 = l3 cmp l0;

        if $b8 < 0 goto label3;

        $r23 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r23.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r23;

     label3:
        $r16 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r25);

        $r19 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l3);

        $r21 = new java.util.HashSet;

        specialinvoke $r21.<java.util.HashSet: void <init>()>();

        virtualinvoke $r19.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21);

        i9 = i9 + 1;

        goto label2;

     label4:
        i10 = 0;

     label5:
        if i10 >= i2 goto label9;

        $r9 = r1[i10];

        l11 = virtualinvoke $r9.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r10 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11);

        $r12 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r11);

        r3 = (java.util.Set) $r12;

        r4 = r2[i10];

        i4 = lengthof r4;

        i12 = 0;

     label6:
        if i12 >= i4 goto label8;

        $l6 = r4[i12];

        r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r13 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r14 = virtualinvoke $r13.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r5);

        if $r14 != null goto label7;

        $r15 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r15.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r15;

     label7:
        $l7 = virtualinvoke r5.<java.lang.Long: long longValue()>();

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void addLinkToLinkSet(java.util.Set,long)>(r3, $l7);

        i12 = i12 + 1;

        goto label6;

     label8:
        i10 = i10 + 1;

        goto label5;

     label9:
        $r8 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(l0);

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId> = $r8;

        r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize> = i1;

        return;
    }

    public void <init>(long, int)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long l0;
        int i1;
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        java.util.concurrent.atomic.AtomicLong $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(l0);

        r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId> = $r3;

        r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize> = i1;

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.util.Collection getNeurons(java.util.Comparator)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Comparator r1;
        java.util.ArrayList $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.Collection $r5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Comparator;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, r1);

        return $r3;
    }

    public long createNeuron(double[])
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        double[] r1;
        long l0;
        int $i1, $i2, $i3, $i4;
        java.lang.Long $r2, $r4, $r8;
        java.util.concurrent.ConcurrentHashMap $r3, $r7;
        org.apache.commons.math3.ml.neuralnet.Neuron $r5;
        java.util.HashSet $r9;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: double[];

        $i2 = lengthof r1;

        $i1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        if $i2 == $i1 goto label1;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r1;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r11;

     label1:
        $r2 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.lang.Long createNextId()>();

        l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

        $r3 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r5 = new org.apache.commons.math3.ml.neuralnet.Neuron;

        specialinvoke $r5.<org.apache.commons.math3.ml.neuralnet.Neuron: void <init>(long,double[])>(l0, r1);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        return l0;
    }

    public void deleteNeuron(org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1, r4;
        java.util.Collection r2;
        java.util.Iterator r3;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap $r5;
        long $l0;
        java.lang.Long $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>(r1);

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r8;

        virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void deleteLink(org.apache.commons.math3.ml.neuralnet.Neuron,org.apache.commons.math3.ml.neuralnet.Neuron)>(r4, r1);

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $l0 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r6);

        return;
    }

    public int getFeaturesSize()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        return $i0;
    }

    public void addLink(org.apache.commons.math3.ml.neuralnet.Neuron, org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1, r2, $r3, $r4;
        long l0, l1;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.Long $r6;
        java.lang.Object $r7;
        java.util.Set $r8;
        java.util.NoSuchElementException $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.Neuron;

        l0 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        l1 = virtualinvoke r2.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(l0);

        if r1 == $r3 goto label1;

        $r11 = new java.util.NoSuchElementException;

        $r12 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke $r11.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(l1);

        if r2 == $r4 goto label2;

        $r9 = new java.util.NoSuchElementException;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.Set) $r7;

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void addLinkToLinkSet(java.util.Set,long)>($r8, l1);

        return;
    }

    private void addLinkToLinkSet(java.util.Set, long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Set r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r2);

        return;
    }

    public void deleteLink(org.apache.commons.math3.ml.neuralnet.Neuron, org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1, r2, $r3, $r4;
        long l0, l1;
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.Long $r6;
        java.lang.Object $r7;
        java.util.Set $r8;
        java.util.NoSuchElementException $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 := @parameter1: org.apache.commons.math3.ml.neuralnet.Neuron;

        l0 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        l1 = virtualinvoke r2.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(l0);

        if r1 == $r3 goto label1;

        $r11 = new java.util.NoSuchElementException;

        $r12 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke $r11.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label1:
        $r4 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>(l1);

        if r2 == $r4 goto label2;

        $r9 = new java.util.NoSuchElementException;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r7 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.Set) $r7;

        specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: void deleteLinkFromLinkSet(java.util.Set,long)>($r8, l1);

        return;
    }

    private void deleteLinkFromLinkSet(java.util.Set, long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.Set r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.util.Set;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        return;
    }

    public org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        long l0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Long $r3;
        java.lang.Object $r4;
        java.util.NoSuchElementException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        l0 := @parameter0: long;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r4;

        if r1 != null goto label1;

        $r5 = new java.util.NoSuchElementException;

        $r6 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        return r1;
    }

    public java.util.Collection getNeighbours(java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.lang.Iterable r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.lang.Iterable;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(java.lang.Iterable,java.lang.Iterable)>(r1, null);

        return $r2;
    }

    public java.util.Collection getNeighbours(java.lang.Iterable, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.lang.Iterable r1, r2;
        java.lang.Long r4, $r10, $r13;
        java.util.HashSet $r5;
        boolean $z0, $z2, $z5;
        java.util.ArrayList $r6;
        java.lang.Object $r7, $r9, $r11, $r14;
        long $l0, $l1, $l2;
        org.apache.commons.math3.ml.neuralnet.Neuron $r8, r17, r19;
        java.util.concurrent.ConcurrentHashMap $r12;
        java.util.Collection $r15;
        java.util.Iterator r16, r18, r21;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.lang.Iterable;

        r2 := @parameter1: java.lang.Iterable;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r16 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r11;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $l2 = virtualinvoke r17.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r14 = virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r13);

        $r15 = (java.util.Collection) $r14;

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r15);

        goto label1;

     label2:
        if r2 == null goto label4;

        r18 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r9 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r9;

        $l1 = virtualinvoke r19.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>($r10);

        goto label3;

     label4:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r21 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Long) $r7;

        $l0 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        $r8 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l0);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label5;

     label6:
        return $r6;
    }

    public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron,java.lang.Iterable)>(r1, null);

        return $r2;
    }

    public java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron, java.lang.Iterable)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron r1, $r10, r14;
        java.lang.Iterable r2;
        java.util.Set r3;
        java.lang.Long r4, $r6, $r12;
        java.util.concurrent.ConcurrentHashMap $r5;
        long $l0, $l1, $l2;
        java.lang.Object $r7, $r9, $r11;
        java.util.ArrayList $r8;
        boolean $z1, $z3;
        java.util.Iterator r13, r16;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: org.apache.commons.math3.ml.neuralnet.Neuron;

        r2 := @parameter1: java.lang.Iterable;

        $r5 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap linkMap>;

        $l0 = virtualinvoke r1.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r7 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (java.util.Set) $r7;

        if r2 == null goto label2;

        r13 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r11;

        $l2 = virtualinvoke r14.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke r3.<java.util.Set: boolean remove(java.lang.Object)>($r12);

        goto label1;

     label2:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r16 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Long) $r9;

        $l1 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        $r10 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: org.apache.commons.math3.ml.neuralnet.Neuron getNeuron(long)>($l1);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label3;

     label4:
        return $r8;
    }

    private java.lang.Long createNextId()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.util.concurrent.atomic.AtomicLong $r1;
        long $l0;
        java.lang.Long $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r2;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        java.io.ObjectInputStream r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.Network r0;
        org.apache.commons.math3.ml.neuralnet.Neuron[] r1, $r9;
        long[][] r2;
        java.util.Collection r3, $r8;
        long[] r4;
        java.util.Iterator r5;
        org.apache.commons.math3.ml.neuralnet.Neuron r6, $r13;
        java.util.concurrent.ConcurrentHashMap $r7;
        java.lang.Object[] $r10;
        int $i0, $i1, $i3, $i4, i6, i7;
        org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy $r11;
        java.util.concurrent.atomic.AtomicLong $r12;
        long $l2, $l5;
        boolean $z0;
        java.lang.Object $r14;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Network;

        $r7 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.ConcurrentHashMap neuronMap>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r9 = newarray (org.apache.commons.math3.ml.neuralnet.Neuron)[0];

        $r10 = interfaceinvoke $r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        r1 = (org.apache.commons.math3.ml.neuralnet.Neuron[]) $r10;

        $i0 = lengthof r1;

        r2 = newarray (long[])[$i0];

        i6 = 0;

     label1:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label4;

        $r13 = r1[i6];

        r3 = virtualinvoke r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.Collection getNeighbours(org.apache.commons.math3.ml.neuralnet.Neuron)>($r13);

        $i4 = interfaceinvoke r3.<java.util.Collection: int size()>();

        r4 = newarray (long)[$i4];

        i7 = 0;

        r5 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.commons.math3.ml.neuralnet.Neuron) $r14;

        $l5 = virtualinvoke r6.<org.apache.commons.math3.ml.neuralnet.Neuron: long getIdentifier()>();

        r4[i7] = $l5;

        i7 = i7 + 1;

        goto label2;

     label3:
        r2[i6] = r4;

        i6 = i6 + 1;

        goto label1;

     label4:
        $r11 = new org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy;

        $r12 = r0.<org.apache.commons.math3.ml.neuralnet.Network: java.util.concurrent.atomic.AtomicLong nextId>;

        $l2 = virtualinvoke $r12.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.Network: int featureSize>;

        specialinvoke $r11.<org.apache.commons.math3.ml.neuralnet.Network$SerializationProxy: void <init>(long,int,org.apache.commons.math3.ml.neuralnet.Neuron[],long[][])>($l2, $i3, r1, r2);

        return $r11;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.neuralnet.Network: long serialVersionUID> = 20130207L;

        return;
    }
}
