public class com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder extends java.lang.Object implements com.opengamma.analytics.math.rootfinding.Polynomial1DRootFinder
{

    public void <init>()
    {
        com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder r0;

        r0 := @this: com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Double[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)
    {
        com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r1;
        double[] r2, r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        cern.colt.matrix.DoubleMatrix2D r3;
        cern.colt.matrix.DoubleFactory2D $r4;
        cern.colt.matrix.linalg.EigenvalueDecomposition $r5;
        cern.colt.matrix.DoubleMatrix1D $r6;
        double $d0, $d1, $d2, $d3, $d4;
        java.lang.Double $r7;
        java.lang.Double[] r9;

        r0 := @this: com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder;

        r1 := @parameter0: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i1 = lengthof r2;

        i0 = $i1 - 1;

        $r4 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        r3 = virtualinvoke $r4.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(int,int)>(i0, i0);

        i8 = 0;

     label1:
        if i8 >= i0 goto label5;

        $i4 = i0 - i8;

        $i5 = $i4 - 1;

        $d1 = r2[$i5];

        $d3 = neg $d1;

        $d2 = r2[i0];

        $d4 = $d3 / $d2;

        virtualinvoke r3.<cern.colt.matrix.DoubleMatrix2D: void setQuick(int,int,double)>(0, i8, $d4);

        i9 = 1;

     label2:
        if i9 >= i0 goto label4;

        virtualinvoke r3.<cern.colt.matrix.DoubleMatrix2D: void setQuick(int,int,double)>(i9, i8, 0.0);

        $i6 = i0 - 1;

        if i8 == $i6 goto label3;

        $i7 = i8 + 1;

        virtualinvoke r3.<cern.colt.matrix.DoubleMatrix2D: void setQuick(int,int,double)>($i7, i8, 1.0);

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        $r5 = new cern.colt.matrix.linalg.EigenvalueDecomposition;

        specialinvoke $r5.<cern.colt.matrix.linalg.EigenvalueDecomposition: void <init>(cern.colt.matrix.DoubleMatrix2D)>(r3);

        $r6 = virtualinvoke $r5.<cern.colt.matrix.linalg.EigenvalueDecomposition: cern.colt.matrix.DoubleMatrix1D getRealEigenvalues()>();

        r8 = virtualinvoke $r6.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        $i2 = lengthof r8;

        r9 = newarray (java.lang.Double)[$i2];

        i10 = 0;

     label6:
        $i3 = lengthof r8;

        if i10 >= $i3 goto label7;

        $d0 = r8[i10];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r9[i10] = $r7;

        i10 = i10 + 1;

        goto label6;

     label7:
        return r9;
    }

    public volatile java.lang.Object[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)
    {
        com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r1;
        java.lang.Double[] $r2;

        r0 := @this: com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder;

        r1 := @parameter0: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.rootfinding.EigenvaluePolynomialRootFinder: java.lang.Double[] getRoots(com.opengamma.analytics.math.function.RealPolynomialFunction1D)>(r1);

        return $r2;
    }
}
