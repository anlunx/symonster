public class org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator extends org.apache.commons.math3.ode.nonstiff.AdamsIntegrator
{
    private static final java.lang.String METHOD_NAME;

    public void <init>(int, double, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        int i0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double,double)>("Adams-Bashforth", i0, i0, d0, d1, d2, d3);

        return;
    }

    public void <init>(int, double, double, double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        int i0;
        double d0, d1;
        double[] r1, r2;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        r1 := @parameter3: double[];

        r2 := @parameter4: double[];

        specialinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsIntegrator: void <init>(java.lang.String,int,int,double,double,double[],double[])>("Adams-Bashforth", i0, i0, d0, d1, r1, r2);

        return;
    }

    public void integrate(org.apache.commons.math3.ode.ExpandableStatefulODE, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.NoBracketingException
    {
        org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1, r6;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41, d42, $d43, d45, d46, d47, d48, $d49;
        boolean z0, $z3, $z4, $z5, $z6, $z7, $z8;
        double[] r2, r3, r4, $r13, $r15, $r17, $r19, $r21, $r22, $r23, $r24, $r25, r29;
        int i0, $i2, $i3, $i4, $i5, $i10, $i11, i14, i15, i16, i17, i18;
        org.apache.commons.math3.ode.EquationsMapper r7, $r10, r27;
        byte $b1, $b6, $b7, $b8, $b9, $b12, $b13;
        java.lang.Object $r8;
        org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator $r9;
        org.apache.commons.math3.ode.EquationsMapper[] $r11, r28;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r12, $r14, $r16, $r18, $r20, $r26, r30;

        r0 := @this: org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        d0 := @parameter1: double;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void sanityChecks(org.apache.commons.math3.ode.ExpandableStatefulODE,double)>(r1, d0);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void setEquations(org.apache.commons.math3.ode.ExpandableStatefulODE)>(r1);

        $d5 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        $b1 = d0 cmpl $d5;

        if $b1 <= 0 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        z0 = $z5;

        r2 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getCompleteState()>();

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r3 = (double[]) $r8;

        $i2 = lengthof r3;

        r4 = newarray (double)[$i2];

        $r9 = new org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;

        specialinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void <init>()>();

        $r10 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r11 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double[],boolean,org.apache.commons.math3.ode.EquationsMapper,org.apache.commons.math3.ode.EquationsMapper[])>(r3, $z5, $r10, $r11);

        $d6 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void initIntegration(double,double[],double)>($d6, r2, d0);

        $d7 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: double getTime()>();

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>($d7, r3, d0);

        $d9 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r13 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d9, $d8, $r13, $r12);

        $d10 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d10);

        $r14 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $i3 = virtualinvoke $r14.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i0 = $i3 - 1;

        d40 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d40);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep> = 0;

     label03:
        d41 = 10.0;

     label04:
        $b13 = d41 cmpl 1.0;

        if $b13 < 0 goto label09;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize> = d40;

        d42 = 0.0;

        i14 = 0;

     label05:
        $i10 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        if i14 >= $i10 goto label08;

        $d31 = r3[i14];

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d31);

        $r23 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        if $r23 != null goto label06;

        $d39 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double scalAbsoluteTolerance>;

        $d37 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double scalRelativeTolerance>;

        $d38 = $d37 * d1;

        $d43 = $d39 + $d38;

        goto label07;

     label06:
        $r24 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecAbsoluteTolerance>;

        $d34 = $r24[i14];

        $r25 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] vecRelativeTolerance>;

        $d32 = $r25[i14];

        $d33 = $d32 * d1;

        $d43 = $d34 + $d33;

     label07:
        $r26 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        $d35 = virtualinvoke $r26.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double getEntry(int,int)>(i0, i14);

        d45 = $d35 / $d43;

        $d36 = d45 * d45;

        d42 = d42 + $d36;

        i14 = i14 + 1;

        goto label05;

     label08:
        $i11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: int mainSetDimension>;

        $d27 = (double) $i11;

        $d28 = d42 / $d27;

        d41 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d28);

        $b12 = d41 cmpl 1.0;

        if $b12 < 0 goto label04;

        d46 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>(d41);

        $d29 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $d30 = $d29 * d46;

        d40 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>($d30, z0, 0);

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d40);

        goto label04;

     label09:
        $d12 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d11 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d47 = $d12 + $d11;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void shift()>();

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void setInterpolatedTime(double)>(d47);

        r6 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.ode.ExpandableStatefulODE getExpandable()>();

        r27 = virtualinvoke r6.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper getPrimaryMapper()>();

        $r15 = virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedState()>();

        virtualinvoke r27.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r15, r3);

        i15 = 0;

        r28 = virtualinvoke r6.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.EquationsMapper[] getSecondaryMappers()>();

        i16 = lengthof r28;

        i17 = 0;

     label10:
        if i17 >= i16 goto label11;

        r7 = r28[i17];

        $r22 = virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: double[] getInterpolatedSecondaryState(int)>(i15);

        virtualinvoke r7.<org.apache.commons.math3.ode.EquationsMapper: void insertEquationData(double[],double[])>($r22, r3);

        i15 = i15 + 1;

        i17 = i17 + 1;

        goto label10;

     label11:
        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void computeDerivatives(double,double[],double[])>(d47, r3, r4);

        $i4 = lengthof r2;

        r29 = newarray (double)[$i4];

        i18 = 0;

     label12:
        $i5 = lengthof r2;

        if i18 >= $i5 goto label13;

        $d25 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $d24 = r4[i18];

        $d26 = $d25 * $d24;

        r29[i18] = $d26;

        i18 = i18 + 1;

        goto label12;

     label13:
        $r16 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        r30 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r16);

        $r17 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void updateHighOrderDerivativesPhase2(double[],double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($r17, r29, r30);

        $d13 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d47, $d13, r29, r30);

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>(d47);

        $d14 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double acceptStep(org.apache.commons.math3.ode.sampling.AbstractStepInterpolator,double[],double[],double)>($r9, r3, r4, d0);

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart> = $d14;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled> = r29;

        r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck> = r30;

        $d15 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r19 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r18 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>(d47, $d15, $r19, $r18);

        $z3 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z3 != 0 goto label24;

        $d17 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void storeTime(double)>($d17);

        $z4 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean resetOccurred>;

        if $z4 == 0 goto label14;

        $d21 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void start(double,double[],double)>($d21, r3, d0);

        $d23 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        $d22 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        $r21 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double[] scaled>;

        $r20 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: org.apache.commons.math3.linear.Array2DRowRealMatrix nordsieck>;

        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void reinitialize(double,double,double[],org.apache.commons.math3.linear.Array2DRowRealMatrix)>($d23, $d22, $r21, $r20);

     label14:
        d48 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double computeStepGrowShrinkFactor(double)>(d41);

        $d18 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepSize>;

        d2 = $d18 * d48;

        $d19 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d3 = $d19 + d2;

        if z0 == 0 goto label16;

        $b9 = d3 cmpl d0;

        if $b9 < 0 goto label15;

        $z6 = 1;

        goto label18;

     label15:
        $z6 = 0;

        goto label18;

     label16:
        $b6 = d3 cmpg d0;

        if $b6 > 0 goto label17;

        $z6 = 1;

        goto label18;

     label17:
        $z6 = 0;

     label18:
        d40 = virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double filterStep(double,boolean,boolean)>(d2, z0, $z6);

        $d49 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d4 = $d49 + d40;

        if z0 == 0 goto label20;

        $b8 = d4 cmpl d0;

        if $b8 < 0 goto label19;

        $z7 = 1;

        goto label22;

     label19:
        $z7 = 0;

        goto label22;

     label20:
        $b7 = d4 cmpg d0;

        if $b7 > 0 goto label21;

        $z7 = 1;

        goto label22;

     label21:
        $z7 = 0;

     label22:
        if $z7 == 0 goto label23;

        $d20 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        d40 = d0 - $d20;

     label23:
        virtualinvoke $r9.<org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator: void rescale(double)>(d40);

     label24:
        $z8 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: boolean isLastStep>;

        if $z8 == 0 goto label03;

        $d16 = r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: double stepStart>;

        virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setTime(double)>($d16);

        virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setCompleteState(double[])>(r3);

        virtualinvoke r0.<org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: void resetInternalState()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator: java.lang.String METHOD_NAME> = "Adams-Bashforth";

        return;
    }
}
