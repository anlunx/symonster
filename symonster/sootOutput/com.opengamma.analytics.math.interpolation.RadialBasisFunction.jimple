public class com.opengamma.analytics.math.interpolation.RadialBasisFunction extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunction r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double evaluate(com.opengamma.analytics.math.function.Function1D, java.util.List, double[], boolean)
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunction r0;
        com.opengamma.analytics.math.function.Function1D r1;
        java.util.List r2;
        double[] r3, r4;
        boolean z0;
        int i0, i1;
        double d0, d1, $d2, $d3, d4, d5, $d6;
        com.opengamma.util.tuple.Pair r5;
        java.lang.Object $r6, $r7, $r8, $r11;
        java.lang.Double $r9, $r10, $r12;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunction;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: double[];

        z0 := @parameter3: boolean;

        virtualinvoke r0.<com.opengamma.analytics.math.interpolation.RadialBasisFunction: void validateInput(java.util.List,double[])>(r2, r3);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        d4 = 0.0;

        d5 = 0.0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (com.opengamma.util.tuple.Pair) $r6;

        $r7 = virtualinvoke r5.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r4 = (double[]) $r7;

        $r8 = virtualinvoke r5.<com.opengamma.util.tuple.Pair: java.lang.Object getSecond()>();

        $r9 = (java.lang.Double) $r8;

        d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d2 = staticinvoke <com.opengamma.analytics.math.interpolation.DistanceCalculator: double getDistance(double[],double[])>(r3, r4);

        $r10 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r10);

        $r12 = (java.lang.Double) $r11;

        d1 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d3 = d0 * d1;

        d4 = d4 + $d3;

        d5 = d5 + d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        if z0 == 0 goto label3;

        $d6 = d4 / d5;

        goto label4;

     label3:
        $d6 = d4;

     label4:
        return $d6;
    }

    protected void validateInput(java.util.List, double[])
    {
        com.opengamma.analytics.math.interpolation.RadialBasisFunction r0;
        java.util.List r1;
        double[] r2, $r6;
        int i0, $i1;
        java.lang.Object $r3, $r5;
        com.opengamma.util.tuple.Pair $r4;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.interpolation.RadialBasisFunction;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: double[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "null position");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "null data");

        i0 = lengthof r2;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "0 dimension");

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.opengamma.util.tuple.Pair) $r3;

        $r5 = virtualinvoke $r4.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        $r6 = (double[]) $r5;

        $i1 = lengthof $r6;

        if $i1 != i0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, "data and requested point different dimension");

        return;
    }
}
