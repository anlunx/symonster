public class com.opengamma.analytics.math.interpolation.CubicSplineNakSolver extends com.opengamma.analytics.math.interpolation.CubicSplineSolver
{

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineSolver: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, r2, r3, $r5, $r6;
        double[][] $r4;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] getDiffs(double[])>(r1);

        $r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[][] getMatrix(double[])>(r3);

        $r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] getVector(double[],double[])>(r2, r3);

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] matrixEqnSolver(double[][],double[])>($r4, $r5);

        $r7 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, $r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, r2, r3, r5;
        double[][] r4, r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r7;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] getDiffs(double[])>(r1);

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[][] getMatrix(double[])>(r3);

        r5 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] getVector(double[],double[])>(r2, r3);

        r6 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[][] getVectorSensitivity(double[])>(r3);

        $r7 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getSplineCoeffsWithSensitivity(double[],double[],double[],double[][],double[],double[][])>(r1, r2, r3, r4, r5, r6);

        return $r7;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveMultiDim(double[], com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, $r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r2, $r6;
        int i0, i1;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        i0 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        r3 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i1);

        $r5 = virtualinvoke $r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D solve(double[],double[])>(r1, $r5);

        r3[i1] = $r6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r3;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnotsMat1D(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, $r4, $r6;
        int i0, $i1, $i2;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r2, $r3, $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        i0 = lengthof r1;

        if i0 != 2 goto label1;

        $r5 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r6 = newarray (double)[2];

        $d2 = r1[0];

        $r6[0] = $d2;

        $i2 = i0 - 1;

        $d3 = r1[$i2];

        $r6[1] = $d3;

        specialinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r6);

        return $r5;

     label1:
        if i0 != 3 goto label2;

        $r3 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r4 = newarray (double)[2];

        $d0 = r1[0];

        $r4[0] = $d0;

        $i1 = i0 - 1;

        $d1 = r1[$i1];

        $r4[1] = $d1;

        specialinvoke $r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r4);

        return $r3;

     label2:
        $r2 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        return $r2;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D getSplineCoeffs(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, r2, r3, r4, $r7, $r10;
        int i0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r5, $r8, $r11;
        double[][] $r6, $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        if i0 != 2 goto label1;

        $r9 = newarray (double[])[1];

        $r10 = newarray (double)[2];

        $d16 = r2[1];

        $d15 = r3[0];

        $d20 = $d16 / $d15;

        $d18 = r2[0];

        $d17 = r3[0];

        $d19 = $d18 / $d17;

        $d25 = $d20 - $d19;

        $d22 = r3[0];

        $d21 = r4[0];

        $d23 = $d22 * $d21;

        $d24 = $d23 / 2.0;

        $d30 = $d25 - $d24;

        $d27 = r3[0];

        $d26 = r4[1];

        $d28 = $d27 * $d26;

        $d29 = $d28 / 6.0;

        $d35 = $d30 - $d29;

        $d32 = r3[0];

        $d31 = r4[0];

        $d33 = $d32 * $d31;

        $d34 = $d33 / 6.0;

        $d36 = $d35 + $d34;

        $r10[0] = $d36;

        $d37 = r2[0];

        $r10[1] = $d37;

        $r9[0] = $r10;

        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r9);

        return $r11;

     label1:
        if i0 != 3 goto label2;

        $r6 = newarray (double[])[1];

        $r7 = newarray (double)[3];

        $d0 = r4[0];

        $d1 = $d0 / 2.0;

        $r7[0] = $d1;

        $d3 = r2[1];

        $d2 = r3[0];

        $d7 = $d3 / $d2;

        $d5 = r2[0];

        $d4 = r3[0];

        $d6 = $d5 / $d4;

        $d12 = $d7 - $d6;

        $d9 = r3[0];

        $d8 = r4[0];

        $d10 = $d9 * $d8;

        $d11 = $d10 / 2.0;

        $d13 = $d12 - $d11;

        $r7[1] = $d13;

        $d14 = r2[0];

        $r7[2] = $d14;

        $r6[0] = $r7;

        $r8 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r8.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r6);

        return $r8;

     label2:
        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, r4);

        return $r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getSplineCoeffsWithSensitivity(double[], double[], double[], double[][], double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, r2, r3, r5, $r8, $r11, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r27, $r29, $r31, $r33, $r34, $r37, $r39, $r40;
        double[][] r4, r6, $r13, $r36, r44, r48, r51;
        int i0, $i1, $i2, i3, i4;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r7, $r10, $r15, $r17, $r21, $r23, $r25, $r28, $r30, $r32;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9, $r19, $r35, $r38, $r41;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r42, r45, r49, r52;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r46, r50;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[][];

        r5 := @parameter4: double[];

        r6 := @parameter5: double[][];

        i0 = lengthof r1;

        if i0 != 2 goto label1;

        r42 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        $r36 = newarray (double[])[1];

        $r37 = newarray (double)[2];

        $d42 = r2[1];

        $d41 = r3[0];

        $d46 = $d42 / $d41;

        $d44 = r2[0];

        $d43 = r3[0];

        $d45 = $d44 / $d43;

        $d47 = $d46 - $d45;

        $r37[0] = $d47;

        $d48 = r2[0];

        $r37[1] = $d48;

        $r36[0] = $r37;

        $r38 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r38.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r36);

        r42[0] = $r38;

        r44 = newarray (double[])[2];

        $r39 = newarray (double)[2];

        $d49 = r3[0];

        $d50 = -1.0 / $d49;

        $r39[0] = $d50;

        $d51 = r3[0];

        $d52 = 1.0 / $d51;

        $r39[1] = $d52;

        r44[0] = $r39;

        $r40 = newarray (double)[2];

        $r40[0] = 1.0;

        $r40[1] = 0.0;

        r44[1] = $r40;

        $r41 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r41.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r44);

        r42[1] = $r41;

        return r42;

     label1:
        if i0 != 3 goto label2;

        r45 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[2];

        r46 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] combinedMatrixEqnSolver(double[][],double[],double[][])>(r4, r5, r6);

        $r13 = newarray (double[])[1];

        $r14 = newarray (double)[3];

        $r15 = r46[0];

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d1 = $r16[0];

        $d2 = $d1 / 2.0;

        $r14[0] = $d2;

        $d4 = r2[1];

        $d3 = r3[0];

        $d8 = $d4 / $d3;

        $d6 = r2[0];

        $d5 = r3[0];

        $d7 = $d6 / $d5;

        $d9 = $d8 - $d7;

        $d10 = r3[0];

        $r17 = r46[0];

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d11 = $r18[0];

        $d12 = $d10 * $d11;

        $d13 = $d12 / 2.0;

        $d14 = $d9 - $d13;

        $r14[1] = $d14;

        $d15 = r2[0];

        $r14[2] = $d15;

        $r13[0] = $r14;

        $r19 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r13);

        r45[0] = $r19;

        r48 = newmultiarray (double)[3][0];

        $r20 = newarray (double)[3];

        $r21 = r46[1];

        $r22 = virtualinvoke $r21.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d16 = $r22[0];

        $d17 = $d16 / 2.0;

        $r20[0] = $d17;

        $r23 = r46[2];

        $r24 = virtualinvoke $r23.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d18 = $r24[0];

        $d19 = $d18 / 2.0;

        $r20[1] = $d19;

        $r25 = r46[3];

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d20 = $r26[0];

        $d21 = $d20 / 2.0;

        $r20[2] = $d21;

        r48[0] = $r20;

        $r27 = newarray (double)[3];

        $d22 = r3[0];

        $d23 = -1.0 / $d22;

        $d24 = r3[0];

        $r28 = r46[1];

        $r29 = virtualinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d25 = $r29[0];

        $d26 = $d24 * $d25;

        $d27 = $d26 / 2.0;

        $d28 = $d23 - $d27;

        $r27[0] = $d28;

        $d29 = r3[0];

        $d30 = 1.0 / $d29;

        $d31 = r3[0];

        $r30 = r46[2];

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d32 = $r31[0];

        $d33 = $d31 * $d32;

        $d34 = $d33 / 2.0;

        $d35 = $d30 - $d34;

        $r27[1] = $d35;

        $d36 = r3[0];

        $d37 = neg $d36;

        $r32 = r46[3];

        $r33 = virtualinvoke $r32.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d38 = $r33[0];

        $d39 = $d37 * $d38;

        $d40 = $d39 / 2.0;

        $r27[2] = $d40;

        r48[1] = $r27;

        $r34 = newarray (double)[3];

        $r34[0] = 1.0;

        $r34[1] = 0.0;

        $r34[2] = 0.0;

        r48[2] = $r34;

        $r35 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r48);

        r45[1] = $r35;

        return r45;

     label2:
        r49 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i0];

        r50 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] combinedMatrixEqnSolver(double[][],double[],double[][])>(r4, r5, r6);

        $r7 = r50[0];

        $r8 = virtualinvoke $r7.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r9 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D getCommonSplineCoeffs(double[],double[],double[],double[])>(r1, r2, r3, $r8);

        r49[0] = $r9;

        r51 = newmultiarray (double)[i0][i0];

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        i4 = 0;

     label4:
        if i4 >= i0 goto label5;

        $r11 = r51[i3];

        $i2 = i4 + 1;

        $r10 = r50[$i2];

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d0 = $r12[i3];

        $r11[i4] = $d0;

        i4 = i4 + 1;

        goto label4;

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        r52 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] getCommonSensitivityCoeffs(double[],double[][])>(r3, r51);

        $i1 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r52, 0, r49, 1, $i1);

        return r49;
    }

    private double[] getVector(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, r2, r3;
        int i0, i1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        if i0 != 3 goto label3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r1[2];

        $d4 = 2.0 * $d0;

        $d2 = r2[0];

        $d1 = r2[1];

        $d3 = $d2 + $d1;

        $d11 = $d4 / $d3;

        $d5 = r1[0];

        $d9 = 2.0 * $d5;

        $d7 = r2[0];

        $d6 = r2[1];

        $d8 = $d7 + $d6;

        $d10 = $d9 / $d8;

        $d16 = $d11 - $d10;

        $d12 = r1[1];

        $d14 = 2.0 * $d12;

        $d13 = r2[0];

        $d15 = $d14 / $d13;

        $d21 = $d16 - $d15;

        $d17 = r1[0];

        $d19 = 2.0 * $d17;

        $d18 = r2[0];

        $d20 = $d19 / $d18;

        $d22 = $d21 + $d20;

        r3[i1] = $d22;

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        r3 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[] getCommonVectorElements(double[],double[])>(r1, r2);

     label4:
        return r3;
    }

    private double[][] getVectorSensitivity(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, $r2, $r3, $r4;
        int i0, $i1, i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        double[][] r5;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r5 = newmultiarray (double)[i0][i0];

        if i0 != 3 goto label3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r2 = r5[i2];

        $d1 = r1[0];

        $d0 = r1[1];

        $d2 = $d1 + $d0;

        $d5 = -2.0 / $d2;

        $d3 = r1[0];

        $d4 = 2.0 / $d3;

        $d6 = $d5 + $d4;

        $r2[0] = $d6;

        $r3 = r5[i2];

        $d7 = r1[0];

        $d8 = -2.0 / $d7;

        $r3[1] = $d8;

        $r4 = r5[i2];

        $d10 = r1[0];

        $d9 = r1[1];

        $d11 = $d10 + $d9;

        $d12 = 2.0 / $d11;

        $r4[2] = $d12;

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[][] getCommonVectorSensitivity(double[])>(r1);

     label4:
        return r5;
    }

    private double[][] getMatrix(double[])
    {
        com.opengamma.analytics.math.interpolation.CubicSplineNakSolver r0;
        double[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        double[][] r14, r15;

        r0 := @this: com.opengamma.analytics.math.interpolation.CubicSplineNakSolver;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        i0 = $i1 + 1;

        r14 = newmultiarray (double)[i0][i0];

        i12 = 0;

     label1:
        if i12 >= i0 goto label2;

        $r13 = r14[i12];

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r13, 0.0);

        i12 = i12 + 1;

        goto label1;

     label2:
        if i0 != 2 goto label3;

        $r11 = r14[0];

        $d17 = r1[0];

        $r11[1] = $d17;

        $r12 = r14[1];

        $d18 = r1[0];

        $r12[0] = $d18;

        return r14;

     label3:
        if i0 != 3 goto label4;

        $r8 = r14[0];

        $d14 = r1[1];

        $r8[0] = $d14;

        $r9 = r14[1];

        $d15 = r1[1];

        $r9[1] = $d15;

        $r10 = r14[2];

        $d16 = r1[1];

        $r10[2] = $d16;

        return r14;

     label4:
        r15 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.CubicSplineNakSolver: double[][] getCommonMatrixElements(double[])>(r1);

        $r2 = r15[0];

        $d0 = r1[1];

        $d1 = neg $d0;

        $r2[0] = $d1;

        $r3 = r15[0];

        $d3 = r1[0];

        $d2 = r1[1];

        $d4 = $d3 + $d2;

        $r3[1] = $d4;

        $r4 = r15[0];

        $d5 = r1[0];

        $d6 = neg $d5;

        $r4[2] = $d6;

        $i2 = i0 - 1;

        $r5 = r15[$i2];

        $i4 = i0 - 3;

        $i3 = i0 - 2;

        $d7 = r1[$i3];

        $d8 = neg $d7;

        $r5[$i4] = $d8;

        $i5 = i0 - 1;

        $r6 = r15[$i5];

        $i8 = i0 - 2;

        $i6 = i0 - 3;

        $d10 = r1[$i6];

        $i7 = i0 - 2;

        $d9 = r1[$i7];

        $d11 = $d10 + $d9;

        $r6[$i8] = $d11;

        $i9 = i0 - 1;

        $r7 = r15[$i9];

        $i11 = i0 - 1;

        $i10 = i0 - 3;

        $d12 = r1[$i10];

        $d13 = neg $d12;

        $r7[$i11] = $d13;

        return r15;
    }
}
