public abstract class org.apache.commons.math3.optimization.direct.AbstractSimplex extends java.lang.Object implements org.apache.commons.math3.optimization.OptimizationData
{
    private org.apache.commons.math3.optimization.PointValuePair[] simplex;
    private double[][] startConfiguration;
    private final int dimension;

    protected void <init>(int)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(int,double)>(i0, 1.0);

        return;
    }

    protected void <init>(int, double)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int i0;
        double d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <org.apache.commons.math3.optimization.direct.AbstractSimplex: double[] createHypercubeSteps(int,double)>(i0, d0);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: void <init>(double[])>($r1);

        return;
    }

    protected void <init>(double[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, i8, i9;
        double[][] $r3, $r4;
        double $d0;
        byte $b6;
        org.apache.commons.math3.exception.ZeroException $r5, $r8;
        java.lang.Object[] $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7;
        org.apache.commons.math3.exception.NullArgumentException $r9;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r9 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r9.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r9;

     label1:
        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

        $r8 = new org.apache.commons.math3.exception.ZeroException;

        specialinvoke $r8.<org.apache.commons.math3.exception.ZeroException: void <init>()>();

        throw $r8;

     label2:
        $i1 = lengthof r1;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension> = $i1;

        $i3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r3 = newmultiarray (double)[$i3][$i2];

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration> = $r3;

        i8 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i8 >= $i4 goto label7;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        r2 = $r4[i8];

        i9 = 0;

     label4:
        $i5 = i8 + 1;

        if i9 >= $i5 goto label6;

        $d0 = r1[i9];

        $b6 = $d0 cmpl 0.0;

        if $b6 != 0 goto label5;

        $r5 = new org.apache.commons.math3.exception.ZeroException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r6 = newarray (java.lang.Object)[0];

        specialinvoke $r5.<org.apache.commons.math3.exception.ZeroException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r5;

     label5:
        $i7 = i9 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i7);

        i9 = i9 + 1;

        goto label4;

     label6:
        i8 = i8 + 1;

        goto label3;

     label7:
        return;
    }

    protected void <init>(double[][])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[][] r1, $r4, $r5;
        double[] r2, r3, r15, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, i15, i16, i17, i18;
        double $d0, $d1, $d2, $d3, $d4;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8, $r13;
        java.lang.Integer $r9, $r10, $r14;
        byte $b11;
        org.apache.commons.math3.exception.DimensionMismatchException $r11;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r12;
        boolean z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 := @parameter0: double[][];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 > 0 goto label01;

        $r12 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SIMPLEX_NEED_ONE_POINT>;

        $i14 = lengthof r1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        specialinvoke $r12.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r13, $r14);

        throw $r12;

     label01:
        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension> = $i2;

        $i4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r4 = newmultiarray (double)[$i4][$i3];

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration> = $r4;

        r2 = r1[0];

        i15 = 0;

     label02:
        $i5 = lengthof r1;

        if i15 >= $i5 goto label12;

        r3 = r1[i15];

        $i7 = lengthof r3;

        $i6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if $i7 == $i6 goto label03;

        $r11 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i13 = lengthof r3;

        $i12 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        specialinvoke $r11.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i13, $i12);

        throw $r11;

     label03:
        i16 = 0;

     label04:
        if i16 >= i15 goto label09;

        r15 = r1[i16];

        z0 = 1;

        i17 = 0;

     label05:
        $i10 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i17 >= $i10 goto label07;

        $d4 = r3[i17];

        $d3 = r15[i17];

        $b11 = $d4 cmpl $d3;

        if $b11 == 0 goto label06;

        z0 = 0;

        goto label07;

     label06:
        i17 = i17 + 1;

        goto label05;

     label07:
        if z0 == 0 goto label08;

        $r6 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EQUAL_VERTICES_IN_SIMPLEX>;

        $r7 = newarray (java.lang.Object)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16);

        $r7[1] = $r10;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label08:
        i16 = i16 + 1;

        goto label04;

     label09:
        if i15 <= 0 goto label11;

        $r5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        $i8 = i15 - 1;

        r16 = $r5[$i8];

        i18 = 0;

     label10:
        $i9 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i18 >= $i9 goto label11;

        $d1 = r3[i18];

        $d0 = r2[i18];

        $d2 = $d1 - $d0;

        r16[i18] = $d2;

        i18 = i18 + 1;

        goto label10;

     label11:
        i15 = i15 + 1;

        goto label02;

     label12:
        return;
    }

    public int getDimension()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        return $i0;
    }

    public int getSize()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public abstract void iterate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator);

    public void build(double[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        double[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.apache.commons.math3.optimization.PointValuePair[] $r4, $r6, $r9;
        org.apache.commons.math3.optimization.PointValuePair $r5, $r8;
        double[][] $r7;
        double $d0, $d1, $d2;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 := @parameter0: double[];

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i9 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i8 = lengthof r1;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i9, $i8);

        throw $r10;

     label1:
        $i2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $i3 = $i2 + 1;

        $r4 = newarray (org.apache.commons.math3.optimization.PointValuePair)[$i3];

        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex> = $r4;

        $r6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r5 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r5.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r1, #NaN);

        $r6[0] = $r5;

        i10 = 0;

     label2:
        $i4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i10 >= $i4 goto label5;

        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: double[][] startConfiguration>;

        r2 = $r7[i10];

        $i5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        r3 = newarray (double)[$i5];

        i11 = 0;

     label3:
        $i6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i11 >= $i6 goto label4;

        $d1 = r1[i11];

        $d0 = r2[i11];

        $d2 = $d1 + $d0;

        r3[i11] = $d2;

        i11 = i11 + 1;

        goto label3;

     label4:
        $r9 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i7 = i10 + 1;

        $r8 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r8.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r3, #NaN);

        $r9[$i7] = $r8;

        i10 = i10 + 1;

        goto label2;

     label5:
        return;
    }

    public void evaluate(org.apache.commons.math3.analysis.MultivariateFunction, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.analysis.MultivariateFunction r1;
        java.util.Comparator r2;
        org.apache.commons.math3.optimization.PointValuePair r3, $r10;
        double[] r4;
        org.apache.commons.math3.optimization.PointValuePair[] $r5, $r6, $r7, $r11;
        int $i0, i1;
        java.lang.Object $r8;
        java.lang.Double $r9;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 := @parameter0: org.apache.commons.math3.analysis.MultivariateFunction;

        r2 := @parameter1: java.util.Comparator;

        i1 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r3 = $r7[i1];

        r4 = virtualinvoke r3.<org.apache.commons.math3.optimization.PointValuePair: double[] getPointRef()>();

        $r8 = virtualinvoke r3.<org.apache.commons.math3.optimization.PointValuePair: java.lang.Object getValue()>();

        $r9 = (java.lang.Double) $r8;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label2;

        $r11 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r10 = new org.apache.commons.math3.optimization.PointValuePair;

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.analysis.MultivariateFunction: double value(double[])>(r4);

        specialinvoke $r10.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double,boolean)>(r4, $d1, 0);

        $r11[i1] = $r10;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r6, r2);

        return;
    }

    protected void replaceWorstPoint(org.apache.commons.math3.optimization.PointValuePair, java.util.Comparator)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        java.util.Comparator r1;
        org.apache.commons.math3.optimization.PointValuePair r2, $r5, r8;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math3.optimization.PointValuePair[] $r3, $r4, $r6, $r7;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r8 := @parameter0: org.apache.commons.math3.optimization.PointValuePair;

        r1 := @parameter1: java.util.Comparator;

        i3 = 0;

     label1:
        $i0 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        if i3 >= $i0 goto label3;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r5 = $r4[i3];

        $i2 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, r8);

        if $i2 <= 0 goto label2;

        $r6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        r2 = $r6[i3];

        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r7[i3] = r8;

        r8 = r2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: int dimension>;

        $r3[$i1] = r8;

        return;
    }

    public org.apache.commons.math3.optimization.PointValuePair[] getPoints()
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r2;

        r1 = newarray (org.apache.commons.math3.optimization.PointValuePair)[$i0];

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r3 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public org.apache.commons.math3.optimization.PointValuePair getPoint(int)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Integer $r2, $r3, $r5;
        org.apache.commons.math3.optimization.PointValuePair[] $r4, $r6, $r7;
        org.apache.commons.math3.optimization.PointValuePair $r8;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i3 = lengthof $r6;

        if i0 < $i3 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r4;

        $i2 = $i1 - 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r5);

        throw $r1;

     label2:
        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r8 = $r7[i0];

        return $r8;
    }

    protected void setPoint(int, org.apache.commons.math3.optimization.PointValuePair)
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        int i0, $i1, $i2, $i3;
        org.apache.commons.math3.optimization.PointValuePair r1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Integer $r3, $r4, $r6;
        org.apache.commons.math3.optimization.PointValuePair[] $r5, $r7, $r8;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.optimization.PointValuePair;

        if i0 < 0 goto label1;

        $r7 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i3 = lengthof $r7;

        if i0 < $i3 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i1 = lengthof $r5;

        $i2 = $i1 - 1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r6);

        throw $r2;

     label2:
        $r8 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $r8[i0] = r1;

        return;
    }

    protected void setPoints(org.apache.commons.math3.optimization.PointValuePair[])
    {
        org.apache.commons.math3.optimization.direct.AbstractSimplex r0;
        org.apache.commons.math3.optimization.PointValuePair[] r1, $r2, $r4;
        int $i0, $i1, $i2, $i3;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.optimization.direct.AbstractSimplex;

        r1 := @parameter0: org.apache.commons.math3.optimization.PointValuePair[];

        $i1 = lengthof r1;

        $r2 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        $r4 = r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex>;

        $i2 = lengthof $r4;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, $i2);

        throw $r3;

     label1:
        r0.<org.apache.commons.math3.optimization.direct.AbstractSimplex: org.apache.commons.math3.optimization.PointValuePair[] simplex> = r1;

        return;
    }

    private static double[] createHypercubeSteps(int, double)
    {
        int i0, i1;
        double d0;
        double[] r0;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r0 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r0[i1] = d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }
}
