public class org.apache.commons.math3.ode.JacobianMatrices extends java.lang.Object
{
    private org.apache.commons.math3.ode.ExpandableStatefulODE efode;
    private int index;
    private org.apache.commons.math3.ode.MainStateJacobianProvider jode;
    private org.apache.commons.math3.ode.ParameterizedODE pode;
    private int stateDim;
    private org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters;
    private java.util.List jacobianProviders;
    private int paramDim;
    private boolean dirtyParameter;
    private double[] matricesData;

    public transient void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations, double[], java.lang.String[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations r1;
        double[] r2;
        java.lang.String[] r3;
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper $r4;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: org.apache.commons.math3.ode.FirstOrderDifferentialEquations;

        r2 := @parameter1: double[];

        r3 := @parameter2: java.lang.String[];

        $r4 = new org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        specialinvoke $r4.<org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: void <init>(org.apache.commons.math3.ode.FirstOrderDifferentialEquations,double[])>(r1, r2);

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void <init>(org.apache.commons.math3.ode.MainStateJacobianProvider,java.lang.String[])>($r4, r3);

        return;
    }

    public transient void <init>(org.apache.commons.math3.ode.MainStateJacobianProvider, java.lang.String[])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.MainStateJacobianProvider r1;
        java.lang.String[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, $i14;
        org.apache.commons.math3.ode.ParameterConfiguration[] $r3, $r9;
        java.util.ArrayList $r4;
        double[] $r5, $r6;
        org.apache.commons.math3.ode.ParameterConfiguration $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: org.apache.commons.math3.ode.MainStateJacobianProvider;

        r2 := @parameter1: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode> = null;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int index> = -1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode> = r1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode> = null;

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.ode.MainStateJacobianProvider: int getDimension()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim> = $i0;

        if r2 != null goto label1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters> = null;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim> = 0;

        goto label4;

     label1:
        $i1 = lengthof r2;

        $r3 = newarray (org.apache.commons.math3.ode.ParameterConfiguration)[$i1];

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters> = $r3;

        i12 = 0;

     label2:
        $i2 = lengthof r2;

        if i12 >= $i2 goto label3;

        $r9 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        $r7 = new org.apache.commons.math3.ode.ParameterConfiguration;

        $r8 = r2[i12];

        specialinvoke $r7.<org.apache.commons.math3.ode.ParameterConfiguration: void <init>(java.lang.String,double)>($r8, #NaN);

        $r9[i12] = $r7;

        i12 = i12 + 1;

        goto label2;

     label3:
        $i3 = lengthof r2;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim> = $i3;

     label4:
        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders> = $r4;

        $i5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim>;

        $i7 = $i5 + $i4;

        $i6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i8 = $i7 * $i6;

        $r5 = newarray (double)[$i8];

        r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData> = $r5;

        i13 = 0;

     label5:
        $i14 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        if i13 >= $i14 goto label6;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        $i9 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i10 = $i9 + 1;

        $i11 = i13 * $i10;

        $r6[$i11] = 1.0;

        i13 = i13 + 1;

        goto label5;

     label6:
        return;
    }

    public void registerVariationalEquations(org.apache.commons.math3.ode.ExpandableStatefulODE) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ExpandableStatefulODE r1, $r6, $r8;
        org.apache.commons.math3.ode.MainStateJacobianProvider $r3, $r10;
        boolean $z0;
        org.apache.commons.math3.ode.FirstOrderDifferentialEquations $r4, $r12;
        org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations $r5;
        int $i0, $i1;
        double[] $r7;
        org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations $r9;
        org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper $r11;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: org.apache.commons.math3.ode.ExpandableStatefulODE;

        $r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        $z0 = $r3 instanceof org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper;

        if $z0 == 0 goto label1;

        $r10 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        $r11 = (org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper) $r10;

        $r12 = staticinvoke <org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper: org.apache.commons.math3.ode.FirstOrderDifferentialEquations access$000(org.apache.commons.math3.ode.JacobianMatrices$MainStateJacobianWrapper)>($r11);

        goto label2;

     label1:
        $r12 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

     label2:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.ode.ExpandableStatefulODE: org.apache.commons.math3.ode.FirstOrderDifferentialEquations getPrimary()>();

        if $r4 == $r12 goto label3;

        $r9 = new org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations;

        specialinvoke $r9.<org.apache.commons.math3.ode.JacobianMatrices$MismatchedEquations: void <init>()>();

        throw $r9;

     label3:
        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode> = r1;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $r5 = new org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations;

        specialinvoke $r5.<org.apache.commons.math3.ode.JacobianMatrices$JacobiansSecondaryEquations: void <init>(org.apache.commons.math3.ode.JacobianMatrices,org.apache.commons.math3.ode.JacobianMatrices$1)>(r0, null);

        $i0 = virtualinvoke $r6.<org.apache.commons.math3.ode.ExpandableStatefulODE: int addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)>($r5);

        r0.<org.apache.commons.math3.ode.JacobianMatrices: int index> = $i0;

        $r8 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r7 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r8.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>($i1, $r7);

        return;
    }

    public void addParameterJacobianProvider(org.apache.commons.math3.ode.ParameterJacobianProvider)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterJacobianProvider r1;
        java.util.List $r2;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: org.apache.commons.math3.ode.ParameterJacobianProvider;

        $r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void setParameterizedODE(org.apache.commons.math3.ode.ParameterizedODE)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterizedODE r1;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: org.apache.commons.math3.ode.ParameterizedODE;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode> = r1;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 1;

        return;
    }

    public void setParameterStep(java.lang.String, double) throws org.apache.commons.math3.ode.UnknownParameterException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String r1, $r5;
        double d0;
        org.apache.commons.math3.ode.ParameterConfiguration[] r2;
        int i0, i1;
        org.apache.commons.math3.ode.ParameterConfiguration r3;
        org.apache.commons.math3.ode.UnknownParameterException $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r5 = virtualinvoke r3.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.commons.math3.ode.ParameterConfiguration: void setHP(double)>(d0);

        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = 1;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = new org.apache.commons.math3.ode.UnknownParameterException;

        specialinvoke $r4.<org.apache.commons.math3.ode.UnknownParameterException: void <init>(java.lang.String)>(r1);

        throw $r4;
    }

    public void setInitialMainStateJacobian(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        double[][] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        double[] r3, $r4, $r6, $r8;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r5, $r7;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: double[][];

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>($i1, r1);

        $i2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $r4 = r1[0];

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>($i2, $r4);

        i6 = 0;

        i0 = lengthof r1;

        i7 = 0;

     label1:
        if i7 >= i0 goto label2;

        r3 = r1[i7];

        $r8 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        $i4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r8, i6, $i4);

        $i5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        $r5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        if $r5 == null goto label3;

        $r7 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r7.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>($i3, $r6);

     label3:
        return;
    }

    public void setInitialParameterJacobian(java.lang.String, double[]) throws org.apache.commons.math3.ode.UnknownParameterException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String r1, $r6;
        double[] r2, $r7, $r9;
        org.apache.commons.math3.ode.ParameterConfiguration[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.apache.commons.math3.ode.ParameterConfiguration r4;
        org.apache.commons.math3.ode.UnknownParameterException $r5;
        boolean $z0;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r8, $r10;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: double[];

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        specialinvoke r0.<org.apache.commons.math3.ode.JacobianMatrices: void checkDimension(int,java.lang.Object)>($i1, r2);

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i7 = $i3 * $i2;

        r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r3;

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        r4 = r3[i8];

        $r6 = virtualinvoke r4.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        $r7 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        $i5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r7, i7, $i5);

        $r8 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        if $r8 == null goto label2;

        $r10 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        $r9 = r0.<org.apache.commons.math3.ode.JacobianMatrices: double[] matricesData>;

        virtualinvoke $r10.<org.apache.commons.math3.ode.ExpandableStatefulODE: void setSecondaryState(int,double[])>($i6, $r9);

     label2:
        return;

     label3:
        $i4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i7 = i7 + $i4;

        i8 = i8 + 1;

        goto label1;

     label4:
        $r5 = new org.apache.commons.math3.ode.UnknownParameterException;

        specialinvoke $r5.<org.apache.commons.math3.ode.UnknownParameterException: void <init>(java.lang.String)>(r1);

        throw $r5;
    }

    public void getCurrentMainSetJacobian(double[][])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        double[][] r1;
        double[] r2, $r4;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r3;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: double[][];

        $r3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        r2 = virtualinvoke $r3.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getSecondaryState(int)>($i0);

        i4 = 0;

        i5 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        if i5 >= $i1 goto label2;

        $r4 = r1[i5];

        $i2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, $r4, 0, $i2);

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public void getCurrentParameterJacobian(java.lang.String, double[])
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.lang.String r1, $r7;
        double[] r2, r3;
        org.apache.commons.math3.ode.ParameterConfiguration[] r4;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.commons.math3.ode.ParameterConfiguration r5;
        org.apache.commons.math3.ode.ExpandableStatefulODE $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: double[];

        $r6 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ExpandableStatefulODE efode>;

        $i1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int index>;

        r3 = virtualinvoke $r6.<org.apache.commons.math3.ode.ExpandableStatefulODE: double[] getSecondaryState(int)>($i1);

        $i3 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        $i2 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i6 = $i3 * $i2;

        r4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        i0 = lengthof r4;

        i7 = 0;

     label1:
        if i7 >= i0 goto label3;

        r5 = r4[i7];

        $r7 = virtualinvoke r5.<org.apache.commons.math3.ode.ParameterConfiguration: java.lang.String getParameterName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $i5 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i6, r2, 0, $i5);

        return;

     label2:
        $i4 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        i6 = i6 + $i4;

        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    private void checkDimension(int, java.lang.Object) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        int i0, $i2;
        java.lang.Object r1;
        org.apache.commons.math3.exception.DimensionMismatchException $r2;

        r0 := @this: org.apache.commons.math3.ode.JacobianMatrices;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

     label2:
        if $i2 == i0 goto label3;

        $r2 = new org.apache.commons.math3.exception.DimensionMismatchException;

        specialinvoke $r2.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i2, i0);

        throw $r2;

     label3:
        return;
    }

    static int access$200(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int stateDim>;

        return $i0;
    }

    static int access$300(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $i0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: int paramDim>;

        return $i0;
    }

    static boolean access$400(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $z0 = r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter>;

        return $z0;
    }

    static org.apache.commons.math3.ode.MainStateJacobianProvider access$500(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.MainStateJacobianProvider $r1;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.MainStateJacobianProvider jode>;

        return $r1;
    }

    static org.apache.commons.math3.ode.ParameterizedODE access$600(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterizedODE $r1;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterizedODE pode>;

        return $r1;
    }

    static org.apache.commons.math3.ode.ParameterConfiguration[] access$700(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        org.apache.commons.math3.ode.ParameterConfiguration[] $r1;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: org.apache.commons.math3.ode.ParameterConfiguration[] selectedParameters>;

        return $r1;
    }

    static java.util.List access$800(org.apache.commons.math3.ode.JacobianMatrices)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        $r1 = r0.<org.apache.commons.math3.ode.JacobianMatrices: java.util.List jacobianProviders>;

        return $r1;
    }

    static boolean access$402(org.apache.commons.math3.ode.JacobianMatrices, boolean)
    {
        org.apache.commons.math3.ode.JacobianMatrices r0;
        boolean z0;

        r0 := @parameter0: org.apache.commons.math3.ode.JacobianMatrices;

        z0 := @parameter1: boolean;

        r0.<org.apache.commons.math3.ode.JacobianMatrices: boolean dirtyParameter> = z0;

        return z0;
    }
}
