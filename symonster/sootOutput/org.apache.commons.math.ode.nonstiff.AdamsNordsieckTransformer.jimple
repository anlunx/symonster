public class org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer extends java.lang.Object
{
    private static final java.util.Map CACHE;
    private final org.apache.commons.math.linear.Array2DRowRealMatrix initialization;
    private final org.apache.commons.math.linear.Array2DRowRealMatrix update;
    private final double[] c1;

    private void <init>(int)
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math.linear.FieldMatrix r1, r6, r26;
        org.apache.commons.math.linear.FieldDecompositionSolver r2, $r19;
        org.apache.commons.math.fraction.BigFraction[] r3, r4, $r11, $r13, $r25;
        org.apache.commons.math.fraction.BigFraction[][] r5;
        org.apache.commons.math.linear.FieldLUDecompositionImpl $r7, $r18;
        org.apache.commons.math.fraction.BigFraction $r8, $r12, $r16, $r23;
        org.apache.commons.math.FieldElement[] $r9;
        org.apache.commons.math.FieldElement[][] $r10;
        org.apache.commons.math.linear.Array2DRowFieldMatrix $r14;
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1 $r15;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r20, $r21;
        double[] $r22, $r24;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math.linear.FieldMatrix buildP(int)>(i0);

        $r7 = new org.apache.commons.math.linear.FieldLUDecompositionImpl;

        specialinvoke $r7.<org.apache.commons.math.linear.FieldLUDecompositionImpl: void <init>(org.apache.commons.math.linear.FieldMatrix)>(r1);

        r2 = virtualinvoke $r7.<org.apache.commons.math.linear.FieldLUDecompositionImpl: org.apache.commons.math.linear.FieldDecompositionSolver getSolver()>();

        r3 = newarray (org.apache.commons.math.fraction.BigFraction)[i0];

        $r8 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ONE>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r3, $r8);

        $r9 = interfaceinvoke r2.<org.apache.commons.math.linear.FieldDecompositionSolver: org.apache.commons.math.FieldElement[] solve(org.apache.commons.math.FieldElement[])>(r3);

        r4 = (org.apache.commons.math.fraction.BigFraction[]) $r9;

        $r10 = interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: org.apache.commons.math.FieldElement[][] getData()>();

        r5 = (org.apache.commons.math.fraction.BigFraction[][]) $r10;

        $i1 = lengthof r5;

        i3 = $i1 - 1;

     label1:
        if i3 <= 0 goto label2;

        $i2 = i3 - 1;

        $r25 = r5[$i2];

        r5[i3] = $r25;

        i3 = i3 + -1;

        goto label1;

     label2:
        $r11 = newarray (org.apache.commons.math.fraction.BigFraction)[i0];

        r5[0] = $r11;

        $r13 = r5[0];

        $r12 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ZERO>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r13, $r12);

        $r14 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r14.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r5, 0);

        r26 = interfaceinvoke r2.<org.apache.commons.math.linear.FieldDecompositionSolver: org.apache.commons.math.linear.FieldMatrix solve(org.apache.commons.math.linear.FieldMatrix)>($r14);

        $r15 = new org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1;

        $r16 = <org.apache.commons.math.fraction.BigFraction: org.apache.commons.math.fraction.BigFraction ZERO>;

        specialinvoke $r15.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer$1: void <init>(org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer,org.apache.commons.math.fraction.BigFraction)>(r0, $r16);

        interfaceinvoke r1.<org.apache.commons.math.linear.FieldMatrix: org.apache.commons.math.FieldElement walkInOptimizedOrder(org.apache.commons.math.linear.FieldMatrixChangingVisitor)>($r15);

        $r18 = new org.apache.commons.math.linear.FieldLUDecompositionImpl;

        specialinvoke $r18.<org.apache.commons.math.linear.FieldLUDecompositionImpl: void <init>(org.apache.commons.math.linear.FieldMatrix)>(r1);

        $r19 = virtualinvoke $r18.<org.apache.commons.math.linear.FieldLUDecompositionImpl: org.apache.commons.math.linear.FieldDecompositionSolver getSolver()>();

        r6 = interfaceinvoke $r19.<org.apache.commons.math.linear.FieldDecompositionSolver: org.apache.commons.math.linear.FieldMatrix getInverse()>();

        $r20 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)>(r6);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math.linear.Array2DRowRealMatrix initialization> = $r20;

        $r21 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.Array2DRowRealMatrix bigFractionMatrixToRealMatrix(org.apache.commons.math.linear.FieldMatrix)>(r26);

        r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math.linear.Array2DRowRealMatrix update> = $r21;

        $r22 = newarray (double)[i0];

        r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: double[] c1> = $r22;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        $r24 = r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $r23 = r4[i4];

        $d0 = virtualinvoke $r23.<org.apache.commons.math.fraction.BigFraction: double doubleValue()>();

        $r24[i4] = $d0;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    public static org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer getInstance(int)
    {
        int i0;
        java.util.Map $r2, $r3, $r7;
        java.lang.Integer $r4, $r8;
        java.lang.Object $r5;
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer $r6, r12;
        java.lang.Throwable $r11;

        i0 := @parameter0: int;

        $r2 = <org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        entermonitor $r2;

     label1:
        $r3 = <org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r12 = (org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer) $r5;

        if r12 != null goto label2;

        $r6 = new org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        specialinvoke $r6.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: void <init>(int)>(i0);

        r12 = $r6;

        $r7 = <org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

     label2:
        exitmonitor $r2;

     label3:
        return r12;

     label4:
        $r11 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getNSteps()
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        $r1 = r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        $i0 = lengthof $r1;

        return $i0;
    }

    private org.apache.commons.math.linear.FieldMatrix buildP(int)
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        org.apache.commons.math.fraction.BigFraction[][] r1;
        org.apache.commons.math.fraction.BigFraction[] r2;
        org.apache.commons.math.linear.Array2DRowFieldMatrix $r3;
        org.apache.commons.math.fraction.BigFraction $r4;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        i0 := @parameter0: int;

        r1 = newmultiarray (org.apache.commons.math.fraction.BigFraction)[i0][i0];

        i7 = 0;

     label1:
        $i2 = lengthof r1;

        if i7 >= $i2 goto label4;

        r2 = r1[i7];

        $i3 = i7 + 1;

        i1 = neg $i3;

        i8 = i1;

        i9 = 0;

     label2:
        $i4 = lengthof r2;

        if i9 >= $i4 goto label3;

        $r4 = new org.apache.commons.math.fraction.BigFraction;

        $i5 = i9 + 2;

        $i6 = i8 * $i5;

        specialinvoke $r4.<org.apache.commons.math.fraction.BigFraction: void <init>(int)>($i6);

        r2[i9] = $r4;

        i8 = i8 * i1;

        i9 = i9 + 1;

        goto label2;

     label3:
        i7 = i7 + 1;

        goto label1;

     label4:
        $r3 = new org.apache.commons.math.linear.Array2DRowFieldMatrix;

        specialinvoke $r3.<org.apache.commons.math.linear.Array2DRowFieldMatrix: void <init>(org.apache.commons.math.FieldElement[][],boolean)>(r1, 0);

        return $r3;
    }

    public org.apache.commons.math.linear.Array2DRowRealMatrix initializeHighOrderDerivatives(double[], double[][])
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        double[] r1, r3;
        double[][] r2;
        int $i0, $i1, i2, i3;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r4, $r5, $r6;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        i2 = 0;

     label1:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label4;

        r3 = r2[i2];

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label3;

        $d1 = r3[i3];

        $d0 = r1[i3];

        $d2 = $d1 - $d0;

        r3[i3] = $d2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r5 = r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math.linear.Array2DRowRealMatrix initialization>;

        $r4 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        specialinvoke $r4.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.Array2DRowRealMatrix: org.apache.commons.math.linear.Array2DRowRealMatrix multiply(org.apache.commons.math.linear.Array2DRowRealMatrix)>($r4);

        return $r6;
    }

    public org.apache.commons.math.linear.Array2DRowRealMatrix updateHighOrderDerivativesPhase1(org.apache.commons.math.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        org.apache.commons.math.linear.Array2DRowRealMatrix r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        r1 := @parameter0: org.apache.commons.math.linear.Array2DRowRealMatrix;

        $r2 = r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: org.apache.commons.math.linear.Array2DRowRealMatrix update>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math.linear.Array2DRowRealMatrix: org.apache.commons.math.linear.Array2DRowRealMatrix multiply(org.apache.commons.math.linear.Array2DRowRealMatrix)>(r1);

        return $r3;
    }

    public void updateHighOrderDerivativesPhase2(double[], double[], org.apache.commons.math.linear.Array2DRowRealMatrix)
    {
        org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer r0;
        double[] r1, r2, r5, $r6;
        org.apache.commons.math.linear.Array2DRowRealMatrix r3;
        double[][] r4;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1, i2, i3;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: org.apache.commons.math.linear.Array2DRowRealMatrix;

        r4 = virtualinvoke r3.<org.apache.commons.math.linear.Array2DRowRealMatrix: double[][] getDataRef()>();

        i2 = 0;

     label1:
        $i0 = lengthof r4;

        if i2 >= $i0 goto label4;

        r5 = r4[i2];

        $r6 = r0.<org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: double[] c1>;

        d0 = $r6[i2];

        i3 = 0;

     label2:
        $i1 = lengthof r5;

        if i3 >= $i1 goto label3;

        $d5 = r5[i3];

        $d2 = r1[i3];

        $d1 = r2[i3];

        $d3 = $d2 - $d1;

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r5[i3] = $d6;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.math.ode.nonstiff.AdamsNordsieckTransformer: java.util.Map CACHE> = $r0;

        return;
    }
}
