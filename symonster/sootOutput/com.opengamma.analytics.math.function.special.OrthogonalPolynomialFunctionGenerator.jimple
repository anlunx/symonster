public abstract class com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator extends java.lang.Object
{
    private static final com.opengamma.analytics.math.function.RealPolynomialFunction1D ZERO;
    private static final com.opengamma.analytics.math.function.RealPolynomialFunction1D ONE;
    private static final com.opengamma.analytics.math.function.RealPolynomialFunction1D X;

    public void <init>()
    {
        com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator r0;

        r0 := @this: com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.opengamma.analytics.math.function.DoubleFunction1D[] getPolynomials(int);

    public abstract com.opengamma.util.tuple.Pair[] getPolynomialsAndFirstDerivative(int);

    protected com.opengamma.analytics.math.function.DoubleFunction1D getZero()
    {
        com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator;

        $r1 = <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D ZERO>;

        return $r1;
    }

    protected com.opengamma.analytics.math.function.DoubleFunction1D getOne()
    {
        com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator;

        $r1 = <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D ONE>;

        return $r1;
    }

    protected com.opengamma.analytics.math.function.DoubleFunction1D getX()
    {
        com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator r0;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator;

        $r1 = <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D X>;

        return $r1;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r0, $r2, $r4;
        double[] $r1, $r3, $r5;

        $r0 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r1 = newarray (double)[1];

        $r1[0] = 0.0;

        specialinvoke $r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r1);

        <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D ZERO> = $r0;

        $r2 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r3 = newarray (double)[1];

        $r3[0] = 1.0;

        specialinvoke $r2.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r3);

        <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D ONE> = $r2;

        $r4 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r5 = newarray (double)[2];

        $r5[0] = 0.0;

        $r5[1] = 1.0;

        specialinvoke $r4.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r5);

        <com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: com.opengamma.analytics.math.function.RealPolynomialFunction1D X> = $r4;

        return;
    }
}
