public class org.apache.commons.math3.random.RandomDataImpl extends java.lang.Object implements org.apache.commons.math3.random.RandomData, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.apache.commons.math3.random.RandomDataGenerator delegate;

    public void <init>()
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void <init>()>();

        r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.random.RandomDataGenerator $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.random.RandomDataGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataGenerator: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate> = $r2;

        return;
    }

    org.apache.commons.math3.random.RandomDataGenerator getDelegate()
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        return $r1;
    }

    public java.lang.String nextHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextHexString(int)>(i0);

        return $r2;
    }

    public int nextInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, i1, $i2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextInt(int,int)>(i0, i1);

        return $i2;
    }

    public long nextLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        long l0, l1, $l2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $l2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: long nextLong(long,long)>(l0, l1);

        return $l2;
    }

    public java.lang.String nextSecureHexString(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: java.lang.String nextSecureHexString(int)>(i0);

        return $r2;
    }

    public int nextSecureInt(int, int) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, i1, $i2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextSecureInt(int,int)>(i0, i1);

        return $i2;
    }

    public long nextSecureLong(long, long) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        long l0, l1, $l2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $l2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: long nextSecureLong(long,long)>(l0, l1);

        return $l2;
    }

    public long nextPoisson(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: long nextPoisson(double)>(d0);

        return $l0;
    }

    public double nextGaussian(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextGaussian(double,double)>(d0, d1);

        return $d2;
    }

    public double nextExponential(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, $d1;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextExponential(double)>(d0);

        return $d1;
    }

    public double nextUniform(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextUniform(double,double)>(d0, d1);

        return $d2;
    }

    public double nextUniform(double, double, boolean) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        boolean z0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextUniform(double,double,boolean)>(d0, d1, z0);

        return $d2;
    }

    public double nextBeta(double, double)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextBeta(double,double)>(d0, d1);

        return $d2;
    }

    public int nextBinomial(int, double)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextBinomial(int,double)>(i0, d0);

        return $i1;
    }

    public double nextCauchy(double, double)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextCauchy(double,double)>(d0, d1);

        return $d2;
    }

    public double nextChiSquare(double)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, $d1;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextChiSquare(double)>(d0);

        return $d1;
    }

    public double nextF(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextF(double,double)>(d0, d1);

        return $d2;
    }

    public double nextGamma(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextGamma(double,double)>(d0, d1);

        return $d2;
    }

    public int nextHypergeometric(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, i1, i2, $i3;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i3 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextHypergeometric(int,int,int)>(i0, i1, i2);

        return $i3;
    }

    public int nextPascal(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextPascal(int,double)>(i0, d0);

        return $i1;
    }

    public double nextT(double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, $d1;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextT(double)>(d0);

        return $d1;
    }

    public double nextWeibull(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        double d0, d1, $d2;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $d2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: double nextWeibull(double,double)>(d0, d1);

        return $d2;
    }

    public int nextZipf(int, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, $i1;
        double d0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $i1 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int nextZipf(int,double)>(i0, d0);

        return $i1;
    }

    public void reSeed(long)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        long l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed(long)>(l0);

        return;
    }

    public void reSeedSecure()
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeedSecure()>();

        return;
    }

    public void reSeedSecure(long)
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        long l0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeedSecure(long)>(l0);

        return;
    }

    public void reSeed()
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.random.RandomDataGenerator $r1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: void reSeed()>();

        return;
    }

    public void setSecureAlgorithm(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        java.lang.String r1, r2;
        org.apache.commons.math3.random.RandomDataGenerator $r3;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        virtualinvoke $r3.<org.apache.commons.math3.random.RandomDataGenerator: void setSecureAlgorithm(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    public int[] nextPermutation(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        int i0, i1;
        org.apache.commons.math3.random.RandomDataGenerator $r1;
        int[] $r2;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.random.RandomDataGenerator: int[] nextPermutation(int,int)>(i0, i1);

        return $r2;
    }

    public java.lang.Object[] nextSample(java.util.Collection, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        java.util.Collection r1;
        int i0;
        org.apache.commons.math3.random.RandomDataGenerator $r2;
        java.lang.Object[] $r3;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.math3.random.RandomDataImpl: org.apache.commons.math3.random.RandomDataGenerator delegate>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.random.RandomDataGenerator: java.lang.Object[] nextSample(java.util.Collection,int)>(r1, i0);

        return $r3;
    }

    public double nextInversionDeviate(org.apache.commons.math3.distribution.RealDistribution) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.distribution.RealDistribution r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math3.distribution.RealDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataImpl: double nextUniform(double,double)>(0.0, 1.0);

        $d1 = interfaceinvoke r1.<org.apache.commons.math3.distribution.RealDistribution: double inverseCumulativeProbability(double)>($d0);

        return $d1;
    }

    public int nextInversionDeviate(org.apache.commons.math3.distribution.IntegerDistribution) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.random.RandomDataImpl r0;
        org.apache.commons.math3.distribution.IntegerDistribution r1;
        double $d0;
        int $i0;

        r0 := @this: org.apache.commons.math3.random.RandomDataImpl;

        r1 := @parameter0: org.apache.commons.math3.distribution.IntegerDistribution;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.random.RandomDataImpl: double nextUniform(double,double)>(0.0, 1.0);

        $i0 = interfaceinvoke r1.<org.apache.commons.math3.distribution.IntegerDistribution: int inverseCumulativeProbability(double)>($d0);

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.random.RandomDataImpl: long serialVersionUID> = -626730818244969716L;

        return;
    }
}
