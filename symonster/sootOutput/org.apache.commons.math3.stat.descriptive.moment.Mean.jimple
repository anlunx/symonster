public class org.apache.commons.math3.stat.descriptive.moment.Mean extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable, org.apache.commons.math3.stat.descriptive.WeightedEvaluation
{
    private static final long serialVersionUID;
    protected org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment;
    protected boolean incMoment;

    public void <init>()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment> = 1;

        $r1 = new org.apache.commons.math3.stat.descriptive.moment.FirstMoment;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.moment.FirstMoment)
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.FirstMoment;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment> = r1;

        r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment> = 0;

        return;
    }

    public void <init>(org.apache.commons.math3.stat.descriptive.moment.Mean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0, r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Mean: void copy(org.apache.commons.math3.stat.descriptive.moment.Mean,org.apache.commons.math3.stat.descriptive.moment.Mean)>(r1, r0);

        return;
    }

    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        double d0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        d0 := @parameter0: double;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: void increment(double)>(d0);

     label1:
        return;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment>;

        virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: void clear()>();

     label1:
        return;
    }

    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment>;

        $d0 = $r1.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: double m1>;

        return $d0;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r1;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: long getN()>();

        return $l0;
    }

    public double evaluate(double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        double[] r1;
        int i0, i1, $i2, i3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, d7;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r3;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label3;

        $r3 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r3.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        d0 = (double) i1;

        $d2 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.summary.Sum: double evaluate(double[],int,int)>(r1, i0, i1);

        d1 = $d2 / d0;

        d7 = 0.0;

        i3 = i0;

     label1:
        $i2 = i0 + i1;

        if i3 >= $i2 goto label2;

        $d5 = r1[i3];

        $d6 = $d5 - d1;

        d7 = d7 + $d6;

        i3 = i3 + 1;

        goto label1;

     label2:
        $d3 = d7 / d0;

        $d4 = d1 + $d3;

        return $d4;

     label3:
        return #NaN;
    }

    public double evaluate(double[], double[], int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        double[] r1, r2;
        int i0, i1, $i2, i3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.summary.Sum $r4;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean test(double[],double[],int,int)>(r1, r2, i0, i1);

        if $z0 == 0 goto label3;

        $r4 = new org.apache.commons.math3.stat.descriptive.summary.Sum;

        specialinvoke $r4.<org.apache.commons.math3.stat.descriptive.summary.Sum: void <init>()>();

        d0 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.summary.Sum: double evaluate(double[],int,int)>(r2, i0, i1);

        $d2 = virtualinvoke $r4.<org.apache.commons.math3.stat.descriptive.summary.Sum: double evaluate(double[],double[],int,int)>(r1, r2, i0, i1);

        d1 = $d2 / d0;

        d9 = 0.0;

        i3 = i0;

     label1:
        $i2 = i0 + i1;

        if i3 >= $i2 goto label2;

        $d7 = r2[i3];

        $d5 = r1[i3];

        $d6 = $d5 - d1;

        $d8 = $d7 * $d6;

        d9 = d9 + $d8;

        i3 = i3 + 1;

        goto label1;

     label2:
        $d3 = d9 / d0;

        $d4 = d1 + $d3;

        return $d4;

     label3:
        return #NaN;
    }

    public double evaluate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0;
        double[] r1, r2;
        int $i0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i0 = lengthof r1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: double evaluate(double[],double[],int,int)>(r1, r2, 0, $i0);

        return $d0;
    }

    public org.apache.commons.math3.stat.descriptive.moment.Mean copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0, $r2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $r2 = new org.apache.commons.math3.stat.descriptive.moment.Mean;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.moment.Mean: void <init>()>();

        staticinvoke <org.apache.commons.math3.stat.descriptive.moment.Mean: void copy(org.apache.commons.math3.stat.descriptive.moment.Mean,org.apache.commons.math3.stat.descriptive.moment.Mean)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math3.stat.descriptive.moment.Mean, org.apache.commons.math3.stat.descriptive.moment.Mean) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0, r1;
        double[] $r2;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.moment.FirstMoment $r3, $r4;

        r0 := @parameter0: org.apache.commons.math3.stat.descriptive.moment.Mean;

        r1 := @parameter1: org.apache.commons.math3.stat.descriptive.moment.Mean;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r0);

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $r2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math3.stat.descriptive.moment.Mean: void setData(double[])>($r2);

        $z0 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment>;

        r1.<org.apache.commons.math3.stat.descriptive.moment.Mean: boolean incMoment> = $z0;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.stat.descriptive.moment.FirstMoment: org.apache.commons.math3.stat.descriptive.moment.FirstMoment copy()>();

        r1.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.FirstMoment moment> = $r4;

        return;
    }

    public volatile org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.Mean copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.moment.Mean r0, $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.moment.Mean;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.moment.Mean: org.apache.commons.math3.stat.descriptive.moment.Mean copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.moment.Mean: long serialVersionUID> = -1296043746617791564L;

        return;
    }
}
