public abstract class com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider extends com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunctionProvider
{
    private static final com.opengamma.analytics.math.matrix.MatrixAlgebra MA;
    private final com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _volFuncPro;
    private final com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve _fwdCurve;
    private final com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] _smileModelParameterProviders;

    public void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve, com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[])
    {
        com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r1;
        com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve r2;
        com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve;

        r3 := @parameter2: com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[];

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunctionProvider: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "volFuncPro");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "fwdCurve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r3, "modelToSmileModelParms");

        $i0 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: int getNumSmileModelParameters()>();

        $i1 = lengthof r3;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Incorrect number of smileModelParameterProviders");

        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _volFuncPro> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve _fwdCurve> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] _smileModelParameterProviders> = r3;

        return;
    }

    public void <init>(com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider, com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve, com.opengamma.analytics.math.function.ParameterizedCurve[])
    {
        com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider r0;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider r1;
        com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve r2;
        com.opengamma.analytics.math.function.ParameterizedCurve[] r3;
        com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] r4;
        int $i0, $i1, $i2, i3, $i4;
        com.opengamma.analytics.math.function.ParameterizedCurveVectorFunctionProvider $r8;
        com.opengamma.analytics.math.function.ParameterizedCurve $r9;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve;

        r3 := @parameter2: com.opengamma.analytics.math.function.ParameterizedCurve[];

        specialinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunctionProvider: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "volFuncPro");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "fwdCurve");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r3, "smileParameterTS");

        $i0 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: int getNumSmileModelParameters()>();

        $i1 = lengthof r3;

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Incorrect number of smileParameterTS");

        $i2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: int getNumSmileModelParameters()>();

        r4 = newarray (com.opengamma.analytics.math.function.DoublesVectorFunctionProvider)[$i2];

        i3 = 0;

     label3:
        $i4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: int getNumSmileModelParameters()>();

        if i3 >= $i4 goto label4;

        $r8 = new com.opengamma.analytics.math.function.ParameterizedCurveVectorFunctionProvider;

        $r9 = r3[i3];

        specialinvoke $r8.<com.opengamma.analytics.math.function.ParameterizedCurveVectorFunctionProvider: void <init>(com.opengamma.analytics.math.function.ParameterizedCurve)>($r9);

        r4[i3] = $r8;

        i3 = i3 + 1;

        goto label3;

     label4:
        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _volFuncPro> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve _fwdCurve> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] _smileModelParameterProviders> = r4;

        return;
    }

    public com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunction 'from'(com.opengamma.util.tuple.DoublesPair[])
    {
        com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider r0;
        com.opengamma.util.tuple.DoublesPair[] r1;
        int i0, i1, i2, $i3, $i4, $i6, i7, i8, i9, i10, i12, i13, i14, i15, i16, i17, i18;
        int[][] r4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10, d11;
        com.opengamma.analytics.math.function.Function1D r5, r66;
        java.lang.Double[] $r10, $r12, $r16, $r18, $r38, $r40;
        java.lang.Object[] $r11, $r17, $r39;
        java.lang.Object $r13, $r36;
        java.lang.Double $r15, $r37, $r43;
        boolean $z1, $z5, $z7;
        double[] $r19, $r25, $r27, $r32, $r34, $r41, r54;
        com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve $r24;
        com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider $r26, $r28;
        com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] $r29;
        com.opengamma.analytics.math.function.DoublesVectorFunctionProvider $r30;
        com.opengamma.analytics.math.function.VectorFunction $r31;
        int[] $r33, $r35;
        byte $b5;
        java.lang.StringBuilder $r46, $r47, $r48, $r49, $r50, r70;
        java.lang.String $r51;
        com.opengamma.util.tuple.DoublesPair r53, r57, r59, r61;
        double[][] r55;
        java.util.Iterator r56;
        java.util.ArrayList r58, r72, r73, r75, r76;
        com.opengamma.analytics.math.function.VectorFunction[] r62;
        com.opengamma.util.tuple.FirstThenSecondDoublesPairComparator r67;
        java.util.TreeSet r68, r69;
        java.lang.IllegalArgumentException r71;
        com.opengamma.analytics.math.function.ConcatenatedVectorFunction r74;
        com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider$1 r77;
        java.util.Comparator r78;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider;

        r1 := @parameter0: com.opengamma.util.tuple.DoublesPair[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object[] noNulls(java.lang.Object[],java.lang.String)>(r1, "expiryStrikePoints");

        i0 = lengthof r1;

        if i0 <= 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "Require at least one expiryStrikePoints");

        i1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: int getNumSmileModelParameters()>();

        r68 = new java.util.TreeSet;

        r67 = new com.opengamma.util.tuple.FirstThenSecondDoublesPairComparator;

        specialinvoke r67.<com.opengamma.util.tuple.FirstThenSecondDoublesPairComparator: void <init>()>();

        r78 = (java.util.Comparator) r67;

        specialinvoke r68.<java.util.TreeSet: void <init>(java.util.Comparator)>(r78);

        r69 = new java.util.TreeSet;

        specialinvoke r69.<java.util.TreeSet: void <init>()>();

        i7 = lengthof r1;

        i8 = 0;

     label03:
        if i8 >= i7 goto label05;

        r53 = r1[i8];

        d8 = r53.<com.opengamma.util.tuple.DoublesPair: double first>;

        d9 = r53.<com.opengamma.util.tuple.DoublesPair: double second>;

        $z5 = interfaceinvoke r68.<java.util.Set: boolean add(java.lang.Object)>(r53);

        if $z5 != 0 goto label04;

        r71 = new java.lang.IllegalArgumentException;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expiryStrikePoints are not unique. Point with expiry of ");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d8);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and a strike of ");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d9);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already present");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r71.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r51);

        throw r71;

     label04:
        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d8);

        interfaceinvoke r69.<java.util.Set: boolean add(java.lang.Object)>($r43);

        i8 = i8 + 1;

        goto label03;

     label05:
        $r10 = newarray (java.lang.Double)[0];

        $r11 = interfaceinvoke r69.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.Double[]) $r11;

        r54 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($r12);

        i9 = lengthof r54;

        r55 = newarray (double[])[i9];

        r56 = interfaceinvoke r68.<java.util.Set: java.util.Iterator iterator()>();

        i10 = 0;

        $r13 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (com.opengamma.util.tuple.DoublesPair) $r13;

        d10 = r57.<com.opengamma.util.tuple.DoublesPair: double first>;

        r72 = new java.util.ArrayList;

        specialinvoke r72.<java.util.ArrayList: void <init>()>();

        r58 = r72;

        $d2 = r57.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        interfaceinvoke r72.<java.util.List: boolean add(java.lang.Object)>($r15);

     label06:
        $z1 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r36 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r59 = (com.opengamma.util.tuple.DoublesPair) $r36;

        $d6 = r59.<com.opengamma.util.tuple.DoublesPair: double first>;

        $b5 = $d6 cmpl d10;

        if $b5 <= 0 goto label07;

        $i6 = i10;

        i10 = i10 + 1;

        $r38 = newarray (java.lang.Double)[0];

        $r39 = interfaceinvoke r58.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r38);

        $r40 = (java.lang.Double[]) $r39;

        $r41 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($r40);

        r55[$i6] = $r41;

        d10 = r59.<com.opengamma.util.tuple.DoublesPair: double first>;

        r73 = new java.util.ArrayList;

        specialinvoke r73.<java.util.ArrayList: void <init>()>();

        r58 = r73;

     label07:
        $d7 = r59.<com.opengamma.util.tuple.DoublesPair: double second>;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        interfaceinvoke r58.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label06;

     label08:
        $r16 = newarray (java.lang.Double)[0];

        $r17 = interfaceinvoke r58.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (java.lang.Double[]) $r17;

        $r19 = staticinvoke <org.apache.commons.lang.ArrayUtils: double[] toPrimitive(java.lang.Double[])>($r18);

        r55[i10] = $r19;

        r4 = newarray (int[])[i9];

        i12 = 0;

     label09:
        if i12 >= i9 goto label10;

        $r34 = r55[i12];

        $i4 = lengthof $r34;

        $r35 = newarray (int)[$i4];

        r4[i12] = $r35;

        i12 = i12 + 1;

        goto label09;

     label10:
        i13 = 0;

        i14 = lengthof r1;

        i15 = 0;

     label11:
        if i15 >= i14 goto label12;

        r61 = r1[i15];

        d11 = r61.<com.opengamma.util.tuple.DoublesPair: double first>;

        d1 = r61.<com.opengamma.util.tuple.DoublesPair: double second>;

        i16 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>(r54, d11);

        $r32 = r55[i16];

        i2 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r32, d1);

        $r33 = r4[i16];

        $i3 = i13;

        i13 = i13 + 1;

        $r33[i2] = $i3;

        i15 = i15 + 1;

        goto label11;

     label12:
        r62 = newarray (com.opengamma.analytics.math.function.VectorFunction)[i1];

        i17 = 0;

     label13:
        if i17 >= i1 goto label14;

        $r29 = r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.math.function.DoublesVectorFunctionProvider[] _smileModelParameterProviders>;

        $r30 = $r29[i17];

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.function.DoublesVectorFunctionProvider: com.opengamma.analytics.math.function.VectorFunction 'from'(double[])>(r54);

        r62[i17] = $r31;

        i17 = i17 + 1;

        goto label13;

     label14:
        r74 = new com.opengamma.analytics.math.function.ConcatenatedVectorFunction;

        specialinvoke r74.<com.opengamma.analytics.math.function.ConcatenatedVectorFunction: void <init>(com.opengamma.analytics.math.function.VectorFunction[])>(r62);

        r75 = new java.util.ArrayList;

        specialinvoke r75.<java.util.ArrayList: void <init>(int)>(i9);

        r76 = new java.util.ArrayList;

        specialinvoke r76.<java.util.ArrayList: void <init>(int)>(i9);

        i18 = 0;

     label15:
        if i18 >= i9 goto label16;

        $r24 = r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve _fwdCurve>;

        $d3 = r54[i18];

        d0 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.interestrate.curve.ForwardCurve: double getForward(double)>($d3);

        $r26 = r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _volFuncPro>;

        $r25 = r55[i18];

        $d4 = r54[i18];

        r5 = virtualinvoke $r26.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getVolatilityFunction(double,double[],double)>(d0, $r25, $d4);

        $r28 = r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider _volFuncPro>;

        $r27 = r55[i18];

        $d5 = r54[i18];

        r66 = virtualinvoke $r28.<com.opengamma.analytics.financial.model.volatility.smile.function.VolatilityFunctionProvider: com.opengamma.analytics.math.function.Function1D getModelAdjointFunction(double,double[],double)>(d0, $r27, $d5);

        interfaceinvoke r75.<java.util.List: boolean add(java.lang.Object)>(r5);

        interfaceinvoke r76.<java.util.List: boolean add(java.lang.Object)>(r66);

        i18 = i18 + 1;

        goto label15;

     label16:
        r77 = new com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider$1;

        specialinvoke r77.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider$1: void <init>(com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider,int,int,int,com.opengamma.analytics.math.function.VectorFunction,java.util.List,java.util.List,int[][])>(r0, i0, i9, i1, r74, r75, r76, r4);

        return r77;
    }

    public abstract int getNumSmileModelParameters();

    protected abstract com.opengamma.analytics.financial.model.volatility.smile.function.SmileModelData toSmileModelData(double[]);

    public volatile com.opengamma.analytics.math.function.VectorFunction 'from'(java.lang.Object[])
    {
        com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider r0;
        java.lang.Object[] r1;
        com.opengamma.util.tuple.DoublesPair[] $r2;
        com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunction $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (com.opengamma.util.tuple.DoublesPair[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.financial.model.volatility.discrete.DiscreteVolatilityFunction 'from'(com.opengamma.util.tuple.DoublesPair[])>($r2);

        return $r3;
    }

    static com.opengamma.analytics.math.matrix.MatrixAlgebra access$000()
    {
        com.opengamma.analytics.math.matrix.MatrixAlgebra $r0;

        $r0 = <com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.math.matrix.MatrixAlgebra MA>;

        return $r0;
    }

    static void <clinit>()
    {
        com.opengamma.analytics.math.matrix.OGMatrixAlgebra $r0;

        $r0 = new com.opengamma.analytics.math.matrix.OGMatrixAlgebra;

        specialinvoke $r0.<com.opengamma.analytics.math.matrix.OGMatrixAlgebra: void <init>()>();

        <com.opengamma.analytics.financial.model.volatility.discrete.ParameterizedSmileModelDiscreteVolatilityFunctionProvider: com.opengamma.analytics.math.matrix.MatrixAlgebra MA> = $r0;

        return;
    }
}
