final class org.apache.commons.math3.analysis.FunctionUtils$15 extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction
{
    final org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f;

    void <init>(org.apache.commons.math3.analysis.DifferentiableUnivariateFunction)
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        r1 := @parameter0: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction;

        r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        double d0, $d1;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d1 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>(d0);

        return $d1;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.FunctionUtils$15 r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        double[] r2;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int[] r3;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r4, $r5, $r9;
        org.apache.commons.math3.analysis.UnivariateFunction $r6;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r10;
        java.lang.Integer $r11, $r12;

        r0 := @this: org.apache.commons.math3.analysis.FunctionUtils$15;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        lookupswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label5;
        };

     label1:
        $r8 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $r9 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d6 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d7 = interfaceinvoke $r9.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>($d6);

        specialinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>($i4, 0, $d7);

        return $r8;

     label2:
        i0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        $i2 = i0 + 1;

        r2 = newarray (double)[$i2];

        $r4 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $d1 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d2 = interfaceinvoke $r4.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: double value(double)>($d1);

        r2[0] = $d2;

        $r5 = r0.<org.apache.commons.math3.analysis.FunctionUtils$15: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction val$f>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        $d3 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d0 = interfaceinvoke $r6.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>($d3);

        r3 = newarray (int)[i0];

        i6 = 0;

     label3:
        if i6 >= i0 goto label4;

        r3[i6] = 1;

        $i3 = i6 + 1;

        $d4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getPartialDerivative(int[])>(r3);

        $d5 = d0 * $d4;

        r2[$i3] = $d5;

        r3[i6] = 0;

        i6 = i6 + 1;

        goto label3;

     label4:
        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>(i0, 1, r2);

        return $r7;

     label5:
        $r10 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r11, $r12, 1);

        throw $r10;
    }
}
