public class com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D extends com.opengamma.analytics.math.interpolation.Interpolator1D
{
    private static final long serialVersionUID;

    public void <init>()
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.Interpolator1D: void <init>()>();

        return;
    }

    public java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, r4, r5, r6, r7, $r8;
        com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues r3;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        r3 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues getBoundedValues(java.lang.Double)>(r2);

        r4 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundKey()>();

        r5 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getLowerBoundValue()>();

        $i0 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: int getLowerBoundIndex()>();

        $i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i2 = $i1 - 1;

        if $i0 != $i2 goto label1;

        return r5;

     label1:
        r6 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundKey()>();

        r7 = virtualinvoke r3.<com.opengamma.analytics.math.interpolation.data.InterpolationBoundedValues: java.lang.Double getHigherBoundValue()>();

        $d0 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 / $d1;

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d4 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d5 = $d3 - $d4;

        $d6 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d7 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 - $d7;

        $d9 = $d5 / $d8;

        $d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d2, $d9);

        $d11 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d12 = $d10 * $d11;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        return $r8;
    }

    public double firstDerivative(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, r3, r4, r5, r6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20;
        int $i0, $i1, $i2, $i3, i4;
        double[] $r7, $r8, $r9, $r10;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "value");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "data bundle");

        i4 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        $i1 = $i0 - 1;

        if i4 != $i1 goto label1;

        i4 = i4 + -1;

     label1:
        $r7 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $d2 = $r7[i4];

        r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r8 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $d3 = $r8[i4];

        r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r9 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $i2 = i4 + 1;

        $d4 = $r9[$i2];

        r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r10 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $i3 = i4 + 1;

        $d5 = $r10[$i3];

        r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $d6 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d7 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d8 = $d6 - $d7;

        d0 = 1.0 / $d8;

        $d9 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d10 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        d1 = $d9 / $d10;

        $d11 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d12 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $d13 = $d11 - $d12;

        $d14 = $d13 * d0;

        $d15 = staticinvoke <java.lang.Math: double pow(double,double)>(d1, $d14);

        $d16 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d17 = $d15 * $d16;

        $d18 = $d17 * d0;

        $d19 = staticinvoke <java.lang.Math: double log(double)>(d1);

        $d20 = $d18 * $d19;

        return $d20;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundle(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        double[] r1, r2;
        int i0, $i1, i3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;
        double $d0, $d1, $d2;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r2;

        i3 = 1;

     label1:
        if i3 >= i0 goto label4;

        $i1 = i3 - 1;

        $d1 = r2[$i1];

        $d0 = r2[i3];

        $d2 = $d1 * $d0;

        $b2 = $d2 cmpl 0.0;

        if $b2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "All y values should have the same sign");

        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[])>(r1, r2);

        return $r3;
    }

    public com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle getDataBundleFromSortedArrays(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        double[] r1, r2;
        int i0, $i1, i3;
        com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle $r3;
        double $d0, $d1, $d2;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        i0 = lengthof r2;

        i3 = 1;

     label1:
        if i3 >= i0 goto label4;

        $i1 = i3 - 1;

        $d1 = r2[$i1];

        $d0 = r2[i3];

        $d2 = $d1 * $d0;

        $b2 = $d2 cmpl 0.0;

        if $b2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "All y values should have the same sign");

        i3 = i3 + 1;

        goto label1;

     label4:
        $r3 = new com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle;

        specialinvoke $r3.<com.opengamma.analytics.math.interpolation.data.ArrayInterpolator1DDataBundle: void <init>(double[],double[],boolean)>(r1, r2, 1);

        return $r3;
    }

    public double[] getNodeSensitivitiesForValue(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle, java.lang.Double)
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle r1;
        java.lang.Double r2, r4, r5, r6, r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        double[] r3, $r8, $r9, $r10, $r11;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle;

        r2 := @parameter1: java.lang.Double;

        i0 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int size()>();

        r3 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r3, 0.0);

        i1 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: int getLowerBoundIndex(java.lang.Double)>(r2);

        $i2 = i0 - 1;

        if i1 != $i2 goto label1;

        $i6 = i0 - 1;

        r3[$i6] = 1.0;

        return r3;

     label1:
        $r8 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $d4 = $r8[i1];

        r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r9 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $d5 = $r9[i1];

        r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r10 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getKeys()>();

        $i3 = i1 + 1;

        $d6 = $r10[$i3];

        r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r11 = interfaceinvoke r1.<com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle: double[] getValues()>();

        $i4 = i1 + 1;

        $d7 = $r11[$i4];

        r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        $d8 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d9 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d10 = $d8 - $d9;

        d0 = 1.0 / $d10;

        $d11 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d12 = virtualinvoke r4.<java.lang.Double: double doubleValue()>();

        $d13 = $d11 - $d12;

        d1 = $d13 * d0;

        $d14 = virtualinvoke r6.<java.lang.Double: double doubleValue()>();

        $d15 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d16 = $d14 - $d15;

        d2 = $d16 * d0;

        $d17 = virtualinvoke r5.<java.lang.Double: double doubleValue()>();

        $d18 = virtualinvoke r7.<java.lang.Double: double doubleValue()>();

        d3 = $d17 / $d18;

        $d19 = neg d1;

        $d20 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, $d19);

        $d21 = $d20 * d2;

        r3[i1] = $d21;

        $i5 = i1 + 1;

        $d22 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, d2);

        $d23 = $d22 * d1;

        r3[$i5] = $d23;

        return r3;
    }

    public volatile java.lang.Double interpolate(java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D r0;
        java.lang.Object r1, r2;
        java.lang.Double $r3, $r5;
        com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle $r4;

        r0 := @this: com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle) r1;

        $r3 = (java.lang.Double) r2;

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D: java.lang.Double interpolate(com.opengamma.analytics.math.interpolation.data.Interpolator1DDataBundle,java.lang.Double)>($r4, $r3);

        return $r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.ExponentialInterpolator1D: long serialVersionUID> = 1L;

        return;
    }
}
