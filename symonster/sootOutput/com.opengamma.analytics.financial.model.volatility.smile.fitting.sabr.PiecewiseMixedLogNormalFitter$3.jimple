class com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3 extends com.opengamma.analytics.math.function.Function1D
{
    final double val$expiry;
    final double[] val$strikes;
    final com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams;
    final double val$forward;
    final int val$n;
    final com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter this$0;

    void <init>(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter, double, double[], com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[], double, int)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3 r0;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter r1;
        double d0, d1;
        double[] r2;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] r3;
        int i0;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3;

        r1 := @parameter0: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        r3 := @parameter3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[];

        d1 := @parameter4: double;

        i0 := @parameter5: int;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter this$0> = r1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$expiry> = d0;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double[] val$strikes> = r2;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams> = r3;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward> = d1;

        r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: int val$n> = i0;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3 r0;
        java.lang.Double r1, $r13, $r16, $r19, $r22, $r25;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData r3, r26, r27, r28, r29, r30;
        com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption $r4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20;
        double[] $r5, $r8;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter $r6;
        com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction $r7;
        byte $b3, $b4;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] $r9, $r10, $r14, $r17, $r20, $r23;
        com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction $r11, $r12, $r15, $r18, $r21, $r24;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3;

        r1 := @parameter0: java.lang.Double;

        $r4 = new com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$expiry>;

        specialinvoke $r4.<com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption: void <init>(double,double,boolean)>($d0, $d1, 1);

        $r5 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double[] val$strikes>;

        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        i0 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.SurfaceArrayUtils: int getLowerBoundIndex(double[],double)>($r5, $d2);

        if i0 != 0 goto label1;

        $r23 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        r26 = $r23[0];

        $r24 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d18 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d19 = virtualinvoke $r24.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d18, r26);

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d19);

        return $r25;

     label1:
        $i1 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: int val$n>;

        $i2 = $i1 - 2;

        if i0 < $i2 goto label2;

        $r20 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        $i7 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: int val$n>;

        $i8 = $i7 - 3;

        r27 = $r20[$i8];

        $r21 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d16 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d17 = virtualinvoke $r21.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d16, r27);

        $r22 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d17);

        return $r22;

     label2:
        $r6 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter this$0>;

        $r7 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction access$100(com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter)>($r6);

        $r8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double[] val$strikes>;

        $d3 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d20 = virtualinvoke $r7.<com.opengamma.analytics.financial.model.volatility.smile.fitting.interpolation.WeightingFunction: double getWeight(double[],int,double)>($r8, i0, $d3);

        $b3 = d20 cmpl 1.0;

        if $b3 != 0 goto label3;

        $r17 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        $i6 = i0 - 1;

        r28 = $r17[$i6];

        $r18 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d15 = virtualinvoke $r18.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d14, r28);

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d15);

        return $r19;

     label3:
        $b4 = d20 cmpl 0.0;

        if $b4 != 0 goto label4;

        $r14 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        r29 = $r14[i0];

        $r15 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d12 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d13 = virtualinvoke $r15.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d12, r29);

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        return $r16;

     label4:
        $r9 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        $i5 = i0 - 1;

        r30 = $r9[$i5];

        $r10 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData[] val$modelParams>;

        r3 = $r10[i0];

        $r11 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d4 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d5 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d4, r30);

        $d6 = d20 * $d5;

        $d7 = 1.0 - d20;

        $r12 = staticinvoke <com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter: com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction access$000()>();

        $d8 = r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: double val$forward>;

        $d9 = virtualinvoke $r12.<com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalVolatilityFunction: double getVolatility(com.opengamma.analytics.financial.model.option.pricing.analytic.formula.EuropeanVanillaOption,double,com.opengamma.analytics.financial.model.volatility.smile.function.MixedLogNormalModelData)>($r4, $d8, r3);

        $d10 = $d7 * $d9;

        $d11 = $d6 + $d10;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d11);

        return $r13;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3 r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.volatility.smile.fitting.sabr.PiecewiseMixedLogNormalFitter$3: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
