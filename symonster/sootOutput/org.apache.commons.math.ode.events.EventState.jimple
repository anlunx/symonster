public class org.apache.commons.math.ode.events.EventState extends java.lang.Object
{
    private final org.apache.commons.math.ode.events.EventHandler handler;
    private final double maxCheckInterval;
    private final double convergence;
    private final int maxIterationCount;
    private double t0;
    private double g0;
    private boolean g0Positive;
    private boolean pendingEvent;
    private double pendingEventTime;
    private double previousEventTime;
    private boolean forward;
    private boolean increasing;
    private int nextAction;

    public void <init>(org.apache.commons.math.ode.events.EventHandler, double, double, int)
    {
        org.apache.commons.math.ode.events.EventState r0;
        org.apache.commons.math.ode.events.EventHandler r1;
        double d0, d1, $d2;
        int i0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math.ode.events.EventHandler;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler> = r1;

        r0.<org.apache.commons.math.ode.events.EventState: double maxCheckInterval> = d0;

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        r0.<org.apache.commons.math.ode.events.EventState: double convergence> = $d2;

        r0.<org.apache.commons.math.ode.events.EventState: int maxIterationCount> = i0;

        r0.<org.apache.commons.math.ode.events.EventState: double t0> = #NaN;

        r0.<org.apache.commons.math.ode.events.EventState: double g0> = #NaN;

        r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive> = 1;

        r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime> = #NaN;

        r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime> = #NaN;

        r0.<org.apache.commons.math.ode.events.EventState: boolean increasing> = 1;

        r0.<org.apache.commons.math.ode.events.EventState: int nextAction> = 3;

        return;
    }

    public org.apache.commons.math.ode.events.EventHandler getEventHandler()
    {
        org.apache.commons.math.ode.events.EventState r0;
        org.apache.commons.math.ode.events.EventHandler $r1;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $r1 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        return $r1;
    }

    public double getMaxCheckInterval()
    {
        org.apache.commons.math.ode.events.EventState r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $d0 = r0.<org.apache.commons.math.ode.events.EventState: double maxCheckInterval>;

        return $d0;
    }

    public double getConvergence()
    {
        org.apache.commons.math.ode.events.EventState r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $d0 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        return $d0;
    }

    public int getMaxIterationCount()
    {
        org.apache.commons.math.ode.events.EventState r0;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $i0 = r0.<org.apache.commons.math.ode.events.EventState: int maxIterationCount>;

        return $i0;
    }

    public void reinitializeBegin(org.apache.commons.math.ode.sampling.StepInterpolator) throws org.apache.commons.math.ode.events.EventException
    {
        org.apache.commons.math.ode.events.EventState r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        boolean $z0, $z1, $z2;
        org.apache.commons.math.ode.events.EventHandler $r2, $r5;
        double[] $r3, $r6;
        byte $b0, $b1, $b2;
        org.apache.commons.math.ode.DerivativeException $r8;
        org.apache.commons.math.ode.events.EventException $r9;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

     label01:
        $z0 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: boolean isForward()>();

        if $z0 == 0 goto label02;

        $d10 = virtualinvoke r0.<org.apache.commons.math.ode.events.EventState: double getConvergence()>();

        goto label03;

     label02:
        $d1 = virtualinvoke r0.<org.apache.commons.math.ode.events.EventState: double getConvergence()>();

        $d10 = neg $d1;

     label03:
        $d2 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        $d3 = $d2 + $d10;

        r0.<org.apache.commons.math.ode.events.EventState: double t0> = $d3;

        $d4 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>($d4);

        $r2 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        $d5 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        $r3 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $d6 = interfaceinvoke $r2.<org.apache.commons.math.ode.events.EventHandler: double g(double,double[])>($d5, $r3);

        r0.<org.apache.commons.math.ode.events.EventState: double g0> = $d6;

        $d7 = r0.<org.apache.commons.math.ode.events.EventState: double g0>;

        $b0 = $d7 cmpl 0.0;

        if $b0 != 0 goto label06;

        d0 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        $r5 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        $r6 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $d9 = interfaceinvoke $r5.<org.apache.commons.math.ode.events.EventHandler: double g(double,double[])>(d0, $r6);

        $b2 = $d9 cmpg 0.0;

        if $b2 > 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive> = $z1;

        goto label09;

     label06:
        $d8 = r0.<org.apache.commons.math.ode.events.EventState: double g0>;

        $b1 = $d8 cmpl 0.0;

        if $b1 < 0 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive> = $z2;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        $r9 = new org.apache.commons.math.ode.events.EventException;

        specialinvoke $r9.<org.apache.commons.math.ode.events.EventException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label11:
        return;

        catch org.apache.commons.math.ode.DerivativeException from label01 to label09 with label10;
    }

    public boolean evaluateStep(org.apache.commons.math.ode.sampling.StepInterpolator) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.events.EventException, org.apache.commons.math.ConvergenceException
    {
        org.apache.commons.math.ode.events.EventState r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, d37, $d38, d39, d40, $d41, d42, $d43, d44, $d45;
        int i0, $i2, $i3, $i8, $i12, i15, i16;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9;
        byte $b1, $b4, $b5, $b6, $b7, $b9, $b10, $b11, $b13, $b14;
        org.apache.commons.math.ode.events.EventHandler $r5;
        double[] $r6;
        org.apache.commons.math.ode.events.EventState$1 $r7;
        org.apache.commons.math.analysis.solvers.BrentSolver $r8;
        org.apache.commons.math.exception.MathInternalError $r9;
        org.apache.commons.math.ode.events.EventState$EmbeddedEventException $r11;
        org.apache.commons.math.ode.events.EventException $r12;
        org.apache.commons.math.FunctionEvaluationException $r13, $r17;
        org.apache.commons.math.ode.DerivativeException $r14, $r16, $r18;
        org.apache.commons.math.ode.events.EventState$EmbeddedDerivativeException $r15;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

     label01:
        $z0 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: boolean isForward()>();

        r0.<org.apache.commons.math.ode.events.EventState: boolean forward> = $z0;

        d37 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        $d5 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        $d6 = d37 - $d5;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d6);

        $d8 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b1 = $d7 cmpg $d8;

        if $b1 >= 0 goto label03;

     label02:
        return 0;

     label03:
        $z1 = r0.<org.apache.commons.math.ode.events.EventState: boolean forward>;

        if $z1 == 0 goto label04;

        $d36 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        $d35 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $d38 = $d36 + $d35;

        goto label05;

     label04:
        $d10 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        $d9 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $d38 = $d10 - $d9;

     label05:
        d0 = $d38;

        d1 = d37 - $d38;

        $d11 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d12 = r0.<org.apache.commons.math.ode.events.EventState: double maxCheckInterval>;

        $d13 = $d11 / $d12;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d13);

        $i2 = (int) $d14;

        i0 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>(1, $i2);

        $d15 = (double) i0;

        d2 = d1 / $d15;

        d39 = r0.<org.apache.commons.math.ode.events.EventState: double t0>;

        d40 = r0.<org.apache.commons.math.ode.events.EventState: double g0>;

        i15 = 0;

     label06:
        if i15 >= i0 goto label32;

        $i3 = i15 + 1;

        $d16 = (double) $i3;

        $d17 = $d16 * d2;

        d3 = d0 + $d17;

        interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d3);

        $r5 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        $r6 = interfaceinvoke r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        d4 = interfaceinvoke $r5.<org.apache.commons.math.ode.events.EventHandler: double g(double,double[])>(d3, $r6);

        $z2 = r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive>;

        $b4 = d4 cmpl 0.0;

        if $b4 < 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        $z3 = $z2 ^ $z7;

        if $z3 == 0 goto label30;

        $b5 = d4 cmpl d40;

        if $b5 < 0 goto label09;

        $z8 = 1;

        goto label10;

     label09:
        $z8 = 0;

     label10:
        r0.<org.apache.commons.math.ode.events.EventState: boolean increasing> = $z8;

        $r7 = new org.apache.commons.math.ode.events.EventState$1;

        specialinvoke $r7.<org.apache.commons.math.ode.events.EventState$1: void <init>(org.apache.commons.math.ode.events.EventState,org.apache.commons.math.ode.sampling.StepInterpolator)>(r0, r1);

        $r8 = new org.apache.commons.math.analysis.solvers.BrentSolver;

        $d18 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        specialinvoke $r8.<org.apache.commons.math.analysis.solvers.BrentSolver: void <init>(double)>($d18);

        $d19 = d40 * d4;

        $b6 = $d19 cmpl 0.0;

        if $b6 < 0 goto label19;

        $z6 = r0.<org.apache.commons.math.ode.events.EventState: boolean forward>;

        if $z6 == 0 goto label11;

        $d41 = 0.25;

        goto label12;

     label11:
        $d41 = -0.25;

     label12:
        $d32 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        d42 = $d41 * $d32;

        i16 = 0;

     label13:
        if i16 >= 4 goto label18;

        $d34 = d40 * d4;

        $b14 = $d34 cmpl 0.0;

        if $b14 <= 0 goto label18;

        d39 = d39 + d42;

     label14:
        d40 = interfaceinvoke $r7.<org.apache.commons.math.analysis.UnivariateRealFunction: double value(double)>(d39);

     label15:
        goto label17;

     label16:
        $r13 := @caughtexception;

        $r14 = new org.apache.commons.math.ode.DerivativeException;

        specialinvoke $r14.<org.apache.commons.math.ode.DerivativeException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label17:
        i16 = i16 + 1;

        goto label13;

     label18:
        $d33 = d40 * d4;

        $b13 = $d33 cmpl 0.0;

        if $b13 <= 0 goto label19;

        $r9 = new org.apache.commons.math.exception.MathInternalError;

        specialinvoke $r9.<org.apache.commons.math.exception.MathInternalError: void <init>()>();

        throw $r9;

     label19:
        $b7 = d39 cmpg d3;

        if $b7 > 0 goto label20;

        $i12 = r0.<org.apache.commons.math.ode.events.EventState: int maxIterationCount>;

        $d43 = virtualinvoke $r8.<org.apache.commons.math.analysis.solvers.BrentSolver: double solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($i12, $r7, d39, d3);

        goto label21;

     label20:
        $i8 = r0.<org.apache.commons.math.ode.events.EventState: int maxIterationCount>;

        $d43 = virtualinvoke $r8.<org.apache.commons.math.analysis.solvers.BrentSolver: double solve(int,org.apache.commons.math.analysis.UnivariateRealFunction,double,double)>($i8, $r7, d3, d39);

     label21:
        d44 = $d43;

     label22:
        goto label24;

     label23:
        $r17 := @caughtexception;

        $r18 = new org.apache.commons.math.ode.DerivativeException;

        specialinvoke $r18.<org.apache.commons.math.ode.DerivativeException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label24:
        $d20 = r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime>;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d20);

        if $z4 != 0 goto label25;

        $d25 = $d43 - d39;

        $d26 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d25);

        $d27 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b10 = $d26 cmpg $d27;

        if $b10 > 0 goto label25;

        $d28 = r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime>;

        $d29 = $d43 - $d28;

        $d30 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d29);

        $d31 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b11 = $d30 cmpg $d31;

        if $b11 > 0 goto label25;

        d39 = d3;

        d40 = d4;

        goto label29;

     label25:
        $d45 = r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime>;

        $z9 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d45);

        if $z9 != 0 goto label26;

        $d21 = r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime>;

        $d22 = $d21 - d44;

        $d23 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d22);

        $d24 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b9 = $d23 cmpl $d24;

        if $b9 <= 0 goto label28;

     label26:
        r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime> = d44;

        r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent> = 1;

     label27:
        return 1;

     label28:
        d39 = d3;

        d40 = d4;

     label29:
        goto label31;

     label30:
        d39 = d3;

        d40 = d4;

     label31:
        i15 = i15 + 1;

        goto label06;

     label32:
        r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime> = #NaN;

     label33:
        return 0;

     label34:
        $r15 := @caughtexception;

        $r16 = virtualinvoke $r15.<org.apache.commons.math.ode.events.EventState$EmbeddedDerivativeException: org.apache.commons.math.ode.DerivativeException getDerivativeException()>();

        throw $r16;

     label35:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<org.apache.commons.math.ode.events.EventState$EmbeddedEventException: org.apache.commons.math.ode.events.EventException getEventException()>();

        throw $r12;

        catch org.apache.commons.math.FunctionEvaluationException from label14 to label15 with label16;
        catch org.apache.commons.math.FunctionEvaluationException from label19 to label22 with label23;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedDerivativeException from label01 to label02 with label34;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedDerivativeException from label03 to label27 with label34;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedDerivativeException from label28 to label33 with label34;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedEventException from label01 to label02 with label35;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedEventException from label03 to label27 with label35;
        catch org.apache.commons.math.ode.events.EventState$EmbeddedEventException from label28 to label33 with label35;
    }

    public double getEventTime()
    {
        org.apache.commons.math.ode.events.EventState r0;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $z0 = r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label1;

        $d0 = r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime>;

        goto label2;

     label1:
        $d0 = #Infinity;

     label2:
        return $d0;
    }

    public void stepAccepted(double, double[]) throws org.apache.commons.math.ode.events.EventException
    {
        org.apache.commons.math.ode.events.EventState r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        double[] r1;
        org.apache.commons.math.ode.events.EventHandler $r2, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1;
        int $i2;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        r0.<org.apache.commons.math.ode.events.EventState: double t0> = d0;

        $r2 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        $d1 = interfaceinvoke $r2.<org.apache.commons.math.ode.events.EventHandler: double g(double,double[])>(d0, r1);

        r0.<org.apache.commons.math.ode.events.EventState: double g0> = $d1;

        $z0 = r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label3;

        $d3 = r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime>;

        $d4 = $d3 - d0;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $d6 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b1 = $d5 cmpg $d6;

        if $b1 > 0 goto label3;

        r0.<org.apache.commons.math.ode.events.EventState: double previousEventTime> = d0;

        $z1 = r0.<org.apache.commons.math.ode.events.EventState: boolean increasing>;

        r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive> = $z1;

        $r4 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        $z3 = r0.<org.apache.commons.math.ode.events.EventState: boolean increasing>;

        $z2 = r0.<org.apache.commons.math.ode.events.EventState: boolean forward>;

        $z4 = $z3 ^ $z2;

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        $i2 = interfaceinvoke $r4.<org.apache.commons.math.ode.events.EventHandler: int eventOccurred(double,double[],boolean)>(d0, r1, $z5);

        r0.<org.apache.commons.math.ode.events.EventState: int nextAction> = $i2;

        goto label6;

     label3:
        $d2 = r0.<org.apache.commons.math.ode.events.EventState: double g0>;

        $b0 = $d2 cmpl 0.0;

        if $b0 < 0 goto label4;

        $z6 = 1;

        goto label5;

     label4:
        $z6 = 0;

     label5:
        r0.<org.apache.commons.math.ode.events.EventState: boolean g0Positive> = $z6;

        r0.<org.apache.commons.math.ode.events.EventState: int nextAction> = 3;

     label6:
        return;
    }

    public boolean stop()
    {
        org.apache.commons.math.ode.events.EventState r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        $i0 = r0.<org.apache.commons.math.ode.events.EventState: int nextAction>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean reset(double, double[]) throws org.apache.commons.math.ode.events.EventException
    {
        org.apache.commons.math.ode.events.EventState r0;
        double d0, $d1, $d2, $d3, $d4;
        double[] r1;
        boolean $z0, $z1;
        byte $b0;
        int $i1, $i2, $i3;
        org.apache.commons.math.ode.events.EventHandler $r2;

        r0 := @this: org.apache.commons.math.ode.events.EventState;

        d0 := @parameter0: double;

        r1 := @parameter1: double[];

        $z0 = r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent>;

        if $z0 == 0 goto label1;

        $d1 = r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime>;

        $d2 = $d1 - d0;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d2);

        $d4 = r0.<org.apache.commons.math.ode.events.EventState: double convergence>;

        $b0 = $d3 cmpg $d4;

        if $b0 <= 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = r0.<org.apache.commons.math.ode.events.EventState: int nextAction>;

        if $i1 != 1 goto label3;

        $r2 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        interfaceinvoke $r2.<org.apache.commons.math.ode.events.EventHandler: void resetState(double,double[])>(d0, r1);

     label3:
        r0.<org.apache.commons.math.ode.events.EventState: boolean pendingEvent> = 0;

        r0.<org.apache.commons.math.ode.events.EventState: double pendingEventTime> = #NaN;

        $i2 = r0.<org.apache.commons.math.ode.events.EventState: int nextAction>;

        if $i2 == 1 goto label4;

        $i3 = r0.<org.apache.commons.math.ode.events.EventState: int nextAction>;

        if $i3 != 2 goto label5;

     label4:
        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        return $z1;
    }

    static org.apache.commons.math.ode.events.EventHandler access$000(org.apache.commons.math.ode.events.EventState)
    {
        org.apache.commons.math.ode.events.EventState r0;
        org.apache.commons.math.ode.events.EventHandler $r1;

        r0 := @parameter0: org.apache.commons.math.ode.events.EventState;

        $r1 = r0.<org.apache.commons.math.ode.events.EventState: org.apache.commons.math.ode.events.EventHandler handler>;

        return $r1;
    }
}
