public class org.apache.commons.math.stat.descriptive.summary.SumOfSquares extends org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic implements java.io.Serializable
{
    private static final long serialVersionUID;
    private long n;
    private double value;

    public void <init>()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n> = 0L;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value> = #NaN;

        return;
    }

    public void <init>(org.apache.commons.math.stat.descriptive.summary.SumOfSquares)
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0, r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        r1 := @parameter0: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke r0.<org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        staticinvoke <org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void copy(org.apache.commons.math.stat.descriptive.summary.SumOfSquares,org.apache.commons.math.stat.descriptive.summary.SumOfSquares)>(r1, r0);

        return;
    }

    public void increment(double)
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;
        double d0, $d1, $d2, $d3, $d4;
        long $l0, $l2, $l3;
        byte $b1;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        d0 := @parameter0: double;

        $l0 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $d4 = d0 * d0;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value> = $d4;

        goto label2;

     label1:
        $d2 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value>;

        $d1 = d0 * d0;

        $d3 = $d2 + $d1;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value> = $d3;

     label2:
        $l2 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n>;

        $l3 = $l2 + 1L;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n> = $l3;

        return;
    }

    public double getResult()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;
        double $d0;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $d0 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value>;

        return $d0;
    }

    public long getN()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;
        long $l0;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $l0 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n>;

        return $l0;
    }

    public void clear()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value> = #NaN;

        r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n> = 0L;

        return;
    }

    public double evaluate(double[], int, int)
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0;
        double[] r1;
        int i0, i1, $i2, i3;
        boolean $z0;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d3 = #NaN;

        $z0 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: boolean test(double[],int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        d3 = 0.0;

        i3 = i0;

     label1:
        $i2 = i0 + i1;

        if i3 >= $i2 goto label2;

        $d1 = r1[i3];

        $d0 = r1[i3];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return d3;
    }

    public org.apache.commons.math.stat.descriptive.summary.SumOfSquares copy()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0, $r2;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $r2 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        specialinvoke $r2.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void <init>()>();

        staticinvoke <org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void copy(org.apache.commons.math.stat.descriptive.summary.SumOfSquares,org.apache.commons.math.stat.descriptive.summary.SumOfSquares)>(r0, $r2);

        return $r2;
    }

    public static void copy(org.apache.commons.math.stat.descriptive.summary.SumOfSquares, org.apache.commons.math.stat.descriptive.summary.SumOfSquares)
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0, r1;
        double[] $r2;
        long $l0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $r2 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double[] getDataRef()>();

        virtualinvoke r1.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: void setData(double[])>($r2);

        $l0 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n>;

        r1.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long n> = $l0;

        $d0 = r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value>;

        r1.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: double value> = $d0;

        return;
    }

    public volatile org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0, $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: org.apache.commons.math.stat.descriptive.summary.SumOfSquares copy()>();

        return $r1;
    }

    public volatile org.apache.commons.math.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares r0, $r1;

        r0 := @this: org.apache.commons.math.stat.descriptive.summary.SumOfSquares;

        $r1 = virtualinvoke r0.<org.apache.commons.math.stat.descriptive.summary.SumOfSquares: org.apache.commons.math.stat.descriptive.summary.SumOfSquares copy()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.stat.descriptive.summary.SumOfSquares: long serialVersionUID> = 1460986908574398008L;

        return;
    }
}
