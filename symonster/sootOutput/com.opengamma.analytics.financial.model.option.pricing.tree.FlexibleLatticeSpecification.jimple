public class com.opengamma.analytics.financial.model.option.pricing.tree.FlexibleLatticeSpecification extends com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification
{

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.FlexibleLatticeSpecification r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.FlexibleLatticeSpecification;

        specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.tree.LatticeSpecification: void <init>()>();

        return;
    }

    public double[] getParameters(double, double, double, double, double, int, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.tree.FlexibleLatticeSpecification r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        int i0, $i2, $i3, i4, $i5;
        byte $b1;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.tree.FlexibleLatticeSpecification;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        i0 := @parameter5: int;

        d5 := @parameter6: double;

        d6 = staticinvoke <java.lang.Math: double sqrt(double)>(d5);

        d7 = d3 * d6;

        $d14 = d1 / d0;

        $d15 = staticinvoke <java.lang.Math: double log(double)>($d14);

        $d16 = 0.5 * $d15;

        $d19 = $d16 / d7;

        $d17 = (double) i0;

        $d18 = 0.5 * $d17;

        d8 = $d19 + $d18;

        i4 = (int) d8;

        $d20 = (double) i4;

        $d21 = d8 - $d20;

        $d22 = $d21 - 1.0;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $b1 = $d23 cmpg 1.0E-12;

        if $b1 >= 0 goto label1;

        $i5 = i4 + 1;

        goto label2;

     label1:
        $i5 = i4;

     label2:
        d9 = staticinvoke <java.lang.Math: double exp(double)>(d7);

        $d25 = d1 / d0;

        $i2 = 2 * $i5;

        $i3 = i0 - $i2;

        $d24 = (double) $i3;

        $d26 = staticinvoke <java.lang.Math: double pow(double,double)>(d9, $d24);

        $d29 = $d25 * $d26;

        $d27 = (double) i0;

        $d28 = 1.0 / $d27;

        d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d29, $d28);

        d11 = d10 * d9;

        d12 = d10 / d9;

        $d30 = d4 * d5;

        $d31 = staticinvoke <java.lang.Math: double exp(double)>($d30);

        $d33 = $d31 - d12;

        $d32 = d11 - d12;

        d13 = $d33 / $d32;

        $r1 = newarray (double)[4];

        $r1[0] = d11;

        $r1[1] = d12;

        $r1[2] = d13;

        $d34 = 1.0 - d13;

        $r1[3] = $d34;

        return $r1;
    }
}
