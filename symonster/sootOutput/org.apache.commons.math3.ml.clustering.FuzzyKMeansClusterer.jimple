public class org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer extends org.apache.commons.math3.ml.clustering.Clusterer
{
    private static final double DEFAULT_EPSILON;
    private final int k;
    private final int maxIterations;
    private final double fuzziness;
    private final double epsilon;
    private final org.apache.commons.math3.random.RandomGenerator random;
    private double[][] membershipMatrix;
    private java.util.List points;
    private java.util.List clusters;

    public void <init>(int, double) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        int i0;
        double d0;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void <init>(int,double,int,org.apache.commons.math3.ml.distance.DistanceMeasure)>(i0, d0, -1, $r1);

        return;
    }

    public void <init>(int, double, int, org.apache.commons.math3.ml.distance.DistanceMeasure) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        int i0, i1;
        double d0;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.random.JDKRandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void <init>(int,double,int,org.apache.commons.math3.ml.distance.DistanceMeasure,double,org.apache.commons.math3.random.RandomGenerator)>(i0, d0, i1, r1, 0.001, $r2);

        return;
    }

    public void <init>(int, double, int, org.apache.commons.math3.ml.distance.DistanceMeasure, double, org.apache.commons.math3.random.RandomGenerator) throws org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        int i0, i1;
        double d0, d1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.random.RandomGenerator r2;
        byte $b2;
        double[][] $r3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Double $r5, $r6;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        i1 := @parameter2: int;

        r1 := @parameter3: org.apache.commons.math3.ml.distance.DistanceMeasure;

        d1 := @parameter4: double;

        r2 := @parameter5: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.Clusterer: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>(r1);

        $b2 = d0 cmpg 1.0;

        if $b2 > 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label1:
        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k> = i0;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double fuzziness> = d0;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int maxIterations> = i1;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double epsilon> = d1;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: org.apache.commons.math3.random.RandomGenerator random> = r2;

        $r3 = (double[][]) null;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix> = $r3;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points> = null;

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters> = null;

        return;
    }

    public int getK()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        return $i0;
    }

    public double getFuzziness()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $d0 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double fuzziness>;

        return $d0;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int maxIterations>;

        return $i0;
    }

    public double getEpsilon()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $d0 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double epsilon>;

        return $d0;
    }

    public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        return $r1;
    }

    public org.apache.commons.math3.linear.RealMatrix getMembershipMatrix()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        double[][] $r1, $r2;
        org.apache.commons.math3.linear.RealMatrix $r3;
        org.apache.commons.math3.exception.MathIllegalStateException $r4;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        if $r1 != null goto label1;

        $r4 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r4.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r3 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>($r2);

        return $r3;
    }

    public java.util.List getDataPoints()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        return $r1;
    }

    public java.util.List getClusters()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        return $r1;
    }

    public double getObjectiveFunctionValue()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.Iterator r1, r3;
        org.apache.commons.math3.ml.clustering.Clusterable r2, $r12;
        org.apache.commons.math3.ml.clustering.CentroidCluster r4;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        java.util.List $r5, $r7, $r8, $r10;
        org.apache.commons.math3.exception.MathIllegalStateException $r6;
        boolean $z0, $z1;
        java.lang.Object $r9, $r11;
        double[][] $r13;
        double[] $r14;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        $r5 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        if $r5 == null goto label1;

        $r7 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        if $r7 != null goto label2;

     label1:
        $r6 = new org.apache.commons.math3.exception.MathIllegalStateException;

        specialinvoke $r6.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>()>();

        throw $r6;

     label2:
        i0 = 0;

        d6 = 0.0;

        $r8 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        r1 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.ml.clustering.Clusterable) $r9;

        i1 = 0;

        $r10 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        r3 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r11;

        $r12 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r2, $r12);

        $d3 = d0 * d0;

        $r13 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r14 = $r13[i0];

        $d2 = $r14[i1];

        $d1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double fuzziness>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d2, $d1);

        $d5 = $d3 * $d4;

        d6 = d6 + $d5;

        i1 = i1 + 1;

        goto label4;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        return d6;
    }

    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.Collection r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11;
        double[][] r2, $r6;
        java.util.ArrayList $r3, $r5;
        java.util.List $r4, $r7, $r11, $r15, $r16;
        java.lang.Object $r8;
        org.apache.commons.math3.ml.clustering.Clusterable $r9;
        double[] $r10, $r14;
        org.apache.commons.math3.ml.clustering.CentroidCluster $r12;
        org.apache.commons.math3.ml.clustering.DoublePoint $r13;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r17;
        java.lang.Integer $r18, $r19;
        double d1, $d2;
        byte $b12;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i3 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        if i0 >= $i3 goto label1;

        $r17 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i8 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        specialinvoke $r17.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r18, $r19, 0);

        throw $r17;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters> = $r5;

        $i4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        $r6 = newmultiarray (double)[i0][$i4];

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix> = $r6;

        $i5 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        r2 = newmultiarray (double)[i0][$i5];

        if i0 != 0 goto label2;

        $r16 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        return $r16;

     label2:
        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void initializeMembershipMatrix()>();

        $r7 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (org.apache.commons.math3.ml.clustering.Clusterable) $r8;

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i1 = lengthof $r10;

        i9 = 0;

     label3:
        $i6 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        if i9 >= $i6 goto label4;

        $r15 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $r12 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        $r13 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        $r14 = newarray (double)[i1];

        specialinvoke $r13.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>($r14);

        specialinvoke $r12.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>($r13);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r12);

        i9 = i9 + 1;

        goto label3;

     label4:
        i10 = 0;

        $i7 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int maxIterations>;

        if $i7 >= 0 goto label5;

        $i11 = 2147483647;

        goto label6;

     label5:
        $i11 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int maxIterations>;

     label6:
        i2 = $i11;

     label7:
        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void saveMembershipMatrix(double[][])>(r2);

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void updateClusterCenters()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: void updateMembershipMatrix()>();

        d1 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double calculateMaxMembershipChange(double[][])>(r2);

        $d2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double epsilon>;

        $b12 = d1 cmpl $d2;

        if $b12 <= 0 goto label8;

        i10 = i10 + 1;

        if i10 < i2 goto label7;

     label8:
        $r11 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        return $r11;
    }

    private void updateClusterCenters()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.Iterator r2, r6;
        org.apache.commons.math3.ml.clustering.CentroidCluster r3, $r15;
        org.apache.commons.math3.ml.clustering.Clusterable r4, r7;
        double[] r5, r8, $r13, $r19;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, d8;
        java.util.ArrayList $r9;
        int $i0, $i1, $i2, i3, i4, i5;
        java.util.List $r10, $r11, $r14;
        boolean $z0, $z1;
        java.lang.Object $r12, $r17;
        org.apache.commons.math3.ml.clustering.DoublePoint $r16;
        double[][] $r18;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i3 = 0;

        $r9 = new java.util.ArrayList;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        $r10 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        r2 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r12;

        r4 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        i4 = 0;

        $r13 = interfaceinvoke r4.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $i1 = lengthof $r13;

        r5 = newarray (double)[$i1];

        d8 = 0.0;

        $r14 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        r6 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r17 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math3.ml.clustering.Clusterable) $r17;

        $r18 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r19 = $r18[i4];

        $d3 = $r19[i3];

        $d2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double fuzziness>;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d3, $d2);

        r8 = interfaceinvoke r7.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i5 = 0;

     label3:
        $i2 = lengthof r5;

        if i5 >= $i2 goto label4;

        $d6 = r5[i5];

        $d4 = r8[i5];

        $d5 = d0 * $d4;

        $d7 = $d6 + $d5;

        r5[i5] = $d7;

        i5 = i5 + 1;

        goto label3;

     label4:
        d8 = d8 + d0;

        i4 = i4 + 1;

        goto label2;

     label5:
        $d1 = 1.0 / d8;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void scaleInPlace(double,double[])>($d1, r5);

        $r15 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        $r16 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        specialinvoke $r16.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>(r5);

        specialinvoke $r15.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>($r16);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r15);

        i3 = i3 + 1;

        goto label1;

     label6:
        $r11 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

        r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters> = $r9;

        return;
    }

    private void updateMembershipMatrix()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        org.apache.commons.math3.ml.clustering.Clusterable r1, $r13, $r18;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, d11, $d12;
        org.apache.commons.math3.ml.clustering.CentroidCluster r2, $r9, $r12;
        java.util.List $r3, $r4, $r6, $r7, $r10, $r16;
        int $i0, $i1, i5, i6, i7;
        java.lang.Object $r5, $r8, $r11, $r17;
        byte $b2, $b3, $b4, $b8, $b9;
        double[][] $r14, $r20, $r22;
        double[] $r15, $r21, $r23;
        boolean $z0;
        java.util.Iterator r19;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i5 = 0;

     label01:
        $r3 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i0 goto label11;

        $r4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        r1 = (org.apache.commons.math3.ml.clustering.Clusterable) $r5;

        d9 = 4.9E-324;

        i6 = -1;

        i7 = 0;

     label02:
        $r6 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i7 >= $i1 goto label10;

        d10 = 0.0;

        $r10 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i7);

        $r12 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r11;

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r1, $r13);

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d2);

        $b2 = d0 cmpl 0.0;

        if $b2 == 0 goto label05;

        $r16 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        r19 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r17 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r17;

        $r18 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r1, $r18);

        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label04;

        d10 = #Infinity;

        goto label05;

     label04:
        $d7 = d0 / d1;

        $d4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double fuzziness>;

        $d5 = $d4 - 1.0;

        $d6 = 2.0 / $d5;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>($d7, $d6);

        d10 = d10 + $d8;

        goto label03;

     label05:
        $b8 = d10 cmpl 0.0;

        if $b8 != 0 goto label06;

        d11 = 1.0;

        goto label08;

     label06:
        $b3 = d10 cmpl #Infinity;

        if $b3 != 0 goto label07;

        d11 = 0.0;

        goto label08;

     label07:
        d11 = 1.0 / d10;

     label08:
        $r20 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r21 = $r20[i5];

        $r21[i7] = d11;

        $r22 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r23 = $r22[i5];

        $d12 = $r23[i7];

        $b9 = $d12 cmpl d9;

        if $b9 <= 0 goto label09;

        $r14 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r15 = $r14[i5];

        d9 = $r15[i7];

        i6 = i7;

     label09:
        i7 = i7 + 1;

        goto label02;

     label10:
        $r7 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i6);

        $r9 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r8;

        virtualinvoke $r9.<org.apache.commons.math3.ml.clustering.CentroidCluster: void addPoint(org.apache.commons.math3.ml.clustering.Clusterable)>(r1);

        i5 = i5 + 1;

        goto label01;

     label11:
        return;
    }

    private void initializeMembershipMatrix()
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        java.util.List $r1;
        int $i0, $i1, i2, i3;
        double[][] $r2, $r4, $r6;
        double[] $r3, $r5, $r8;
        org.apache.commons.math3.random.RandomGenerator $r7;
        double $d0;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        i2 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        $i1 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: int k>;

        if i3 >= $i1 goto label3;

        $r6 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r8 = $r6[i2];

        $r7 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r7.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $r8[i3] = $d0;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r3 = $r2[i2];

        $r5 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] normalizeArray(double[],double)>($r3, 1.0);

        $r4[i2] = $r5;

        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private double calculateMaxMembershipChange(double[][])
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        double[][] r1, $r4;
        double d0, $d1, $d2, $d3, d4;
        java.util.List $r2, $r3;
        int $i0, $i1, i2, i3;
        double[] $r5, $r6;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        r1 := @parameter0: double[][];

        d4 = 0.0;

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i2 >= $i0 goto label4;

        i3 = 0;

     label2:
        $r3 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r5 = $r4[i2];

        $d2 = $r5[i3];

        $r6 = r1[i2];

        $d1 = $r6[i3];

        $d3 = $d2 - $d1;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>(d0, d4);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return d4;
    }

    private void saveMembershipMatrix(double[][])
    {
        org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer r0;
        double[][] r1, $r3;
        java.util.List $r2, $r4;
        int $i0, $i1, i2;
        double[] $r5, $r6;

        r0 := @this: org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer;

        r1 := @parameter0: double[][];

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List points>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i2 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double[][] membershipMatrix>;

        $r5 = $r3[i2];

        $r6 = r1[i2];

        $r4 = r0.<org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: java.util.List clusters>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 0, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.clustering.FuzzyKMeansClusterer: double DEFAULT_EPSILON> = 0.001;

        return;
    }
}
