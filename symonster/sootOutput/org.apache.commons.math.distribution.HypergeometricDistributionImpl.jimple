public class org.apache.commons.math.distribution.HypergeometricDistributionImpl extends org.apache.commons.math.distribution.AbstractIntegerDistribution implements org.apache.commons.math.distribution.HypergeometricDistribution, java.io.Serializable
{
    private static final long serialVersionUID;
    private int numberOfSuccesses;
    private int populationSize;
    private int sampleSize;

    public void <init>(int, int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, i2;
        java.lang.Object[] $r1, $r6;
        org.apache.commons.math.exception.util.LocalizedFormats $r2, $r7;
        java.lang.Integer $r3, $r4, $r8, $r9;
        java.lang.IllegalArgumentException $r5, $r10;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        if i1 <= i0 goto label1;

        $r7 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        throw $r10;

     label1:
        if i2 <= i0 goto label2;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE>;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[1] = $r4;

        $r5 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r5;

     label2:
        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setPopulationSizeInternal(int)>(i0);

        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setSampleSizeInternal(int)>(i2);

        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setNumberOfSuccessesInternal(int)>(i1);

        return;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i2 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 >= $i4 goto label1;

        d0 = 0.0;

        goto label3;

     label1:
        $i5 = r1[1];

        if i0 < $i5 goto label2;

        d0 = 1.0;

        goto label3;

     label2:
        $i9 = r1[0];

        $i8 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i7 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i6 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        d0 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: double innerCumulativeProbability(int,int,int,int,int,int)>($i9, i0, 1, $i8, $i7, $i6);

     label3:
        return d0;
    }

    private int[] getDomain(int, int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, i2, $i3, $i4;
        int[] $r1;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = newarray (int)[2];

        $i3 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getLowerDomain(int,int,int)>(i0, i1, i2);

        $r1[0] = $i3;

        $i4 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getUpperDomain(int,int)>(i1, i2);

        $r1[1] = $i4;

        return $r1;
    }

    protected int getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        double d0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        d0 := @parameter0: double;

        $i2 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i1 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i0 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $i3 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getLowerDomain(int,int,int)>($i2, $i1, $i0);

        return $i3;
    }

    protected int getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        double d0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        d0 := @parameter0: double;

        $i1 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $i0 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i2 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getUpperDomain(int,int)>($i1, $i0);

        return $i2;
    }

    private int getLowerDomain(int, int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 - i2;

        $i4 = i1 - $i3;

        $i5 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>(0, $i4);

        return $i5;
    }

    public int getNumberOfSuccesses()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        return $i0;
    }

    public int getPopulationSize()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        return $i0;
    }

    public int getSampleSize()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        return $i0;
    }

    private int getUpperDomain(int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        return $i2;
    }

    public double probability(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i2 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 < $i4 goto label1;

        $i5 = r1[1];

        if i0 <= $i5 goto label2;

     label1:
        d11 = 0.0;

        goto label3;

     label2:
        $i6 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $d6 = (double) $i6;

        $i7 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $d5 = (double) $i7;

        d0 = $d6 / $d5;

        $i9 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i8 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $i10 = $i9 - $i8;

        $d8 = (double) $i10;

        $i11 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $d7 = (double) $i11;

        d1 = $d8 / $d7;

        $i12 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        d2 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>(i0, $i12, d0, d1);

        $i13 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $i17 = $i13 - i0;

        $i15 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i14 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i16 = $i15 - $i14;

        d3 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i17, $i16, d0, d1);

        $i19 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        $i18 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        d4 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i19, $i18, d0, d1);

        $d9 = d2 + d3;

        $d10 = $d9 - d4;

        d11 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d10);

     label3:
        return d11;
    }

    private double probability(int, int, int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, i2, i3, $i4, $i5;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $d0 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientLog(int,int)>(i1, i3);

        $i5 = i0 - i1;

        $i4 = i2 - i3;

        $d1 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientLog(int,int)>($i5, $i4);

        $d2 = $d0 + $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.MathUtils: double binomialCoefficientLog(int,int)>(i0, i2);

        $d4 = $d2 - $d3;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d4);

        return $d5;
    }

    public void setNumberOfSuccesses(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setNumberOfSuccessesInternal(int)>(i0);

        return;
    }

    private void setNumberOfSuccessesInternal(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NEGATIVE_NUMBER_OF_SUCCESSES>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses> = i0;

        return;
    }

    public void setPopulationSize(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setPopulationSizeInternal(int)>(i0);

        return;
    }

    private void setPopulationSizeInternal(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_POPULATION_SIZE>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize> = i0;

        return;
    }

    public void setSampleSize(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: void setSampleSizeInternal(int)>(i0);

        return;
    }

    private void setSampleSizeInternal(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Integer $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_SAMPLE_SIZE>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize> = i0;

        return;
    }

    public double upperCumulativeProbability(int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r1;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i2 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 >= $i4 goto label1;

        d0 = 1.0;

        goto label3;

     label1:
        $i5 = r1[1];

        if i0 <= $i5 goto label2;

        d0 = 0.0;

        goto label3;

     label2:
        $i9 = r1[1];

        $i8 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int populationSize>;

        $i7 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int numberOfSuccesses>;

        $i6 = r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int sampleSize>;

        d0 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: double innerCumulativeProbability(int,int,int,int,int,int)>($i9, i0, -1, $i8, $i7, $i6);

     label3:
        return d0;
    }

    private double innerCumulativeProbability(int, int, int, int, int, int)
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int i0, i1, i2, i3, i4, i5;
        double $d0, d1;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        d1 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: double probability(int,int,int,int)>(i2, i3, i4, i5);

     label1:
        if i5 == i0 goto label2;

        i5 = i5 + i1;

        $d0 = specialinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: double probability(int,int,int,int)>(i2, i3, i4, i5);

        d1 = d1 + $d0;

        goto label1;

     label2:
        return d1;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getSampleSize()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getNumberOfSuccesses()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getPopulationSize()>();

        $i4 = $i2 - $i3;

        $i5 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>(0, $i4);

        return $i5;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getNumberOfSuccesses()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getSampleSize()>();

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i0, $i1);

        return $i2;
    }

    protected double getNumericalMean()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getSampleSize()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getNumberOfSuccesses()>();

        $i2 = $i0 * $i1;

        $d0 = (double) $i2;

        $i3 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getPopulationSize()>();

        $d1 = (double) $i3;

        $d2 = $d0 / $d1;

        return $d2;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.HypergeometricDistributionImpl r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math.distribution.HypergeometricDistributionImpl;

        $i0 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getPopulationSize()>();

        d0 = (double) $i0;

        $i1 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getNumberOfSuccesses()>();

        d1 = (double) $i1;

        $i2 = virtualinvoke r0.<org.apache.commons.math.distribution.HypergeometricDistributionImpl: int getSampleSize()>();

        d2 = (double) $i2;

        $d4 = d2 * d1;

        $d3 = d0 - d2;

        $d6 = $d4 * $d3;

        $d5 = d0 - d1;

        $d10 = $d6 * $d5;

        $d8 = d0 * d0;

        $d7 = d0 - 1.0;

        $d9 = $d8 * $d7;

        $d11 = $d10 / $d9;

        return $d11;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.HypergeometricDistributionImpl: long serialVersionUID> = -436928820673516179L;

        return;
    }
}
