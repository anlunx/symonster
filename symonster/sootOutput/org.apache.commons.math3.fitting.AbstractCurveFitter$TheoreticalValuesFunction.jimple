public class org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction extends java.lang.Object
{
    private final org.apache.commons.math3.analysis.ParametricUnivariateFunction f;
    private final double[] points;

    public void <init>(org.apache.commons.math3.analysis.ParametricUnivariateFunction, java.util.Collection)
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction r1;
        java.util.Collection r2;
        int i0, $i1, i2;
        java.util.Iterator r3;
        org.apache.commons.math3.fitting.WeightedObservedPoint r4;
        double[] $r5, $r7;
        boolean $z0;
        java.lang.Object $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        r1 := @parameter0: org.apache.commons.math3.analysis.ParametricUnivariateFunction;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f> = r1;

        i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        $r5 = newarray (double)[i0];

        r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: double[] points> = $r5;

        i2 = 0;

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.fitting.WeightedObservedPoint) $r6;

        $r7 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: double[] points>;

        $i1 = i2;

        i2 = i2 + 1;

        $d0 = virtualinvoke r4.<org.apache.commons.math3.fitting.WeightedObservedPoint: double getX()>();

        $r7[$i1] = $d0;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math3.analysis.MultivariateVectorFunction getModelFunction()
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$1 $r1;

        r0 := @this: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r1 = new org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$1;

        specialinvoke $r1.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$1: void <init>(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)>(r0);

        return $r1;
    }

    public org.apache.commons.math3.analysis.MultivariateMatrixFunction getModelFunctionJacobian()
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2 $r1;

        r0 := @this: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r1 = new org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2;

        specialinvoke $r1.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction$2: void <init>(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)>(r0);

        return $r1;
    }

    static double[] access$000(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r0;
        double[] $r1;

        r0 := @parameter0: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r1 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: double[] points>;

        return $r1;
    }

    static org.apache.commons.math3.analysis.ParametricUnivariateFunction access$100(org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction)
    {
        org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction r0;
        org.apache.commons.math3.analysis.ParametricUnivariateFunction $r1;

        r0 := @parameter0: org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction;

        $r1 = r0.<org.apache.commons.math3.fitting.AbstractCurveFitter$TheoreticalValuesFunction: org.apache.commons.math3.analysis.ParametricUnivariateFunction f>;

        return $r1;
    }
}
