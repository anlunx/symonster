public class com.opengamma.analytics.math.cube.NodalDoublesCube extends com.opengamma.analytics.math.cube.DoublesCube
{

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[], double[], double[], double[])
    {
        double[] r0, r1, r2, r3;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r4;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        $r4 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(double[],double[],double[],double[])>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.Double[])
    {
        java.lang.Double[] r0, r1, r2, r3;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r4;

        r0 := @parameter0: java.lang.Double[];

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: java.lang.Double[];

        r3 := @parameter3: java.lang.Double[];

        $r4 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.Double[])>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        java.util.List r0, r1, r2, r3;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r4;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        $r4 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r4.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(java.util.List,java.util.List,java.util.List,java.util.List)>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(double[], double[], double[], double[], java.lang.String)
    {
        double[] r0, r1, r2, r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r5;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(double[],double[],double[],double[],java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.String)
    {
        java.lang.Double[] r0, r1, r2, r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r5;

        r0 := @parameter0: java.lang.Double[];

        r1 := @parameter1: java.lang.Double[];

        r2 := @parameter2: java.lang.Double[];

        r3 := @parameter3: java.lang.Double[];

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public static com.opengamma.analytics.math.cube.NodalDoublesCube 'from'(java.util.List, java.util.List, java.util.List, java.util.List, java.lang.String)
    {
        java.util.List r0, r1, r2, r3;
        java.lang.String r4;
        com.opengamma.analytics.math.cube.NodalDoublesCube $r5;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 := @parameter4: java.lang.String;

        $r5 = new com.opengamma.analytics.math.cube.NodalDoublesCube;

        specialinvoke $r5.<com.opengamma.analytics.math.cube.NodalDoublesCube: void <init>(java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)>(r0, r1, r2, r3, r4);

        return $r5;
    }

    public void <init>(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        double[] r1, r2, r3, r4;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(double[],double[],double[],double[])>(r1, r2, r3, r4);

        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.Double[])
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.lang.Double[] r1, r2, r3, r4;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: java.lang.Double[];

        r4 := @parameter3: java.lang.Double[];

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.Double[])>(r1, r2, r3, r4);

        return;
    }

    public void <init>(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.util.List r1, r2, r3, r4;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(java.util.List,java.util.List,java.util.List,java.util.List)>(r1, r2, r3, r4);

        return;
    }

    public void <init>(double[], double[], double[], double[], java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        double[] r1, r2, r3, r4;
        java.lang.String r5;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(double[],double[],double[],double[],java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.Double[], java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.lang.Double[] r1, r2, r3, r4;
        java.lang.String r5;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.lang.Double[];

        r2 := @parameter1: java.lang.Double[];

        r3 := @parameter2: java.lang.Double[];

        r4 := @parameter3: java.lang.Double[];

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.Double[],java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    public void <init>(java.util.List, java.util.List, java.util.List, java.util.List, java.lang.String)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.util.List r1, r2, r3, r4;
        java.lang.String r5;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.lang.String;

        specialinvoke r0.<com.opengamma.analytics.math.cube.DoublesCube: void <init>(java.util.List,java.util.List,java.util.List,java.util.List,java.lang.String)>(r1, r2, r3, r4, r5);

        return;
    }

    public java.lang.Double getValue(java.lang.Double, java.lang.Double, java.lang.Double)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.lang.Double r1, r2, r3, $r18;
        double[] r4, r5, r6, $r17;
        int i0, i10;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r16;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l1, $l2, $l4, $l5, $l7, $l8;
        byte $b3, $b6, $b9;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.lang.Double;

        r2 := @parameter1: java.lang.Double;

        r3 := @parameter2: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "y");

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r2, "z");

        r4 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getXDataAsPrimitive()>();

        r5 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getYDataAsPrimitive()>();

        r6 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getZDataAsPrimitive()>();

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: int size()>();

        i10 = 0;

     label1:
        if i10 >= i0 goto label3;

        $d0 = r4[i10];

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b3 = $l1 cmp $l2;

        if $b3 != 0 goto label2;

        $d2 = r5[i10];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label2;

        $d4 = r6[i10];

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $d5 = virtualinvoke r3.<java.lang.Double: double doubleValue()>();

        $l8 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $b9 = $l7 cmp $l8;

        if $b9 != 0 goto label2;

        $r17 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: double[] getValuesAsPrimitive()>();

        $d6 = $r17[i10];

        $r18 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        return $r18;

     label2:
        i10 = i10 + 1;

        goto label1;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No x-y-z data in cube for (");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;
    }

    public java.lang.Double getValue(com.opengamma.util.tuple.Triple)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        com.opengamma.util.tuple.Triple r1;
        java.lang.Object $r2, $r4, $r6;
        java.lang.Double $r3, $r5, $r7, $r8;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: com.opengamma.util.tuple.Triple;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x-y-z triple");

        $r2 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getFirst()>();

        $r3 = (java.lang.Double) $r2;

        $r4 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getSecond()>();

        $r5 = (java.lang.Double) $r4;

        $r6 = virtualinvoke r1.<com.opengamma.util.tuple.Triple: java.lang.Object getThird()>();

        $r7 = (java.lang.Double) $r6;

        $r8 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.Double getValue(java.lang.Double,java.lang.Double,java.lang.Double)>($r3, $r5, $r7);

        return $r8;
    }

    public volatile java.lang.Object getValue(com.opengamma.util.tuple.Triple)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        com.opengamma.util.tuple.Triple r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: com.opengamma.util.tuple.Triple;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.Double getValue(com.opengamma.util.tuple.Triple)>(r1);

        return $r2;
    }

    public volatile java.lang.Object getValue(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.opengamma.analytics.math.cube.NodalDoublesCube r0;
        java.lang.Object r1, r2, r3;
        java.lang.Double $r4, $r5, $r6, $r7;

        r0 := @this: com.opengamma.analytics.math.cube.NodalDoublesCube;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r6 = (java.lang.Double) r1;

        $r5 = (java.lang.Double) r2;

        $r4 = (java.lang.Double) r3;

        $r7 = virtualinvoke r0.<com.opengamma.analytics.math.cube.NodalDoublesCube: java.lang.Double getValue(java.lang.Double,java.lang.Double,java.lang.Double)>($r6, $r5, $r4);

        return $r7;
    }
}
