public class org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer extends org.apache.commons.math3.ml.clustering.Clusterer
{
    private final int k;
    private final int maxIterations;
    private final org.apache.commons.math3.random.RandomGenerator random;
    private final org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy;

    public void <init>(int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int)>(i0, -1);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0, i1;
        org.apache.commons.math3.ml.distance.EuclideanDistance $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.ml.distance.EuclideanDistance;

        specialinvoke $r1.<org.apache.commons.math3.ml.distance.EuclideanDistance: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure)>(i0, i1, $r1);

        return;
    }

    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0, i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.random.JDKRandomGenerator $r2;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        $r2 = new org.apache.commons.math3.random.JDKRandomGenerator;

        specialinvoke $r2.<org.apache.commons.math3.random.JDKRandomGenerator: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator)>(i0, i1, r1, $r2);

        return;
    }

    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0, i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.random.RandomGenerator r2;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        $r3 = <org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy LARGEST_VARIANCE>;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: void <init>(int,int,org.apache.commons.math3.ml.distance.DistanceMeasure,org.apache.commons.math3.random.RandomGenerator,org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)>(i0, i1, r1, r2, $r3);

        return;
    }

    public void <init>(int, int, org.apache.commons.math3.ml.distance.DistanceMeasure, org.apache.commons.math3.random.RandomGenerator, org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int i0, i1;
        org.apache.commons.math3.ml.distance.DistanceMeasure r1;
        org.apache.commons.math3.random.RandomGenerator r2;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy r3;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.ml.distance.DistanceMeasure;

        r2 := @parameter3: org.apache.commons.math3.random.RandomGenerator;

        r3 := @parameter4: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy;

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.Clusterer: void <init>(org.apache.commons.math3.ml.distance.DistanceMeasure)>(r1);

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k> = i0;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations> = i1;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random> = r2;

        r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy> = r3;

        return;
    }

    public int getK()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        return $i0;
    }

    public int getMaxIterations()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $i0 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

        return $i0;
    }

    public org.apache.commons.math3.random.RandomGenerator getRandomGenerator()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        org.apache.commons.math3.random.RandomGenerator $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        return $r1;
    }

    public org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy getEmptyClusterStrategy()
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        $r1 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        return $r1;
    }

    public java.util.List cluster(java.util.Collection) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int[] r2, $r13;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.commons.math3.ml.clustering.CentroidCluster r4, $r11;
        java.util.ArrayList $r5;
        boolean $z0, $z1, z3;
        java.lang.Object $r6;
        java.util.List $r7, $r8, r20;
        org.apache.commons.math3.ml.clustering.Clusterable $r9, r22;
        double[] $r10;
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r12;
        org.apache.commons.math3.exception.ConvergenceException $r14;
        java.lang.Object[] $r15;
        org.apache.commons.math3.exception.util.LocalizedFormats $r16;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r17;
        java.lang.Integer $r18, $r19;
        java.util.Iterator r21;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i2 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i1 >= $i2 goto label01;

        $r17 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i9 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $i10 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        specialinvoke $r17.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r18, $r19, 0);

        throw $r17;

     label01:
        r20 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: java.util.List chooseInitialCenters(java.util.Collection)>(r1);

        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i3];

        specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>(r20, r1, r2);

        $i5 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

        if $i5 >= 0 goto label02;

        $i11 = 2147483647;

        goto label03;

     label02:
        $i11 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int maxIterations>;

     label03:
        i0 = $i11;

        i12 = 0;

     label04:
        if i12 >= i0 goto label15;

        z3 = 0;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r21 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r6;

        $r7 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label11;

        $r13 = <org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$1: int[] $SwitchMap$org$apache$commons$math3$ml$clustering$KMeansPlusPlusClusterer$EmptyClusterStrategy>;

        $r12 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        $i7 = virtualinvoke $r12.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: int ordinal()>();

        $i8 = $r13[$i7];

        tableswitch($i8)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            default: goto label09;
        };

     label06:
        r22 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)>(r20);

        goto label10;

     label07:
        r22 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)>(r20);

        goto label10;

     label08:
        r22 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable getFarthestPoint(java.util.Collection)>(r20);

        goto label10;

     label09:
        $r14 = new org.apache.commons.math3.exception.ConvergenceException;

        $r16 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r15 = newarray (java.lang.Object)[0];

        specialinvoke $r14.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r14;

     label10:
        z3 = 1;

        goto label12;

     label11:
        $r8 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $r9 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $r10 = interfaceinvoke $r9.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        $i6 = lengthof $r10;

        r22 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.ml.clustering.Clusterable centroidOf(java.util.Collection,int)>($r8, $i6);

     label12:
        $r11 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke $r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>(r22);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label05;

     label13:
        i13 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>($r5, r1, r2);

        r20 = $r5;

        if i13 != 0 goto label14;

        if z3 != 0 goto label14;

        return $r5;

     label14:
        i12 = i12 + 1;

        goto label04;

     label15:
        return r20;
    }

    private int assignPointsToClusters(java.util.List, java.util.Collection, int[])
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.List r1;
        java.util.Collection r2;
        int[] r3;
        java.util.Iterator r4;
        org.apache.commons.math3.ml.clustering.Clusterable r5;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math3.ml.clustering.CentroidCluster r6;
        boolean $z0;
        java.lang.Object $r7, $r8;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: int[];

        i3 = 0;

        i4 = 0;

        r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        i0 = specialinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int getNearestCluster(java.util.Collection,org.apache.commons.math3.ml.clustering.Clusterable)>(r1, r5);

        $i1 = r3[i4];

        if i0 == $i1 goto label2;

        i3 = i3 + 1;

     label2:
        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r8;

        virtualinvoke r6.<org.apache.commons.math3.ml.clustering.CentroidCluster: void addPoint(org.apache.commons.math3.ml.clustering.Clusterable)>(r5);

        $i2 = i4;

        i4 = i4 + 1;

        r3[$i2] = i0;

        goto label1;

     label3:
        return i3;
    }

    private java.util.List chooseInitialCenters(java.util.Collection)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        java.util.List r2;
        int i0, i1, $i2, $i3, $i4, $i5, i8, i9, i10, i11, i12, i13;
        boolean[] r3;
        org.apache.commons.math3.ml.clustering.Clusterable r5, $r16, $r18, r19;
        double[] r6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10;
        java.util.ArrayList $r7, $r8;
        org.apache.commons.math3.random.RandomGenerator $r9, $r12;
        java.lang.Object $r10, $r13, $r15, $r17;
        org.apache.commons.math3.ml.clustering.CentroidCluster $r11, $r14;
        boolean $z2, $z3, $z4, $z5;
        byte $b6, $b7;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (boolean)[i0];

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        i1 = interfaceinvoke $r9.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r10;

        $r11 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke $r11.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>(r5);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

        r3[i1] = 1;

        r6 = newarray (double)[i0];

        i8 = 0;

     label01:
        if i8 >= i0 goto label03;

        if i8 == i1 goto label02;

        $r17 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i8);

        $r18 = (org.apache.commons.math3.ml.clustering.Clusterable) $r17;

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r5, $r18);

        $d7 = d0 * d0;

        r6[i8] = $d7;

     label02:
        i8 = i8 + 1;

        goto label01;

     label03:
        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i3 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i2 >= $i3 goto label16;

        d8 = 0.0;

        i9 = 0;

     label04:
        if i9 >= i0 goto label06;

        $z5 = r3[i9];

        if $z5 != 0 goto label05;

        $d6 = r6[i9];

        d8 = d8 + $d6;

     label05:
        i9 = i9 + 1;

        goto label04;

     label06:
        $r12 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $d3 = interfaceinvoke $r12.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        d9 = $d3 * d8;

        i10 = -1;

        d10 = 0.0;

        i11 = 0;

     label07:
        if i11 >= i0 goto label09;

        $z4 = r3[i11];

        if $z4 != 0 goto label08;

        $d5 = r6[i11];

        d10 = d10 + $d5;

        $b7 = d10 cmpl d9;

        if $b7 < 0 goto label08;

        i10 = i11;

        goto label09;

     label08:
        i11 = i11 + 1;

        goto label07;

     label09:
        if i10 != -1 goto label12;

        i12 = i0 - 1;

     label10:
        if i12 < 0 goto label12;

        $z3 = r3[i12];

        if $z3 != 0 goto label11;

        i10 = i12;

        goto label12;

     label11:
        i12 = i12 + -1;

        goto label10;

     label12:
        if i10 < 0 goto label16;

        $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i10);

        r19 = (org.apache.commons.math3.ml.clustering.Clusterable) $r13;

        $r14 = new org.apache.commons.math3.ml.clustering.CentroidCluster;

        specialinvoke $r14.<org.apache.commons.math3.ml.clustering.CentroidCluster: void <init>(org.apache.commons.math3.ml.clustering.Clusterable)>(r19);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r14);

        r3[i10] = 1;

        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i5 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: int k>;

        if $i4 >= $i5 goto label15;

        i13 = 0;

     label13:
        if i13 >= i0 goto label15;

        $z2 = r3[i13];

        if $z2 != 0 goto label14;

        $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i13);

        $r16 = (org.apache.commons.math3.ml.clustering.Clusterable) $r15;

        d1 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r19, $r16);

        d2 = d1 * d1;

        $d4 = r6[i13];

        $b6 = d2 cmpg $d4;

        if $b6 >= 0 goto label14;

        r6[i13] = d2;

     label14:
        i13 = i13 + 1;

        goto label13;

     label15:
        goto label03;

     label16:
        return $r8;
    }

    private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.ml.clustering.CentroidCluster r2, r17;
        org.apache.commons.math3.ml.clustering.Clusterable r3, r5, $r8;
        boolean $z0, $z1, $z2;
        org.apache.commons.math3.random.RandomGenerator $r6;
        int $i0, $i1;
        java.lang.Object $r7, $r12, $r16;
        org.apache.commons.math3.exception.ConvergenceException $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.util.List $r13, $r15, r20;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r14;
        byte $b2;
        double $d0, d1, d2;
        java.util.Iterator r18, r19;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r17 = null;

        r18 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r12;

        $r13 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r3 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        $r14 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r15 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        r19 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r16;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r5, r3);

        virtualinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d0);

        goto label2;

     label3:
        d2 = virtualinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        $b2 = d2 cmpl d1;

        if $b2 <= 0 goto label4;

        d1 = d2;

        r17 = r2;

     label4:
        goto label1;

     label5:
        if r17 != null goto label6;

        $r9 = new org.apache.commons.math3.exception.ConvergenceException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r9.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label6:
        r20 = virtualinvoke r17.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r6 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        $i1 = interfaceinvoke $r6.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i0);

        $r7 = interfaceinvoke r20.<java.util.List: java.lang.Object remove(int)>($i1);

        $r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        return $r8;
    }

    private org.apache.commons.math3.ml.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.ml.clustering.Cluster r2, r11;
        int i0, $i1, $i2, i3;
        boolean $z0;
        org.apache.commons.math3.random.RandomGenerator $r3;
        java.lang.Object $r4, $r9;
        org.apache.commons.math3.ml.clustering.Clusterable $r5;
        org.apache.commons.math3.exception.ConvergenceException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.util.List $r10, r13;
        java.util.Iterator r12;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i3 = 0;

        r11 = null;

        r12 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.ml.clustering.Cluster) $r9;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i0 <= i3 goto label2;

        i3 = i0;

        r11 = r2;

     label2:
        goto label1;

     label3:
        if r11 != null goto label4;

        $r6 = new org.apache.commons.math3.exception.ConvergenceException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label4:
        r13 = virtualinvoke r11.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r3 = r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.random.RandomGenerator random>;

        $i1 = interfaceinvoke r13.<java.util.List: int size()>();

        $i2 = interfaceinvoke $r3.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i1);

        $r4 = interfaceinvoke r13.<java.util.List: java.lang.Object remove(int)>($i2);

        $r5 = (org.apache.commons.math3.ml.clustering.Clusterable) $r4;

        return $r5;
    }

    private org.apache.commons.math3.ml.clustering.Clusterable getFarthestPoint(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        org.apache.commons.math3.ml.clustering.CentroidCluster r3, r15;
        org.apache.commons.math3.ml.clustering.Clusterable r4, $r8, $r14;
        java.util.List r5, $r6;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r7, $r12, $r13;
        org.apache.commons.math3.exception.ConvergenceException $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        int $i0, i2, i3;
        byte $b1;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r15 = null;

        i2 = -1;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r12;

        r4 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        r5 = virtualinvoke r3.<org.apache.commons.math3.ml.clustering.CentroidCluster: java.util.List getPoints()>();

        i3 = 0;

     label2:
        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r14 = (org.apache.commons.math3.ml.clustering.Clusterable) $r13;

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>($r14, r4);

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label3;

        d1 = d0;

        r15 = r3;

        i2 = i3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        if r15 != null goto label6;

        $r9 = new org.apache.commons.math3.exception.ConvergenceException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r9.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label6:
        $r6 = virtualinvoke r15.<org.apache.commons.math3.ml.clustering.Cluster: java.util.List getPoints()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i2);

        $r8 = (org.apache.commons.math3.ml.clustering.Clusterable) $r7;

        return $r8;
    }

    private int getNearestCluster(java.util.Collection, org.apache.commons.math3.ml.clustering.Clusterable)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.ml.clustering.Clusterable r2, $r6;
        java.util.Iterator r3;
        org.apache.commons.math3.ml.clustering.CentroidCluster r4;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r5;
        byte $b0;
        int i1, i2;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        r2 := @parameter1: org.apache.commons.math3.ml.clustering.Clusterable;

        d1 = 1.7976931348623157E308;

        i1 = 0;

        i2 = 0;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.ml.clustering.CentroidCluster) $r5;

        $r6 = virtualinvoke r4.<org.apache.commons.math3.ml.clustering.CentroidCluster: org.apache.commons.math3.ml.clustering.Clusterable getCenter()>();

        d0 = virtualinvoke r0.<org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer: double distance(org.apache.commons.math3.ml.clustering.Clusterable,org.apache.commons.math3.ml.clustering.Clusterable)>(r2, $r6);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

        i2 = i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i2;
    }

    private org.apache.commons.math3.ml.clustering.Clusterable centroidOf(java.util.Collection, int)
    {
        org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, $i1, $i2, $i3, i4, i5;
        double[] r2, r4;
        org.apache.commons.math3.ml.clustering.Clusterable r3;
        boolean $z0;
        org.apache.commons.math3.ml.clustering.DoublePoint $r5;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.Object $r6;
        java.util.Iterator r7;

        r0 := @this: org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        r2 = newarray (double)[i0];

        r7 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.ml.clustering.Clusterable) $r6;

        r4 = interfaceinvoke r3.<org.apache.commons.math3.ml.clustering.Clusterable: double[] getPoint()>();

        i4 = 0;

     label2:
        $i3 = lengthof r2;

        if i4 >= $i3 goto label3;

        $d4 = r2[i4];

        $d3 = r4[i4];

        $d5 = $d4 + $d3;

        r2[i4] = $d5;

        i4 = i4 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        i5 = 0;

     label5:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label6;

        $d0 = r2[i5];

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $d1 = (double) $i2;

        $d2 = $d0 / $d1;

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label5;

     label6:
        $r5 = new org.apache.commons.math3.ml.clustering.DoublePoint;

        specialinvoke $r5.<org.apache.commons.math3.ml.clustering.DoublePoint: void <init>(double[])>(r2);

        return $r5;
    }
}
