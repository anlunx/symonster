public class org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator, org.apache.commons.math3.analysis.differentiation.UnivariateVectorFunctionDifferentiator, org.apache.commons.math3.analysis.differentiation.UnivariateMatrixFunctionDifferentiator, java.io.Serializable
{
    private static final long serialVersionUID;
    private final int nbPoints;
    private final double stepSize;
    private final double halfSampleSpan;
    private final double tMin;
    private final double tMax;

    public void <init>(int, double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int i0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: void <init>(int,double,double,double)>(i0, d0, #-Infinity, #Infinity);

        return;
    }

    public void <init>(int, double, double, double) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int i0, $i2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b1, $b3;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        java.lang.Double $r2, $r3, $r5, $r7;
        org.apache.commons.math3.exception.NotPositiveException $r4;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r6;
        java.lang.Integer $r8;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 1 goto label1;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r7, $r8, 0);

        throw $r6;

     label1:
        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints> = i0;

        $b1 = d0 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NotPositiveException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NotPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label2:
        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize> = d0;

        $d5 = 0.5 * d0;

        $i2 = i0 - 1;

        $d4 = (double) $i2;

        $d6 = $d5 * $d4;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan> = $d6;

        $d7 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d9 = 2.0 * $d7;

        $d8 = d2 - d1;

        $b3 = $d9 cmpl $d8;

        if $b3 < 0 goto label3;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $d17 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d18 = 2.0 * $d17;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d18);

        $d19 = d2 - d1;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d19);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        throw $r1;

     label3:
        $d10 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>($d10);

        $d11 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d12 = d1 + $d11;

        $d13 = $d12 + d3;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMin> = $d13;

        $d14 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        $d15 = d2 - $d14;

        $d16 = $d15 - d3;

        r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMax> = $d16;

        return;
    }

    public int getNbPoints()
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        return $i0;
    }

    public double getStepSize()
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        return $d0;
    }

    private org.apache.commons.math3.analysis.differentiation.DerivativeStructure evaluate(org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, double[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r7, $r8, $r9, $r10, r11, r12;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        double[] r2, r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        r3 = newarray (double)[$i0];

        $i1 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        r4 = newarray (double)[$i1];

        i9 = 0;

     label1:
        $i2 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        if i9 >= $i2 goto label4;

        $d8 = r2[i9];

        r4[i9] = $d8;

        i10 = 1;

     label2:
        if i10 > i9 goto label3;

        $i8 = i9 - i10;

        $i5 = i9 - i10;

        $i6 = $i5 + 1;

        $d11 = r4[$i6];

        $i7 = i9 - i10;

        $d10 = r4[$i7];

        $d15 = $d11 - $d10;

        $d13 = (double) i10;

        $d12 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        $d14 = $d13 * $d12;

        $d16 = $d15 / $d14;

        r4[$i8] = $d16;

        i10 = i10 + 1;

        goto label2;

     label3:
        $d9 = r4[0];

        r3[i9] = $d9;

        i9 = i9 + 1;

        goto label1;

     label4:
        i11 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        i12 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getFreeParameters()>();

        r5 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double[] getAllDerivatives()>();

        $d2 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        d1 = $d2 - d0;

        $r7 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r7.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>(i12, i11, 0.0);

        r11 = $r7;

        r12 = null;

        i13 = 0;

     label5:
        $i3 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        if i13 >= $i3 goto label8;

        if i13 != 0 goto label6;

        $r10 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r10.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double)>(i12, i11, 1.0);

        r12 = $r10;

        goto label7;

     label6:
        $i4 = i13 - 1;

        $d4 = (double) $i4;

        $d3 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        $d5 = $d4 * $d3;

        $d6 = d1 - $d5;

        r5[0] = $d6;

        $r8 = new org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        specialinvoke $r8.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: void <init>(int,int,double[])>(i12, i11, r5);

        r12 = virtualinvoke r12.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r8);

     label7:
        $d7 = r3[i13];

        $r9 = virtualinvoke r12.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure multiply(double)>($d7);

        r11 = virtualinvoke r11.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure add(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r9);

        i13 = i13 + 1;

        goto label5;

     label8:
        return r11;
    }

    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction differentiate(org.apache.commons.math3.analysis.UnivariateFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$1: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateFunction)>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction differentiate(org.apache.commons.math3.analysis.UnivariateVectorFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateVectorFunction r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateVectorFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$2: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateVectorFunction)>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction differentiate(org.apache.commons.math3.analysis.UnivariateMatrixFunction)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.UnivariateMatrixFunction r1;
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3 $r2;

        r0 := @this: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        r1 := @parameter0: org.apache.commons.math3.analysis.UnivariateMatrixFunction;

        $r2 = new org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3;

        specialinvoke $r2.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator$3: void <init>(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator,org.apache.commons.math3.analysis.UnivariateMatrixFunction)>(r0, r1);

        return $r2;
    }

    static int access$000(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $i0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: int nbPoints>;

        return $i0;
    }

    static double access$100(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMax>;

        return $d0;
    }

    static double access$200(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double tMin>;

        return $d0;
    }

    static double access$300(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double halfSampleSpan>;

        return $d0;
    }

    static double access$400(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator)
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        $d0 = r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: double stepSize>;

        return $d0;
    }

    static org.apache.commons.math3.analysis.differentiation.DerivativeStructure access$500(org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator, org.apache.commons.math3.analysis.differentiation.DerivativeStructure, double, double[]) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r3;
        double d0;
        double[] r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator;

        r1 := @parameter1: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 := @parameter2: double;

        r2 := @parameter3: double[];

        $r3 = specialinvoke r0.<org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: org.apache.commons.math3.analysis.differentiation.DerivativeStructure evaluate(org.apache.commons.math3.analysis.differentiation.DerivativeStructure,double,double[])>(r1, d0, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator: long serialVersionUID> = 20120917L;

        return;
    }
}
