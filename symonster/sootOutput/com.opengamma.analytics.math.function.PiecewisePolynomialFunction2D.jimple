public class com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D extends java.lang.Object
{

    public void <init>()
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1;
        double d0, d1, $d2, $d3, $d4, $d5, d6;
        double[] r2, r3;
        int i0, i1, $i2, $i3, i6, i7, i8, i9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r5, $r6;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] $r7;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r9;
        byte $b4, $b5;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "x0Key containing NaN");

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "x0Key containing Infinity");

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "x1Key containing NaN");

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "x1Key containing Infinity");

        $r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r2 = virtualinvoke $r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        r3 = virtualinvoke $r6.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i0 = lengthof r2;

        i1 = lengthof r3;

        i6 = 0;

        i7 = 0;

        i8 = 1;

     label1:
        $i2 = i0 - 1;

        if i8 >= $i2 goto label3;

        $d5 = r2[i8];

        $b5 = d0 cmpl $d5;

        if $b5 < 0 goto label2;

        i6 = i8;

     label2:
        i8 = i8 + 1;

        goto label1;

     label3:
        i9 = 1;

     label4:
        $i3 = i1 - 1;

        if i9 >= $i3 goto label6;

        $d4 = r3[i9];

        $b4 = d1 cmpl $d4;

        if $b4 < 0 goto label5;

        i7 = i9;

     label5:
        i9 = i9 + 1;

        goto label4;

     label6:
        $r7 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        $r8 = $r7[i6];

        $r9 = $r8[i7];

        $d3 = r2[i6];

        $d2 = r3[i7];

        d6 = specialinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double getValue(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double,double,double,double)>($r9, d0, d1, $d3, $d2);

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "Too large input");

        $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "Too large input");

        return d6;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1;
        double[] r2, r3, r4, $r12, $r16, $r17, r18;
        int i0, i1, i2, i3, $i4, $i5, i8, i9, i10, i11, i12, i13, i14, i15;
        double[][] r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r10;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r11, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r14;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        byte $b6, $b7;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "x0Keys");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "x1Keys");

        i0 = lengthof r2;

        i1 = lengthof r3;

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $d13 = r2[i8];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d13);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "x0Keys containing NaN");

        $d14 = r2[i8];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d14);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "x0Keys containing Infinity");

        i8 = i8 + 1;

        goto label01;

     label02:
        i9 = 0;

     label03:
        if i9 >= i1 goto label04;

        $d11 = r3[i9];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d11);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "x1Keys containing NaN");

        $d12 = r3[i9];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d12);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "x1Keys containing Infinity");

        i9 = i9 + 1;

        goto label03;

     label04:
        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r18 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        r4 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        i2 = lengthof r18;

        i3 = lengthof r4;

        r5 = newmultiarray (double)[i0][i1];

        i10 = 0;

     label05:
        if i10 >= i0 goto label14;

        i11 = 0;

     label06:
        if i11 >= i1 goto label13;

        i12 = 0;

        i13 = 0;

        i14 = 1;

     label07:
        $i4 = i2 - 1;

        if i14 >= $i4 goto label09;

        $d10 = r2[i10];

        $d9 = r18[i14];

        $b7 = $d10 cmpl $d9;

        if $b7 < 0 goto label08;

        i12 = i14;

     label08:
        i14 = i14 + 1;

        goto label07;

     label09:
        i15 = 1;

     label10:
        $i5 = i3 - 1;

        if i15 >= $i5 goto label12;

        $d8 = r3[i11];

        $d7 = r4[i15];

        $b6 = $d8 cmpl $d7;

        if $b6 < 0 goto label11;

        i13 = i15;

     label11:
        i15 = i15 + 1;

        goto label10;

     label12:
        $r12 = r5[i10];

        $r13 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        $r14 = $r13[i12];

        $r15 = $r14[i13];

        $d3 = r2[i10];

        $d2 = r3[i11];

        $d1 = r18[i12];

        $d0 = r4[i13];

        $d4 = specialinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double getValue(com.opengamma.analytics.math.matrix.DoubleMatrix2D,double,double,double,double)>($r15, $d3, $d2, $d1, $d0);

        $r12[i11] = $d4;

        $r16 = r5[i10];

        $d5 = $r16[i11];

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r17 = r5[i10];

        $d6 = $r17[i11];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i11 = i11 + 1;

        goto label06;

     label13:
        i10 = i10 + 1;

        goto label05;

     label14:
        $r11 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r5);

        return $r11;
    }

    public double differentiateX0(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, i14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r4, r5;
        double[][] r6, $r17;
        int[] $r8, $r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r13, $r14;
        double[] $r16, $r18;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r8[0];

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r9[1];

        if i0 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 1");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r5 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i10 = 0;

     label03:
        $i11 = i2 - 1;

        if i10 >= $i11 goto label10;

        i12 = 0;

     label04:
        $i5 = i3 - 1;

        if i12 >= $i5 goto label09;

        $i6 = i0 - 1;

        r6 = newmultiarray (double)[$i6][i1];

        i13 = 0;

     label05:
        $i7 = i0 - 1;

        if i13 >= $i7 goto label08;

        i14 = 0;

     label06:
        if i14 >= i1 goto label07;

        $r16 = r6[i13];

        $r14 = r4[i10];

        $r15 = $r14[i12];

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i13];

        $d4 = $r18[i14];

        $i8 = i0 - i13;

        $i9 = $i8 - 1;

        $d3 = (double) $i9;

        $d5 = $d4 * $d3;

        $r16[i14] = $d5;

        i14 = i14 + 1;

        goto label06;

     label07:
        i13 = i13 + 1;

        goto label05;

     label08:
        $r13 = r5[i10];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        $r13[i12] = $r12;

        i12 = i12 + 1;

        goto label04;

     label09:
        i10 = i10 + 1;

        goto label03;

     label10:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r11 = newarray (int)[2];

        $i4 = i0 - 1;

        $r11[0] = $i4;

        $r11[1] = i1;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r2, r3, r5, $r11);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double,double)>($r10, d0, d1);

        return $d2;
    }

    public double differentiateX1(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, i14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r4, r5;
        double[][] r6, $r17;
        int[] $r8, $r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r13, $r14;
        double[] $r16, $r18;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r8[0];

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r9[1];

        if i1 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x1 < 1");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r5 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i10 = 0;

     label03:
        $i11 = i2 - 1;

        if i10 >= $i11 goto label10;

        i12 = 0;

     label04:
        $i5 = i3 - 1;

        if i12 >= $i5 goto label09;

        $i6 = i1 - 1;

        r6 = newmultiarray (double)[i0][$i6];

        i13 = 0;

     label05:
        if i13 >= i0 goto label08;

        i14 = 0;

     label06:
        $i7 = i1 - 1;

        if i14 >= $i7 goto label07;

        $r16 = r6[i13];

        $r14 = r4[i10];

        $r15 = $r14[i12];

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i13];

        $d4 = $r18[i14];

        $i8 = i1 - i14;

        $i9 = $i8 - 1;

        $d3 = (double) $i9;

        $d5 = $d4 * $d3;

        $r16[i14] = $d5;

        i14 = i14 + 1;

        goto label06;

     label07:
        i13 = i13 + 1;

        goto label05;

     label08:
        $r13 = r5[i10];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        $r13[i12] = $r12;

        i12 = i12 + 1;

        goto label04;

     label09:
        i10 = i10 + 1;

        goto label03;

     label10:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r11 = newarray (int)[2];

        $r11[0] = i0;

        $i4 = i1 - 1;

        $r11[1] = $i4;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r2, r3, r5, $r11);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double,double)>($r10, d0, d1);

        return $d2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateX0(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r12;
        double[] r2, r3, $r19, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, i14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r6, r7;
        double[][] r8, $r20;
        int[] $r10, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r16, $r17;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r11[1];

        if i0 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 1");

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r7 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i10 = 0;

     label03:
        $i11 = i2 - 1;

        if i10 >= $i11 goto label10;

        i12 = 0;

     label04:
        $i5 = i3 - 1;

        if i12 >= $i5 goto label09;

        $i6 = i0 - 1;

        r8 = newmultiarray (double)[$i6][i1];

        i13 = 0;

     label05:
        $i7 = i0 - 1;

        if i13 >= $i7 goto label08;

        i14 = 0;

     label06:
        if i14 >= i1 goto label07;

        $r19 = r8[i13];

        $r17 = r6[i10];

        $r18 = $r17[i12];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i13];

        $d1 = $r21[i14];

        $i8 = i0 - i13;

        $i9 = $i8 - 1;

        $d0 = (double) $i9;

        $d2 = $d1 * $d0;

        $r19[i14] = $d2;

        i14 = i14 + 1;

        goto label06;

     label07:
        i13 = i13 + 1;

        goto label05;

     label08:
        $r16 = r7[i10];

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        $r16[i12] = $r15;

        i12 = i12 + 1;

        goto label04;

     label09:
        i10 = i10 + 1;

        goto label03;

     label10:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r13 = newarray (int)[2];

        $i4 = i0 - 1;

        $r13[0] = $i4;

        $r13[1] = i1;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r4, r5, r7, $r13);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double[],double[])>($r12, r2, r3);

        return $r14;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateX1(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r12;
        double[] r2, r3, $r19, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, i12, i13, i14;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r6, r7;
        double[][] r8, $r20;
        int[] $r10, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r16, $r17;
        double $d0, $d1, $d2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r11[1];

        if i1 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x1 < 1");

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r7 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i10 = 0;

     label03:
        $i11 = i2 - 1;

        if i10 >= $i11 goto label10;

        i12 = 0;

     label04:
        $i5 = i3 - 1;

        if i12 >= $i5 goto label09;

        $i6 = i1 - 1;

        r8 = newmultiarray (double)[i0][$i6];

        i13 = 0;

     label05:
        if i13 >= i0 goto label08;

        i14 = 0;

     label06:
        $i7 = i1 - 1;

        if i14 >= $i7 goto label07;

        $r19 = r8[i13];

        $r17 = r6[i10];

        $r18 = $r17[i12];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i13];

        $d1 = $r21[i14];

        $i8 = i1 - i14;

        $i9 = $i8 - 1;

        $d0 = (double) $i9;

        $d2 = $d1 * $d0;

        $r19[i14] = $d2;

        i14 = i14 + 1;

        goto label06;

     label07:
        i13 = i13 + 1;

        goto label05;

     label08:
        $r16 = r7[i10];

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        $r16[i12] = $r15;

        i12 = i12 + 1;

        goto label04;

     label09:
        i10 = i10 + 1;

        goto label03;

     label10:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r13 = newarray (int)[2];

        $r13[0] = i0;

        $i4 = i1 - 1;

        $r13[1] = $i4;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r4, r5, r7, $r13);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double[],double[])>($r12, r2, r3);

        return $r14;
    }

    public double differentiateCross(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18, i19;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r4, r5;
        double[][] r6, $r17;
        int[] $r8, $r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r13, $r14;
        double[] $r16, $r18;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r8[0];

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r9[1];

        if i0 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 1");

        if i1 >= 2 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "polynomial degree of x1 < 1");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r5 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i15 = 0;

     label05:
        $i16 = i2 - 1;

        if i15 >= $i16 goto label12;

        i17 = 0;

     label06:
        $i6 = i3 - 1;

        if i17 >= $i6 goto label11;

        $i8 = i0 - 1;

        $i7 = i1 - 1;

        r6 = newmultiarray (double)[$i8][$i7];

        i18 = 0;

     label07:
        $i9 = i0 - 1;

        if i18 >= $i9 goto label10;

        i19 = 0;

     label08:
        $i10 = i1 - 1;

        if i19 >= $i10 goto label09;

        $r16 = r6[i18];

        $r14 = r4[i15];

        $r15 = $r14[i17];

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i18];

        $d4 = $r18[i19];

        $i11 = i1 - i19;

        $i12 = $i11 - 1;

        $d3 = (double) $i12;

        $d6 = $d4 * $d3;

        $i13 = i0 - i18;

        $i14 = $i13 - 1;

        $d5 = (double) $i14;

        $d7 = $d6 * $d5;

        $r16[i19] = $d7;

        i19 = i19 + 1;

        goto label08;

     label09:
        i18 = i18 + 1;

        goto label07;

     label10:
        $r13 = r5[i15];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        $r13[i17] = $r12;

        i17 = i17 + 1;

        goto label06;

     label11:
        i15 = i15 + 1;

        goto label05;

     label12:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r11 = newarray (int)[2];

        $i4 = i0 - 1;

        $r11[0] = $i4;

        $i5 = i1 - 1;

        $r11[1] = $i5;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r2, r3, r5, $r11);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double,double)>($r10, d0, d1);

        return $d2;
    }

    public double differentiateTwiceX0(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15, i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r4, r5;
        double[][] r6, $r17;
        int[] $r8, $r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r13, $r14;
        double[] $r16, $r18;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r8[0];

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r9[1];

        if i0 >= 3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 2");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r5 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i12 = 0;

     label03:
        $i13 = i2 - 1;

        if i12 >= $i13 goto label10;

        i14 = 0;

     label04:
        $i5 = i3 - 1;

        if i14 >= $i5 goto label09;

        $i6 = i0 - 2;

        r6 = newmultiarray (double)[$i6][i1];

        i15 = 0;

     label05:
        $i7 = i0 - 2;

        if i15 >= $i7 goto label08;

        i16 = 0;

     label06:
        if i16 >= i1 goto label07;

        $r16 = r6[i15];

        $r14 = r4[i12];

        $r15 = $r14[i14];

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i15];

        $d4 = $r18[i16];

        $i8 = i0 - i15;

        $i9 = $i8 - 1;

        $d3 = (double) $i9;

        $d6 = $d4 * $d3;

        $i10 = i0 - i15;

        $i11 = $i10 - 2;

        $d5 = (double) $i11;

        $d7 = $d6 * $d5;

        $r16[i16] = $d7;

        i16 = i16 + 1;

        goto label06;

     label07:
        i15 = i15 + 1;

        goto label05;

     label08:
        $r13 = r5[i12];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        $r13[i14] = $r12;

        i14 = i14 + 1;

        goto label04;

     label09:
        i12 = i12 + 1;

        goto label03;

     label10:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r11 = newarray (int)[2];

        $i4 = i0 - 2;

        $r11[0] = $i4;

        $r11[1] = i1;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r2, r3, r5, $r11);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double,double)>($r10, d0, d1);

        return $d2;
    }

    public double differentiateTwiceX1(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r10;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15, i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r2, r3;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r4, r5;
        double[][] r6, $r17;
        int[] $r8, $r9, $r11;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r12, $r15;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r13, $r14;
        double[] $r16, $r18;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r8 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r8[0];

        $r9 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r9[1];

        if i1 >= 3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x1 < 2");

        r2 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r3 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r2.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r3.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r5 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i12 = 0;

     label03:
        $i13 = i2 - 1;

        if i12 >= $i13 goto label10;

        i14 = 0;

     label04:
        $i5 = i3 - 1;

        if i14 >= $i5 goto label09;

        $i6 = i1 - 2;

        r6 = newmultiarray (double)[i0][$i6];

        i15 = 0;

     label05:
        if i15 >= i0 goto label08;

        i16 = 0;

     label06:
        $i7 = i1 - 2;

        if i16 >= $i7 goto label07;

        $r16 = r6[i15];

        $r14 = r4[i12];

        $r15 = $r14[i14];

        $r17 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r18 = $r17[i15];

        $d4 = $r18[i16];

        $i8 = i1 - i16;

        $i9 = $i8 - 1;

        $d3 = (double) $i9;

        $d6 = $d4 * $d3;

        $i10 = i1 - i16;

        $i11 = $i10 - 2;

        $d5 = (double) $i11;

        $d7 = $d6 * $d5;

        $r16[i16] = $d7;

        i16 = i16 + 1;

        goto label06;

     label07:
        i15 = i15 + 1;

        goto label05;

     label08:
        $r13 = r5[i12];

        $r12 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r12.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r6);

        $r13[i14] = $r12;

        i14 = i14 + 1;

        goto label04;

     label09:
        i12 = i12 + 1;

        goto label03;

     label10:
        $r10 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r11 = newarray (int)[2];

        $r11[0] = i0;

        $i4 = i1 - 2;

        $r11[1] = $i4;

        specialinvoke $r10.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r2, r3, r5, $r11);

        $d2 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: double evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double,double)>($r10, d0, d1);

        return $d2;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateCross(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r12;
        double[] r2, r3, $r19, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, i17, i18, i19;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r6, r7;
        double[][] r8, $r20;
        int[] $r10, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r16, $r17;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r11[1];

        if i0 >= 2 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 1");

        if i1 >= 2 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "polynomial degree of x1 < 1");

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r7 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i15 = 0;

     label05:
        $i16 = i2 - 1;

        if i15 >= $i16 goto label12;

        i17 = 0;

     label06:
        $i6 = i3 - 1;

        if i17 >= $i6 goto label11;

        $i8 = i0 - 1;

        $i7 = i1 - 1;

        r8 = newmultiarray (double)[$i8][$i7];

        i18 = 0;

     label07:
        $i9 = i0 - 1;

        if i18 >= $i9 goto label10;

        i19 = 0;

     label08:
        $i10 = i1 - 1;

        if i19 >= $i10 goto label09;

        $r19 = r8[i18];

        $r17 = r6[i15];

        $r18 = $r17[i17];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i18];

        $d1 = $r21[i19];

        $i11 = i1 - i19;

        $i12 = $i11 - 1;

        $d0 = (double) $i12;

        $d3 = $d1 * $d0;

        $i13 = i0 - i18;

        $i14 = $i13 - 1;

        $d2 = (double) $i14;

        $d4 = $d3 * $d2;

        $r19[i19] = $d4;

        i19 = i19 + 1;

        goto label08;

     label09:
        i18 = i18 + 1;

        goto label07;

     label10:
        $r16 = r7[i15];

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        $r16[i17] = $r15;

        i17 = i17 + 1;

        goto label06;

     label11:
        i15 = i15 + 1;

        goto label05;

     label12:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r13 = newarray (int)[2];

        $i4 = i0 - 1;

        $r13[0] = $i4;

        $i5 = i1 - 1;

        $r13[1] = $i5;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r4, r5, r7, $r13);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double[],double[])>($r12, r2, r3);

        return $r14;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwiceX0(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r12;
        double[] r2, r3, $r19, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15, i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r6, r7;
        double[][] r8, $r20;
        int[] $r10, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r16, $r17;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r11[1];

        if i0 >= 3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x0 < 2");

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r7 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i12 = 0;

     label03:
        $i13 = i2 - 1;

        if i12 >= $i13 goto label10;

        i14 = 0;

     label04:
        $i5 = i3 - 1;

        if i14 >= $i5 goto label09;

        $i6 = i0 - 2;

        r8 = newmultiarray (double)[$i6][i1];

        i15 = 0;

     label05:
        $i7 = i0 - 2;

        if i15 >= $i7 goto label08;

        i16 = 0;

     label06:
        if i16 >= i1 goto label07;

        $r19 = r8[i15];

        $r17 = r6[i12];

        $r18 = $r17[i14];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i15];

        $d1 = $r21[i16];

        $i8 = i0 - i15;

        $i9 = $i8 - 1;

        $d0 = (double) $i9;

        $d3 = $d1 * $d0;

        $i10 = i0 - i15;

        $i11 = $i10 - 2;

        $d2 = (double) $i11;

        $d4 = $d3 * $d2;

        $r19[i16] = $d4;

        i16 = i16 + 1;

        goto label06;

     label07:
        i15 = i15 + 1;

        goto label05;

     label08:
        $r16 = r7[i12];

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        $r16[i14] = $r15;

        i14 = i14 + 1;

        goto label04;

     label09:
        i12 = i12 + 1;

        goto label03;

     label10:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r13 = newarray (int)[2];

        $i4 = i0 - 2;

        $r13[0] = $i4;

        $r13[1] = i1;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r4, r5, r7, $r13);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double[],double[])>($r12, r2, r3);

        return $r14;
    }

    public com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiateTwiceX1(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D, double[], double[])
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D r1, $r12;
        double[] r2, r3, $r19, $r21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15, i16;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r4, r5;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] r6, r7;
        double[][] r8, $r20;
        int[] $r10, $r11, $r13;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r14, $r15, $r18;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] $r16, $r17;
        double $d0, $d1, $d2, $d3, $d4;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "pp");

        $r10 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i0 = $r10[0];

        $r11 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: int[] getOrder()>();

        i1 = $r11[1];

        if i1 >= 3 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "polynomial degree of x1 < 2");

        r4 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots0()>();

        r5 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getKnots1()>();

        i2 = virtualinvoke r4.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        i3 = virtualinvoke r5.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r6 = virtualinvoke r1.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D[][] getCoefs()>();

        r7 = newmultiarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2][i3];

        i12 = 0;

     label03:
        $i13 = i2 - 1;

        if i12 >= $i13 goto label10;

        i14 = 0;

     label04:
        $i5 = i3 - 1;

        if i14 >= $i5 goto label09;

        $i6 = i1 - 2;

        r8 = newmultiarray (double)[i0][$i6];

        i15 = 0;

     label05:
        if i15 >= i0 goto label08;

        i16 = 0;

     label06:
        $i7 = i1 - 2;

        if i16 >= $i7 goto label07;

        $r19 = r8[i15];

        $r17 = r6[i12];

        $r18 = $r17[i14];

        $r20 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $r21 = $r20[i15];

        $d1 = $r21[i16];

        $i8 = i1 - i16;

        $i9 = $i8 - 1;

        $d0 = (double) $i9;

        $d3 = $d1 * $d0;

        $i10 = i1 - i16;

        $i11 = $i10 - 2;

        $d2 = (double) $i11;

        $d4 = $d3 * $d2;

        $r19[i16] = $d4;

        i16 = i16 + 1;

        goto label06;

     label07:
        i15 = i15 + 1;

        goto label05;

     label08:
        $r16 = r7[i12];

        $r15 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        $r16[i14] = $r15;

        i14 = i14 + 1;

        goto label04;

     label09:
        i12 = i12 + 1;

        goto label03;

     label10:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D;

        $r13 = newarray (int)[2];

        $r13[0] = i0;

        $i4 = i1 - 2;

        $r13[1] = $i4;

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D[][],int[])>(r4, r5, r7, $r13);

        $r14 = virtualinvoke r0.<com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D: com.opengamma.analytics.math.matrix.DoubleMatrix2D evaluate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult2D,double[],double[])>($r12, r2, r3);

        return $r14;
    }

    private double getValue(com.opengamma.analytics.math.matrix.DoubleMatrix2D, double, double, double, double)
    {
        com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r1;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        double[][] $r2;
        double[] $r3;

        r0 := @this: com.opengamma.analytics.math.function.PiecewisePolynomialFunction2D;

        r1 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        i0 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i1 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        d4 = d0 - d2;

        d5 = d1 - d3;

        d13 = 0.0;

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        i7 = 0;

     label2:
        if i7 >= i1 goto label3;

        $r2 = virtualinvoke r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        $i2 = i0 - i6;

        $i3 = $i2 - 1;

        $r3 = $r2[$i3];

        $i4 = i1 - i7;

        $i5 = $i4 - 1;

        $d7 = $r3[$i5];

        $d6 = (double) i6;

        $d8 = staticinvoke <java.lang.Math: double pow(double,double)>(d4, $d6);

        $d10 = $d7 * $d8;

        $d9 = (double) i7;

        $d11 = staticinvoke <java.lang.Math: double pow(double,double)>(d5, $d9);

        $d12 = $d10 * $d11;

        d13 = d13 + $d12;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return d13;
    }
}
