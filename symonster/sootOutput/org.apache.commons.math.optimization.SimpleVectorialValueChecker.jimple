public class org.apache.commons.math.optimization.SimpleVectorialValueChecker extends java.lang.Object implements org.apache.commons.math.optimization.VectorialConvergenceChecker
{
    private static final double DEFAULT_RELATIVE_THRESHOLD;
    private static final double DEFAULT_ABSOLUTE_THRESHOLD;
    private final double relativeThreshold;
    private final double absoluteThreshold;

    public void <init>()
    {
        org.apache.commons.math.optimization.SimpleVectorialValueChecker r0;

        r0 := @this: org.apache.commons.math.optimization.SimpleVectorialValueChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double relativeThreshold> = 1.1102230246251565E-14;

        r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double absoluteThreshold> = 2.2250738585072014E-306;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.optimization.SimpleVectorialValueChecker r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.optimization.SimpleVectorialValueChecker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double relativeThreshold> = d0;

        r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double absoluteThreshold> = d1;

        return;
    }

    public boolean converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair)
    {
        org.apache.commons.math.optimization.SimpleVectorialValueChecker r0;
        int i0, $i1, i4;
        org.apache.commons.math.optimization.VectorialPointValuePair r1, r2;
        double[] r3, r4;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b2, $b3;

        r0 := @this: org.apache.commons.math.optimization.SimpleVectorialValueChecker;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.optimization.VectorialPointValuePair;

        r2 := @parameter2: org.apache.commons.math.optimization.VectorialPointValuePair;

        r3 = virtualinvoke r1.<org.apache.commons.math.optimization.VectorialPointValuePair: double[] getValueRef()>();

        r4 = virtualinvoke r2.<org.apache.commons.math.optimization.VectorialPointValuePair: double[] getValueRef()>();

        i4 = 0;

     label1:
        $i1 = lengthof r3;

        if i4 >= $i1 goto label3;

        d0 = r3[i4];

        d1 = r4[i4];

        $d4 = d0 - d1;

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        d3 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d5, $d6);

        $d7 = r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double relativeThreshold>;

        $d8 = d3 * $d7;

        $b2 = d2 cmpl $d8;

        if $b2 <= 0 goto label2;

        $d9 = r0.<org.apache.commons.math.optimization.SimpleVectorialValueChecker: double absoluteThreshold>;

        $b3 = d2 cmpl $d9;

        if $b3 <= 0 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.optimization.SimpleVectorialValueChecker: double DEFAULT_ABSOLUTE_THRESHOLD> = 2.2250738585072014E-306;

        <org.apache.commons.math.optimization.SimpleVectorialValueChecker: double DEFAULT_RELATIVE_THRESHOLD> = 1.1102230246251565E-14;

        return;
    }
}
