class com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1 extends com.opengamma.analytics.math.function.Function1D
{
    final double[] val$standardized;
    final com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator this$0;

    void <init>(com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator, double[])
    {
        com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1 r0;
        com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator r1;
        double[] r2;

        r0 := @this: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1;

        r1 := @parameter0: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator;

        r2 := @parameter1: double[];

        r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator this$0> = r1;

        r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: double[] val$standardized> = r2;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1 r0;
        java.lang.Double r1, $r3, $r6, $r8, $r11, $r13;
        double[] r2;
        int i0, i1;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27;
        com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator $r4, $r9;
        com.opengamma.analytics.math.function.Function1D $r5, $r10;
        java.lang.Object $r7, $r12;

        r0 := @this: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1;

        r1 := @parameter0: java.lang.Double;

        d27 = 0.0;

        r2 = r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: double[] val$standardized>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r2[i1];

        $r4 = r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator this$0>;

        $r5 = staticinvoke <com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator: com.opengamma.analytics.math.function.Function1D access$000(com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator)>($r4);

        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d3 = $d2 + 1.0;

        $d4 = $d3 / 2.0;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r7 = virtualinvoke $r5.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r6);

        $r8 = (java.lang.Double) $r7;

        $d5 = virtualinvoke $r8.<java.lang.Double: double doubleValue()>();

        $d6 = d0 * d0;

        $d7 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d8 = $d7 - 2.0;

        $d9 = $d6 / $d8;

        $d10 = 1.0 + $d9;

        $d11 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d12 = $d11 + 1.0;

        $d13 = neg $d12;

        $d14 = $d13 / 2.0;

        $d15 = staticinvoke <java.lang.Math: double pow(double,double)>($d10, $d14);

        $d16 = $d5 * $d15;

        $d17 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d18 = $d17 - 2.0;

        $d19 = 3.141592653589793 * $d18;

        $d20 = staticinvoke <java.lang.Math: double sqrt(double)>($d19);

        $d21 = $d16 / $d20;

        $r9 = r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator this$0>;

        $r10 = staticinvoke <com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator: com.opengamma.analytics.math.function.Function1D access$000(com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator)>($r9);

        $d22 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d23 = $d22 / 2.0;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d23);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.function.Function1D: java.lang.Object evaluate(java.lang.Object)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d24 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d25 = $d21 / $d24;

        $d26 = staticinvoke <java.lang.Math: double log(double)>($d25);

        d27 = d27 + $d26;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = neg d27;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        return $r3;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1 r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.estimation.StudentTDistributionMaximumLikelihoodEstimator$1: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
