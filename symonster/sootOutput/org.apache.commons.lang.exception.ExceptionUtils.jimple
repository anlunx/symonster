public class org.apache.commons.lang.exception.ExceptionUtils extends java.lang.Object
{
    static final java.lang.String WRAPPED_MARKER;
    private static final java.lang.Object CAUSE_METHOD_NAMES_LOCK;
    private static java.lang.String[] CAUSE_METHOD_NAMES;
    private static final java.lang.reflect.Method THROWABLE_CAUSE_METHOD;
    private static final java.lang.reflect.Method THROWABLE_INITCAUSE_METHOD;
    static java.lang.Class class$java$lang$Throwable;

    public void <init>()
    {
        org.apache.commons.lang.exception.ExceptionUtils r0;

        r0 := @this: org.apache.commons.lang.exception.ExceptionUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void addCauseMethodName(java.lang.String)
    {
        java.lang.String r0;
        java.util.ArrayList r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        java.lang.String[] $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: boolean isCauseMethodName(java.lang.String)>(r0);

        if $z1 != 0 goto label5;

        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.ArrayList getCauseMethodNameList()>();

        $z2 = interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        if $z2 == 0 goto label5;

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r4;

     label1:
        $r5 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] toArray(java.util.List)>(r1);

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES> = $r5;

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void removeCauseMethodName(java.lang.String)
    {
        java.lang.String r0;
        java.util.ArrayList r1;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.String[] $r5;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotEmpty(java.lang.String)>(r0);

        if $z0 == 0 goto label5;

        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.ArrayList getCauseMethodNameList()>();

        $z1 = interfaceinvoke r1.<java.util.List: boolean remove(java.lang.Object)>(r0);

        if $z1 == 0 goto label5;

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r4;

     label1:
        $r5 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] toArray(java.util.List)>(r1);

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES> = $r5;

        exitmonitor $r4;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean setCause(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;
        java.lang.Object[] $r3;
        java.lang.reflect.Method $r4, $r9, r21;
        java.lang.Class $r5, $r19, $r20;
        java.lang.Class[] $r6;
        org.apache.commons.lang.NullArgumentException $r11;
        java.lang.IllegalAccessException $r12, $r15;
        java.lang.reflect.InvocationTargetException $r13, $r16;
        java.lang.NoSuchMethodException $r14;
        boolean z0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Throwable;

        if r0 != null goto label01;

        $r11 = new org.apache.commons.lang.NullArgumentException;

        specialinvoke $r11.<org.apache.commons.lang.NullArgumentException: void <init>(java.lang.String)>("target");

        throw $r11;

     label01:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        z0 = 0;

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.reflect.Method THROWABLE_INITCAUSE_METHOD>;

        if $r4 == null goto label06;

     label02:
        $r9 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.reflect.Method THROWABLE_INITCAUSE_METHOD>;

        virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r3);

        z0 = 1;

     label03:
        goto label06;

     label04:
        $r15 := @caughtexception;

        goto label06;

     label05:
        $r16 := @caughtexception;

     label06:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = newarray (java.lang.Class)[1];

        $r19 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r19 != null goto label07;

        $r20 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r20;

        goto label08;

     label07:
        $r20 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label08:
        $r6[0] = $r20;

        r21 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setCause", $r6);

        virtualinvoke r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r3);

        z0 = 1;

     label09:
        goto label13;

     label10:
        $r14 := @caughtexception;

        goto label13;

     label11:
        $r12 := @caughtexception;

        goto label13;

     label12:
        $r13 := @caughtexception;

     label13:
        return z0;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label05;
        catch java.lang.NoSuchMethodException from label06 to label09 with label10;
        catch java.lang.IllegalAccessException from label06 to label09 with label11;
        catch java.lang.reflect.InvocationTargetException from label06 to label09 with label12;
    }

    private static java.lang.String[] toArray(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.String[] $r1, $r3, $r4;
        java.lang.Object[] $r2;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = newarray (java.lang.String)[$i0];

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.lang.String[]) $r2;

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    private static java.util.ArrayList getCauseMethodNameList()
    {
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        java.lang.String[] $r4;
        java.util.List $r5;
        java.lang.Throwable $r6;

        $r2 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r2;

     label1:
        $r3 = new java.util.ArrayList;

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        exitmonitor $r2;

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean isCauseMethodName(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object $r3;
        java.lang.String[] $r4;
        int $i0;
        java.lang.Throwable $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        $i0 = staticinvoke <org.apache.commons.lang.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r4, r0);

        if $i0 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r3;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.lang.Throwable getCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r5, $r6;
        java.lang.Object $r3;
        java.lang.String[] $r4;

        r0 := @parameter0: java.lang.Throwable;

        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r3;

     label1:
        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        $r5 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCause(java.lang.Throwable,java.lang.String[])>(r0, $r4);

        exitmonitor $r3;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.Throwable getCause(java.lang.Throwable, java.lang.String[])
    {
        java.lang.Throwable r0, $r2, r4;
        java.lang.Object $r1;
        java.lang.String[] r3;
        int i0, $i1;
        java.lang.String r7;

        r0 := @parameter0: java.lang.Throwable;

        r3 := @parameter1: java.lang.String[];

        if r0 != null goto label01;

        return null;

     label01:
        r4 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCauseUsingWellKnownTypes(java.lang.Throwable)>(r0);

        if r4 != null goto label10;

        if r3 != null goto label06;

        $r1 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r1;

     label02:
        r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        exitmonitor $r1;

     label03:
        goto label06;

     label04:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label05:
        throw $r2;

     label06:
        i0 = 0;

     label07:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label09;

        r7 = r3[i0];

        if r7 == null goto label08;

        r4 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable,java.lang.String)>(r0, r7);

        if r4 == null goto label08;

        goto label09;

     label08:
        i0 = i0 + 1;

        goto label07;

     label09:
        if r4 != null goto label10;

        r4 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCauseUsingFieldName(java.lang.Throwable,java.lang.String)>(r0, "detail");

     label10:
        return r4;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r3;
        java.util.List r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Throwable;

        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 >= 2 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = (java.lang.Throwable) $r2;

     label2:
        return $r3;
    }

    private static java.lang.Throwable getCauseUsingWellKnownTypes(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r2, $r6;
        boolean $z0, $z1, $z2;
        java.lang.reflect.InvocationTargetException $r1;
        java.sql.SQLException $r3, $r4;
        org.apache.commons.lang.exception.Nestable $r5;

        r0 := @parameter0: java.lang.Throwable;

        $z0 = r0 instanceof org.apache.commons.lang.exception.Nestable;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.commons.lang.exception.Nestable) r0;

        $r6 = interfaceinvoke $r5.<org.apache.commons.lang.exception.Nestable: java.lang.Throwable getCause()>();

        return $r6;

     label1:
        $z1 = r0 instanceof java.sql.SQLException;

        if $z1 == 0 goto label2;

        $r3 = (java.sql.SQLException) r0;

        $r4 = virtualinvoke $r3.<java.sql.SQLException: java.sql.SQLException getNextException()>();

        return $r4;

     label2:
        $z2 = r0 instanceof java.lang.reflect.InvocationTargetException;

        if $z2 == 0 goto label3;

        $r1 = (java.lang.reflect.InvocationTargetException) r0;

        $r2 = virtualinvoke $r1.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        return $r2;

     label3:
        return null;
    }

    private static java.lang.Throwable getCauseUsingMethodName(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0, $r7;
        java.lang.String r1;
        java.lang.Class $r2, $r3, $r4, $r16;
        boolean $z0;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.IllegalAccessException $r8;
        java.lang.SecurityException $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r11;
        java.lang.NoSuchMethodException $r12;
        java.lang.reflect.Method r13;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        r13 = null;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r13 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, null);

     label02:
        goto label05;

     label03:
        $r12 := @caughtexception;

        goto label05;

     label04:
        $r9 := @caughtexception;

     label05:
        if r13 == null goto label13;

        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r3 != null goto label06;

        $r16 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r16;

        goto label07;

     label06:
        $r16 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label07:
        $r4 = virtualinvoke r13.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label13;

     label08:
        $r5 = <org.apache.commons.lang.ArrayUtils: java.lang.Object[] EMPTY_OBJECT_ARRAY>;

        $r6 = virtualinvoke r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r5);

        $r7 = (java.lang.Throwable) $r6;

     label09:
        return $r7;

     label10:
        $r8 := @caughtexception;

        goto label13;

     label11:
        $r10 := @caughtexception;

        goto label13;

     label12:
        $r11 := @caughtexception;

     label13:
        return null;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label11;
        catch java.lang.reflect.InvocationTargetException from label08 to label09 with label12;
    }

    private static java.lang.Throwable getCauseUsingFieldName(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0, $r6;
        java.lang.String r1;
        java.lang.Class $r2, $r3, $r4, $r14;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.IllegalAccessException $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.NoSuchFieldException $r9;
        java.lang.SecurityException $r10;
        java.lang.reflect.Field r11;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.String;

        r11 = null;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r11 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

     label02:
        goto label05;

     label03:
        $r9 := @caughtexception;

        goto label05;

     label04:
        $r10 := @caughtexception;

     label05:
        if r11 == null goto label12;

        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r3 != null goto label06;

        $r14 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r14;

        goto label07;

     label06:
        $r14 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label07:
        $r4 = virtualinvoke r11.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r14.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label12;

     label08:
        $r5 = virtualinvoke r11.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        $r6 = (java.lang.Throwable) $r5;

     label09:
        return $r6;

     label10:
        $r7 := @caughtexception;

        goto label12;

     label11:
        $r8 := @caughtexception;

     label12:
        return null;

        catch java.lang.NoSuchFieldException from label01 to label02 with label03;
        catch java.lang.SecurityException from label01 to label02 with label04;
        catch java.lang.IllegalAccessException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label11;
    }

    public static boolean isThrowableNested()
    {
        java.lang.reflect.Method $r0;
        boolean $z0;

        $r0 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.reflect.Method THROWABLE_CAUSE_METHOD>;

        if $r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isNestedThrowable(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r13;
        java.lang.Class r1, $r7, $r8, $r16;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r3;
        java.lang.String[] $r4, $r5;
        java.lang.String $r6;
        java.lang.SecurityException $r9, $r12;
        java.lang.NoSuchMethodException $r10;
        java.lang.NoSuchFieldException $r11;
        java.lang.reflect.Method r15;
        java.lang.reflect.Field r19;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label01;

        return 0;

     label01:
        $z0 = r0 instanceof org.apache.commons.lang.exception.Nestable;

        if $z0 == 0 goto label02;

        return 1;

     label02:
        $z1 = r0 instanceof java.sql.SQLException;

        if $z1 == 0 goto label03;

        return 1;

     label03:
        $z2 = r0 instanceof java.lang.reflect.InvocationTargetException;

        if $z2 == 0 goto label04;

        return 1;

     label04:
        $z3 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: boolean isThrowableNested()>();

        if $z3 == 0 goto label05;

        return 1;

     label05:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK>;

        entermonitor $r3;

     label06:
        i1 = 0;

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        i0 = lengthof $r4;

     label07:
        if i1 >= i0 goto label17;

     label08:
        $r5 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES>;

        $r6 = $r5[i1];

        r15 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r6, null);

        if r15 == null goto label13;

        $r7 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r7 != null goto label09;

        $r16 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r16;

        goto label10;

     label09:
        $r16 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label10:
        $r8 = virtualinvoke r15.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z4 = virtualinvoke $r16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z4 == 0 goto label13;

     label11:
        exitmonitor $r3;

     label12:
        return 1;

     label13:
        goto label16;

     label14:
        $r10 := @caughtexception;

        goto label16;

     label15:
        $r12 := @caughtexception;

     label16:
        i1 = i1 + 1;

        goto label07;

     label17:
        exitmonitor $r3;

     label18:
        goto label21;

     label19:
        $r13 := @caughtexception;

        exitmonitor $r3;

     label20:
        throw $r13;

     label21:
        r19 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("detail");

        if r19 == null goto label23;

     label22:
        return 1;

     label23:
        goto label26;

     label24:
        $r11 := @caughtexception;

        goto label26;

     label25:
        $r9 := @caughtexception;

     label26:
        return 0;

        catch java.lang.NoSuchMethodException from label08 to label11 with label14;
        catch java.lang.SecurityException from label08 to label11 with label15;
        catch java.lang.Throwable from label06 to label12 with label19;
        catch java.lang.Throwable from label13 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.NoSuchFieldException from label21 to label22 with label24;
        catch java.lang.SecurityException from label21 to label22 with label25;
    }

    public static int getThrowableCount(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.util.List $r1;
        int $i0;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(r0);

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public static java.lang.Throwable[] getThrowables(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.util.List r1;
        int $i0;
        java.lang.Throwable[] $r2, $r4, $r5;
        java.lang.Object[] $r3;

        r0 := @parameter0: java.lang.Throwable;

        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.List getThrowableList(java.lang.Throwable)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.Throwable)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.Throwable[]) $r3;

        $r5 = (java.lang.Throwable[]) $r4;

        return $r5;
    }

    public static java.util.List getThrowableList(java.lang.Throwable)
    {
        java.util.ArrayList $r1;
        boolean $z0;
        java.lang.Throwable r2;

        r2 := @parameter0: java.lang.Throwable;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

     label1:
        if r2 == null goto label2;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getCause(java.lang.Throwable)>(r2);

        goto label1;

     label2:
        return $r1;
    }

    public static int indexOfThrowable(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable r0;
        java.lang.Class r1;
        int $i0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        $i0 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(r0, r1, 0, 0);

        return $i0;
    }

    public static int indexOfThrowable(java.lang.Throwable, java.lang.Class, int)
    {
        java.lang.Throwable r0;
        java.lang.Class r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(r0, r1, i0, 0);

        return $i1;
    }

    public static int indexOfType(java.lang.Throwable, java.lang.Class)
    {
        java.lang.Throwable r0;
        java.lang.Class r1;
        int $i0;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        $i0 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(r0, r1, 0, 1);

        return $i0;
    }

    public static int indexOfType(java.lang.Throwable, java.lang.Class, int)
    {
        java.lang.Throwable r0;
        java.lang.Class r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $i1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: int indexOf(java.lang.Throwable,java.lang.Class,int,boolean)>(r0, r1, i0, 1);

        return $i1;
    }

    private static int indexOf(java.lang.Throwable, java.lang.Class, int, boolean)
    {
        java.lang.Throwable r0, $r3, $r5;
        java.lang.Class r1, $r4, $r6;
        boolean z0, $z1, $z2;
        java.lang.Throwable[] r2;
        int $i0, $i1, $i2, i3, i4, i5;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.lang.Class;

        i3 := @parameter2: int;

        z0 := @parameter3: boolean;

        if r0 == null goto label01;

        if r1 != null goto label02;

     label01:
        return -1;

     label02:
        if i3 >= 0 goto label03;

        i3 = 0;

     label03:
        r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(r0);

        $i0 = lengthof r2;

        if i3 < $i0 goto label04;

        return -1;

     label04:
        if z0 == 0 goto label08;

        i4 = i3;

     label05:
        $i2 = lengthof r2;

        if i4 >= $i2 goto label07;

        $r5 = r2[i4];

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z2 == 0 goto label06;

        return i4;

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        goto label11;

     label08:
        i5 = i3;

     label09:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label11;

        $r3 = r2[i5];

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label10;

        return i5;

     label10:
        i5 = i5 + 1;

        goto label09;

     label11:
        return -1;
    }

    public static void printRootCauseStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.PrintStream $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: void printRootCauseStackTrace(java.lang.Throwable,java.io.PrintStream)>(r0, $r1);

        return;
    }

    public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)
    {
        java.lang.Throwable r0;
        java.io.PrintStream r1;
        java.lang.String[] r2;
        int $i0, i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.io.PrintStream;

        if r0 != null goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The PrintStream must not be null");

        throw $r4;

     label2:
        r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)>(r0);

        i1 = 0;

     label3:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label4;

        $r3 = r2[i1];

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.io.PrintStream: void flush()>();

        return;
    }

    public static void printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        int $i0, i1;
        java.lang.String $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Throwable;

        r1 := @parameter1: java.io.PrintWriter;

        if r0 != null goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The PrintWriter must not be null");

        throw $r4;

     label2:
        r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)>(r0);

        i1 = 0;

     label3:
        $i0 = lengthof r2;

        if i1 >= $i0 goto label4;

        $r3 = r2[i1];

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    public static java.lang.String[] getRootCauseStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r5, $r12, $r17, $r19;
        java.lang.Throwable[] r1;
        int i0, $i1, $i2, $i3, i4, i5, $i6;
        java.util.List r3, r21;
        java.util.ArrayList $r4;
        java.lang.String[] $r6, $r8, $r9, $r20;
        java.lang.Object[] $r7;
        java.lang.StringBuffer $r10, $r11, $r14;
        java.lang.String $r13, $r15, $r18;
        java.lang.Object $r16;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        $r20 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r20;

     label1:
        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(r0);

        i0 = lengthof r1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i1 = i0 - 1;

        $r5 = r1[$i1];

        r21 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>($r5);

        i4 = i0;

     label2:
        i4 = i4 + -1;

        if i4 < 0 goto label8;

        r3 = r21;

        if i4 == 0 goto label3;

        $i3 = i4 - 1;

        $r19 = r1[$i3];

        r21 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.util.List getStackFrameList(java.lang.Throwable)>($r19);

        staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: void removeCommonFrames(java.util.List,java.util.List)>(r3, r21);

     label3:
        $i2 = i0 - 1;

        if i4 != $i2 goto label4;

        $r17 = r1[i4];

        $r18 = virtualinvoke $r17.<java.lang.Throwable: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label5;

     label4:
        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [wrapped] ");

        $r12 = r1[i4];

        $r13 = virtualinvoke $r12.<java.lang.Throwable: java.lang.String toString()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label5:
        i5 = 0;

     label6:
        $i6 = interfaceinvoke r3.<java.util.List: int size()>();

        if i5 >= $i6 goto label7;

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r16);

        i5 = i5 + 1;

        goto label6;

     label7:
        goto label2;

     label8:
        $r6 = newarray (java.lang.String)[0];

        $r7 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = (java.lang.String[]) $r8;

        return $r9;
    }

    public static void removeCommonFrames(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        java.lang.String r2, r3;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The List must not be null");

        throw $r4;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = $i0 - 1;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = $i1 - 1;

     label3:
        if i2 < 0 goto label5;

        if i3 < 0 goto label5;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (java.lang.String) $r5;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (java.lang.String) $r6;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label4;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i2);

     label4:
        i2 = i2 + -1;

        i3 = i3 + -1;

        goto label3;

     label5:
        return;
    }

    public static java.lang.String getFullStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r8, $r9;
        java.lang.Throwable[] r3;
        java.io.StringWriter $r4;
        java.io.PrintWriter $r5;
        int $i0, i1;
        java.lang.StringBuffer $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: java.lang.Throwable;

        $r4 = new java.io.StringWriter;

        specialinvoke $r4.<java.io.StringWriter: void <init>()>();

        $r5 = new java.io.PrintWriter;

        specialinvoke $r5.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r4, 1);

        r3 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable[] getThrowables(java.lang.Throwable)>(r0);

        i1 = 0;

     label1:
        $i0 = lengthof r3;

        if i1 >= $i0 goto label3;

        $r8 = r3[i1];

        virtualinvoke $r8.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r5);

        $r9 = r3[i1];

        $z0 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: boolean isNestedThrowable(java.lang.Throwable)>($r9);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r6 = virtualinvoke $r4.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String getStackTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.io.StringWriter $r3;
        java.io.PrintWriter $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.Throwable;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>($r3, 1);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r4);

        $r5 = virtualinvoke $r3.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String[] getStackFrames(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.lang.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(r0);

        $r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] getStackFrames(java.lang.String)>($r1);

        return $r2;
    }

    static java.lang.String[] getStackFrames(java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        java.util.StringTokenizer $r4;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.String[] $r6;

        r0 := @parameter0: java.lang.String;

        r1 = <org.apache.commons.lang.SystemUtils: java.lang.String LINE_SEPARATOR>;

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r0, r1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        $r6 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] toArray(java.util.List)>($r5);

        return $r6;
    }

    static java.util.List getStackFrameList(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String r1, r2, r5, $r8, $r9;
        int i0, $i1;
        java.util.StringTokenizer $r6;
        java.util.ArrayList $r7;
        boolean $z0, z2;

        r0 := @parameter0: java.lang.Throwable;

        r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String getStackTrace(java.lang.Throwable)>(r0);

        r2 = <org.apache.commons.lang.SystemUtils: java.lang.String LINE_SEPARATOR>;

        $r6 = new java.util.StringTokenizer;

        specialinvoke $r6.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        z2 = 0;

     label1:
        $z0 = virtualinvoke $r6.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label4;

        r5 = virtualinvoke $r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>("at");

        if i0 == -1 goto label2;

        $r8 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        z2 = 1;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r5);

        goto label3;

     label2:
        if z2 == 0 goto label3;

        goto label4;

     label3:
        goto label1;

     label4:
        return $r7;
    }

    public static java.lang.String getMessage(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String r1, r2, $r6, $r8;
        java.lang.StringBuffer $r3, $r4, $r5, $r7;

        r0 := @parameter0: java.lang.Throwable;

        if r0 != null goto label1;

        return "";

     label1:
        r1 = staticinvoke <org.apache.commons.lang.ClassUtils: java.lang.String getShortClassName(java.lang.Object,java.lang.String)>(r0, null);

        r2 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r6 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String defaultString(java.lang.String)>(r2);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String getRootCauseMessage(java.lang.Throwable)
    {
        java.lang.Throwable r0, r2, $r3;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Throwable;

        r2 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        if r2 != null goto label1;

        $r3 = r0;

        goto label2;

     label1:
        $r3 = r2;

     label2:
        $r1 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String getMessage(java.lang.Throwable)>($r3);

        return $r1;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.lang.Class $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.NoClassDefFoundError $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.NoClassDefFoundError;

        $r5 = virtualinvoke $r3.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.String[] $r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r8, $r12, $r15;
        java.lang.Exception $r6, $r7;
        java.lang.reflect.Method r9, r16;
        java.lang.Class[] $r14;

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String WRAPPED_MARKER> = " [wrapped] ";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Object CAUSE_METHOD_NAMES_LOCK> = $r0;

        $r1 = newarray (java.lang.String)[12];

        $r1[0] = "getCause";

        $r1[1] = "getNextException";

        $r1[2] = "getTargetException";

        $r1[3] = "getException";

        $r1[4] = "getSourceException";

        $r1[5] = "getRootCause";

        $r1[6] = "getCausedByException";

        $r1[7] = "getNested";

        $r1[8] = "getLinkedException";

        $r1[9] = "getNestedException";

        $r1[10] = "getLinkedCause";

        $r1[11] = "getThrowable";

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.String[] CAUSE_METHOD_NAMES> = $r1;

     label01:
        $r2 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r2 != null goto label02;

        $r8 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r8;

        goto label03;

     label02:
        $r8 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label03:
        r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getCause", null);

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        r9 = null;

     label06:
        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.reflect.Method THROWABLE_CAUSE_METHOD> = r9;

     label07:
        $r3 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r3 != null goto label08;

        $r5 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        $r12 = $r5;

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r5;

        goto label09;

     label08:
        $r12 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label09:
        $r14 = newarray (java.lang.Class)[1];

        $r4 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

        if $r4 != null goto label10;

        $r15 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$(java.lang.String)>("java.lang.Throwable");

        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable> = $r15;

        goto label11;

     label10:
        $r15 = <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Class class$java$lang$Throwable>;

     label11:
        $r14[0] = $r15;

        r16 = virtualinvoke $r12.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("initCause", $r14);

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

        r16 = null;

     label14:
        <org.apache.commons.lang.exception.ExceptionUtils: java.lang.reflect.Method THROWABLE_INITCAUSE_METHOD> = r16;

        return;

        catch java.lang.Exception from label01 to label04 with label05;
        catch java.lang.Exception from label07 to label12 with label13;
    }
}
