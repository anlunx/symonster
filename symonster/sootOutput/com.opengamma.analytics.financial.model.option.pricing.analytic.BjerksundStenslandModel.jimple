public class com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel extends java.lang.Object
{
    private static final double SMALL;
    private static final double R_B_SMALL;
    private static final double RHO2;
    private static final double RHO;
    private static final double RHO_STAR;
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL;
    private static final com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL;

    public void <init>()
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.function.Function1D getPricingFunction(com.opengamma.analytics.financial.model.option.definition.AmericanVanillaOptionDefinition)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        com.opengamma.analytics.financial.model.option.definition.AmericanVanillaOptionDefinition r1;
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$1 $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        r1 := @parameter0: com.opengamma.analytics.financial.model.option.definition.AmericanVanillaOptionDefinition;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $r3 = new com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$1;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$1: void <init>(com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel,com.opengamma.analytics.financial.model.option.definition.AmericanVanillaOptionDefinition)>(r0, r1);

        return $r3;
    }

    public double price(double, double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34;
        boolean z0;
        byte $b0, $b1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $d13 = d3 * d4;

        $d14 = staticinvoke <java.lang.Math: double exp(double)>($d13);

        d6 = d0 * $d14;

        $d15 = neg d2;

        $d16 = $d15 * d4;

        d7 = staticinvoke <java.lang.Math: double exp(double)>($d16);

        $d17 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>(d6, d1, d4, d5, z0);

        d8 = d7 * $d17;

        if z0 == 0 goto label1;

        $d33 = d0 - d1;

        $d34 = staticinvoke <java.lang.Math: double max(double,double)>($d33, 0.0);

        goto label2;

     label1:
        $d18 = d1 - d0;

        $d34 = staticinvoke <java.lang.Math: double max(double,double)>($d18, 0.0);

     label2:
        d10 = staticinvoke <java.lang.Math: double max(double,double)>($d34, d8);

        $d19 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        $d20 = d5 * $d19;

        $b0 = $d20 cmpg 1.0E-13;

        if $b0 >= 0 goto label3;

        return d10;

     label3:
        if z0 == 0 goto label4;

        $d31 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getCallPrice(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, d8);

        $d32 = staticinvoke <java.lang.Math: double max(double,double)>(d10, $d31);

        return $d32;

     label4:
        $d22 = 2.0 * d3;

        $d21 = d5 * d5;

        $d23 = $d22 + $d21;

        $d24 = $d23 / 2.0;

        d11 = $d24 / d5;

        $d25 = 0.5 * d11;

        $d26 = $d25 * d11;

        d12 = d3 - $d26;

        $b1 = d2 cmpg d12;

        if $b1 >= 0 goto label5;

        return d10;

     label5:
        $d28 = d2 - d3;

        $d27 = neg d3;

        $d29 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getCallPrice(double,double,double,double,double,double,double)>(d1, d0, $d28, $d27, d4, d5, d8);

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>(d10, $d29);

        return $d30;
    }

    protected double getCallPrice(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, d68, d69, d70, d71, d72, d73, d74, d75;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $b0 = d3 cmpl d2;

        if $b0 < 0 goto label1;

        return d6;

     label1:
        d7 = d5 * d5;

        $d13 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d8 = $d13 * d4;

        $d14 = d3 / d7;

        d9 = 0.5 - $d14;

        $d15 = d2 - d3;

        d10 = staticinvoke <java.lang.Math: double abs(double)>($d15);

        $b1 = d10 cmpg 1.0E-7;

        if $b1 >= 0 goto label2;

        $b4 = d9 cmpg 1.0;

        if $b4 > 0 goto label2;

        d68 = 1.0;

        $d56 = d2 * d8;

        $d57 = 1.0 + $d56;

        $d58 = 2.0 * d5;

        $d59 = staticinvoke <java.lang.Math: double sqrt(double)>(d8);

        $d60 = $d58 * $d59;

        $d61 = $d57 + $d60;

        d69 = d1 * $d61;

        $d62 = d2 * d4;

        $d63 = 1.0 + $d62;

        $d64 = 2.0 * d5;

        $d65 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        $d66 = $d64 * $d65;

        $d67 = $d63 + $d66;

        d70 = d1 * $d67;

        goto label7;

     label2:
        $b2 = d10 cmpg 1.0E-7;

        if $b2 >= 0 goto label3;

        d71 = d1;

        goto label4;

     label3:
        $d16 = d2 * d1;

        $d17 = $d16 / d10;

        d71 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d17);

     label4:
        $d20 = d9 * d9;

        $d18 = 2.0 * d2;

        $d19 = $d18 / d7;

        d72 = $d20 + $d19;

        $b3 = d72 cmpl 0.0;

        if $b3 < 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "beta is complex. Please check valueso of r & b");

        $d21 = staticinvoke <java.lang.Math: double sqrt(double)>(d72);

        d68 = d9 + $d21;

        $d23 = d68 * d1;

        $d22 = d68 - 1.0;

        d73 = $d23 / $d22;

        d11 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getH(double,double,double,double,double,double)>(d3, d8, d5, d1, d71, d73);

        d12 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getH(double,double,double,double,double,double)>(d3, d4, d5, d1, d71, d73);

        d69 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getX(double,double,double)>(d71, d73, d11);

        d70 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getX(double,double,double)>(d71, d73, d12);

     label7:
        $b5 = d0 cmpl d70;

        if $b5 < 0 goto label8;

        $d55 = d0 - d1;

        return $d55;

     label8:
        d74 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getAlpha(double,double,double)>(d69, d68, d1);

        d75 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getAlpha(double,double,double)>(d70, d68, d1);

        $d24 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d68);

        $d25 = d75 * $d24;

        $d26 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, d68, d70, d70, d2, d3, d5);

        $d27 = d75 * $d26;

        $d28 = $d25 - $d27;

        $d29 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, 1.0, d70, d70, d2, d3, d5);

        $d30 = $d28 + $d29;

        $d31 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, 1.0, d69, d70, d2, d3, d5);

        $d32 = $d30 - $d31;

        $d33 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, 0.0, d70, d70, d2, d3, d5);

        $d34 = d1 * $d33;

        $d35 = $d32 - $d34;

        $d36 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, 0.0, d69, d70, d2, d3, d5);

        $d37 = d1 * $d36;

        $d38 = $d35 + $d37;

        $d39 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPhi(double,double,double,double,double,double,double,double)>(d0, d8, d68, d69, d70, d2, d3, d5);

        $d40 = d74 * $d39;

        $d41 = $d38 + $d40;

        $d42 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPsi(double,double,double,double,double,double,double,double,double,double)>(d0, d8, d4, d68, d69, d70, d69, d2, d3, d5);

        $d43 = d74 * $d42;

        $d44 = $d41 - $d43;

        $d45 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPsi(double,double,double,double,double,double,double,double,double,double)>(d0, d8, d4, 1.0, d69, d70, d69, d2, d3, d5);

        $d46 = $d44 + $d45;

        $d47 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPsi(double,double,double,double,double,double,double,double,double,double)>(d0, d8, d4, 1.0, d1, d70, d69, d2, d3, d5);

        $d48 = $d46 - $d47;

        $d49 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPsi(double,double,double,double,double,double,double,double,double,double)>(d0, d8, d4, 0.0, d69, d70, d69, d2, d3, d5);

        $d50 = d1 * $d49;

        $d51 = $d48 - $d50;

        $d52 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getPsi(double,double,double,double,double,double,double,double,double,double)>(d0, d8, d4, 0.0, d1, d70, d69, d2, d3, d5);

        $d53 = d1 * $d52;

        $d54 = $d51 + $d53;

        return $d54;
    }

    private double getH(double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d6 = d0 * d1;

        $d7 = 2.0 * d2;

        $d8 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        $d9 = $d7 * $d8;

        $d10 = $d6 + $d9;

        $d11 = neg $d10;

        $d12 = $d11 * d3;

        $d15 = $d12 * d3;

        $d13 = d5 - d4;

        $d14 = d4 * $d13;

        $d16 = $d15 / $d14;

        return $d16;
    }

    private double getX(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = d1 - d0;

        $d4 = staticinvoke <java.lang.Math: double exp(double)>(d2);

        $d5 = 1.0 - $d4;

        $d6 = $d3 * $d5;

        $d7 = d0 + $d6;

        return $d7;
    }

    private double getAlpha(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = neg d1;

        $d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d3);

        $d5 = d0 - d2;

        $d6 = $d4 * $d5;

        return $d6;
    }

    protected double getPhi(double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r1, $r3;
        java.lang.Double $r2, $r4;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        d8 = d7 * d7;

        d9 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getDenom(double,double)>(d1, d7);

        d10 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getLambda(double,double,double,double)>(d2, d5, d6, d8);

        d11 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getKappa(double,double,double)>(d2, d6, d8);

        d12 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getY(double,double,double,double,double)>(d1, d6, d8, d2, d9);

        $d15 = d0 / d3;

        d13 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d15, d9, d12);

        $d17 = d4 * d4;

        $d16 = d0 * d3;

        $d18 = $d17 / $d16;

        d14 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d18, d9, d12);

        $d19 = d10 * d1;

        $d20 = staticinvoke <java.lang.Math: double exp(double)>($d19);

        $d21 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d22 = $d20 * $d21;

        $r1 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d13);

        $d23 = interfaceinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r2);

        $d24 = d4 / d0;

        $d25 = staticinvoke <java.lang.Math: double pow(double,double)>($d24, d11);

        $r3 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d14);

        $d26 = interfaceinvoke $r3.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r4);

        $d27 = $d25 * $d26;

        $d28 = $d23 - $d27;

        $d29 = $d22 * $d28;

        return $d29;
    }

    protected double getPsi(double, double, double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67;
        double[] $r1, $r3, $r5, $r7;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r2, $r4, $r6, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        d8 := @parameter8: double;

        d9 := @parameter9: double;

        d10 = d9 * d9;

        d11 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getDenom(double,double)>(d1, d9);

        d12 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getDenom(double,double)>(d2, d9);

        d13 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getY(double,double,double,double,double)>(d1, d8, d10, d3, d11);

        d14 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getY(double,double,double,double,double)>(d2, d8, d10, d3, d12);

        $d26 = d0 / d6;

        d15 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d26, d11, d13);

        $d28 = d5 * d5;

        $d27 = d0 * d6;

        $d29 = $d28 / $d27;

        d16 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d29, d11, d13);

        $d30 = 2.0 * d13;

        d17 = d15 + $d30;

        $d31 = 2.0 * d13;

        d18 = d16 + $d31;

        $d32 = d0 / d4;

        d19 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d32, d12, d14);

        $d34 = d5 * d5;

        $d33 = d0 * d4;

        $d35 = $d34 / $d33;

        d20 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d35, d12, d14);

        $d37 = d6 * d6;

        $d36 = d0 * d4;

        $d38 = $d37 / $d36;

        d21 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d38, d12, d14);

        $d39 = d0 * d6;

        $d42 = $d39 * d6;

        $d40 = d4 * d5;

        $d41 = $d40 * d5;

        $d43 = $d42 / $d41;

        d22 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getD(double,double,double)>($d43, d12, d14);

        d23 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getLambda(double,double,double,double)>(d3, d7, d8, d10);

        d24 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getKappa(double,double,double)>(d3, d8, d10);

        $d44 = d1 / d2;

        d25 = staticinvoke <java.lang.Math: double sqrt(double)>($d44);

        $d45 = d23 * d2;

        $d46 = staticinvoke <java.lang.Math: double exp(double)>($d45);

        $d47 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d3);

        $d48 = $d46 * $d47;

        $r2 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r1 = newarray (double)[3];

        $r1[0] = d15;

        $r1[1] = d19;

        $r1[2] = d25;

        $d49 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r1);

        $d50 = d5 / d0;

        $d51 = staticinvoke <java.lang.Math: double pow(double,double)>($d50, d24);

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r3 = newarray (double)[3];

        $r3[0] = d16;

        $r3[1] = d20;

        $r3[2] = d25;

        $d52 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r3);

        $d53 = $d51 * $d52;

        $d55 = $d49 - $d53;

        $d54 = d6 / d0;

        $d56 = staticinvoke <java.lang.Math: double pow(double,double)>($d54, d24);

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r5 = newarray (double)[3];

        $r5[0] = d17;

        $r5[1] = d21;

        $d57 = neg d25;

        $r5[2] = $d57;

        $d58 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r5);

        $d59 = $d56 * $d58;

        $d61 = $d55 - $d59;

        $d60 = d6 / d5;

        $d62 = staticinvoke <java.lang.Math: double pow(double,double)>($d60, d24);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r7 = newarray (double)[3];

        $r7[0] = d18;

        $r7[1] = d22;

        $d63 = neg d25;

        $r7[2] = $d63;

        $d64 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r7);

        $d65 = $d62 * $d64;

        $d66 = $d61 + $d65;

        $d67 = $d48 * $d66;

        return $d67;
    }

    private double getLambda(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        $d5 = neg d1;

        $d4 = d0 * d2;

        $d10 = $d5 + $d4;

        $d7 = 0.5 * d0;

        $d6 = d0 - 1.0;

        $d8 = $d7 * $d6;

        $d9 = $d8 * d3;

        $d11 = $d10 + $d9;

        return $d11;
    }

    private double getKappa(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = 2.0 * d1;

        $d5 = $d3 / d2;

        $d4 = 2.0 * d0;

        $d6 = $d5 + $d4;

        $d7 = $d6 - 1.0;

        return $d7;
    }

    private double getY(double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $d5 = d3 - 0.5;

        $d6 = d2 * $d5;

        $d7 = d1 + $d6;

        $d8 = d0 * $d7;

        $d9 = $d8 / d4;

        return $d9;
    }

    private double getDenom(double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, $d2, $d3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $d3 = d1 * $d2;

        return $d3;
    }

    private double getD(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d4 = $d3 / d1;

        $d5 = $d4 + d2;

        $d6 = neg $d5;

        return $d6;
    }

    public double[] getPriceAdjoint(double, double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        boolean z0;
        byte $b0;
        double[] $r1, $r2, $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $d7 = neg d2;

        $d8 = $d7 * d4;

        $d9 = staticinvoke <java.lang.Math: double exp(double)>($d8);

        $d10 = d3 * d4;

        $d11 = staticinvoke <java.lang.Math: double exp(double)>($d10);

        $d12 = d0 * $d11;

        $d13 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d12, d1, d4, d5, z0);

        d6 = $d9 * $d13;

        $d14 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        $d15 = d5 * $d14;

        $b0 = $d15 cmpg 1.0E-13;

        if $b0 >= 0 goto label1;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, z0, d6);

        return $r3;

     label1:
        if z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getCallPriceAdjoint(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, d6);

        return $r2;

     label2:
        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPutPriceAdjoint(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, d6);

        return $r1;
    }

    public double[] getPriceDeltaGamma(double, double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18;
        boolean z0;
        double[] r1, $r2, $r3, $r4;
        byte $b0, $b1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        $d8 = neg d2;

        $d9 = $d8 * d4;

        $d10 = staticinvoke <java.lang.Math: double exp(double)>($d9);

        $d11 = d3 * d4;

        $d12 = staticinvoke <java.lang.Math: double exp(double)>($d11);

        $d13 = d0 * $d12;

        $d14 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>($d13, d1, d4, d5, z0);

        d6 = $d10 * $d14;

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>(d4);

        $d16 = d5 * $d15;

        $b0 = $d16 cmpg 1.0E-13;

        if $b0 >= 0 goto label1;

        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceDeltaGamma(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, z0, d6);

        return $r3;

     label1:
        if z0 == 0 goto label2;

        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getCallDeltaGamma(double,double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5, d6);

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPutDeltaGamma(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5);

     label3:
        r1 = $r4;

        if z0 == 0 goto label4;

        $d18 = d0 - d1;

        goto label5;

     label4:
        $d18 = d1 - d0;

     label5:
        d7 = staticinvoke <java.lang.Math: double max(double,double)>($d18, d6);

        $d17 = r1[0];

        $b1 = $d17 cmpg d7;

        if $b1 >= 0 goto label6;

        $r2 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceDeltaGamma(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, z0, d6);

        return $r2;

     label6:
        return r1;
    }

    public double[] getPriceAndVega(double, double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7;
        boolean z0;
        double[] r1, $r2;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPriceAdjoint(double,double,double,double,double,double,boolean)>(d0, d1, d2, d3, d4, d5, z0);

        $r2 = newarray (double)[2];

        $d6 = r1[0];

        $r2[0] = $d6;

        $d7 = r1[6];

        $r2[1] = $d7;

        return $r2;
    }

    public com.opengamma.analytics.math.function.Function1D getPriceAndVegaFunction(double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4;
        boolean z0;
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$2 $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        z0 := @parameter5: boolean;

        $r1 = new com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$2;

        specialinvoke $r1.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel$2: void <init>(com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel,double,double,double,double,double,boolean)>(r0, d0, d1, d2, d3, d4, z0);

        return $r1;
    }

    public double impliedVolatility(double, double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, $d6;
        boolean z0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.function.Function1D getPriceAndVegaFunction(double,double,double,double,double,boolean)>(d1, d2, d3, d4, d5, z0);

        $r3 = new com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver: void <init>(com.opengamma.analytics.math.function.Function1D)>(r1);

        $d6 = virtualinvoke $r3.<com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver: double impliedVolatility(double)>(d0);

        return $d6;
    }

    public double impliedVolatility(double, double, double, double, double, double, boolean, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7;
        boolean z0;
        com.opengamma.analytics.math.function.Function1D r1;
        com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver $r3;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        d6 := @parameter7: double;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.function.Function1D getPriceAndVegaFunction(double,double,double,double,double,boolean)>(d1, d2, d3, d4, d5, z0);

        $r3 = new com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver;

        specialinvoke $r3.<com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver: void <init>(com.opengamma.analytics.math.function.Function1D)>(r1);

        $d7 = virtualinvoke $r3.<com.opengamma.analytics.financial.model.volatility.GenericImpliedVolatiltySolver: double impliedVolatility(double,double)>(d0, d6);

        return $d7;
    }

    protected double[] getCallPriceAdjoint(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d21, d24, d25, d27, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, $d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345, $d346, $d347, $d348, $d349, $d350, $d351, $d352, $d353, $d354, $d355, $d356, $d357, $d358, $d359, $d360, $d361, $d362, $d363, $d364, $d365, $d366, $d367, $d368, $d369, $d370, $d371, $d372, $d373, $d374, $d375, $d376, $d377, $d378, $d379, $d380, $d381, $d382, $d383, $d384, $d385, $d386, $d387, $d388, $d389, $d390, $d391, $d392, $d393, $d394, $d395, $d396, $d397, $d398, $d399, $d400, $d401, $d402, $d403, $d404, $d405, $d406, $d407, $d408, $d409, $d410, $d411;
        double[] r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, $r18, $r19;
        byte $b0, $b1, $b2;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $b0 = d3 cmpl d2;

        if $b0 < 0 goto label1;

        $r19 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 1, d6);

        return $r19;

     label1:
        r1 = newarray (double)[7];

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getI2Adjoint(double,double,double,double,double)>(d1, d2, d3, d5, d4);

        $d42 = r2[0];

        $b1 = d0 cmpl $d42;

        if $b1 < 0 goto label2;

        $d411 = d0 - d1;

        r1[0] = $d411;

        r1[1] = 1.0;

        r1[2] = -1.0;

        return r1;

     label2:
        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getI1Adjoint(double,double,double,double,double)>(d1, d2, d3, d5, d4);

        d7 = d5 * d5;

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getBetaAdjoint(double,double,double)>(d2, d3, d7);

        $d44 = r3[0];

        $d43 = r4[0];

        r5 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getAlphaAdjoint(double,double,double)>(d1, $d44, $d43);

        $d46 = r2[0];

        $d45 = r4[0];

        r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getAlphaAdjoint(double,double,double)>(d1, $d46, $d45);

        $d49 = r4[0];

        $d48 = r2[0];

        $d47 = r2[0];

        r7 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, $d49, $d48, $d47, d2, d3, d5);

        $d51 = r2[0];

        $d50 = r2[0];

        r8 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, 1.0, $d51, $d50, d2, d3, d5);

        $d53 = r3[0];

        $d52 = r2[0];

        r9 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, 1.0, $d53, $d52, d2, d3, d5);

        $d55 = r2[0];

        $d54 = r2[0];

        r10 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, 0.0, $d55, $d54, d2, d3, d5);

        $d57 = r3[0];

        $d56 = r2[0];

        r11 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, 0.0, $d57, $d56, d2, d3, d5);

        $d60 = r4[0];

        $d59 = r3[0];

        $d58 = r2[0];

        r12 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiAdjoint(double,double,double,double,double,double,double,double)>(d0, d4, $d60, $d59, $d58, d2, d3, d5);

        $d64 = r4[0];

        $d63 = r3[0];

        $d62 = r2[0];

        $d61 = r3[0];

        r13 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiAdjoint(double,double,double,double,double,double,double,double,double)>(d0, d4, $d64, $d63, $d62, $d61, d2, d3, d5);

        $d67 = r3[0];

        $d66 = r2[0];

        $d65 = r3[0];

        r14 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiAdjoint(double,double,double,double,double,double,double,double,double)>(d0, d4, 1.0, $d67, $d66, $d65, d2, d3, d5);

        $d69 = r2[0];

        $d68 = r3[0];

        r15 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiAdjoint(double,double,double,double,double,double,double,double,double)>(d0, d4, 1.0, d1, $d69, $d68, d2, d3, d5);

        $d72 = r3[0];

        $d71 = r2[0];

        $d70 = r3[0];

        r16 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiAdjoint(double,double,double,double,double,double,double,double,double)>(d0, d4, 0.0, $d72, $d71, $d70, d2, d3, d5);

        $d74 = r2[0];

        $d73 = r3[0];

        r17 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiAdjoint(double,double,double,double,double,double,double,double,double)>(d0, d4, 0.0, d1, $d74, $d73, d2, d3, d5);

        $d75 = r4[0];

        d8 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, $d75);

        d9 = r7[0];

        $d77 = r6[0];

        $d76 = d8 - d9;

        d10 = $d77 * $d76;

        $d79 = r8[0];

        $d78 = r9[0];

        d11 = $d79 - $d78;

        $d80 = r10[0];

        $d82 = neg $d80;

        $d81 = r11[0];

        $d83 = $d82 + $d81;

        d12 = d1 * $d83;

        $d87 = r5[0];

        $d85 = r12[0];

        $d84 = r13[0];

        $d86 = $d85 - $d84;

        d13 = $d87 * $d86;

        $d89 = r14[0];

        $d88 = r15[0];

        d14 = $d89 - $d88;

        $d90 = r16[0];

        $d92 = neg $d90;

        $d91 = r17[0];

        $d93 = $d92 + $d91;

        d15 = d1 * $d93;

        $d94 = d10 + d11;

        $d95 = $d94 + d12;

        $d96 = $d95 + d13;

        $d97 = $d96 + d14;

        d16 = $d97 + d15;

        $d98 = d0 - d1;

        d17 = staticinvoke <java.lang.Math: double max(double,double)>($d98, d6);

        $b2 = d16 cmpg d17;

        if $b2 >= 0 goto label3;

        $r18 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 1, d6);

        return $r18;

     label3:
        $d99 = r6[0];

        d18 = neg $d99;

        d19 = r6[0];

        d21 = neg d1;

        $d100 = r5[0];

        d24 = neg $d100;

        d25 = r5[0];

        d27 = neg d1;

        d31 = d8 - d9;

        $d102 = r12[0];

        $d101 = r13[0];

        d32 = $d102 - $d101;

        $d103 = r17[5];

        $d106 = $d103 * d1;

        $d104 = r16[5];

        $d105 = $d104 * d21;

        $d109 = $d106 + $d105;

        $d107 = r15[5];

        $d108 = $d107 * -1.0;

        $d112 = $d109 + $d108;

        $d110 = r14[5];

        $d111 = $d110 * 1.0;

        $d115 = $d112 + $d111;

        $d113 = r13[5];

        $d114 = $d113 * d24;

        $d118 = $d115 + $d114;

        $d116 = r12[5];

        $d117 = $d116 * d25;

        $d121 = $d118 + $d117;

        $d119 = r11[5];

        $d120 = $d119 * d1;

        $d126 = $d121 + $d120;

        $d123 = r10[4];

        $d122 = r10[5];

        $d124 = $d123 + $d122;

        $d125 = $d124 * d27;

        $d129 = $d126 + $d125;

        $d127 = r9[5];

        $d128 = $d127 * -1.0;

        $d134 = $d129 + $d128;

        $d131 = r8[4];

        $d130 = r8[5];

        $d132 = $d131 + $d130;

        $d133 = $d132 * 1.0;

        $d139 = $d134 + $d133;

        $d136 = r7[4];

        $d135 = r7[5];

        $d137 = $d136 + $d135;

        $d138 = $d137 * d18;

        $d142 = $d139 + $d138;

        $d140 = r6[2];

        $d141 = $d140 * d31;

        d33 = $d142 + $d141;

        $d143 = r17[6];

        $d148 = $d143 * d1;

        $d145 = r16[4];

        $d144 = r16[6];

        $d146 = $d145 + $d144;

        $d147 = $d146 * d21;

        $d151 = $d148 + $d147;

        $d149 = r15[6];

        $d150 = $d149 * -1.0;

        $d156 = $d151 + $d150;

        $d153 = r14[4];

        $d152 = r14[6];

        $d154 = $d153 + $d152;

        $d155 = $d154 * 1.0;

        $d161 = $d156 + $d155;

        $d158 = r13[4];

        $d157 = r13[6];

        $d159 = $d158 + $d157;

        $d160 = $d159 * d24;

        $d164 = $d161 + $d160;

        $d162 = r12[4];

        $d163 = $d162 * d25;

        $d167 = $d164 + $d163;

        $d165 = r11[4];

        $d166 = $d165 * d1;

        $d170 = $d167 + $d166;

        $d168 = r9[4];

        $d169 = $d168 * -1.0;

        $d173 = $d170 + $d169;

        $d171 = r5[2];

        $d172 = $d171 * d32;

        d34 = $d173 + $d172;

        $d174 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d175 = $d174 * d8;

        $d178 = $d175 * d19;

        $d176 = r13[3];

        $d177 = $d176 * d24;

        $d181 = $d178 + $d177;

        $d179 = r7[3];

        $d180 = $d179 * d18;

        $d184 = $d181 + $d180;

        $d182 = r12[3];

        $d183 = $d182 * d25;

        $d187 = $d184 + $d183;

        $d185 = r6[3];

        $d186 = d31 * $d185;

        $d190 = $d187 + $d186;

        $d188 = r5[3];

        $d189 = d32 * $d188;

        d35 = $d190 + $d189;

        $d191 = r4[0];

        $d192 = $d191 * d8;

        $d193 = $d192 / d0;

        $d196 = $d193 * d19;

        $d194 = r17[1];

        $d195 = $d194 * d1;

        $d199 = $d196 + $d195;

        $d197 = r16[1];

        $d198 = $d197 * d21;

        $d202 = $d199 + $d198;

        $d200 = r15[1];

        $d201 = $d200 * -1.0;

        $d205 = $d202 + $d201;

        $d203 = r14[1];

        $d204 = $d203 * 1.0;

        $d208 = $d205 + $d204;

        $d206 = r13[1];

        $d207 = $d206 * d24;

        $d211 = $d208 + $d207;

        $d209 = r12[1];

        $d210 = $d209 * d25;

        $d214 = $d211 + $d210;

        $d212 = r11[1];

        $d213 = $d212 * d1;

        $d217 = $d214 + $d213;

        $d215 = r10[1];

        $d216 = $d215 * d27;

        $d220 = $d217 + $d216;

        $d218 = r9[1];

        $d219 = $d218 * -1.0;

        $d223 = $d220 + $d219;

        $d221 = r8[1];

        $d222 = $d221 * 1.0;

        $d226 = $d223 + $d222;

        $d224 = r7[1];

        $d225 = $d224 * d18;

        d36 = $d226 + $d225;

        $d227 = r16[0];

        $d229 = neg $d227;

        $d228 = r17[0];

        $d231 = $d229 + $d228;

        $d230 = r10[0];

        $d233 = $d231 - $d230;

        $d232 = r11[0];

        $d236 = $d233 + $d232;

        $d234 = r17[4];

        $d235 = $d234 * d1;

        $d239 = $d236 + $d235;

        $d237 = r15[4];

        $d238 = $d237 * -1.0;

        $d242 = $d239 + $d238;

        $d240 = r2[1];

        $d241 = $d240 * d33;

        $d245 = $d242 + $d241;

        $d243 = r3[1];

        $d244 = $d243 * d34;

        $d248 = $d245 + $d244;

        $d246 = r5[1];

        $d247 = $d246 * d32;

        $d251 = $d248 + $d247;

        $d249 = r6[1];

        $d250 = $d249 * d31;

        d37 = $d251 + $d250;

        $d252 = r17[7];

        $d255 = $d252 * d1;

        $d253 = r16[7];

        $d254 = $d253 * d21;

        $d258 = $d255 + $d254;

        $d256 = r15[7];

        $d257 = $d256 * -1.0;

        $d261 = $d258 + $d257;

        $d259 = r14[7];

        $d260 = $d259 * 1.0;

        $d264 = $d261 + $d260;

        $d262 = r13[7];

        $d263 = $d262 * d24;

        $d267 = $d264 + $d263;

        $d265 = r12[6];

        $d266 = $d265 * d25;

        $d270 = $d267 + $d266;

        $d268 = r11[6];

        $d269 = $d268 * d1;

        $d273 = $d270 + $d269;

        $d271 = r10[6];

        $d272 = $d271 * d27;

        $d276 = $d273 + $d272;

        $d274 = r9[6];

        $d275 = $d274 * -1.0;

        $d279 = $d276 + $d275;

        $d277 = r8[6];

        $d278 = $d277 * 1.0;

        $d282 = $d279 + $d278;

        $d280 = r7[6];

        $d281 = $d280 * d18;

        $d285 = $d282 + $d281;

        $d283 = r2[2];

        $d284 = $d283 * d33;

        $d288 = $d285 + $d284;

        $d286 = r3[2];

        $d287 = $d286 * d34;

        $d291 = $d288 + $d287;

        $d289 = r4[1];

        $d290 = $d289 * d35;

        d38 = $d291 + $d290;

        $d292 = r17[8];

        $d295 = $d292 * d1;

        $d293 = r16[8];

        $d294 = $d293 * d21;

        $d298 = $d295 + $d294;

        $d296 = r15[8];

        $d297 = $d296 * -1.0;

        $d301 = $d298 + $d297;

        $d299 = r14[8];

        $d300 = $d299 * 1.0;

        $d304 = $d301 + $d300;

        $d302 = r13[8];

        $d303 = $d302 * d24;

        $d307 = $d304 + $d303;

        $d305 = r12[7];

        $d306 = $d305 * d25;

        $d310 = $d307 + $d306;

        $d308 = r11[7];

        $d309 = $d308 * d1;

        $d313 = $d310 + $d309;

        $d311 = r10[7];

        $d312 = $d311 * d27;

        $d316 = $d313 + $d312;

        $d314 = r9[7];

        $d315 = $d314 * -1.0;

        $d319 = $d316 + $d315;

        $d317 = r8[7];

        $d318 = $d317 * 1.0;

        $d322 = $d319 + $d318;

        $d320 = r7[7];

        $d321 = $d320 * d18;

        $d325 = $d322 + $d321;

        $d323 = r2[3];

        $d324 = $d323 * d33;

        $d328 = $d325 + $d324;

        $d326 = r3[3];

        $d327 = $d326 * d34;

        $d331 = $d328 + $d327;

        $d329 = r4[2];

        $d330 = $d329 * d35;

        d39 = $d331 + $d330;

        $d332 = r17[2];

        $d335 = $d332 * d1;

        $d333 = r16[2];

        $d334 = $d333 * d21;

        $d338 = $d335 + $d334;

        $d336 = r15[2];

        $d337 = $d336 * -1.0;

        $d341 = $d338 + $d337;

        $d339 = r14[2];

        $d340 = $d339 * 1.0;

        $d344 = $d341 + $d340;

        $d342 = r13[2];

        $d343 = $d342 * d24;

        $d362 = $d344 + $d343;

        $d345 = r12[2];

        $d348 = $d345 * d25;

        $d346 = r11[2];

        $d347 = $d346 * d1;

        $d351 = $d348 + $d347;

        $d349 = r10[2];

        $d350 = $d349 * d27;

        $d354 = $d351 + $d350;

        $d352 = r9[2];

        $d353 = $d352 * -1.0;

        $d357 = $d354 + $d353;

        $d355 = r8[2];

        $d356 = $d355 * 1.0;

        $d360 = $d357 + $d356;

        $d358 = r7[2];

        $d359 = $d358 * d18;

        $d361 = $d360 + $d359;

        $d365 = $d362 + $d361;

        $d363 = r2[5];

        $d364 = $d363 * d33;

        $d368 = $d365 + $d364;

        $d366 = r3[5];

        $d367 = $d366 * d34;

        d40 = $d368 + $d367;

        $d369 = r17[9];

        $d372 = $d369 * d1;

        $d370 = r16[9];

        $d371 = $d370 * d21;

        $d375 = $d372 + $d371;

        $d373 = r15[9];

        $d374 = $d373 * -1.0;

        $d378 = $d375 + $d374;

        $d376 = r14[9];

        $d377 = $d376 * 1.0;

        $d381 = $d378 + $d377;

        $d379 = r13[9];

        $d380 = $d379 * d24;

        $d384 = $d381 + $d380;

        $d382 = r12[8];

        $d383 = $d382 * d25;

        $d387 = $d384 + $d383;

        $d385 = r11[8];

        $d386 = $d385 * d1;

        $d390 = $d387 + $d386;

        $d388 = r10[8];

        $d389 = $d388 * d27;

        $d393 = $d390 + $d389;

        $d391 = r9[8];

        $d392 = $d391 * -1.0;

        $d396 = $d393 + $d392;

        $d394 = r8[8];

        $d395 = $d394 * 1.0;

        $d399 = $d396 + $d395;

        $d397 = r7[8];

        $d398 = $d397 * d18;

        $d402 = $d399 + $d398;

        $d400 = r2[4];

        $d401 = $d400 * d33;

        $d405 = $d402 + $d401;

        $d403 = r3[4];

        $d404 = $d403 * d34;

        $d410 = $d405 + $d404;

        $d407 = 2.0 * d5;

        $d406 = r4[3];

        $d408 = $d407 * $d406;

        $d409 = $d408 * d35;

        d41 = $d410 + $d409;

        r1[0] = d16;

        r1[1] = d36;

        r1[2] = d37;

        r1[3] = d38;

        r1[4] = d39;

        r1[5] = d40;

        r1[6] = d41;

        return r1;
    }

    double[] getPutPriceAdjoint(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;
        double[] r1, r2, $r3, $r4, $r5;
        byte $b0, $b1, $b2;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        $b0 = 0.0 cmpl d2;

        if $b0 < 0 goto label1;

        $r5 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 0, d6);

        return $r5;

     label1:
        $d14 = 2.0 * d3;

        $d13 = d5 * d5;

        $d15 = $d14 + $d13;

        $d16 = $d15 / 2.0;

        d7 = $d16 / d5;

        $d17 = 0.5 * d7;

        $d18 = $d17 * d7;

        d8 = d3 - $d18;

        $b1 = d2 cmpg d8;

        if $b1 > 0 goto label2;

        $r4 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 0, d6);

        return $r4;

     label2:
        $d19 = d3 * d4;

        $d20 = staticinvoke <java.lang.Math: double exp(double)>($d19);

        d9 = d0 * $d20;

        $d21 = neg d2;

        $d22 = $d21 * d4;

        d10 = staticinvoke <java.lang.Math: double exp(double)>($d22);

        $d23 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double price(double,double,double,double,boolean)>(d9, d1, d4, d5, 0);

        d11 = d10 * $d23;

        $d24 = d1 - d0;

        d12 = staticinvoke <java.lang.Math: double max(double,double)>($d24, d11);

        $d26 = d2 - d3;

        $d25 = neg d3;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getCallPriceAdjoint(double,double,double,double,double,double,double)>(d1, d0, $d26, $d25, d4, d5, d6);

        $d27 = r1[0];

        $b2 = $d27 cmpl d12;

        if $b2 <= 0 goto label3;

        r2 = newarray (double)[7];

        $d28 = r1[0];

        r2[0] = $d28;

        $d29 = r1[2];

        r2[1] = $d29;

        $d30 = r1[1];

        r2[2] = $d30;

        $d31 = r1[3];

        r2[3] = $d31;

        $d32 = r1[3];

        $d34 = neg $d32;

        $d33 = r1[4];

        $d35 = $d34 - $d33;

        r2[4] = $d35;

        $d36 = r1[5];

        r2[5] = $d36;

        $d37 = r1[6];

        r2[6] = $d37;

        return r2;

     label3:
        $r3 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceAdjoint(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 0, d6);

        return $r3;
    }

    private double[] lowBoundPriceAdjoint(double, double, double, double, double, double, boolean, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31;
        boolean z0;
        double[] r1;
        byte $b0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        d6 := @parameter7: double;

        if z0 == 0 goto label1;

        $d29 = d0 - d1;

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>($d29, 0.0);

        goto label2;

     label1:
        $d11 = d1 - d0;

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>($d11, 0.0);

     label2:
        r1 = newarray (double)[7];

        $b0 = $d30 cmpl d6;

        if $b0 <= 0 goto label5;

        r1[0] = $d30;

        if z0 == 0 goto label3;

        $d31 = 1.0;

        goto label4;

     label3:
        $d31 = -1.0;

     label4:
        r1[1] = $d31;

        $d27 = r1[1];

        $d28 = neg $d27;

        r1[2] = $d28;

        goto label6;

     label5:
        $d12 = d3 * d4;

        d8 = staticinvoke <java.lang.Math: double exp(double)>($d12);

        d9 = d0 * d8;

        $d13 = neg d2;

        $d14 = $d13 * d4;

        d10 = staticinvoke <java.lang.Math: double exp(double)>($d14);

        r1[0] = d6;

        $d15 = d8 * d10;

        $d16 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>(d9, d1, d4, d5, z0);

        $d17 = $d15 * $d16;

        r1[1] = $d17;

        $d18 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double dualDelta(double,double,double,double,boolean)>(d9, d1, d4, d5, z0);

        $d19 = d10 * $d18;

        r1[2] = $d19;

        $d20 = neg d4;

        $d21 = $d20 * d6;

        r1[3] = $d21;

        $d22 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackScholesFormulaRepository: double carryRho(double,double,double,double,double,double,boolean)>(d0, d1, d4, d5, d2, d3, z0);

        r1[4] = $d22;

        $d23 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackScholesFormulaRepository: double theta(double,double,double,double,double,double,boolean)>(d0, d1, d4, d5, d2, d3, z0);

        $d24 = neg $d23;

        r1[5] = $d24;

        $d25 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double vega(double,double,double,double)>(d9, d1, d4, d5);

        $d26 = d10 * $d25;

        r1[6] = $d26;

     label6:
        return r1;
    }

    private double[] lowBoundPriceDeltaGamma(double, double, double, double, double, double, boolean, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24;
        boolean z0;
        double[] r1;
        byte $b0;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        z0 := @parameter6: boolean;

        d6 := @parameter7: double;

        if z0 == 0 goto label1;

        $d22 = d0 - d1;

        $d23 = staticinvoke <java.lang.Math: double max(double,double)>($d22, 0.0);

        goto label2;

     label1:
        $d11 = d1 - d0;

        $d23 = staticinvoke <java.lang.Math: double max(double,double)>($d11, 0.0);

     label2:
        r1 = newarray (double)[3];

        $b0 = $d23 cmpl d6;

        if $b0 <= 0 goto label5;

        r1[0] = $d23;

        if z0 == 0 goto label3;

        $d24 = 1.0;

        goto label4;

     label3:
        $d24 = -1.0;

     label4:
        r1[1] = $d24;

        goto label6;

     label5:
        $d12 = d3 * d4;

        d8 = staticinvoke <java.lang.Math: double exp(double)>($d12);

        d9 = d0 * d8;

        $d13 = neg d2;

        $d14 = $d13 * d4;

        d10 = staticinvoke <java.lang.Math: double exp(double)>($d14);

        r1[0] = d6;

        $d15 = d8 * d10;

        $d16 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double delta(double,double,double,double,boolean)>(d9, d1, d4, d5, z0);

        $d17 = $d15 * $d16;

        r1[1] = $d17;

        $d18 = d8 * d8;

        $d19 = $d18 * d10;

        $d20 = staticinvoke <com.opengamma.analytics.financial.model.volatility.BlackFormulaRepository: double gamma(double,double,double,double)>(d9, d1, d4, d5);

        $d21 = $d19 * $d20;

        r1[2] = $d21;

     label6:
        return r1;
    }

    protected double[] getCallDeltaGamma(double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123;
        double[] r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, $r13;
        byte $b0, $b1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        r1 = newarray (double)[3];

        $b0 = d3 cmpl d2;

        if $b0 < 0 goto label1;

        $r13 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] lowBoundPriceDeltaGamma(double,double,double,double,double,double,boolean,double)>(d0, d1, d2, d3, d4, d5, 1, d6);

        return $r13;

     label1:
        d7 = d5 * d5;

        $d46 = d3 / d7;

        d8 = 0.5 - $d46;

        $d49 = d8 * d8;

        $d47 = 2.0 * d2;

        $d48 = $d47 / d7;

        $d50 = $d49 + $d48;

        $d51 = staticinvoke <java.lang.Math: double sqrt(double)>($d50);

        d9 = d8 + $d51;

        $d53 = d2 * d1;

        $d52 = d2 - d3;

        $d54 = $d53 / $d52;

        d10 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d54);

        $d56 = d9 * d1;

        $d55 = d9 - 1.0;

        d11 = $d56 / $d55;

        d12 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getH(double,double,double,double,double,double)>(d3, d4, d5, d1, d10, d11);

        d13 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getX(double,double,double)>(d10, d11, d12);

        $b1 = d0 cmpl d13;

        if $b1 < 0 goto label2;

        $d123 = d0 - d1;

        r1[0] = $d123;

        r1[1] = 1.0;

        r1[2] = 0.0;

        return r1;

     label2:
        $d57 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d14 = $d57 * d4;

        d15 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getH(double,double,double,double,double,double)>(d3, d14, d5, d1, d10, d11);

        d16 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getX(double,double,double)>(d10, d11, d15);

        d17 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getAlpha(double,double,double)>(d16, d9, d1);

        d18 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getAlpha(double,double,double)>(d13, d9, d1);

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, d9, d13, d13, d2, d3, d5);

        r3 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, 1.0, d13, d13, d2, d3, d5);

        r4 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, 1.0, d16, d13, d2, d3, d5);

        r5 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, 0.0, d13, d13, d2, d3, d5);

        r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, 0.0, d16, d13, d2, d3, d5);

        r7 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPhiDelta(double,double,double,double,double,double,double,double)>(d0, d4, d9, d16, d13, d2, d3, d5);

        r8 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiDelta(double,double,double,double,double,double,double,double,double)>(d0, d4, d9, d16, d13, d16, d2, d3, d5);

        r9 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiDelta(double,double,double,double,double,double,double,double,double)>(d0, d4, 1.0, d16, d13, d16, d2, d3, d5);

        r10 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiDelta(double,double,double,double,double,double,double,double,double)>(d0, d4, 1.0, d1, d13, d16, d2, d3, d5);

        r11 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiDelta(double,double,double,double,double,double,double,double,double)>(d0, d4, 0.0, d16, d13, d16, d2, d3, d5);

        r12 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getPsiDelta(double,double,double,double,double,double,double,double,double)>(d0, d4, 0.0, d1, d13, d16, d2, d3, d5);

        d19 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d9);

        $d58 = d9 * d19;

        d20 = $d58 / d0;

        $d59 = d9 - 1.0;

        $d60 = d9 * $d59;

        $d61 = $d60 * d19;

        $d62 = $d61 / d0;

        d21 = $d62 / d0;

        d22 = r2[0];

        d23 = r2[1];

        d24 = r2[2];

        $d63 = d19 - d22;

        d25 = d18 * $d63;

        $d64 = d20 - d23;

        d26 = d18 * $d64;

        $d65 = d21 - d24;

        d27 = d18 * $d65;

        $d67 = r3[0];

        $d66 = r4[0];

        d28 = $d67 - $d66;

        $d69 = r3[1];

        $d68 = r4[1];

        d29 = $d69 - $d68;

        $d71 = r3[2];

        $d70 = r4[2];

        d30 = $d71 - $d70;

        $d72 = r5[0];

        $d74 = neg $d72;

        $d73 = r6[0];

        $d75 = $d74 + $d73;

        d31 = d1 * $d75;

        $d76 = r5[1];

        $d78 = neg $d76;

        $d77 = r6[1];

        $d79 = $d78 + $d77;

        d32 = d1 * $d79;

        $d80 = r5[2];

        $d82 = neg $d80;

        $d81 = r6[2];

        $d83 = $d82 + $d81;

        d33 = d1 * $d83;

        $d85 = r7[0];

        $d84 = r8[0];

        $d86 = $d85 - $d84;

        d34 = d17 * $d86;

        $d88 = r7[1];

        $d87 = r8[1];

        $d89 = $d88 - $d87;

        d35 = d17 * $d89;

        $d91 = r7[2];

        $d90 = r8[2];

        $d92 = $d91 - $d90;

        d36 = d17 * $d92;

        $d94 = r9[0];

        $d93 = r10[0];

        d37 = $d94 - $d93;

        $d96 = r9[1];

        $d95 = r10[1];

        d38 = $d96 - $d95;

        $d98 = r9[2];

        $d97 = r10[2];

        d39 = $d98 - $d97;

        $d99 = r11[0];

        $d101 = neg $d99;

        $d100 = r12[0];

        $d102 = $d101 + $d100;

        d40 = d1 * $d102;

        $d103 = r11[1];

        $d105 = neg $d103;

        $d104 = r12[1];

        $d106 = $d105 + $d104;

        d41 = d1 * $d106;

        $d107 = r11[2];

        $d109 = neg $d107;

        $d108 = r12[2];

        $d110 = $d109 + $d108;

        d42 = d1 * $d110;

        $d111 = d25 + d28;

        $d112 = $d111 + d31;

        $d113 = $d112 + d34;

        $d114 = $d113 + d37;

        d43 = $d114 + d40;

        $d115 = d26 + d29;

        $d116 = $d115 + d32;

        $d117 = $d116 + d35;

        $d118 = $d117 + d38;

        d44 = $d118 + d41;

        $d119 = d27 + d30;

        $d120 = $d119 + d33;

        $d121 = $d120 + d36;

        $d122 = $d121 + d39;

        d45 = $d122 + d42;

        r1[0] = d43;

        r1[1] = d44;

        r1[2] = d45;

        return r1;
    }

    protected double[] getPutDeltaGamma(double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, $d6, $d7;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        $d7 = d2 - d3;

        $d6 = neg d3;

        $r1 = staticinvoke <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModelDualDeltaGammaSolver: double[] getCallDualDeltaGamma(double,double,double,double,double,double)>(d1, d0, $d7, $d6, d4, d5);

        return $r1;
    }

    protected double[] getAlphaAdjoint(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        double[] r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d8 = neg d2;

        d3 = staticinvoke <java.lang.Math: double pow(double,double)>(d1, $d8);

        d4 = d1 - d0;

        d5 = d4 * d3;

        r1 = newarray (double)[4];

        r1[0] = d5;

        $d9 = neg d3;

        r1[1] = $d9;

        $d10 = d2 * d3;

        $d11 = $d10 / d1;

        $d12 = $d11 * d4;

        $d13 = d3 - $d12;

        r1[2] = $d13;

        $d14 = staticinvoke <java.lang.Math: double log(double)>(d1);

        $d15 = neg $d14;

        $d16 = $d15 * d5;

        r1[3] = $d16;

        return r1;
    }

    protected double[] getLambdaAdjoint(double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        double[] r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        r1 = newarray (double)[5];

        $d6 = 0.5 * d0;

        $d5 = d0 - 1.0;

        d4 = $d6 * $d5;

        $d8 = neg d1;

        $d7 = d0 * d2;

        $d10 = $d8 + $d7;

        $d9 = d4 * d3;

        $d11 = $d10 + $d9;

        r1[0] = $d11;

        $d12 = d0 - 0.5;

        $d13 = $d12 * d3;

        $d14 = d2 + $d13;

        r1[1] = $d14;

        r1[2] = -1.0;

        r1[3] = d0;

        r1[4] = d4;

        return r1;
    }

    protected double[] getKappaAdjoint(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        double[] r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 = newarray (double)[4];

        $d4 = 2.0 * d1;

        d3 = $d4 / d2;

        $d5 = 2.0 * d0;

        $d6 = d3 + $d5;

        $d7 = $d6 - 1.0;

        r1[0] = $d7;

        r1[1] = 2.0;

        $d8 = 2.0 / d2;

        r1[2] = $d8;

        $d9 = neg d3;

        $d10 = $d9 / d2;

        r1[3] = $d10;

        return r1;
    }

    protected double[] getPhiAdjoint(double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d32, d33, d34, d35, d38, d39, d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135;
        double[] r1, r2, r3;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r4, $r6, $r8, $r10;
        java.lang.Double $r5, $r7, $r9, $r11;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        $d41 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d8 = $d41 * d1;

        d9 = d7 * d7;

        $d42 = staticinvoke <java.lang.Math: double sqrt(double)>(d8);

        d10 = d7 * $d42;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getLambdaAdjoint(double,double,double,double)>(d2, d5, d6, d9);

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getKappaAdjoint(double,double,double)>(d2, d6, d9);

        $d43 = d2 - 0.5;

        $d44 = $d43 * d9;

        d11 = d6 + $d44;

        d12 = d11 * d8;

        $d45 = d0 / d3;

        d13 = staticinvoke <java.lang.Math: double log(double)>($d45);

        $d46 = d4 * d4;

        $d47 = $d46 / d0;

        $d48 = $d47 / d3;

        d14 = staticinvoke <java.lang.Math: double log(double)>($d48);

        d15 = d13 + d12;

        d16 = d14 + d12;

        d17 = d15 / d10;

        d18 = d16 / d10;

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d49 = neg d17;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d49);

        d19 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r5);

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d50 = neg d18;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d50);

        d20 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r7);

        $d52 = d4 / d0;

        $d51 = r2[0];

        d21 = staticinvoke <java.lang.Math: double pow(double,double)>($d52, $d51);

        $d53 = r1[0];

        $d54 = $d53 * d8;

        d22 = staticinvoke <java.lang.Math: double exp(double)>($d54);

        d23 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d55 = d21 * d20;

        d24 = d19 - $d55;

        $d56 = d22 * d23;

        d25 = $d56 * d24;

        d26 = d22 * d23;

        d27 = d22 * d24;

        d28 = d23 * d24;

        $d57 = neg d20;

        d29 = $d57 * d26;

        $d58 = neg d21;

        d30 = $d58 * d26;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d18);

        $d59 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d60 = neg $d59;

        d32 = $d60 * d30;

        $r10 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d17);

        $d61 = interfaceinvoke $r10.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r11);

        $d62 = neg $d61;

        d33 = $d62 * d26;

        $d63 = 1.0 / d10;

        d34 = $d63 * d32;

        $d64 = 1.0 / d10;

        d35 = $d64 * d33;

        d38 = d35 + d34;

        r3 = newarray (double)[9];

        d39 = d8 * d25;

        $d65 = d4 / d0;

        $d66 = staticinvoke <java.lang.Math: double log(double)>($d65);

        $d67 = $d66 * d21;

        d40 = $d67 * d29;

        r3[0] = d25;

        $d68 = d2 * d23;

        $d72 = $d68 * d27;

        $d69 = r2[0];

        $d70 = $d69 * d21;

        $d71 = $d70 * d29;

        $d73 = $d72 - $d71;

        $d74 = $d73 - d34;

        $d75 = $d74 + d35;

        $d76 = $d75 / d0;

        r3[1] = $d76;

        $d88 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        $d80 = d11 * d38;

        $d77 = r1[0];

        $d78 = $d77 * d22;

        $d79 = $d78 * d28;

        $d86 = $d80 + $d79;

        $d84 = 0.5 / d8;

        $d82 = d18 * d32;

        $d81 = d17 * d33;

        $d83 = $d82 + $d81;

        $d85 = $d84 * $d83;

        $d87 = $d86 - $d85;

        $d89 = $d88 * $d87;

        r3[2] = $d89;

        $d90 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d91 = $d90 * d23;

        $d94 = $d91 * d27;

        $d92 = d9 * d8;

        $d93 = $d92 * d38;

        $d97 = $d94 + $d93;

        $d95 = r1[1];

        $d96 = $d95 * d39;

        $d100 = $d97 + $d96;

        $d98 = r2[1];

        $d99 = $d98 * d40;

        $d101 = $d100 + $d99;

        r3[3] = $d101;

        $d102 = d35 + d34;

        $d103 = neg $d102;

        $d104 = $d103 / d3;

        r3[4] = $d104;

        $d108 = 2.0 * d34;

        $d105 = r2[0];

        $d106 = $d105 * d21;

        $d107 = $d106 * d29;

        $d109 = $d108 + $d107;

        $d110 = $d109 / d4;

        r3[5] = $d110;

        $d111 = r1[2];

        $d112 = $d111 * d39;

        r3[6] = $d112;

        $d115 = d8 * d38;

        $d113 = r1[3];

        $d114 = $d113 * d39;

        $d118 = $d115 + $d114;

        $d116 = r2[2];

        $d117 = $d116 * d40;

        $d119 = $d118 + $d117;

        r3[7] = $d119;

        $d129 = 2.0 * d7;

        $d120 = d2 - 0.5;

        $d121 = $d120 * d8;

        $d124 = $d121 * d38;

        $d122 = r1[4];

        $d123 = $d122 * d39;

        $d127 = $d124 + $d123;

        $d125 = r2[3];

        $d126 = $d125 * d40;

        $d128 = $d127 + $d126;

        $d134 = $d129 * $d128;

        $d131 = d17 * d33;

        $d130 = d18 * d32;

        $d132 = $d131 + $d130;

        $d133 = $d132 / d7;

        $d135 = $d134 - $d133;

        r3[8] = $d135;

        return r3;
    }

    protected double[] getPhiDelta(double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d24, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116;
        double[] r1;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r2, $r4, $r6, $r8;
        java.lang.Double $r3, $r5, $r7, $r9;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        $d54 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d8 = $d54 * d1;

        d9 = d7 * d7;

        $d55 = staticinvoke <java.lang.Math: double sqrt(double)>(d8);

        d10 = d7 * $d55;

        $d57 = neg d5;

        $d56 = d2 * d6;

        $d62 = $d57 + $d56;

        $d59 = 0.5 * d2;

        $d58 = d2 - 1.0;

        $d60 = $d59 * $d58;

        $d61 = $d60 * d9;

        d11 = $d62 + $d61;

        $d63 = 2.0 * d6;

        $d65 = $d63 / d9;

        $d64 = 2.0 * d2;

        $d66 = $d65 + $d64;

        d12 = $d66 - 1.0;

        $d67 = d2 - 0.5;

        $d68 = $d67 * d9;

        d13 = d6 + $d68;

        d14 = d13 * d8;

        $d69 = d0 / d3;

        d15 = staticinvoke <java.lang.Math: double log(double)>($d69);

        d16 = 1.0 / d0;

        $d70 = neg d16;

        d17 = $d70 * d16;

        $d71 = d4 * d4;

        $d72 = $d71 / d0;

        $d73 = $d72 / d3;

        d18 = staticinvoke <java.lang.Math: double log(double)>($d73);

        d19 = neg d16;

        d20 = neg d17;

        d21 = d15 + d14;

        d24 = d18 + d14;

        d27 = d21 / d10;

        d28 = d16 / d10;

        d29 = d17 / d10;

        d30 = d24 / d10;

        d31 = d19 / d10;

        d32 = d20 / d10;

        $r2 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d74 = neg d27;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d74);

        d33 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r3);

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d27);

        d34 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r5);

        $d75 = neg d34;

        d35 = $d75 * d28;

        $d76 = d27 * d28;

        $d77 = $d76 * d28;

        $d78 = $d77 - d29;

        d36 = d34 * $d78;

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d79 = neg d30;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d79);

        d37 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r7);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d30);

        d38 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $d80 = neg d38;

        d39 = $d80 * d31;

        $d81 = d30 * d31;

        $d82 = $d81 * d31;

        $d83 = $d82 - d32;

        d40 = d38 * $d83;

        $d84 = d4 / d0;

        d41 = staticinvoke <java.lang.Math: double pow(double,double)>($d84, d12);

        $d85 = neg d12;

        $d86 = $d85 * d41;

        d42 = $d86 / d0;

        $d87 = d12 + 1.0;

        $d88 = d12 * $d87;

        $d89 = $d88 * d41;

        $d90 = $d89 / d0;

        d43 = $d90 / d0;

        $d91 = d11 * d8;

        d44 = staticinvoke <java.lang.Math: double exp(double)>($d91);

        d45 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d92 = d2 * d45;

        d46 = $d92 / d0;

        $d93 = d2 - 1.0;

        $d94 = d2 * $d93;

        $d95 = $d94 * d45;

        $d96 = $d95 / d0;

        d47 = $d96 / d0;

        $d97 = d41 * d37;

        d48 = d33 - $d97;

        $d98 = d37 * d42;

        $d100 = d35 - $d98;

        $d99 = d41 * d39;

        d49 = $d100 - $d99;

        $d101 = d41 * d40;

        $d103 = d36 - $d101;

        $d102 = d37 * d43;

        $d106 = $d103 - $d102;

        $d104 = 2.0 * d39;

        $d105 = $d104 * d42;

        d50 = $d106 - $d105;

        $d107 = d44 * d45;

        d51 = $d107 * d48;

        $d109 = d45 * d49;

        $d108 = d46 * d48;

        $d110 = $d109 + $d108;

        d52 = d44 * $d110;

        $d112 = d45 * d50;

        $d111 = d48 * d47;

        $d115 = $d112 + $d111;

        $d113 = 2.0 * d46;

        $d114 = $d113 * d49;

        $d116 = $d115 + $d114;

        d53 = d44 * $d116;

        r1 = newarray (double)[3];

        r1[0] = d51;

        r1[1] = d52;

        r1[2] = d53;

        return r1;
    }

    protected double[] getPsiAdjoint(double, double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d43, d44, d45, d46, d48, d49, d50, d51, d52, d53, d54, d55, d56, d57, d58, d59, d60, d61, d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267, $d268, $d269, $d270, $d271, $d272, $d273, $d274, $d275, $d276, $d277, $d278, $d279, $d280, $d281, $d282, $d283, $d284, $d285, $d286, $d287, $d288, $d289, $d290, $d291, $d292, $d293, $d294, $d295, $d296, $d297, $d298, $d299, $d300, $d301, $d302, $d303, $d304, $d305, $d306, $d307, $d308, $d309, $d310, $d311, $d312, $d313, $d314, $d315, $d316, $d317, $d318, $d319, $d320, $d321, $d322, $d323, $d324, $d325, $d326, $d327, $d328, $d329, $d330, $d331, $d332, $d333, $d334, $d335, $d336, $d337, $d338, $d339, $d340, $d341, $d342, $d343, $d344, $d345, $d346, $d347, $d348, $d349, $d350, $d351, $d352;
        double[] r1, r2, r3, $r4, $r6, $r8, $r10;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r5, $r7, $r9, $r11, $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r40, $r42;
        java.lang.Double $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        d8 := @parameter8: double;

        d9 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        d10 = d8 * d9;

        $d72 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d11 = $d72 * d1;

        $d73 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        d12 = $d73 * d9;

        d13 = d8 * d12;

        d14 = d8 * d8;

        r1 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getLambdaAdjoint(double,double,double,double)>(d2, d6, d7, d14);

        r2 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getKappaAdjoint(double,double,double)>(d2, d7, d14);

        $d74 = d2 - 0.5;

        $d75 = $d74 * d14;

        d15 = d7 + $d75;

        $d76 = d0 / d5;

        d16 = staticinvoke <java.lang.Math: double log(double)>($d76);

        $d77 = d0 / d3;

        d17 = staticinvoke <java.lang.Math: double log(double)>($d77);

        $d78 = d4 * d4;

        $d79 = $d78 / d0;

        $d80 = $d79 / d5;

        d18 = staticinvoke <java.lang.Math: double log(double)>($d80);

        $d81 = d5 * d5;

        $d82 = $d81 / d0;

        $d83 = $d82 / d3;

        d19 = staticinvoke <java.lang.Math: double log(double)>($d83);

        $d84 = d4 * d4;

        $d85 = $d84 / d0;

        $d86 = $d85 / d3;

        d20 = staticinvoke <java.lang.Math: double log(double)>($d86);

        $d87 = d0 * d5;

        $d88 = $d87 * d5;

        $d89 = $d88 / d3;

        $d90 = $d89 / d4;

        $d91 = $d90 / d4;

        d21 = staticinvoke <java.lang.Math: double log(double)>($d91);

        d22 = d15 * d11;

        d23 = d15 * d1;

        $d92 = r1[0];

        $d93 = $d92 * d1;

        d24 = staticinvoke <java.lang.Math: double exp(double)>($d93);

        d25 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d95 = d4 / d0;

        $d94 = r2[0];

        d26 = staticinvoke <java.lang.Math: double pow(double,double)>($d95, $d94);

        $d97 = d5 / d0;

        $d96 = r2[0];

        d27 = staticinvoke <java.lang.Math: double pow(double,double)>($d97, $d96);

        $d99 = d5 / d4;

        $d98 = r2[0];

        d28 = staticinvoke <java.lang.Math: double pow(double,double)>($d99, $d98);

        $d100 = d16 + d22;

        d29 = $d100 / d13;

        $d101 = d18 + d22;

        d30 = $d101 / d13;

        $d102 = d16 - d22;

        d31 = $d102 / d13;

        $d103 = d18 - d22;

        d32 = $d103 / d13;

        $d104 = d17 + d23;

        d33 = $d104 / d10;

        $d105 = d20 + d23;

        d34 = $d105 / d10;

        $d106 = d19 + d23;

        d35 = $d106 / d10;

        $d107 = d21 + d23;

        d36 = $d107 / d10;

        $r5 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r4 = newarray (double)[3];

        $d108 = neg d29;

        $r4[0] = $d108;

        $d109 = neg d33;

        $r4[1] = $d109;

        $d110 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $r4[2] = $d110;

        d37 = interfaceinvoke $r5.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r4);

        $r7 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r6 = newarray (double)[3];

        $d111 = neg d30;

        $r6[0] = $d111;

        $d112 = neg d34;

        $r6[1] = $d112;

        $d113 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $r6[2] = $d113;

        d38 = interfaceinvoke $r7.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r6);

        $r9 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r8 = newarray (double)[3];

        $d114 = neg d31;

        $r8[0] = $d114;

        $d115 = neg d35;

        $r8[1] = $d115;

        $d116 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d117 = neg $d116;

        $r8[2] = $d117;

        d39 = interfaceinvoke $r9.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r8);

        $r11 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r10 = newarray (double)[3];

        $d118 = neg d32;

        $r10[0] = $d118;

        $d119 = neg d36;

        $r10[1] = $d119;

        $d120 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d121 = neg $d120;

        $r10[2] = $d121;

        d40 = interfaceinvoke $r11.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r10);

        $d122 = d26 * d38;

        $d124 = d37 - $d122;

        $d123 = d27 * d39;

        $d126 = $d124 - $d123;

        $d125 = d28 * d40;

        d41 = $d126 + $d125;

        $d127 = d24 * d25;

        d42 = $d127 * d41;

        d43 = d24 * d25;

        d44 = d28 * d43;

        $d128 = neg d27;

        d45 = $d128 * d43;

        $d129 = neg d26;

        d46 = $d129 * d43;

        $r12 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d36);

        $d130 = interfaceinvoke $r12.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r13);

        $d137 = neg $d130;

        $r14 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d131 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d132 = $d131 * d36;

        $d133 = d32 + $d132;

        $d135 = neg $d133;

        $d134 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d136 = $d135 / $d134;

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d136);

        $d138 = interfaceinvoke $r14.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r15);

        $d139 = $d137 * $d138;

        d48 = $d139 * d44;

        $r16 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d35);

        $d140 = interfaceinvoke $r16.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r17);

        $d147 = neg $d140;

        $r18 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d141 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d142 = $d141 * d35;

        $d143 = d31 + $d142;

        $d145 = neg $d143;

        $d144 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d146 = $d145 / $d144;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d146);

        $d148 = interfaceinvoke $r18.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r19);

        $d149 = $d147 * $d148;

        d49 = $d149 * d45;

        $r20 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r21 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d34);

        $d150 = interfaceinvoke $r20.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r21);

        $d157 = neg $d150;

        $r22 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d151 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d152 = $d151 * d34;

        $d153 = d30 - $d152;

        $d155 = neg $d153;

        $d154 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d156 = $d155 / $d154;

        $r23 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d156);

        $d158 = interfaceinvoke $r22.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r23);

        $d159 = $d157 * $d158;

        d50 = $d159 * d46;

        $r24 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d33);

        $d160 = interfaceinvoke $r24.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r25);

        $d167 = neg $d160;

        $r26 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d161 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d162 = $d161 * d33;

        $d163 = d29 - $d162;

        $d165 = neg $d163;

        $d164 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d166 = $d165 / $d164;

        $r27 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d166);

        $d168 = interfaceinvoke $r26.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r27);

        $d169 = $d167 * $d168;

        d51 = $d169 * d43;

        $r28 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r29 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d32);

        $d170 = interfaceinvoke $r28.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r29);

        $d177 = neg $d170;

        $r30 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d171 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d172 = $d171 * d32;

        $d173 = d36 + $d172;

        $d175 = neg $d173;

        $d174 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d176 = $d175 / $d174;

        $r31 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d176);

        $d178 = interfaceinvoke $r30.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r31);

        $d179 = $d177 * $d178;

        d52 = $d179 * d44;

        $r32 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d31);

        $d180 = interfaceinvoke $r32.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r33);

        $d187 = neg $d180;

        $r34 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d181 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d182 = $d181 * d31;

        $d183 = d35 + $d182;

        $d185 = neg $d183;

        $d184 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d186 = $d185 / $d184;

        $r35 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d186);

        $d188 = interfaceinvoke $r34.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r35);

        $d189 = $d187 * $d188;

        d53 = $d189 * d45;

        $r36 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r37 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d30);

        $d190 = interfaceinvoke $r36.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r37);

        $d197 = neg $d190;

        $r38 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d191 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d192 = $d191 * d30;

        $d193 = d34 - $d192;

        $d195 = neg $d193;

        $d194 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d196 = $d195 / $d194;

        $r39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d196);

        $d198 = interfaceinvoke $r38.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r39);

        $d199 = $d197 * $d198;

        d54 = $d199 * d46;

        $r40 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r41 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d29);

        $d200 = interfaceinvoke $r40.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r41);

        $d207 = neg $d200;

        $r42 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $d201 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d202 = $d201 * d29;

        $d203 = d33 - $d202;

        $d205 = neg $d203;

        $d204 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d206 = $d205 / $d204;

        $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d206);

        $d208 = interfaceinvoke $r42.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r43);

        $d209 = $d207 * $d208;

        d55 = $d209 * d43;

        d56 = d40 * d43;

        $d210 = neg d39;

        d57 = $d210 * d43;

        $d211 = neg d38;

        d58 = $d211 * d43;

        d59 = d24 * d41;

        d60 = d25 * d41;

        $d212 = d51 + d50;

        $d213 = $d212 + d49;

        $d214 = $d213 + d48;

        d61 = $d214 / d10;

        $d215 = d55 + d54;

        $d216 = $d215 - d53;

        $d217 = $d216 - d52;

        d62 = $d217 / d13;

        d63 = d48 / d10;

        d64 = d50 / d10;

        d65 = d49 / d10;

        $d218 = d54 + d52;

        d66 = $d218 / d13;

        d67 = d51 / d10;

        $d219 = d55 + d53;

        d68 = $d219 / d13;

        $d221 = d1 * d61;

        $d220 = d11 * d62;

        d69 = $d221 + $d220;

        $d222 = d5 / d4;

        $d223 = staticinvoke <java.lang.Math: double log(double)>($d222);

        $d224 = $d223 * d28;

        $d226 = $d224 * d56;

        $d225 = d5 / d0;

        $d227 = staticinvoke <java.lang.Math: double log(double)>($d225);

        $d228 = $d227 * d27;

        $d229 = $d228 * d57;

        $d231 = $d226 + $d229;

        $d230 = d4 / d0;

        $d232 = staticinvoke <java.lang.Math: double log(double)>($d230);

        $d233 = $d232 * d26;

        $d234 = $d233 * d58;

        d70 = $d231 + $d234;

        $d235 = d1 * d24;

        d71 = $d235 * d60;

        r3 = newarray (double)[10];

        r3[0] = d42;

        $d236 = r2[0];

        $d240 = neg $d236;

        $d238 = d27 * d57;

        $d237 = d26 * d58;

        $d239 = $d238 + $d237;

        $d243 = $d240 * $d239;

        $d241 = d2 * d25;

        $d242 = $d241 * d59;

        $d244 = $d243 + $d242;

        $d245 = $d244 + d63;

        $d246 = $d245 - d64;

        $d247 = $d246 - d65;

        $d248 = $d247 - d66;

        $d249 = $d248 + d67;

        $d250 = $d249 + d68;

        $d251 = $d250 / d0;

        r3[1] = $d251;

        $d252 = r1[0];

        $d253 = $d252 * d24;

        $d258 = $d253 * d60;

        $d254 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        $d255 = $d254 * d62;

        $d256 = $d255 + d61;

        $d257 = d15 * $d256;

        $d276 = $d258 + $d257;

        $d260 = d36 * d48;

        $d259 = d35 * d49;

        $d262 = $d260 + $d259;

        $d261 = d34 * d50;

        $d264 = $d262 + $d261;

        $d263 = d33 * d51;

        $d266 = $d264 + $d263;

        $d265 = d32 * d52;

        $d268 = $d266 + $d265;

        $d267 = d31 * d53;

        $d270 = $d268 + $d267;

        $d269 = d30 * d54;

        $d272 = $d270 + $d269;

        $d271 = d29 * d55;

        $d273 = $d272 + $d271;

        $d274 = 0.5 * $d273;

        $d275 = $d274 / d1;

        $d277 = $d276 - $d275;

        r3[2] = $d277;

        $d278 = d14 * d69;

        $d279 = staticinvoke <java.lang.Math: double log(double)>(d0);

        $d280 = $d279 * d25;

        $d281 = $d280 * d59;

        $d284 = $d278 + $d281;

        $d282 = r1[1];

        $d283 = $d282 * d71;

        $d287 = $d284 + $d283;

        $d285 = r2[1];

        $d286 = $d285 * d70;

        $d288 = $d287 + $d286;

        r3[3] = $d288;

        $d289 = neg d63;

        $d290 = $d289 - d64;

        $d291 = $d290 - d65;

        $d292 = $d291 - d67;

        $d293 = $d292 / d3;

        r3[4] = $d293;

        $d298 = r2[0];

        $d294 = neg d28;

        $d296 = $d294 * d56;

        $d295 = d26 * d58;

        $d297 = $d296 + $d295;

        $d303 = $d298 * $d297;

        $d299 = neg d63;

        $d300 = $d299 + d64;

        $d301 = $d300 + d66;

        $d302 = 2.0 * $d301;

        $d304 = $d303 + $d302;

        $d305 = $d304 / d4;

        r3[5] = $d305;

        $d309 = r2[0];

        $d307 = d28 * d56;

        $d306 = d27 * d57;

        $d308 = $d307 + $d306;

        $d312 = $d309 * $d308;

        $d310 = d63 + d65;

        $d311 = 2.0 * $d310;

        $d313 = $d312 + $d311;

        $d314 = $d313 - d66;

        $d315 = $d314 - d68;

        $d316 = $d315 / d5;

        r3[6] = $d316;

        $d317 = r1[2];

        $d318 = $d317 * d71;

        r3[7] = $d318;

        $d319 = r1[3];

        $d320 = $d319 * d71;

        $d323 = d69 + $d320;

        $d321 = r2[2];

        $d322 = $d321 * d70;

        $d324 = $d323 + $d322;

        r3[8] = $d324;

        $d326 = d36 * d48;

        $d325 = d35 * d49;

        $d328 = $d326 + $d325;

        $d327 = d34 * d50;

        $d330 = $d328 + $d327;

        $d329 = d33 * d51;

        $d332 = $d330 + $d329;

        $d331 = d32 * d52;

        $d334 = $d332 + $d331;

        $d333 = d31 * d53;

        $d336 = $d334 + $d333;

        $d335 = d30 * d54;

        $d338 = $d336 + $d335;

        $d337 = d29 * d55;

        $d339 = $d338 + $d337;

        $d340 = neg $d339;

        $d351 = $d340 / d8;

        $d349 = 2.0 * d8;

        $d341 = d2 - 0.5;

        $d344 = $d341 * d69;

        $d342 = r1[4];

        $d343 = $d342 * d71;

        $d347 = $d344 + $d343;

        $d345 = r2[3];

        $d346 = $d345 * d70;

        $d348 = $d347 + $d346;

        $d350 = $d349 * $d348;

        $d352 = $d351 + $d350;

        r3[9] = $d352;

        return r3;
    }

    protected double[] getPsiDelta(double, double, double, double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d25, d26, d27, d28, d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40, d41, d42, d44, d46, d47, d48, d50, d52, d53, d54, d55, d56, d58, d60, d61, d63, d64, d65, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, $d200, $d201, $d202, $d203, $d204, $d205, $d206, $d207, $d208, $d209, $d210, $d211, $d212, $d213, $d214, $d215, $d216, $d217, $d218, $d219, $d220, $d221, $d222, $d223, $d224, $d225, $d226, $d227, $d228, $d229, $d230, $d231, $d232, $d233, $d234, $d235, $d236, $d237, $d238, $d239, $d240, $d241, $d242, $d243, $d244, $d245, $d246, $d247, $d248, $d249, $d250, $d251, $d252, $d253, $d254, $d255, $d256, $d257, $d258, $d259, $d260, $d261, $d262, $d263, $d264, $d265, $d266, $d267;
        double[] $r1, $r3, $r5, $r7, $r9, r10, r11, r12, r13;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r2, $r4, $r6, $r8;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 := @parameter6: double;

        d7 := @parameter7: double;

        d8 := @parameter8: double;

        d9 = staticinvoke <java.lang.Math: double sqrt(double)>(d1);

        d10 = d8 * d9;

        $d85 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        d11 = $d85 * d1;

        $d86 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        d12 = $d86 * d9;

        d13 = d8 * d12;

        d14 = d8 * d8;

        d15 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getLambda(double,double,double,double)>(d2, d6, d7, d14);

        d16 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double getKappa(double,double,double)>(d2, d7, d14);

        d17 = 1.0 / d0;

        d18 = d17 * d17;

        $d87 = d2 - 0.5;

        $d88 = $d87 * d14;

        d19 = d7 + $d88;

        $d89 = d0 / d5;

        d20 = staticinvoke <java.lang.Math: double log(double)>($d89);

        $d90 = d0 / d3;

        d21 = staticinvoke <java.lang.Math: double log(double)>($d90);

        $d91 = d4 * d4;

        $d92 = $d91 / d0;

        $d93 = $d92 / d5;

        d22 = staticinvoke <java.lang.Math: double log(double)>($d93);

        $d94 = d5 * d5;

        $d95 = $d94 / d0;

        $d96 = $d95 / d3;

        d23 = staticinvoke <java.lang.Math: double log(double)>($d96);

        $d97 = d4 * d4;

        $d98 = $d97 / d0;

        $d99 = $d98 / d3;

        d24 = staticinvoke <java.lang.Math: double log(double)>($d99);

        $d100 = d0 * d5;

        $d101 = $d100 * d5;

        $d102 = $d101 / d3;

        $d103 = $d102 / d4;

        $d104 = $d103 / d4;

        d25 = staticinvoke <java.lang.Math: double log(double)>($d104);

        d26 = d19 * d11;

        d27 = d19 * d1;

        $d105 = d15 * d1;

        d28 = staticinvoke <java.lang.Math: double exp(double)>($d105);

        d29 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, d2);

        $d106 = d2 * d29;

        d30 = $d106 * d17;

        $d107 = d2 - 1.0;

        $d108 = d2 * $d107;

        $d109 = $d108 * d29;

        d31 = $d109 * d18;

        $d110 = d4 / d0;

        d32 = staticinvoke <java.lang.Math: double pow(double,double)>($d110, d16);

        $d111 = neg d16;

        $d112 = $d111 * d32;

        d33 = $d112 * d17;

        $d113 = d16 + 1.0;

        $d114 = d16 * $d113;

        $d115 = $d114 * d32;

        d34 = $d115 * d18;

        $d116 = d5 / d0;

        d35 = staticinvoke <java.lang.Math: double pow(double,double)>($d116, d16);

        $d117 = neg d16;

        $d118 = $d117 * d35;

        d36 = $d118 * d17;

        $d119 = d16 + 1.0;

        $d120 = d16 * $d119;

        $d121 = $d120 * d35;

        d37 = $d121 * d18;

        $d122 = d5 / d4;

        d38 = staticinvoke <java.lang.Math: double pow(double,double)>($d122, d16);

        d39 = d17 / d13;

        d40 = d39 * d17;

        $d123 = d20 + d26;

        $d124 = neg $d123;

        d41 = $d124 / d13;

        d42 = neg d39;

        $d125 = d22 + d26;

        $d126 = neg $d125;

        d44 = $d126 / d13;

        d46 = neg d40;

        $d127 = d20 - d26;

        $d128 = neg $d127;

        d47 = $d128 / d13;

        d48 = neg d39;

        $d129 = d22 - d26;

        $d130 = neg $d129;

        d50 = $d130 / d13;

        d52 = neg d40;

        d53 = d17 / d10;

        d54 = d53 * d17;

        $d131 = d21 + d27;

        $d132 = neg $d131;

        d55 = $d132 / d10;

        d56 = neg d53;

        $d133 = d24 + d27;

        $d134 = neg $d133;

        d58 = $d134 / d10;

        d60 = neg d54;

        $d135 = d23 + d27;

        $d136 = neg $d135;

        d61 = $d136 / d10;

        d63 = neg d54;

        $d137 = d25 + d27;

        $d138 = neg $d137;

        d64 = $d138 / d10;

        d65 = neg d53;

        $r2 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r1 = newarray (double)[3];

        $r1[0] = d41;

        $r1[1] = d55;

        $d139 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $r1[2] = $d139;

        d67 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r1);

        r10 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] bivariateNormDiv(double,double,boolean)>(d41, d55, 1);

        $d140 = r10[0];

        $d143 = $d140 * d42;

        $d141 = r10[1];

        $d142 = $d141 * d56;

        d68 = $d143 + $d142;

        $d144 = r10[0];

        $d147 = $d144 * d40;

        $d145 = r10[1];

        $d146 = $d145 * d54;

        $d151 = $d147 + $d146;

        $d148 = r10[2];

        $d149 = $d148 * d42;

        $d150 = $d149 * d42;

        $d155 = $d151 + $d150;

        $d152 = r10[3];

        $d153 = $d152 * d56;

        $d154 = $d153 * d56;

        $d160 = $d155 + $d154;

        $d156 = r10[4];

        $d157 = 2.0 * $d156;

        $d158 = $d157 * d42;

        $d159 = $d158 * d56;

        d69 = $d160 + $d159;

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r3 = newarray (double)[3];

        $r3[0] = d44;

        $r3[1] = d58;

        $d161 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $r3[2] = $d161;

        d70 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r3);

        r11 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] bivariateNormDiv(double,double,boolean)>(d44, d58, 1);

        $d162 = r11[0];

        $d165 = $d162 * d39;

        $d163 = r11[1];

        $d164 = $d163 * d53;

        d71 = $d165 + $d164;

        $d166 = r11[0];

        $d169 = $d166 * d46;

        $d167 = r11[1];

        $d168 = $d167 * d60;

        $d173 = $d169 + $d168;

        $d170 = r11[2];

        $d171 = $d170 * d39;

        $d172 = $d171 * d39;

        $d177 = $d173 + $d172;

        $d174 = r11[3];

        $d175 = $d174 * d53;

        $d176 = $d175 * d53;

        $d182 = $d177 + $d176;

        $d178 = r11[4];

        $d179 = 2.0 * $d178;

        $d180 = $d179 * d39;

        $d181 = $d180 * d53;

        d72 = $d182 + $d181;

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r5 = newarray (double)[3];

        $r5[0] = d47;

        $r5[1] = d61;

        $d183 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d184 = neg $d183;

        $r5[2] = $d184;

        d73 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r5);

        r12 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] bivariateNormDiv(double,double,boolean)>(d47, d61, 0);

        $d185 = r12[0];

        $d188 = $d185 * d48;

        $d186 = r12[1];

        $d187 = $d186 * d53;

        d74 = $d188 + $d187;

        $d189 = r12[0];

        $d192 = $d189 * d40;

        $d190 = r12[1];

        $d191 = $d190 * d63;

        $d196 = $d192 + $d191;

        $d193 = r12[2];

        $d194 = $d193 * d48;

        $d195 = $d194 * d48;

        $d200 = $d196 + $d195;

        $d197 = r12[3];

        $d198 = $d197 * d53;

        $d199 = $d198 * d53;

        $d205 = $d200 + $d199;

        $d201 = r12[4];

        $d202 = 2.0 * $d201;

        $d203 = $d202 * d48;

        $d204 = $d203 * d53;

        d75 = $d205 + $d204;

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL>;

        $r7 = newarray (double)[3];

        $r7[0] = d50;

        $r7[1] = d64;

        $d206 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d207 = neg $d206;

        $r7[2] = $d207;

        d76 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r7);

        r13 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] bivariateNormDiv(double,double,boolean)>(d50, d64, 0);

        $d208 = r13[0];

        $d211 = $d208 * d39;

        $d209 = r13[1];

        $d210 = $d209 * d65;

        d77 = $d211 + $d210;

        $d212 = r13[0];

        $d215 = $d212 * d52;

        $d213 = r13[1];

        $d214 = $d213 * d54;

        $d219 = $d215 + $d214;

        $d216 = r13[2];

        $d217 = $d216 * d39;

        $d218 = $d217 * d39;

        $d223 = $d219 + $d218;

        $d220 = r13[3];

        $d221 = $d220 * d65;

        $d222 = $d221 * d65;

        $d228 = $d223 + $d222;

        $d224 = r13[4];

        $d225 = 2.0 * $d224;

        $d226 = $d225 * d39;

        $d227 = $d226 * d65;

        d78 = $d228 + $d227;

        $d229 = d32 * d70;

        $d231 = d67 - $d229;

        $d230 = d35 * d73;

        $d233 = $d231 - $d230;

        $d232 = d38 * d76;

        d79 = $d233 + $d232;

        $d234 = d32 * d71;

        $d236 = d68 - $d234;

        $d235 = d70 * d33;

        $d238 = $d236 - $d235;

        $d237 = d35 * d74;

        $d240 = $d238 - $d237;

        $d239 = d73 * d36;

        $d242 = $d240 - $d239;

        $d241 = d38 * d77;

        d80 = $d242 + $d241;

        $d243 = d32 * d72;

        $d245 = d69 - $d243;

        $d244 = d70 * d34;

        $d248 = $d245 - $d244;

        $d246 = 2.0 * d33;

        $d247 = $d246 * d71;

        $d250 = $d248 - $d247;

        $d249 = d35 * d75;

        $d252 = $d250 - $d249;

        $d251 = d73 * d37;

        $d255 = $d252 - $d251;

        $d253 = 2.0 * d36;

        $d254 = $d253 * d74;

        $d257 = $d255 - $d254;

        $d256 = d38 * d78;

        d81 = $d257 + $d256;

        $d258 = d28 * d29;

        d82 = $d258 * d79;

        $d260 = d79 * d30;

        $d259 = d29 * d80;

        $d261 = $d260 + $d259;

        d83 = d28 * $d261;

        $d263 = d79 * d31;

        $d262 = d29 * d81;

        $d266 = $d263 + $d262;

        $d264 = 2.0 * d30;

        $d265 = $d264 * d80;

        $d267 = $d266 + $d265;

        d84 = d28 * $d267;

        $r9 = newarray (double)[3];

        $r9[0] = d82;

        $r9[1] = d83;

        $r9[2] = d84;

        return $r9;
    }

    protected double[] bivariateNormDiv(double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d3, d4, d5, d6, d7, d8, d9, d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37;
        boolean z0;
        double[] r1;
        com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution $r2, $r4, $r6, $r8, $r10, $r12;
        java.lang.Double $r3, $r5, $r7, $r9, $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $d37 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        goto label2;

     label1:
        $d11 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO>;

        $d37 = neg $d11;

     label2:
        $r2 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        d3 = interfaceinvoke $r2.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r3);

        $r4 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        d4 = interfaceinvoke $r4.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r5);

        $d12 = $d37 * d0;

        $d14 = d1 - $d12;

        $d13 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        d5 = $d14 / $d13;

        $d15 = $d37 * d1;

        $d17 = d0 - $d15;

        $d16 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        d6 = $d17 / $d16;

        $r6 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        d7 = interfaceinvoke $r6.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r7);

        $r8 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        d8 = interfaceinvoke $r8.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getPDF(java.lang.Object)>($r9);

        $r10 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d5);

        d9 = interfaceinvoke $r10.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r11);

        $r12 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL>;

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d6);

        d10 = interfaceinvoke $r12.<com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution: double getCDF(java.lang.Object)>($r13);

        r1 = newarray (double)[5];

        $d18 = d3 * d9;

        r1[0] = $d18;

        $d19 = d4 * d10;

        r1[1] = $d19;

        $d25 = neg d3;

        $d23 = d0 * d9;

        $d20 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d21 = $d37 / $d20;

        $d22 = $d21 * d7;

        $d24 = $d23 + $d22;

        $d26 = $d25 * $d24;

        r1[2] = $d26;

        $d32 = neg d4;

        $d30 = d1 * d10;

        $d27 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d28 = $d37 / $d27;

        $d29 = $d28 * d8;

        $d31 = $d30 + $d29;

        $d33 = $d32 * $d31;

        r1[3] = $d33;

        $d35 = d3 * d7;

        $d34 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR>;

        $d36 = $d35 / $d34;

        r1[4] = $d36;

        return r1;
    }

    protected double[] getBetaAdjoint(double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d10, d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28;
        double[] r1;
        byte $b0;
        com.opengamma.analytics.math.MathException $r2;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        r1 = newarray (double)[4];

        $d14 = d1 / d2;

        d3 = 0.5 - $d14;

        $d15 = 2.0 * d0;

        d4 = $d15 / d2;

        d5 = d3 * d3;

        d6 = d5 + d4;

        $b0 = d6 cmpg 0.0;

        if $b0 >= 0 goto label1;

        $r2 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r2.<com.opengamma.analytics.math.MathException: void <init>(java.lang.String)>("beta will be complex (see Jira PLAT-2944)");

        throw $r2;

     label1:
        d7 = staticinvoke <java.lang.Math: double sqrt(double)>(d6);

        d8 = d3 + d7;

        $d16 = 0.5 / d7;

        d10 = $d16 * 1.0;

        $d17 = 2.0 * d3;

        $d18 = $d17 * d10;

        d13 = 1.0 + $d18;

        r1[0] = d8;

        $d19 = 2.0 / d2;

        $d20 = $d19 * d10;

        r1[1] = $d20;

        $d21 = -1.0 / d2;

        $d22 = $d21 * d13;

        r1[2] = $d22;

        $d23 = d1 / d2;

        $d24 = $d23 / d2;

        $d27 = $d24 * d13;

        $d25 = d4 / d2;

        $d26 = $d25 * d10;

        $d28 = $d27 - $d26;

        r1[3] = $d28;

        return r1;
    }

    protected double[] getI1Adjoint(double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $r1 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getIAdjoint(double,double,double,double,double,boolean)>(d0, d1, d2, d3, d4, 1);

        return $r1;
    }

    protected double[] getI2Adjoint(double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        $r1 = specialinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getIAdjoint(double,double,double,double,double,boolean)>(d0, d1, d2, d3, d4, 0);

        return $r1;
    }

    private double[] getIAdjoint(double, double, double, double, double, boolean)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d13, d14, d15, d16, d17, d18, d19, d20, d21, d22, d23, d24, d26, d27, d28, d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, d109, $d110, d111, $d112, $d113, $d114, $d115, $d116, $d117;
        boolean z0, z1;
        double[] r1, r6;
        byte $b0, $b1, $b2, $b3, $b7;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        z0 := @parameter5: boolean;

        d5 = d3 * d3;

        if z0 == 0 goto label01;

        $d107 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        $d108 = $d107 * d4;

        goto label02;

     label01:
        $d108 = d4;

     label02:
        d6 = $d108;

        d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d108);

        d8 = d3 * d7;

        r1 = newarray (double)[6];

        $d30 = d1 - d2;

        d9 = staticinvoke <java.lang.Math: double abs(double)>($d30);

        $b0 = d9 cmpg 1.0E-7;

        if $b0 >= 0 goto label06;

        $d84 = neg d5;

        $d85 = $d84 / 2.0;

        $b7 = d2 cmpl $d85;

        if $b7 < 0 goto label05;

        $d87 = d1 * $d108;

        $d86 = 2.0 * d8;

        d109 = $d87 + $d86;

        $d88 = 1.0 + d109;

        $d89 = d0 * $d88;

        r1[0] = $d89;

        $d90 = 1.0 + d109;

        r1[1] = $d90;

        $d91 = neg d0;

        $d92 = $d91 * d109;

        $d93 = $d92 * d109;

        $d96 = $d93 / 2.0;

        $d94 = d5 / 2.0;

        $d95 = d2 + $d94;

        $d97 = $d96 / $d95;

        r1[2] = $d97;

        $d99 = d0 * $d108;

        $d98 = r1[2];

        $d100 = $d99 - $d98;

        r1[3] = $d100;

        $d101 = 2.0 * d7;

        $d102 = $d101 * d0;

        r1[4] = $d102;

        $d103 = d3 / d7;

        $d104 = d2 + $d103;

        $d105 = d0 * $d104;

        if z0 == 0 goto label03;

        $d110 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        goto label04;

     label03:
        $d110 = 1.0;

     label04:
        $d106 = $d105 * $d110;

        r1[5] = $d106;

        return r1;

     label05:
        d111 = 1.0;

        z1 = 1;

        goto label07;

     label06:
        d111 = d1 / d9;

        z1 = 0;

     label07:
        r6 = virtualinvoke r0.<com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double[] getBetaAdjoint(double,double,double)>(d1, d2, d5);

        $d33 = r6[0];

        $d31 = r6[0];

        $d32 = $d31 - 1.0;

        d10 = $d33 / $d32;

        d11 = d10 * d0;

        $b1 = d111 cmpg 1.0;

        if $b1 >= 0 goto label08;

        $d112 = d0;

        goto label09;

     label08:
        $d112 = d0 * d111;

     label09:
        $d35 = d2 * d6;

        $d34 = 2.0 * d8;

        $d36 = $d35 + $d34;

        d13 = neg $d36;

        d14 = d11 - $d112;

        $d37 = d0 * d0;

        $d38 = $d37 / d14;

        d15 = $d38 / $d112;

        d16 = d13 * d15;

        d17 = staticinvoke <java.lang.Math: double exp(double)>(d16);

        $d39 = 1.0 - d17;

        $d40 = d14 * $d39;

        d18 = $d112 + $d40;

        d19 = neg d14;

        d20 = d17 * d19;

        d21 = d13 * d20;

        $d43 = 1.0 - d17;

        $d41 = d15 / d14;

        $d42 = $d41 * d21;

        d22 = $d43 - $d42;

        d23 = d15 * d20;

        $d44 = d15 / $d112;

        $d45 = $d44 * d21;

        $d46 = 1.0 - $d45;

        d24 = $d46 - d22;

        $b2 = d111 cmpg 1.0;

        if $b2 >= 0 goto label10;

        $d113 = 0.0;

        goto label11;

     label10:
        $d113 = d0 * d24;

     label11:
        d26 = $d113;

        d27 = d0 * d22;

        $d49 = 1.0 - d10;

        $d47 = r6[0];

        $d48 = $d47 - 1.0;

        $d50 = $d49 / $d48;

        d28 = $d50 * d27;

        if z1 == 0 goto label12;

        $d114 = 0.0;

        goto label13;

     label12:
        $d52 = 1.0 - d111;

        $d51 = d1 - d2;

        $d53 = $d52 / $d51;

        $d114 = $d53 * $d113;

     label13:
        d29 = $d114;

        r1[0] = d18;

        $d54 = 2.0 * d15;

        $d55 = $d54 / d0;

        $d57 = $d55 * d21;

        $b3 = d111 cmpg 1.0;

        if $b3 >= 0 goto label14;

        $d115 = 1.0;

        goto label15;

     label14:
        $d115 = d111;

     label15:
        $d56 = $d115 * d24;

        $d59 = $d57 + $d56;

        $d58 = d10 * d22;

        $d60 = $d59 + $d58;

        r1[1] = $d60;

        $d61 = r6[1];

        $d62 = $d61 * d28;

        $d63 = d29 + $d62;

        r1[2] = $d63;

        $d64 = neg d6;

        $d67 = $d64 * d23;

        if z1 == 0 goto label16;

        $d116 = 0.0;

        goto label17;

     label16:
        $d65 = d1 - d2;

        $d66 = d111 / $d65;

        $d116 = $d66 * d26;

     label17:
        $d70 = $d67 + $d116;

        $d68 = r6[2];

        $d69 = $d68 * d28;

        $d71 = $d70 + $d69;

        r1[3] = $d71;

        $d72 = -2.0 * d7;

        $d77 = $d72 * d23;

        $d74 = 2.0 * d3;

        $d73 = r6[3];

        $d75 = $d74 * $d73;

        $d76 = $d75 * d28;

        $d78 = $d77 + $d76;

        r1[4] = $d78;

        $d79 = d3 / d7;

        $d80 = d2 + $d79;

        $d81 = neg $d80;

        $d82 = $d81 * d23;

        if z0 == 0 goto label18;

        $d117 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        goto label19;

     label18:
        $d117 = 1.0;

     label19:
        $d83 = $d82 * $d117;

        r1[5] = $d83;

        return r1;
    }

    private double[] getIAdjoint(double, double, double, double, double, double)
    {
        com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d18, d19, d20, d21, d22, d23, d24, d25, d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50;
        double[] r1;

        r0 := @this: com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d4 := @parameter4: double;

        d5 := @parameter5: double;

        d6 = d1 - d0;

        d7 = d0 * d6;

        d8 = d2 * d2;

        d9 = d8 / d7;

        d10 = staticinvoke <java.lang.Math: double sqrt(double)>(d5);

        $d29 = d3 * d5;

        $d27 = 2.0 * d4;

        $d28 = $d27 * d10;

        d11 = $d29 + $d28;

        $d30 = neg d11;

        d12 = $d30 * d9;

        d13 = staticinvoke <java.lang.Math: double exp(double)>(d12);

        d14 = 1.0 - d13;

        d15 = d6 * d14;

        d16 = d0 + d15;

        d18 = d6 * 1.0;

        d19 = neg d18;

        d20 = d13 * d19;

        d21 = neg d9;

        $d31 = 2.0 * d4;

        d22 = $d31 * d21;

        $d32 = neg d9;

        d23 = $d32 * d20;

        $d33 = 1.0 / d7;

        d24 = $d33 * d23;

        $d34 = neg d9;

        $d35 = $d34 / d7;

        d25 = $d35 * d23;

        $d37 = d0 * d25;

        $d36 = d14 * 1.0;

        d26 = $d37 + $d36;

        r1 = newarray (double)[7];

        r1[0] = d16;

        $d39 = neg d26;

        $d38 = d6 * d25;

        $d40 = $d39 + $d38;

        $d41 = $d40 + 1.0;

        r1[1] = $d41;

        r1[2] = d26;

        $d42 = 2.0 * d2;

        $d43 = $d42 * d24;

        r1[3] = $d43;

        $d44 = d5 * d21;

        r1[4] = $d44;

        $d45 = 2.0 * d21;

        $d46 = $d45 * d22;

        r1[5] = $d46;

        $d47 = 0.5 / d10;

        $d49 = $d47 * d22;

        $d48 = d3 * d21;

        $d50 = $d49 + $d48;

        r1[6] = $d50;

        return r1;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution $r0;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r1;

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double R_B_SMALL> = 1.0E-7;

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double SMALL> = 1.0E-13;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(5.0);

        $d1 = $d0 - 1.0;

        $d2 = 0.5 * $d1;

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2> = $d2;

        $d3 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        $d4 = staticinvoke <java.lang.Math: double sqrt(double)>($d3);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO> = $d4;

        $d5 = <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO2>;

        $d6 = 1.0 - $d5;

        $d7 = staticinvoke <java.lang.Math: double sqrt(double)>($d6);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: double RHO_STAR> = $d7;

        $r0 = new com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution;

        specialinvoke $r0.<com.opengamma.analytics.math.statistics.distribution.BivariateNormalDistribution: void <init>()>();

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution BIVARIATE_NORMAL> = $r0;

        $r1 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        <com.opengamma.analytics.financial.model.option.pricing.analytic.BjerksundStenslandModel: com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution NORMAL> = $r1;

        return;
    }
}
