public final class com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper extends java.lang.Object
{

    private void <init>()
    {
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper r0;

        r0 := @this: com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math.analysis.UnivariateRealFunction wrapUnivariate(com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.math.function.Function1D r0;
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$1 $r1;

        r0 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$1;

        specialinvoke $r1.<com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$1: void <init>(com.opengamma.analytics.math.function.Function1D)>(r0);

        return $r1;
    }

    public static org.apache.commons.math.analysis.MultivariateRealFunction wrapMultivariate(com.opengamma.analytics.math.function.Function1D)
    {
        com.opengamma.analytics.math.function.Function1D r0;
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$2 $r1;

        r0 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$2;

        specialinvoke $r1.<com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$2: void <init>(com.opengamma.analytics.math.function.Function1D)>(r0);

        return $r1;
    }

    public static org.apache.commons.math.analysis.MultivariateRealFunction wrap(com.opengamma.analytics.math.function.FunctionND)
    {
        com.opengamma.analytics.math.function.FunctionND r0;
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$3 $r1;

        r0 := @parameter0: com.opengamma.analytics.math.function.FunctionND;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$3;

        specialinvoke $r1.<com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$3: void <init>(com.opengamma.analytics.math.function.FunctionND)>(r0);

        return $r1;
    }

    public static org.apache.commons.math.linear.RealMatrix wrap(com.opengamma.analytics.math.matrix.DoubleMatrix2D)
    {
        com.opengamma.analytics.math.matrix.DoubleMatrix2D r0;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r1;
        double[][] $r2;

        r0 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        specialinvoke $r1.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[][])>($r2);

        return $r1;
    }

    public static org.apache.commons.math.linear.RealMatrix wrapAsMatrix(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r0;
        int i0, i1;
        double[][] r1;
        org.apache.commons.math.linear.Array2DRowRealMatrix $r2;
        double[] $r3, $r5;
        int[] $r4;
        java.lang.Double $r6;
        double $d0;

        r0 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        i0 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: int getNumberOfElements()>();

        r1 = newmultiarray (double)[i0][1];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        $r4 = newarray (int)[1];

        $r4[0] = i1;

        $r6 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: java.lang.Double getEntry(int[])>($r4);

        $d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

        $r5[0] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.linear.Array2DRowRealMatrix;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        specialinvoke $r2.<org.apache.commons.math.linear.Array2DRowRealMatrix: void <init>(double[])>($r3);

        return $r2;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix2D unwrap(org.apache.commons.math.linear.RealMatrix)
    {
        org.apache.commons.math.linear.RealMatrix r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r1;
        double[][] $r2;

        r0 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r2 = interfaceinvoke r0.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

        specialinvoke $r1.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r2);

        return $r1;
    }

    public static org.apache.commons.math.linear.RealVector wrap(com.opengamma.analytics.math.matrix.DoubleMatrix1D)
    {
        com.opengamma.analytics.math.matrix.DoubleMatrix1D r0;
        org.apache.commons.math.linear.ArrayRealVector $r1;
        double[] $r2;

        r0 := @parameter0: com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new org.apache.commons.math.linear.ArrayRealVector;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[])>($r2);

        return $r1;
    }

    public static com.opengamma.analytics.math.matrix.DoubleMatrix1D unwrap(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.RealVector r0;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r1;
        double[] $r2;

        r0 := @parameter0: org.apache.commons.math.linear.RealVector;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        $r2 = interfaceinvoke r0.<org.apache.commons.math.linear.RealVector: double[] getData()>();

        specialinvoke $r1.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>($r2);

        return $r1;
    }

    public static org.apache.commons.math.complex.Complex wrap(com.opengamma.analytics.math.number.ComplexNumber)
    {
        com.opengamma.analytics.math.number.ComplexNumber r0;
        org.apache.commons.math.complex.Complex $r1;
        double $d0, $d1;

        r0 := @parameter0: com.opengamma.analytics.math.number.ComplexNumber;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new org.apache.commons.math.complex.Complex;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getReal()>();

        $d1 = virtualinvoke r0.<com.opengamma.analytics.math.number.ComplexNumber: double getImaginary()>();

        specialinvoke $r1.<org.apache.commons.math.complex.Complex: void <init>(double,double)>($d0, $d1);

        return $r1;
    }

    public static com.opengamma.analytics.math.function.Function1D unwrap(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm)
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm r0;
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$4 $r1;

        r0 := @parameter0: org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$4;

        specialinvoke $r1.<com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$4: void <init>(org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm)>(r0);

        return $r1;
    }

    public static double[] unwrap(org.apache.commons.math.optimization.RealPointValuePair)
    {
        org.apache.commons.math.optimization.RealPointValuePair r0;
        double[] $r1;

        r0 := @parameter0: org.apache.commons.math.optimization.RealPointValuePair;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = virtualinvoke r0.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPoint()>();

        return $r1;
    }

    public static org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction wrapDifferentiable(com.opengamma.analytics.math.function.DoubleFunction1D)
    {
        com.opengamma.analytics.math.function.DoubleFunction1D r0;
        com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$5 $r1;

        r0 := @parameter0: com.opengamma.analytics.math.function.DoubleFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r0);

        $r1 = new com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$5;

        specialinvoke $r1.<com.opengamma.analytics.math.util.wrapper.CommonsMathWrapper$5: void <init>(com.opengamma.analytics.math.function.DoubleFunction1D)>(r0);

        return $r1;
    }
}
