class org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter extends org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor
{
    private double[][] data;

    public void <init>()
    {
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r0;
        org.apache.commons.math3.fraction.Fraction $r1;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        $r1 = <org.apache.commons.math3.fraction.Fraction: org.apache.commons.math3.fraction.Fraction ZERO>;

        specialinvoke r0.<org.apache.commons.math3.linear.DefaultFieldMatrixPreservingVisitor: void <init>(org.apache.commons.math3.FieldElement)>($r1);

        return;
    }

    public void start(int, int, int, int, int, int)
    {
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r0;
        int i0, i1, i2, i3, i4, i5;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: double[][] data> = $r1;

        return;
    }

    public void visit(int, int, org.apache.commons.math3.fraction.Fraction)
    {
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r0;
        int i0, i1;
        org.apache.commons.math3.fraction.Fraction r1;
        double[][] $r2;
        double[] $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.fraction.Fraction;

        $r2 = r0.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: double[][] data>;

        $r3 = $r2[i0];

        $d0 = virtualinvoke r1.<org.apache.commons.math3.fraction.Fraction: double doubleValue()>();

        $r3[i1] = $d0;

        return;
    }

    org.apache.commons.math3.linear.Array2DRowRealMatrix getConvertedMatrix()
    {
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r0;
        org.apache.commons.math3.linear.Array2DRowRealMatrix $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        $r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r2 = r0.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: double[][] data>;

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>($r2, 0);

        return $r1;
    }

    public volatile void visit(int, int, org.apache.commons.math3.FieldElement)
    {
        org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter r0;
        int i0, i1;
        org.apache.commons.math3.FieldElement r1;
        org.apache.commons.math3.fraction.Fraction $r2;

        r0 := @this: org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.commons.math3.FieldElement;

        $r2 = (org.apache.commons.math3.fraction.Fraction) r1;

        virtualinvoke r0.<org.apache.commons.math3.linear.MatrixUtils$FractionMatrixConverter: void visit(int,int,org.apache.commons.math3.fraction.Fraction)>(i0, i1, $r2);

        return;
    }
}
