public class org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException extends org.apache.commons.math3.exception.NumberIsTooSmallException
{
    private static final long serialVersionUID;
    private final int index;
    private final double threshold;

    public void <init>(double, int, double)
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        double d0, d1;
        int i0;
        org.apache.commons.math3.exception.util.ExceptionContext r1;
        java.lang.Double $r2, $r3, $r8;
        java.lang.Object[] $r4, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5, $r7;
        java.lang.Integer $r9;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        d1 := @parameter2: double;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke r0.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r2, $r3, 0);

        r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index> = i0;

        r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: double threshold> = d1;

        r1 = virtualinvoke r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: org.apache.commons.math3.exception.util.ExceptionContext getContext()>();

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_POSITIVE_DEFINITE_MATRIX>;

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ARRAY_ELEMENT>;

        $r6 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r9;

        virtualinvoke r1.<org.apache.commons.math3.exception.util.ExceptionContext: void addMessage(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r7, $r6);

        return;
    }

    public int getRow()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $i0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index>;

        return $i0;
    }

    public int getColumn()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $i0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: int index>;

        return $i0;
    }

    public double getThreshold()
    {
        org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

        $d0 = r0.<org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: double threshold>;

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException: long serialVersionUID> = 1641613838113738061L;

        return;
    }
}
