public class com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator extends java.lang.Object implements com.opengamma.analytics.math.function.Function
{
    private static final org.slf4j.Logger s_logger;
    private static final com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression OLS;

    public void <init>()
    {
        com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator r0;

        r0 := @this: com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public transient com.opengamma.analytics.math.regression.LeastSquaresRegressionResult evaluate(com.opengamma.timeseries.DoubleTimeSeries[])
    {
        com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator r0;
        com.opengamma.timeseries.DoubleTimeSeries[] r1;
        int i0, $i1, i2, $i3;
        com.opengamma.timeseries.DoubleTimeSeries r2, r3;
        double[] r4, $r7;
        double[][] r5;
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression $r6;
        java.lang.Object $r8;
        java.lang.Double $r9;
        double $d0;
        org.slf4j.Logger $r10;
        boolean $z0;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult r11;

        r0 := @this: com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator;

        r1 := @parameter0: com.opengamma.timeseries.DoubleTimeSeries[];

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "ts");

        i0 = lengthof r1;

        if i0 <= 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        if i0 <= 2 goto label3;

        $r10 = <com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator: org.slf4j.Logger s_logger>;

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String)>("Found more than two time series; will only use the first two");

     label3:
        r2 = r1[0];

        r3 = r1[1];

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r2);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testNotNullOrEmpty(com.opengamma.timeseries.DoubleTimeSeries)>(r3);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testTimeSeriesSize(com.opengamma.timeseries.DoubleTimeSeries,int)>(r2, 2);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testTimeSeriesSize(com.opengamma.timeseries.DoubleTimeSeries,int)>(r3, 2);

        staticinvoke <com.opengamma.analytics.financial.timeseries.util.TimeSeriesDataTestUtils: void testTimeSeriesDates(com.opengamma.timeseries.DoubleTimeSeries,com.opengamma.timeseries.DoubleTimeSeries)>(r2, r3);

        r4 = interfaceinvoke r2.<com.opengamma.timeseries.DoubleTimeSeries: double[] valuesArrayFast()>();

        $i1 = lengthof r4;

        r5 = newmultiarray (double)[$i1][1];

        i2 = 0;

     label4:
        $i3 = lengthof r4;

        if i2 >= $i3 goto label5;

        $r7 = r5[i2];

        $r8 = interfaceinvoke r3.<com.opengamma.timeseries.DoubleTimeSeries: java.lang.Object getValueAtIndex(int)>(i2);

        $r9 = (java.lang.Double) $r8;

        $d0 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $r7[0] = $d0;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r6 = <com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression OLS>;

        r11 = virtualinvoke $r6.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][],double[],boolean)>(r5, r4, 1);

        return r11;
    }

    public volatile java.lang.Object evaluate(java.lang.Object[])
    {
        com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator r0;
        java.lang.Object[] r1;
        com.opengamma.timeseries.DoubleTimeSeries[] $r2;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r3;

        r0 := @this: com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (com.opengamma.timeseries.DoubleTimeSeries[]) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult evaluate(com.opengamma.timeseries.DoubleTimeSeries[])>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression $r1;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/financial/equity/capm/CAPMFromRegressionCalculator");

        <com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator: org.slf4j.Logger s_logger> = $r0;

        $r1 = new com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression;

        specialinvoke $r1.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: void <init>()>();

        <com.opengamma.analytics.financial.equity.capm.CAPMFromRegressionCalculator: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression OLS> = $r1;

        return;
    }
}
