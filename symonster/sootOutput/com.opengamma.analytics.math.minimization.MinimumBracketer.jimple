public abstract class com.opengamma.analytics.math.minimization.MinimumBracketer extends java.lang.Object
{
    private static final double ZERO;
    protected static final double GOLDEN;

    public void <init>()
    {
        com.opengamma.analytics.math.minimization.MinimumBracketer r0;

        r0 := @this: com.opengamma.analytics.math.minimization.MinimumBracketer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract double[] getBracketedPoints(com.opengamma.analytics.math.function.Function1D, double, double);

    protected void checkInputs(com.opengamma.analytics.math.function.Function1D, double, double)
    {
        com.opengamma.analytics.math.minimization.MinimumBracketer r0;
        com.opengamma.analytics.math.function.Function1D r1;
        double d0, d1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.opengamma.analytics.math.minimization.MinimumBracketer;

        r1 := @parameter0: com.opengamma.analytics.math.function.Function1D;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double,double)>(d0, d1, 1.0E-15);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Lower and upper values were not distinct");

        throw $r2;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.minimization.MinimumBracketer: double GOLDEN> = 0.61803399;

        <com.opengamma.analytics.math.minimization.MinimumBracketer: double ZERO> = 1.0E-15;

        return;
    }
}
