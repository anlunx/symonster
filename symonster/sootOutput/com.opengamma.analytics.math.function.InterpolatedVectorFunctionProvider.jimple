public class com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider extends com.opengamma.analytics.math.function.DoublesVectorFunctionProvider
{
    private final com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator;
    private final double[] _knots;

    public void <init>(com.opengamma.analytics.math.interpolation.Interpolator1D, double[])
    {
        com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D r1;
        double[] r2, $r6;
        int i0, $i1, i3;
        java.lang.Object $r5;
        double $d0, $d1;
        byte $b2;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.Interpolator1D;

        r2 := @parameter1: double[];

        specialinvoke r0.<com.opengamma.analytics.math.function.DoublesVectorFunctionProvider: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "interpolator");

        staticinvoke <com.opengamma.util.ArgumentChecker: double[] notEmpty(double[],java.lang.String)>(r2, "knots");

        i0 = lengthof r2;

        i3 = 1;

     label1:
        if i3 >= i0 goto label4;

        $d1 = r2[i3];

        $i1 = i3 - 1;

        $d0 = r2[$i1];

        $b2 = $d1 cmpl $d0;

        if $b2 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "knot points must be strictly ascending");

        i3 = i3 + 1;

        goto label1;

     label4:
        r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator> = r1;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r5;

        r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: double[] _knots> = $r6;

        return;
    }

    public com.opengamma.analytics.math.function.VectorFunction 'from'(double[])
    {
        com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider r0;
        double[] r1, $r3;
        com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction $r2;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r4;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider;

        r1 := @parameter0: double[];

        $r2 = new com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction;

        $r4 = r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        $r3 = r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: double[] _knots>;

        specialinvoke $r2.<com.opengamma.analytics.math.function.InterpolatedCurveVectorFunction: void <init>(double[],com.opengamma.analytics.math.interpolation.Interpolator1D,double[])>(r1, $r4, $r3);

        return $r2;
    }

    public com.opengamma.analytics.math.interpolation.Interpolator1D getInterpolator()
    {
        com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider r0;
        com.opengamma.analytics.math.interpolation.Interpolator1D $r1;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider;

        $r1 = r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: com.opengamma.analytics.math.interpolation.Interpolator1D _interpolator>;

        return $r1;
    }

    public double[] getKnots()
    {
        com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider;

        $r1 = r0.<com.opengamma.analytics.math.function.InterpolatedVectorFunctionProvider: double[] _knots>;

        return $r1;
    }
}
