public class org.apache.commons.math3.dfp.DfpMath extends java.lang.Object
{
    private static final java.lang.String POW_TRAP;

    private void <init>()
    {
        org.apache.commons.math3.dfp.DfpMath r0;

        r0 := @this: org.apache.commons.math3.dfp.DfpMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.DfpField, java.lang.String)
    {
        org.apache.commons.math3.dfp.DfpField r0;
        java.lang.String r1, $r4, $r6;
        org.apache.commons.math3.dfp.Dfp[] r2;
        char[] r3;
        int $i0, $i1, $i7, $i8, $i9, $i12, $i13, i15, i16, i17, i19, $i20;
        org.apache.commons.math3.dfp.Dfp $r5, $r7;
        char $c2, $c3, $c4, $c5, $c6, $c10, $c11, $c14, $c18;
        boolean z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.DfpField;

        r1 := @parameter1: java.lang.String;

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        z0 = 1;

        i15 = 0;

        i16 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r3 = newarray (char)[$i0];

        i17 = 0;

     label1:
        $i1 = lengthof r3;

        if i17 >= $i1 goto label6;

        $c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i17);

        r3[i17] = $c5;

        $c6 = r3[i17];

        if $c6 < 49 goto label2;

        $c14 = r3[i17];

        if $c14 > 57 goto label2;

        z0 = 0;

     label2:
        $c18 = r3[i17];

        if $c18 != 46 goto label3;

        $i12 = 400 - i16;

        $i13 = $i12 % 4;

        i16 = i16 + $i13;

        z0 = 0;

     label3:
        $i7 = virtualinvoke r0.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $i8 = $i7 / 2;

        $i9 = $i8 * 4;

        if i16 != $i9 goto label4;

        i15 = i17;

        goto label6;

     label4:
        $c10 = r3[i17];

        if $c10 < 48 goto label5;

        $c11 = r3[i17];

        if $c11 > 57 goto label5;

        if z0 != 0 goto label5;

        i16 = i16 + 1;

     label5:
        i17 = i17 + 1;

        goto label1;

     label6:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i15);

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp newDfp(java.lang.String)>($r4);

        r2[0] = $r5;

        i19 = 0;

     label7:
        $i20 = lengthof r3;

        if i19 >= $i20 goto label9;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i19);

        r3[i19] = $c2;

        $c3 = r3[i19];

        if $c3 < 48 goto label8;

        $c4 = r3[i19];

        if $c4 > 57 goto label8;

        if i19 >= i15 goto label8;

        r3[i19] = 48;

     label8:
        i19 = i19 + 1;

        goto label7;

     label9:
        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r3);

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp newDfp(java.lang.String)>($r6);

        r2[1] = $r7;

        return r2;
    }

    protected static org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r2, $r3, $r4, $r5, $r6, $r7;
        org.apache.commons.math3.dfp.Dfp[] r1;
        int $i0, $i1;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r1 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $i0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int getRadixDigits()>();

        $i1 = $i0 / 2;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp power10K(int)>($i1);

        r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r2);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r2);

        r1[0] = $r5;

        $r6 = r1[0];

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r6);

        r1[1] = $r7;

        return r1;
    }

    protected static org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] r0, r1, r2;
        org.apache.commons.math3.dfp.Dfp $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        int $i0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        r1 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r3 = r0[0];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r2[1] = $r4;

        $r6 = r0[0];

        $r5 = r1[0];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r5);

        r2[0] = $r7;

        $r8 = r2[0];

        $i0 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i0 == 1 goto label1;

        $r10 = r2[0];

        $r9 = r2[1];

        $z0 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

     label1:
        return r2;

     label2:
        $r12 = r0[0];

        $r11 = r1[1];

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r11);

        $r15 = r0[1];

        $r14 = r1[0];

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r14);

        $r17 = virtualinvoke $r13.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r16);

        $r19 = r0[1];

        $r18 = r1[1];

        $r20 = virtualinvoke $r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r18);

        $r21 = virtualinvoke $r17.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r20);

        r2[1] = $r21;

        return r2;
    }

    protected static org.apache.commons.math3.dfp.Dfp[] splitDiv(org.apache.commons.math3.dfp.Dfp[], org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] r0, r1, r2;
        org.apache.commons.math3.dfp.Dfp $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        r1 := @parameter1: org.apache.commons.math3.dfp.Dfp[];

        r2 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r4 = r0[0];

        $r3 = r1[0];

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r3);

        r2[0] = $r5;

        $r7 = r0[1];

        $r6 = r1[0];

        $r8 = virtualinvoke $r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r6);

        $r10 = r0[0];

        $r9 = r1[1];

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r9);

        $r12 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r11);

        r2[1] = $r12;

        $r15 = r2[1];

        $r14 = r1[0];

        $r13 = r1[0];

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r13);

        $r18 = r1[0];

        $r17 = r1[1];

        $r19 = virtualinvoke $r18.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r17);

        $r20 = virtualinvoke $r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r19);

        $r21 = virtualinvoke $r15.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r20);

        r2[1] = $r21;

        return r2;
    }

    protected static org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[], int)
    {
        org.apache.commons.math3.dfp.Dfp[] r0, r16, r17;
        int i0, i1, i2;
        org.apache.commons.math3.dfp.Dfp $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r20, $r21;
        boolean z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        i1 := @parameter1: int;

        z0 = 0;

        r16 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        r17 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r1 = r0[0];

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r17[0] = $r2;

        $r3 = r0[0];

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r17[1] = $r4;

        if i1 != 0 goto label1;

        $r14 = r17[0];

        $r13 = r17[1];

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r13);

        return $r15;

     label1:
        if i1 >= 0 goto label2;

        z0 = 1;

        i1 = neg i1;

     label2:
        $r18 = new org.apache.commons.math3.dfp.Dfp;

        $r19 = r0[0];

        specialinvoke $r18.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r19);

        r16[0] = $r18;

        $r20 = new org.apache.commons.math3.dfp.Dfp;

        $r21 = r0[1];

        specialinvoke $r20.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r21);

        r16[1] = $r20;

        i2 = 1;

     label3:
        i0 = i2;

        i2 = i2 * 2;

        if i2 <= i1 goto label4;

        goto label5;

     label4:
        r16 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r16, r16);

        goto label3;

     label5:
        i1 = i1 - i0;

        r17 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r17, r16);

        if i1 >= 1 goto label2;

        $r6 = r17[0];

        $r5 = r17[1];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        r17[0] = $r7;

        if z0 == 0 goto label6;

        $r9 = r0[0];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r11 = r17[0];

        $r12 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r11);

        r17[0] = $r12;

     label6:
        $r8 = r17[0];

        return $r8;
    }

    public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp, int)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r2, $r3, r4, $r5, r6, $r7;
        int i0, i1, i2;
        boolean z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        i1 := @parameter1: int;

        z0 = 0;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        if i1 != 0 goto label1;

        return r4;

     label1:
        if i1 >= 0 goto label2;

        z0 = 1;

        i1 = neg i1;

     label2:
        $r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r0);

        r6 = $r5;

        i2 = 1;

     label3:
        $r7 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r7.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r6);

        i0 = i2;

        r6 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r6);

        i2 = i2 * 2;

        if i1 > i2 goto label3;

        i1 = i1 - i0;

        r4 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r7);

        if i1 >= 1 goto label2;

        if z0 == 0 goto label4;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r4);

     label4:
        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r4);

        return $r2;
    }

    public static org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, r2, r3, r4, $r7, $r8, $r9;
        int i0;
        org.apache.commons.math3.dfp.DfpField $r5;
        org.apache.commons.math3.dfp.Dfp[] $r6;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r1);

        i0 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        if i0 <= 2147483646 goto label1;

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        return $r9;

     label1:
        if i0 >= -2147483646 goto label2;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance()>();

        return $r8;

     label2:
        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getESplit()>();

        r3 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r6, i0);

        r4 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp expInternal(org.apache.commons.math3.dfp.Dfp)>(r2);

        $r7 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r4);

        return $r7;
    }

    protected static org.apache.commons.math3.dfp.Dfp expInternal(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, r4, r5, r6, r7;
        boolean $z0;
        int i0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r4);

        r7 = $r1;

        i0 = 1;

     label1:
        if i0 >= 90 goto label3;

        r5 = virtualinvoke r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        r6 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        $r2 = virtualinvoke r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r6);

        r4 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r2);

        $z0 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r4);

        r7 = $r3;

        i0 = i0 + 1;

        goto label1;

     label3:
        return r4;
    }

    public static org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r25, $r26, $r29, $r30, $r31, $r32, $r33, $r34, $r38, $r39, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r57, $r58, r60;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        org.apache.commons.math3.dfp.Dfp[] r1, r2, $r28, $r41, r61, r62, r63;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r22, $r23, $r35, $r36;
        java.lang.String $r24, $r37;
        org.apache.commons.math3.dfp.DfpField $r27, $r40, $r56;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        i5 = 0;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r4);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z2 == 0 goto label2;

     label1:
        $r56 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r56.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r57 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        $r58 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "ln", r0, $r57);

        return $r58;

     label2:
        $i1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i1 != 1 goto label3;

        return r0;

     label3:
        $r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r0);

        i0 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: int log10K()>();

        $r6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(10000);

        $r7 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r6, i0);

        r60 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r8 = virtualinvoke r60.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp floor()>();

        i6 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

     label4:
        if i6 <= 2 goto label5;

        i6 = i6 >> 1;

        i5 = i5 + 1;

        goto label4;

     label5:
        r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r60);

        r61 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        $r10 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>($r9, i5);

        r61[0] = $r10;

        $r12 = r1[0];

        $r11 = r61[0];

        $r13 = virtualinvoke $r12.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r11);

        r1[0] = $r13;

        $r15 = r1[1];

        $r14 = r61[0];

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r14);

        r1[1] = $r16;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("1.33333");

        r61[0] = $r17;

     label6:
        $r19 = r1[0];

        $r18 = r1[1];

        $r20 = virtualinvoke $r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r18);

        $r21 = r61[0];

        $z3 = virtualinvoke $r20.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r21);

        if $z3 == 0 goto label7;

        $r52 = r1[0];

        $r53 = virtualinvoke $r52.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r1[0] = $r53;

        $r54 = r1[1];

        $r55 = virtualinvoke $r54.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r1[1] = $r55;

        i5 = i5 + 1;

        goto label6;

     label7:
        r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] logInternal(org.apache.commons.math3.dfp.Dfp[])>(r1);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $i2 = 4 * i0;

        $i3 = i5 + $i2;

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>($r24);

        r1[0] = $r25;

        $r26 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r1[1] = $r26;

        $r27 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r28 = virtualinvoke $r27.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getLn2Split()>();

        r62 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r28, r1);

        $r30 = r2[0];

        $r29 = r62[0];

        $r31 = virtualinvoke $r30.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r29);

        r2[0] = $r31;

        $r33 = r2[1];

        $r32 = r62[1];

        $r34 = virtualinvoke $r33.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r32);

        r2[1] = $r34;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $i4 = 4 * i0;

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>($r37);

        r1[0] = $r38;

        $r39 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r1[1] = $r39;

        $r40 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r41 = virtualinvoke $r40.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getLn5Split()>();

        r63 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>($r41, r1);

        $r43 = r2[0];

        $r42 = r63[0];

        $r44 = virtualinvoke $r43.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r42);

        r2[0] = $r44;

        $r46 = r2[1];

        $r45 = r63[1];

        $r47 = virtualinvoke $r46.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r45);

        r2[1] = $r47;

        $r49 = r2[0];

        $r48 = r2[1];

        $r50 = virtualinvoke $r49.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r48);

        $r51 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r50);

        return $r51;
    }

    protected static org.apache.commons.math3.dfp.Dfp[] logInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] r0, $r17;
        org.apache.commons.math3.dfp.Dfp r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, r19, r20, r21, r22, r23, r24, r25;
        boolean $z0;
        int i0, i1;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r2 = r0[0];

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $r4 = r0[1];

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        r19 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        $r6 = r0[0];

        $r7 = virtualinvoke $r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("-0.25");

        $r8 = virtualinvoke r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r7);

        $r9 = r0[0];

        $r10 = virtualinvoke $r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(java.lang.String)>("0.25");

        $r11 = virtualinvoke r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r10);

        r1 = virtualinvoke $r8.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r11);

        $r12 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r12.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r1);

        r20 = $r12;

        $r13 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r13.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r1);

        r21 = $r13;

        $r14 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r14.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r12);

        r22 = $r14;

        i0 = 1;

        i1 = 0;

     label1:
        if i1 >= 10000 goto label3;

        r23 = virtualinvoke r21.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r1);

        r21 = virtualinvoke r23.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r1);

        i0 = i0 + 2;

        r24 = virtualinvoke r21.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        r20 = virtualinvoke r20.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r24);

        $z0 = virtualinvoke r20.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r22);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r18 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r18.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r20);

        r22 = $r18;

        i1 = i1 + 1;

        goto label1;

     label3:
        $r15 = r0[0];

        $r16 = virtualinvoke $r15.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        r25 = virtualinvoke r20.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r16);

        $r17 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r25);

        return $r17;
    }

    public static org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp, org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, r2, r3, r4, r5, r6, r7, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r22, $r23, $r25, $r26, $r28, $r29, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r65, $r66, $r68, $r69, r70, r71, r72, r73, r74, r75, $r76;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.commons.math3.dfp.DfpField $r8, $r9, $r10, $r21, $r24, $r31, $r44, $r64, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27, $z28, $z29;
        org.apache.commons.math3.dfp.Dfp[] $r19, $r27;

        r70 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        r0 := @parameter1: org.apache.commons.math3.dfp.Dfp;

        $r8 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $i1 = virtualinvoke $r8.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $i2 = virtualinvoke $r9.<org.apache.commons.math3.dfp.DfpField: int getRadixDigits()>();

        if $i1 == $i2 goto label01;

        $r67 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r67.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r68 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r71 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r68);

        r71.<org.apache.commons.math3.dfp.Dfp: byte nans> = 3;

        $r69 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r70, r71);

        return $r69;

     label01:
        r72 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        r1 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r2 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getTwo()>();

        z27 = 0;

        $z0 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r72);

        if $z0 == 0 goto label02;

        $r66 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r1);

        return $r66;

     label02:
        $z1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label04;

        $z26 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z26 == 0 goto label03;

        $r64 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r64.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r65 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r70, r70);

        return $r65;

     label03:
        return r70;

     label04:
        $z2 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z2 != 0 goto label05;

        $z3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean isNaN()>();

        if $z3 == 0 goto label06;

     label05:
        $r10 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r10.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r11 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        $r12 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r70, $r11);

        return $r12;

     label06:
        $z4 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r72);

        if $z4 == 0 goto label12;

        $r51 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r1, r70);

        $z21 = virtualinvoke $r51.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z21 == 0 goto label08;

        $z25 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z25 == 0 goto label07;

        $r63 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r63;

     label07:
        $r61 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        $r62 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r61);

        return $r62;

     label08:
        $i9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i9 != 0 goto label10;

        $r55 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $z22 = virtualinvoke $r55.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r0);

        if $z22 == 0 goto label10;

        $r56 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>(r2);

        $z23 = virtualinvoke $r56.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r72);

        if $z23 != 0 goto label10;

        $z24 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z24 == 0 goto label09;

        $r59 = virtualinvoke r72.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $r60 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r59);

        return $r60;

     label09:
        $r57 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(-1, 1);

        $r58 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r57);

        return $r58;

     label10:
        $z28 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z28 == 0 goto label11;

        $r54 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r54;

     label11:
        $r52 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        $r53 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r52);

        return $r53;

     label12:
        $z5 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z5 == 0 goto label13;

        r70 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        z27 = 1;

     label13:
        $z6 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r1);

        if $z6 == 0 goto label15;

        $i8 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i8 != 1 goto label15;

        $z20 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z20 == 0 goto label14;

        return r0;

     label14:
        $r50 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r50;

     label15:
        $z7 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r1);

        if $z7 == 0 goto label17;

        $i7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i7 != 1 goto label17;

        $z19 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z19 == 0 goto label16;

        $r49 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r49;

     label16:
        $r47 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r0, r1);

        $r48 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r47);

        return $r48;

     label17:
        $z8 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label18;

        $i6 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i6 != 1 goto label18;

        $r44 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r44.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r45 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        $r46 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r70, $r45);

        return $r46;

     label18:
        $i3 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i3 != 1 goto label24;

        if z27 == 0 goto label22;

        $i5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: int classify()>();

        if $i5 != 0 goto label20;

        $r38 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $z16 = virtualinvoke $r38.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r0);

        if $z16 == 0 goto label20;

        $r39 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>(r2);

        $z17 = virtualinvoke $r39.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r72);

        if $z17 != 0 goto label20;

        $z18 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z18 == 0 goto label19;

        $r42 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(-1, 1);

        $r43 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r42);

        return $r43;

     label19:
        $r40 = virtualinvoke r72.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $r41 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r40);

        return $r41;

     label20:
        $z29 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z29 == 0 goto label21;

        $r36 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 1);

        $r37 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>($r36);

        return $r37;

     label21:
        $r35 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r35;

     label22:
        $z15 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z15 == 0 goto label23;

        return r70;

     label23:
        $r34 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r72);

        return $r34;

     label24:
        if z27 == 0 goto label25;

        $r30 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $z14 = virtualinvoke $r30.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r0);

        if $z14 != 0 goto label25;

        $r31 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        virtualinvoke $r31.<org.apache.commons.math3.dfp.DfpField: void setIEEEFlagsBits(int)>(1);

        $r32 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(byte,byte)>(1, 3);

        $r33 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp dotrap(int,java.lang.String,org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(1, "pow", r70, $r32);

        return $r33;

     label25:
        $r13 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(100000000);

        $z9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r13);

        if $z9 == 0 goto label28;

        $r18 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(int)>(-100000000);

        $z12 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r18);

        if $z12 == 0 goto label28;

        r3 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        i0 = virtualinvoke r3.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r3);

        $z13 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: boolean unequal(org.apache.commons.math3.dfp.Dfp)>(r72);

        if $z13 == 0 goto label26;

        $r20 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r70);

        r5 = virtualinvoke r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r20);

        $r21 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r22 = virtualinvoke $r21.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getLn2()>();

        $r23 = virtualinvoke r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r22);

        r6 = virtualinvoke $r23.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $r24 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r25 = virtualinvoke $r24.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getLn2()>();

        $r26 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r25);

        r7 = virtualinvoke r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r26);

        $r27 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r70);

        r73 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r27, i0);

        $i4 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: int intValue()>();

        $r28 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp pow(org.apache.commons.math3.dfp.Dfp,int)>(r2, $i4);

        r74 = virtualinvoke r73.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r28);

        $r29 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>(r7);

        r75 = virtualinvoke r74.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>($r29);

        goto label27;

     label26:
        $r19 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r70);

        r75 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp splitPow(org.apache.commons.math3.dfp.Dfp[],int)>($r19, i0);

     label27:
        goto label29;

     label28:
        $r14 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp log(org.apache.commons.math3.dfp.Dfp)>(r70);

        $r15 = virtualinvoke $r14.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        r75 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp exp(org.apache.commons.math3.dfp.Dfp)>($r15);

     label29:
        if z27 == 0 goto label30;

        $r16 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp rint()>();

        $z10 = virtualinvoke $r16.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r0);

        if $z10 == 0 goto label30;

        $r17 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>(r2);

        $z11 = virtualinvoke $r17.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r72);

        if $z11 != 0 goto label30;

        r75 = virtualinvoke r75.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label30:
        $r76 = virtualinvoke r70.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r75);

        return $r76;
    }

    protected static org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] r0;
        org.apache.commons.math3.dfp.Dfp $r1, $r2, $r3, $r4, $r5, $r6, r7, r8, r9, r10, r11, r12, r13;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r2 = r0[0];

        $r1 = r0[1];

        r7 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r1);

        r8 = r7;

        r9 = virtualinvoke r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r7);

        r10 = r7;

        $r3 = r0[0];

        r11 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r4 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r4.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r7);

        r12 = $r4;

        i2 = 3;

     label1:
        if i2 >= 90 goto label3;

        r13 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r9);

        r10 = virtualinvoke r13.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $i0 = i2 - 1;

        $i1 = $i0 * i2;

        r11 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i1);

        $r5 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r11);

        r8 = virtualinvoke r8.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r5);

        $z0 = virtualinvoke r8.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r6 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r6.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r8);

        r12 = $r6;

        i2 = i2 + 2;

        goto label1;

     label3:
        return r8;
    }

    protected static org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])
    {
        org.apache.commons.math3.dfp.Dfp[] r0;
        org.apache.commons.math3.dfp.Dfp r1, $r2, $r3, $r4, $r5, $r6, $r7, r8, r9, r10, r11, r12, r13, r14;
        int $i0, $i1, i2;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp[];

        $r2 = r0[0];

        r1 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r8 = r1;

        r9 = r1;

        $r4 = r0[0];

        $r3 = r0[1];

        r10 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r3);

        r11 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r10);

        r12 = r1;

        $r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r1);

        r13 = $r5;

        i2 = 2;

     label1:
        if i2 >= 90 goto label3;

        r14 = virtualinvoke r8.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r11);

        r8 = virtualinvoke r14.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $i0 = i2 - 1;

        $i1 = $i0 * i2;

        r12 = virtualinvoke r12.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>($i1);

        $r6 = virtualinvoke r8.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r12);

        r9 = virtualinvoke r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r6);

        $z0 = virtualinvoke r9.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r13);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r7 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r7.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r9);

        r13 = $r7;

        i2 = i2 + 2;

        goto label1;

     label3:
        return r9;
    }

    public static org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, r2, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, r17, r19;
        org.apache.commons.math3.dfp.Dfp[] r3, $r16, r18, r20;
        org.apache.commons.math3.dfp.DfpField $r4, $r5, $r9;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r2 = virtualinvoke $r5.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        z3 = 0;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(2);

        r17 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r6);

        $z0 = virtualinvoke r17.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r2);

        if $z0 == 0 goto label1;

        r17 = virtualinvoke r17.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        z3 = 1;

     label1:
        $r7 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $z1 = virtualinvoke r17.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r7);

        if $z1 == 0 goto label2;

        r17 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r17);

     label2:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $z2 = virtualinvoke r17.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r8);

        if $z2 == 0 goto label3;

        r18 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        r18[0] = r17;

        r18[1] = r2;

        $r16 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r17);

        r19 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])>($r16);

        goto label4;

     label3:
        r20 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r3 = virtualinvoke $r9.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        $r10 = r3[0];

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r17);

        r20[0] = $r12;

        $r13 = r3[1];

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r20[1] = $r14;

        r19 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])>(r20);

     label4:
        if z3 == 0 goto label5;

        r19 = virtualinvoke r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label5:
        $r15 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r19);

        return $r15;
    }

    public static org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, r2, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, r16, r18;
        org.apache.commons.math3.dfp.Dfp[] r3, r17, r19;
        org.apache.commons.math3.dfp.DfpField $r4, $r5, $r9;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r4 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r1 = virtualinvoke $r4.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r2 = virtualinvoke $r5.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        z3 = 0;

        $r6 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(int)>(2);

        r16 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp remainder(org.apache.commons.math3.dfp.Dfp)>($r6);

        $z0 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r2);

        if $z0 == 0 goto label1;

        r16 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label1:
        $r7 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $z1 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>($r7);

        if $z1 == 0 goto label2;

        r16 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r16);

        z3 = 1;

     label2:
        $r8 = virtualinvoke r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(4);

        $z2 = virtualinvoke r16.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r8);

        if $z2 == 0 goto label3;

        r17 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        r17[0] = r16;

        r17[1] = r2;

        r18 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cosInternal(org.apache.commons.math3.dfp.Dfp[])>(r17);

        goto label4;

     label3:
        r19 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r3 = virtualinvoke $r9.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        $r10 = r3[0];

        $r11 = virtualinvoke $r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r16);

        r19[0] = $r12;

        $r13 = r3[1];

        $r14 = virtualinvoke $r13.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r19[1] = $r14;

        r18 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sinInternal(org.apache.commons.math3.dfp.Dfp[])>(r19);

     label4:
        if z3 == 0 goto label5;

        r18 = virtualinvoke r18.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label5:
        $r15 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r18);

        return $r15;
    }

    public static org.apache.commons.math3.dfp.Dfp tan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp sin(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r2 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp cos(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r2);

        return $r3;
    }

    protected static org.apache.commons.math3.dfp.Dfp atanInternal(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4, $r5, r6, r7, r8, r9, r10;
        boolean $z0;
        int i0;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r1.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r0);

        r6 = $r1;

        $r2 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r2.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        r7 = $r2;

        $r3 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r3.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>($r1);

        r8 = $r3;

        i0 = 3;

     label1:
        if i0 >= 90 goto label3;

        r9 = virtualinvoke r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        r10 = virtualinvoke r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        r7 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

        $r4 = virtualinvoke r7.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(i0);

        r6 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r4);

        $z0 = virtualinvoke r6.<org.apache.commons.math3.dfp.Dfp: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r5 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r5.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r6);

        r8 = $r5;

        i0 = i0 + 2;

        goto label1;

     label3:
        return r6;
    }

    public static org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, r1, r2, r5, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, r39, r43;
        org.apache.commons.math3.dfp.Dfp[] r3, r4, r6, r40, r41, r42;
        org.apache.commons.math3.dfp.DfpField $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, z3, z4, z5;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r7 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r1 = virtualinvoke $r7.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getZero()>();

        $r8 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r2 = virtualinvoke $r8.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r9 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r3 = virtualinvoke $r9.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getSqr2Split()>();

        $r10 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        r4 = virtualinvoke $r10.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp[] getPiSplit()>();

        z3 = 0;

        z4 = 0;

        z5 = 0;

        $r11 = r3[0];

        $r12 = virtualinvoke $r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r2);

        $r13 = r3[1];

        r5 = virtualinvoke $r12.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r13);

        $r14 = new org.apache.commons.math3.dfp.Dfp;

        specialinvoke $r14.<org.apache.commons.math3.dfp.Dfp: void <init>(org.apache.commons.math3.dfp.Dfp)>(r0);

        r39 = $r14;

        $z0 = virtualinvoke $r14.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>(r1);

        if $z0 == 0 goto label1;

        z4 = 1;

        r39 = virtualinvoke $r14.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label1:
        $z1 = virtualinvoke r39.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r2);

        if $z1 == 0 goto label2;

        z3 = 1;

        r39 = virtualinvoke r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r39);

     label2:
        $z2 = virtualinvoke r39.<org.apache.commons.math3.dfp.Dfp: boolean greaterThan(org.apache.commons.math3.dfp.Dfp)>(r5);

        if $z2 == 0 goto label3;

        r40 = newarray (org.apache.commons.math3.dfp.Dfp)[2];

        z5 = 1;

        $r26 = r3[0];

        $r27 = virtualinvoke $r26.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r2);

        r40[0] = $r27;

        $r28 = r3[1];

        r40[1] = $r28;

        r41 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] split(org.apache.commons.math3.dfp.Dfp)>(r39);

        r6 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitMult(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r41, r40);

        $r29 = r6[0];

        $r30 = virtualinvoke $r29.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>(r2);

        r6[0] = $r30;

        $r32 = r41[0];

        $r31 = r40[0];

        $r33 = virtualinvoke $r32.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r31);

        r41[0] = $r33;

        $r35 = r41[1];

        $r34 = r40[1];

        $r36 = virtualinvoke $r35.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r34);

        r41[1] = $r36;

        r42 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp[] splitDiv(org.apache.commons.math3.dfp.Dfp[],org.apache.commons.math3.dfp.Dfp[])>(r41, r6);

        $r38 = r42[0];

        $r37 = r42[1];

        r39 = virtualinvoke $r38.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r37);

     label3:
        r43 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atanInternal(org.apache.commons.math3.dfp.Dfp)>(r39);

        if z5 == 0 goto label4;

        $r21 = r4[0];

        $r22 = virtualinvoke $r21.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(8);

        $r23 = virtualinvoke r43.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r22);

        $r24 = r4[1];

        $r25 = virtualinvoke $r24.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(8);

        r43 = virtualinvoke $r23.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r25);

     label4:
        if z3 == 0 goto label5;

        $r16 = r4[0];

        $r17 = virtualinvoke $r16.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        $r18 = virtualinvoke $r17.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r43);

        $r19 = r4[1];

        $r20 = virtualinvoke $r19.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(int)>(2);

        r43 = virtualinvoke $r18.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp add(org.apache.commons.math3.dfp.Dfp)>($r20);

     label5:
        if z4 == 0 goto label6;

        r43 = virtualinvoke r43.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp negate()>();

     label6:
        $r15 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r43);

        return $r15;
    }

    public static org.apache.commons.math3.dfp.Dfp asin(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp r0, $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r2 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r0);

        $r3 = virtualinvoke $r1.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>($r4);

        $r6 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)>($r5);

        return $r6;
    }

    public static org.apache.commons.math3.dfp.Dfp acos(org.apache.commons.math3.dfp.Dfp)
    {
        org.apache.commons.math3.dfp.Dfp $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, r10, r11, r12;
        boolean $z0, z1;
        org.apache.commons.math3.dfp.DfpField $r8;

        r10 := @parameter0: org.apache.commons.math3.dfp.Dfp;

        z1 = 0;

        $r0 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getZero()>();

        $z0 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: boolean lessThan(org.apache.commons.math3.dfp.Dfp)>($r0);

        if $z0 == 0 goto label1;

        z1 = 1;

     label1:
        $r1 = virtualinvoke r10.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        r11 = staticinvoke <org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp copysign(org.apache.commons.math3.dfp.Dfp,org.apache.commons.math3.dfp.Dfp)>(r10, $r1);

        $r2 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp getOne()>();

        $r3 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp multiply(org.apache.commons.math3.dfp.Dfp)>(r11);

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>($r3);

        $r5 = virtualinvoke $r4.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp sqrt()>();

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp divide(org.apache.commons.math3.dfp.Dfp)>(r11);

        r12 = staticinvoke <org.apache.commons.math3.dfp.DfpMath: org.apache.commons.math3.dfp.Dfp atan(org.apache.commons.math3.dfp.Dfp)>($r6);

        if z1 == 0 goto label2;

        $r8 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.DfpField getField()>();

        $r9 = virtualinvoke $r8.<org.apache.commons.math3.dfp.DfpField: org.apache.commons.math3.dfp.Dfp getPi()>();

        r12 = virtualinvoke $r9.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp subtract(org.apache.commons.math3.dfp.Dfp)>(r12);

     label2:
        $r7 = virtualinvoke r11.<org.apache.commons.math3.dfp.Dfp: org.apache.commons.math3.dfp.Dfp newInstance(org.apache.commons.math3.dfp.Dfp)>(r12);

        return $r7;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.dfp.DfpMath: java.lang.String POW_TRAP> = "pow";

        return;
    }
}
