public class com.opengamma.analytics.math.function.special.JacobiPolynomialFunction extends com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator
{

    public void <init>()
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        specialinvoke r0.<com.opengamma.analytics.math.function.special.OrthogonalPolynomialFunctionGenerator: void <init>()>();

        return;
    }

    public com.opengamma.analytics.math.function.DoubleFunction1D[] getPolynomials(int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Need values for alpha and beta for Jacobi polynomial function generation");

        throw $r1;
    }

    public com.opengamma.util.tuple.Pair[] getPolynomialsAndFirstDerivative(int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Need values for alpha and beta for Jacobi polynomial function generation");

        throw $r1;
    }

    public com.opengamma.analytics.math.function.DoubleFunction1D[] getPolynomials(int, double, double)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        int i0, i1, $i2, $i3, i4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;
        com.opengamma.analytics.math.function.DoubleFunction1D[] r1;
        com.opengamma.analytics.math.function.DoubleFunction1D $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r15;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r13;
        double[] $r14;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        $i2 = i0 + 1;

        r1 = newarray (com.opengamma.analytics.math.function.DoubleFunction1D)[$i2];

        i4 = 0;

     label3:
        if i4 > i0 goto label7;

        if i4 != 0 goto label4;

        $r15 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.analytics.math.function.DoubleFunction1D getOne()>();

        r1[i4] = $r15;

        goto label6;

     label4:
        if i4 != 1 goto label5;

        $r13 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r14 = newarray (double)[2];

        $d6 = d0 - d1;

        $d7 = $d6 / 2.0;

        $r14[0] = $d7;

        $d8 = d0 + d1;

        $d9 = $d8 + 2.0;

        $d10 = $d9 / 2.0;

        $r14[1] = $d10;

        specialinvoke $r13.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r14);

        r1[i4] = $r13;

        goto label6;

     label5:
        i1 = i4 - 1;

        $r2 = r1[i1];

        $d2 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getB(double,double,int)>(d0, d1, i1);

        $r3 = virtualinvoke $r2.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d2);

        $r4 = r1[i1];

        $r5 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.analytics.math.function.DoubleFunction1D getX()>();

        $r6 = virtualinvoke $r4.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(com.opengamma.analytics.math.function.DoubleFunction1D)>($r5);

        $d3 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getC(double,double,int)>(d0, d1, i1);

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d3);

        $i3 = i1 - 1;

        $r8 = r1[$i3];

        $d4 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getD(double,double,int)>(d0, d1, i1);

        $r9 = virtualinvoke $r8.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d4);

        $r10 = virtualinvoke $r7.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)>($r9);

        $r11 = virtualinvoke $r3.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)>($r10);

        $d5 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getA(double,double,int)>(d0, d1, i1);

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D divide(double)>($d5);

        r1[i4] = $r12;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        return r1;
    }

    public com.opengamma.util.tuple.Pair[] getPolynomialsAndFirstDerivative(int, double, double)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        int i0, $i1, $i2, i3, i4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        com.opengamma.util.tuple.Pair[] r1;
        com.opengamma.analytics.math.function.DoubleFunction1D r2, r3, r4, r5, r6, r7, r8, $r13, $r14, $r15, $r16, $r23, $r24;
        com.opengamma.util.tuple.Pair $r9, $r11, $r17, $r22, $r25;
        java.lang.Object $r10, $r12;
        com.opengamma.analytics.math.function.RealPolynomialFunction1D $r18, $r20;
        double[] $r19, $r21;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean)>($z0);

        $i1 = i0 + 1;

        r1 = newarray (com.opengamma.util.tuple.Pair)[$i1];

        i3 = 0;

     label3:
        if i3 > i0 goto label7;

        if i3 != 0 goto label4;

        $r23 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.analytics.math.function.DoubleFunction1D getOne()>();

        $r24 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.analytics.math.function.DoubleFunction1D getZero()>();

        $r25 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>($r23, $r24);

        r1[i3] = $r25;

        goto label6;

     label4:
        if i3 != 1 goto label5;

        $d6 = d0 + d1;

        $d7 = $d6 + 2.0;

        d10 = $d7 / 2.0;

        $r18 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r19 = newarray (double)[2];

        $d8 = d0 - d1;

        $d9 = $d8 / 2.0;

        $r19[0] = $d9;

        $r19[1] = d10;

        specialinvoke $r18.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r19);

        $r20 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r21 = newarray (double)[1];

        $r21[0] = d10;

        specialinvoke $r20.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r21);

        $r22 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>($r18, $r20);

        r1[i3] = $r22;

        goto label6;

     label5:
        i4 = i3 - 1;

        $r9 = r1[i4];

        $r10 = virtualinvoke $r9.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r4 = (com.opengamma.analytics.math.function.DoubleFunction1D) $r10;

        $i2 = i4 - 1;

        $r11 = r1[$i2];

        $r12 = virtualinvoke $r11.<com.opengamma.util.tuple.Pair: java.lang.Object getFirst()>();

        r5 = (com.opengamma.analytics.math.function.DoubleFunction1D) $r12;

        $d2 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getB(double,double,int)>(d0, d1, i4);

        r6 = virtualinvoke r4.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d2);

        $r13 = virtualinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: com.opengamma.analytics.math.function.DoubleFunction1D getX()>();

        $r14 = virtualinvoke r4.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(com.opengamma.analytics.math.function.DoubleFunction1D)>($r13);

        $d3 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getC(double,double,int)>(d0, d1, i4);

        r7 = virtualinvoke $r14.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d3);

        $d4 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getD(double,double,int)>(d0, d1, i4);

        r8 = virtualinvoke r5.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)>($d4);

        $r15 = virtualinvoke r6.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)>(r7);

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)>(r8);

        $d5 = specialinvoke r0.<com.opengamma.analytics.math.function.special.JacobiPolynomialFunction: double getA(double,double,int)>(d0, d1, i4);

        r2 = virtualinvoke $r16.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D divide(double)>($d5);

        r3 = virtualinvoke r2.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D derivative()>();

        $r17 = staticinvoke <com.opengamma.util.tuple.Pairs: com.opengamma.util.tuple.Pair of(java.lang.Object,java.lang.Object)>(r2, r3);

        r1[i3] = $r17;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return r1;
    }

    private double getA(double, double, int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $i1 = i0 + 1;

        $i2 = 2 * $i1;

        $d6 = (double) $i2;

        $d2 = (double) i0;

        $d3 = $d2 + d0;

        $d4 = $d3 + d1;

        $d5 = $d4 + 1.0;

        $d10 = $d6 * $d5;

        $i3 = 2 * i0;

        $d7 = (double) $i3;

        $d8 = $d7 + d0;

        $d9 = $d8 + d1;

        $d11 = $d10 * $d9;

        return $d11;
    }

    private double getB(double, double, int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        int i0, $i1;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $i1 = 2 * i0;

        $d2 = (double) $i1;

        $d3 = $d2 + d0;

        $d4 = $d3 + d1;

        $d8 = $d4 + 1.0;

        $d6 = d0 * d0;

        $d5 = d1 * d1;

        $d7 = $d6 - $d5;

        $d9 = $d8 * $d7;

        return $d9;
    }

    private double getC(double, double, int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        int i0, $i1;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $i1 = 2 * i0;

        $d3 = (double) $i1;

        $d4 = $d3 + d0;

        d2 = $d4 + d1;

        $d5 = d2 + 1.0;

        $d7 = d2 * $d5;

        $d6 = d2 + 2.0;

        $d8 = $d7 * $d6;

        return $d8;
    }

    private double getD(double, double, int)
    {
        com.opengamma.analytics.math.function.special.JacobiPolynomialFunction r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12;
        int i0, $i1;

        r0 := @this: com.opengamma.analytics.math.function.special.JacobiPolynomialFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $d2 = (double) i0;

        $d3 = $d2 + d0;

        $d6 = -2.0 * $d3;

        $d4 = (double) i0;

        $d5 = $d4 + d1;

        $d11 = $d6 * $d5;

        $i1 = 2 * i0;

        $d7 = (double) $i1;

        $d8 = $d7 + d0;

        $d9 = $d8 + d1;

        $d10 = $d9 + 2.0;

        $d12 = $d11 * $d10;

        return $d12;
    }
}
