public class com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward extends java.lang.Object implements com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface
{
    private final java.util.Map _discountingCurves;
    private final java.util.Map _forwardONCurves;
    private final java.util.Map _forwardIborCurves;
    private final com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix;
    private java.util.Map _allCurves;

    public void <init>()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.HashMap $r1, $r2;
        java.util.LinkedHashMap $r3;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r4;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves> = $r3;

        $r4 = new com.opengamma.analytics.financial.forex.method.FXMatrix;

        specialinvoke $r4.<com.opengamma.analytics.financial.forex.method.FXMatrix: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = $r4;

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void <init>(com.opengamma.analytics.financial.forex.method.FXMatrix)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.forex.method.FXMatrix r1;
        java.util.HashMap $r2, $r3;
        java.util.LinkedHashMap $r4;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.forex.method.FXMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves> = $r3;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves> = $r4;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = r1;

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void <init>(java.util.Map, java.util.Map, java.util.Map, com.opengamma.analytics.financial.forex.method.FXMatrix)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map r1, r2, r3;
        com.opengamma.analytics.financial.forex.method.FXMatrix r4;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: com.opengamma.analytics.financial.forex.method.FXMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves> = r1;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves> = r2;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves> = r3;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = r4;

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void <init>(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, r1;
        java.util.Map $r2, $r3, $r4;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r5;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves> = $r2;

        $r3 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves> = $r3;

        $r4 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves> = $r4;

        $r5 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix> = $r5;

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface getMulticurveProvider()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        return r0;
    }

    public com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward copy()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r13;
        java.util.LinkedHashMap $r5, $r7, $r9;
        java.util.Map $r6, $r8, $r10;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r11, $r12;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r5 = new java.util.LinkedHashMap;

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r6);

        $r7 = new java.util.LinkedHashMap;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        specialinvoke $r7.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r8);

        $r9 = new java.util.LinkedHashMap;

        $r10 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        specialinvoke $r9.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r10);

        $r11 = new com.opengamma.analytics.financial.forex.method.FXMatrix;

        $r12 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        specialinvoke $r11.<com.opengamma.analytics.financial.forex.method.FXMatrix: void <init>(com.opengamma.analytics.financial.forex.method.FXMatrix)>($r12);

        $r13 = new com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        specialinvoke $r13.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void <init>(java.util.Map,java.util.Map,java.util.Map,com.opengamma.analytics.financial.forex.method.FXMatrix)>($r5, $r7, $r9, $r11);

        return $r13;
    }

    private void setAllCurves()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Set r1, r34, r38;
        java.lang.String r2, r33, r37;
        java.util.LinkedHashMap $r3;
        java.util.Map $r4, $r5, $r6, $r8, $r11, $r12, $r16, $r19, $r20, $r24, $r27, $r28;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r9, $r13, $r15, $r17, $r21, $r23, $r25, $r29;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10, $r26;
        com.opengamma.analytics.math.curve.DoublesCurve $r18;
        java.util.Iterator r31, r35, r39;
        com.opengamma.util.money.Currency r32;
        com.opengamma.analytics.financial.instrument.index.IborIndex r36;
        com.opengamma.analytics.financial.instrument.index.IndexON r40;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves> = $r3;

        $r4 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        r1 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r31 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r23 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (com.opengamma.util.money.Currency) $r23;

        $r24 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        $r26 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r25;

        r33 = virtualinvoke $r26.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: java.lang.String getName()>();

        $r28 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        $r27 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r29 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, $r29);

        goto label1;

     label2:
        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        r34 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r35 = interfaceinvoke r34.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r15 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.opengamma.analytics.financial.instrument.index.IborIndex) $r15;

        $r16 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r36);

        $r18 = (com.opengamma.analytics.math.curve.DoublesCurve) $r17;

        r37 = virtualinvoke $r18.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.String getName()>();

        $r20 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        $r19 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r21 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r36);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, $r21);

        goto label3;

     label4:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        r38 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        r39 = interfaceinvoke r38.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r7 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (com.opengamma.analytics.financial.instrument.index.IndexON) $r7;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        r2 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: java.lang.String getName()>();

        $r12 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r40);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r13);

        goto label5;

     label6:
        return;
    }

    public double[] parameterSensitivity(java.lang.String, java.util.List)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.lang.String r1;
        java.util.List r2;
        java.lang.Object r3, $r10;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r4;
        int i0, $i1, i2;
        double[] r5, r8;
        java.util.Iterator r6;
        com.opengamma.util.tuple.DoublesPair r7;
        java.util.Map $r9;
        boolean $z0, $z1;
        java.lang.Double $r11, $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r9 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        r3 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r3 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Curve not a YieldAndDiscountCurve, can not compute sensitivity");

        r4 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) r3;

        i0 = virtualinvoke r4.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: int getNumberOfParameters()>();

        r5 = newarray (double)[i0];

        if r2 == null goto label4;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        r6 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.opengamma.util.tuple.DoublesPair) $r10;

        $r11 = virtualinvoke r7.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getFirst()>();

        $d0 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        r8 = virtualinvoke r4.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double[] getInterestRateParameterSensitivity(double)>($d0);

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $d1 = r5[i2];

        $r12 = virtualinvoke r7.<com.opengamma.util.tuple.DoublesPair: java.lang.Double getSecond()>();

        $d2 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $d3 = r8[i2];

        $d4 = $d2 * $d3;

        $d5 = $d1 + $d4;

        r5[i2] = $d5;

        i2 = i2 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return r5;
    }

    public double[] parameterForwardSensitivity(java.lang.String, java.util.List)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.lang.String r1;
        java.util.List r2;
        java.lang.Object r3, $r7, $r10;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, d28;
        double[] r4, r5, r12, r16;
        java.util.Map $r6;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, i2, i3, i4, i5;
        java.lang.Double $r8, $r9;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r11;
        java.util.Iterator r13, r17;
        com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity r14, r18;
        com.opengamma.analytics.math.curve.DoublesCurve r15;
        java.lang.Double[] r19;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        r3 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r3 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        if $z0 == 0 goto label5;

        r11 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) r3;

        i2 = virtualinvoke r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: int getNumberOfParameters()>();

        r12 = newarray (double)[i2];

        if r2 == null goto label4;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        r13 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r10 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r10;

        d28 = virtualinvoke r14.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        d0 = virtualinvoke r14.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getEndTime()>();

        d1 = virtualinvoke r14.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getAccrualFactor()>();

        d2 = virtualinvoke r14.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        d3 = virtualinvoke r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d28);

        d4 = virtualinvoke r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $d13 = neg d28;

        $d15 = $d13 * d3;

        $d14 = d4 * d1;

        d5 = $d15 / $d14;

        $d17 = d0 * d3;

        $d16 = d4 * d1;

        d6 = $d17 / $d16;

        r4 = virtualinvoke r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double[] getInterestRateParameterSensitivity(double)>(d28);

        r5 = virtualinvoke r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double[] getInterestRateParameterSensitivity(double)>(d0);

        i3 = 0;

     label2:
        if i3 >= i2 goto label3;

        $d21 = r12[i3];

        $d18 = r4[i3];

        $d19 = d5 * $d18;

        $d20 = $d19 * d2;

        $d22 = $d21 + $d20;

        r12[i3] = $d22;

        $d26 = r12[i3];

        $d23 = r5[i3];

        $d24 = d6 * $d23;

        $d25 = $d24 * d2;

        $d27 = $d26 + $d25;

        r12[i3] = $d27;

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label1;

     label4:
        return r12;

     label5:
        $z1 = r3 instanceof com.opengamma.analytics.math.curve.DoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Curve not a DoublesCurve, can not computed sensitivity");

        r15 = (com.opengamma.analytics.math.curve.DoublesCurve) r3;

        i4 = virtualinvoke r15.<com.opengamma.analytics.math.curve.DoublesCurve: int size()>();

        r16 = newarray (double)[i4];

        if r2 == null goto label9;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label9;

        r17 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r7 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity) $r7;

        $d7 = virtualinvoke r18.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getStartTime()>();

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d7);

        r19 = virtualinvoke r15.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Double[] getYValueParameterSensitivity(java.lang.Double)>($r8);

        i5 = 0;

     label7:
        if i5 >= i4 goto label8;

        $d8 = r16[i5];

        $d9 = virtualinvoke r18.<com.opengamma.analytics.financial.provider.sensitivity.multicurve.ForwardSensitivity: double getValue()>();

        $r9 = r19[i5];

        $d10 = virtualinvoke $r9.<java.lang.Double: double doubleValue()>();

        $d11 = $d9 * $d10;

        $d12 = $d8 + $d11;

        r16[i5] = $d12;

        i5 = i5 + 1;

        goto label7;

     label8:
        goto label6;

     label9:
        return r16;
    }

    public java.lang.Integer getNumberOfParameters(java.lang.String)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r3;
        boolean $z0, $z1;
        com.opengamma.analytics.math.curve.DoublesCurve $r4;
        int $i0, $i1;
        java.lang.Integer $r5, $r7;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r6;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r2 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        if $z0 == 0 goto label1;

        $r6 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) r2;

        $i1 = virtualinvoke $r6.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: int getNumberOfParameters()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r7;

     label1:
        $z1 = r2 instanceof com.opengamma.analytics.math.curve.DoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Curve not a DoublesCurve; cannot get number of parameters");

        $r4 = (com.opengamma.analytics.math.curve.DoublesCurve) r2;

        $i0 = virtualinvoke $r4.<com.opengamma.analytics.math.curve.DoublesCurve: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;
    }

    public java.util.List getUnderlyingCurvesNames(java.lang.String)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r4;
        boolean $z0, $z1;
        java.util.ArrayList $r5;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r6;
        java.util.List $r7;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        r2 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = r2 instanceof com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        if $z0 == 0 goto label1;

        $r6 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) r2;

        $r7 = virtualinvoke $r6.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: java.util.List getUnderlyingCurvesNames()>();

        return $r7;

     label1:
        $z1 = r2 instanceof com.opengamma.analytics.math.curve.DoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "Curve not a DoublesCurve");

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        return $r5;
    }

    public double getDiscountFactor(com.opengamma.util.money.Currency, java.lang.Double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1;
        java.lang.Double r2;
        java.util.Map $r3, $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.Object $r10;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r11;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        r2 := @parameter1: java.lang.Double;

        $r3 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r9 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r10;

        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        $d1 = virtualinvoke $r11.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>($d0);

        return $d1;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currency discounting curve not found: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;
    }

    public java.lang.String getName(com.opengamma.util.money.Currency)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r11;
        java.lang.Object $r9;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: java.lang.String getName()>();

        return $r11;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currency discounting curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public java.util.Set getCurrencies()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public double getInvestmentFactor(com.opengamma.analytics.financial.instrument.index.IborIndex, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        double d0, d1, d2, $d3, $d4, $d5;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;
        java.lang.Double $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d3 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        $d4 = d2 * $d3;

        $d5 = 1.0 + $d4;

        return $d5;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getSimplyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IborIndex, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        double d0, d1, d2, $d3;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;
        java.lang.Double $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d3 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        return $d3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getSimplyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IborIndex, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        double d0, d1, $d2;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;
        java.lang.Double $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d2 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        return $d2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getAnnuallyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IborIndex, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        double d0, d1, d2, $d3;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;
        java.lang.Double $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d3 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        return $d3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getAnnuallyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IborIndex, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        double d0, d1, $d2;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;
        java.lang.Double $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r12 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.Object getYValue(java.lang.Comparable)>($r11);

        $r13 = (java.lang.Double) $r12;

        $d2 = virtualinvoke $r13.<java.lang.Double: double doubleValue()>();

        return $d2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public java.lang.String getName(com.opengamma.analytics.financial.instrument.index.IborIndex)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r11;
        java.lang.Object $r9;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.math.curve.DoublesCurve: java.lang.String getName()>();

        return $r11;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public java.util.Set getIndexesIbor()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public double getInvestmentFactor(com.opengamma.analytics.financial.instrument.index.IndexON, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        double d0, d1, d2, $d3, $d4, $d5;
        java.util.Map $r2, $r8, $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $d3 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r12;

        $d4 = virtualinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d1);

        $d5 = $d3 / $d4;

        return $d5;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward ON curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getSimplyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IndexON, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7;
        java.util.Map $r2, $r8, $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $d3 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r12;

        $d4 = virtualinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d1);

        $d5 = $d3 / $d4;

        $d6 = $d5 - 1.0;

        $d7 = $d6 / d2;

        return $d7;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward ON curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getSimplyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IndexON, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b0;
        java.util.Map $r2, $r8, $r11;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "sart time should be different from end time");

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $d2 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r12;

        $d3 = virtualinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d1);

        $d4 = $d2 / $d3;

        $d6 = $d4 - 1.0;

        $d5 = d1 - d0;

        $d7 = $d6 / $d5;

        return $d7;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward ON curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getAnnuallyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IndexON, double, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;
        byte $b0;
        java.util.Map $r2, $r8, $r11;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9, $r12;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        $b0 = d2 cmpl 0.0;

        if $b0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "The accrual factor can\'t be null");

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $d3 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d0);

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r12;

        $d4 = virtualinvoke $r13.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: double getDiscountFactor(double)>(d1);

        $d6 = $d3 / $d4;

        $d5 = 1.0 / d2;

        $d7 = staticinvoke <java.lang.Math: double pow(double,double)>($d6, $d5);

        $d8 = $d7 - 1.0;

        return $d8;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public double getAnnuallyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IndexON, double, double)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        double d0, d1, d2, $d3;
        byte $b0;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $b0 = d0 cmpl d1;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Start time should be different from end time");

        d2 = d1 - d0;

        $d3 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: double getAnnuallyCompoundForwardRate(com.opengamma.analytics.financial.instrument.index.IndexON,double,double,double)>(r1, d0, d1, d2);

        return $d3;
    }

    public java.lang.String getName(com.opengamma.analytics.financial.instrument.index.IndexON)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7, $r11;
        java.lang.Object $r9;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        $r11 = virtualinvoke $r10.<com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve: java.lang.String getName()>();

        return $r11;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public java.util.Set getIndexesON()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public void setCurve(com.opengamma.util.money.Currency, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "currency");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currency discounting curve already set: ");

        $r11 = virtualinvoke r1.<com.opengamma.util.money.Currency: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void setCurve(com.opengamma.analytics.financial.instrument.index.IndexON, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "index");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ON index forward curve already set: ");

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.instrument.index.IndexON: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void setCurve(com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.analytics.math.curve.DoublesCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        com.opengamma.analytics.math.curve.DoublesCurve r2;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r12;
        java.lang.String $r11, $r13;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r2 := @parameter1: com.opengamma.analytics.math.curve.DoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "index");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ibor index forward curve already set: ");

        $r11 = virtualinvoke r1.<com.opengamma.analytics.financial.instrument.index.IborIndex: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void setAll(com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, r1;
        java.util.Map $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Market bundle");

        $r4 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r3 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>($r3);

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r5 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>($r5);

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r7 = r1.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        interfaceinvoke $r8.<java.util.Map: void putAll(java.util.Map)>($r7);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public java.util.Set getAllNames()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Set $r1;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Set getAllCurveNames()>();

        return $r1;
    }

    public java.util.Set getAllCurveNames()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.TreeSet $r1;
        java.util.Map $r2;
        java.util.Set $r3;
        java.util.SortedSet $r4;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = new java.util.TreeSet;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _allCurves>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.TreeSet: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>($r1);

        return $r4;
    }

    public com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(com.opengamma.util.money.Currency)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        return $r10;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currency discounting curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public com.opengamma.analytics.math.curve.DoublesCurve getCurve(com.opengamma.analytics.financial.instrument.index.IborIndex)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9;
        com.opengamma.analytics.math.curve.DoublesCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.math.curve.DoublesCurve) $r9;

        return $r10;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve getCurve(com.opengamma.analytics.financial.instrument.index.IndexON)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        java.util.Map $r2, $r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.Object $r9;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r10 = (com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve) $r9;

        return $r10;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not found: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;
    }

    public void replaceCurve(com.opengamma.util.money.Currency, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Currency");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Currency discounting curve not in set: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public void replaceCurve(com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.analytics.math.curve.DoublesCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        com.opengamma.analytics.math.curve.DoublesCurve r2;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.String $r12;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r2 := @parameter1: com.opengamma.analytics.math.curve.DoublesCurve;

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "Index");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "curve");

        $r5 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forward curve not in set: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        specialinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void setAllCurves()>();

        return;
    }

    public double getFxRate(com.opengamma.util.money.Currency, com.opengamma.util.money.Currency)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.util.money.Currency r1, r2;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r3;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        r2 := @parameter1: com.opengamma.util.money.Currency;

        $r3 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $d0 = virtualinvoke $r3.<com.opengamma.analytics.financial.forex.method.FXMatrix: double getFxRate(com.opengamma.util.money.Currency,com.opengamma.util.money.Currency)>(r1, r2);

        return $d0;
    }

    public com.opengamma.analytics.financial.forex.method.FXMatrix getFxRates()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r1;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        return $r1;
    }

    public java.util.Map getDiscountingCurves()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getForwardIborCurves()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public java.util.Map getForwardONCurves()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1, $r2;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward withDiscountFactor(com.opengamma.util.money.Currency, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r8;
        com.opengamma.util.money.Currency r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.LinkedHashMap $r5;
        java.util.Map $r6, $r10, $r11;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r9;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.util.money.Currency;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        $r5 = new java.util.LinkedHashMap;

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r6);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r8 = new com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r10 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        specialinvoke $r8.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void <init>(java.util.Map,java.util.Map,java.util.Map,com.opengamma.analytics.financial.forex.method.FXMatrix)>($r5, $r11, $r10, $r9);

        return $r8;
    }

    public com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward withForward(com.opengamma.analytics.financial.instrument.index.IborIndex, com.opengamma.analytics.math.curve.DoublesCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r8;
        com.opengamma.analytics.financial.instrument.index.IborIndex r1;
        com.opengamma.analytics.math.curve.DoublesCurve r2;
        java.util.LinkedHashMap $r5;
        java.util.Map $r6, $r10, $r11;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r9;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IborIndex;

        r2 := @parameter1: com.opengamma.analytics.math.curve.DoublesCurve;

        $r5 = new java.util.LinkedHashMap;

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r6);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r8 = new com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r10 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r9 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        specialinvoke $r8.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void <init>(java.util.Map,java.util.Map,java.util.Map,com.opengamma.analytics.financial.forex.method.FXMatrix)>($r11, $r5, $r10, $r9);

        return $r8;
    }

    public com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward withForward(com.opengamma.analytics.financial.instrument.index.IndexON, com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r8;
        com.opengamma.analytics.financial.instrument.index.IndexON r1;
        com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve r2;
        java.util.LinkedHashMap $r5;
        java.util.Map $r6, $r10, $r11;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r9;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: com.opengamma.analytics.financial.instrument.index.IndexON;

        r2 := @parameter1: com.opengamma.analytics.financial.model.interestrate.curve.YieldAndDiscountCurve;

        $r5 = new java.util.LinkedHashMap;

        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r6);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r8 = new com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r11 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r10 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r9 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        specialinvoke $r8.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: void <init>(java.util.Map,java.util.Map,java.util.Map,com.opengamma.analytics.financial.forex.method.FXMatrix)>($r11, $r10, $r5, $r9);

        return $r8;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0;
        java.util.Map $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r4;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $i2 = interfaceinvoke $r1.<java.util.Map: int hashCode()>();

        i10 = $i1 + $i2;

        $i3 = 31 * i10;

        $r2 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $i4 = interfaceinvoke $r2.<java.util.Map: int hashCode()>();

        i11 = $i3 + $i4;

        $i5 = 31 * i11;

        $r3 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $i6 = interfaceinvoke $r3.<java.util.Map: int hashCode()>();

        i12 = $i5 + $i6;

        $i7 = 31 * i12;

        $r4 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $i8 = virtualinvoke $r4.<com.opengamma.analytics.financial.forex.method.FXMatrix: int hashCode()>();

        i13 = $i7 + $i8;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map $r3, $r4, $r5, $r6, $r7, $r8;
        com.opengamma.analytics.financial.forex.method.FXMatrix $r9, $r10;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward) r1;

        $r4 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $r3 = r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _discountingCurves>;

        $z1 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $r5 = r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardIborCurves>;

        $z2 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $r7 = r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: java.util.Map _forwardONCurves>;

        $z3 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $r10 = r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $r9 = r2.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.forex.method.FXMatrix _fxMatrix>;

        $z4 = staticinvoke <org.apache.commons.lang.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z4 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public volatile com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderInterface copy()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r1;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward copy()>();

        return $r1;
    }

    public volatile com.opengamma.analytics.financial.provider.description.interestrate.ParameterProviderInterface copy()
    {
        com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward r0, $r1;

        r0 := @this: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward: com.opengamma.analytics.financial.provider.description.interestrate.MulticurveProviderForward copy()>();

        return $r1;
    }
}
