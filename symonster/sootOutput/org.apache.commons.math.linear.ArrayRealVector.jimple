public class org.apache.commons.math.linear.ArrayRealVector extends org.apache.commons.math.linear.AbstractRealVector implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT;
    protected double[] data;

    public void <init>()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r1 = newarray (double)[0];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r1;

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r1;

        return;
    }

    public void <init>(int, double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0;
        double d0;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r1 = newarray (double)[i0];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r1;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r2, d0);

        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r3;

        return;
    }

    public void <init>(double[], boolean)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r4;
        boolean z0;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (double[]) $r2;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r4;

        return;
    }

    public void <init>(double[], int, int)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r2, $r3;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;
        java.lang.Integer $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i3 = lengthof r1;

        $i2 = i0 + i1;

        if $i3 >= $i2 goto label1;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POSITION_SIZE_MISMATCH_INPUT_ARRAY>;

        $r4 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4[1] = $r7;

        $i4 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r4[2] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r9;

     label1:
        $r2 = newarray (double)[i1];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r3, 0, i1);

        return;
    }

    public void <init>(java.lang.Double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        java.lang.Double[] r1;
        int $i0, $i1, i2;
        double[] $r2, $r4;
        java.lang.Double $r3;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: java.lang.Double[];

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = lengthof r1;

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r2;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = r1[i2];

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(java.lang.Double[], int, int)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        java.lang.Double[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        double[] $r2, $r4;
        java.lang.Double $r3;
        double $d0;
        java.lang.Object[] $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r6;
        java.lang.Integer $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: java.lang.Double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i3 = lengthof r1;

        $i2 = i0 + i1;

        if $i3 >= $i2 goto label1;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POSITION_SIZE_MISMATCH_INPUT_ARRAY>;

        $r5 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[1] = $r8;

        $i6 = lengthof r1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r5[2] = $r9;

        $r10 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r10;

     label1:
        $r2 = newarray (double)[i1];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r2;

        i7 = i0;

     label2:
        $i4 = i0 + i1;

        if i7 >= $i4 goto label3;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i5 = i7 - i0;

        $r3 = r1[i7];

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        $r4[$i5] = $d0;

        i7 = i7 + 1;

        goto label2;

     label3:
        return;
    }

    public void <init>(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        int $i0, $i1, i2;
        double[] $r2, $r3, $r4;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r2 = newarray (double)[$i0];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r2;

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i2);

        $r4[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,boolean)>(r1, 1);

        return;
    }

    public void <init>(org.apache.commons.math.linear.ArrayRealVector, boolean)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        boolean z0;
        double[] $r2, $r5;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        if z0 == 0 goto label1;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r3;

        goto label2;

     label1:
        $r5 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

     label2:
        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r5;

        return;
    }

    public void <init>(org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, r2;
        double[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        r2 := @parameter1: org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r3 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r3;

        $r4 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r4;

        $i2 = $i1 + $i0;

        $r5 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r5;

        $r8 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r7 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r6 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i3 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r7, 0, $i3);

        $r12 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r11 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r9 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i5 = lengthof $r9;

        $r10 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i4 = lengthof $r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, $r11, $i5, $i4);

        return;
    }

    public void <init>(org.apache.commons.math.linear.ArrayRealVector, org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        org.apache.commons.math.linear.RealVector r2;
        int i0, i1, $i2, $i3, i4;
        double[] $r3, $r4, $r5, $r6, $r7;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        r2 := @parameter1: org.apache.commons.math.linear.RealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        $r3 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r3;

        i1 = interfaceinvoke r2.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $i2 = i0 + i1;

        $r4 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r4;

        $r6 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, i0);

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $r7 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i3 = i0 + i4;

        $d0 = interfaceinvoke r2.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i4);

        $r7[$i3] = $d0;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.commons.math.linear.RealVector, org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r2;
        org.apache.commons.math.linear.RealVector r1;
        int i0, i1, $i2, i3;
        double[] $r3, $r4, $r5, $r6, $r7;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        r2 := @parameter1: org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $r3 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i1 = lengthof $r3;

        $i2 = i0 + i1;

        $r4 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r7 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i3);

        $r7[i3] = $d0;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r6 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, i0, i1);

        return;
    }

    public void <init>(org.apache.commons.math.linear.ArrayRealVector, double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] r2, $r3, $r4, $r5, $r6;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        i0 = virtualinvoke r1.<org.apache.commons.math.linear.ArrayRealVector: int getDimension()>();

        i1 = lengthof r2;

        $i2 = i0 + i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r3;

        $r5 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, 0, i0);

        $r6 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, i0, i1);

        return;
    }

    public void <init>(double[], org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r2;
        double[] r1, $r3, $r4, $r5, $r6;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        i0 = lengthof r1;

        i1 = virtualinvoke r2.<org.apache.commons.math.linear.ArrayRealVector: int getDimension()>();

        $i2 = i0 + i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r3;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, i0);

        $r6 = r2.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, i0, i1);

        return;
    }

    public void <init>(double[], double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, r2, $r3, $r4, $r5;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<org.apache.commons.math.linear.AbstractRealVector: void <init>()>();

        i0 = lengthof r1;

        i1 = lengthof r2;

        $i2 = i0 + i1;

        $r3 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data> = $r3;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, i0);

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r5, i0, i1);

        return;
    }

    public org.apache.commons.math.linear.AbstractRealVector copy()
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r1.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,boolean)>(r0, 1);

        return $r1;
    }

    public org.apache.commons.math.linear.RealVector add(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r7, $r10, $r11;
        org.apache.commons.math.linear.RealVector r1;
        double[] r2, $r5;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8;
        org.apache.commons.math.linear.RealVector$Entry $r9;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r10 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r11 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector)>($r10);

        return $r11;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r6;

        r3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: java.util.Iterator sparseIterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.commons.math.linear.RealVector$Entry) $r8;

        if $r9 == null goto label3;

        $i0 = virtualinvoke $r9.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = r2[$i0];

        $d1 = virtualinvoke $r9.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = $d0 + $d1;

        r2[$i0] = $d2;

        goto label2;

     label3:
        $r7 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r7.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r7;
    }

    public org.apache.commons.math.linear.RealVector add(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6;
        double[] r1, r2, $r3, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $d1 = r2[i2];

        $d0 = r1[i2];

        $d2 = $d1 + $d0;

        r2[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.ArrayRealVector add(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r4;
        double[] $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector add(double[])>($r2);

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) $r3;

        return $r4;
    }

    public org.apache.commons.math.linear.RealVector subtract(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r7, $r10, $r11;
        org.apache.commons.math.linear.RealVector r1;
        double[] r2, $r5;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8;
        org.apache.commons.math.linear.RealVector$Entry $r9;
        int $i0;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r10 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r11 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector)>($r10);

        return $r11;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r6;

        r3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: java.util.Iterator sparseIterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.commons.math.linear.RealVector$Entry) $r8;

        if $r9 == null goto label3;

        $i0 = virtualinvoke $r9.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = r2[$i0];

        $d1 = virtualinvoke $r9.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = $d0 - $d1;

        r2[$i0] = $d2;

        goto label2;

     label3:
        $r7 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r7.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r7;
    }

    public org.apache.commons.math.linear.RealVector subtract(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6;
        double[] r1, r2, $r3, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $d1 = r2[i2];

        $d0 = r1[i2];

        $d2 = $d1 - $d0;

        r2[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.ArrayRealVector subtract(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r4;
        double[] $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector subtract(double[])>($r2);

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) $r3;

        return $r4;
    }

    public org.apache.commons.math.linear.RealVector mapAddToSelf(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0, $d1, $d2;
        double[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r2[i1];

        $d2 = $d1 + d0;

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapSubtractToSelf(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0, $d1, $d2;
        double[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r2[i1];

        $d2 = $d1 - d0;

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapMultiplyToSelf(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0, $d1, $d2;
        double[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r2[i1];

        $d2 = $d1 * d0;

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapDivideToSelf(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0, $d1, $d2;
        double[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r2[i1];

        $d2 = $d1 / d0;

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapPowToSelf(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0, $d1, $d2;
        double[] $r1, $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r2[i1];

        $d2 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>($d1, d0);

        $r3[i1] = $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapExpToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapExpm1ToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double expm1(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapLogToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapLog10ToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double log10(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapLog1pToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double log1p(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapCoshToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double cosh(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapSinhToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sinh(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapTanhToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double tanh(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapCosToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double cos(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapSinToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sin(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapTanToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double tan(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapAcosToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double acos(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapAsinToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double asin(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapAtanToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double atan(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapInvToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = 1.0 / $d0;

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapAbsToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapSqrtToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapCbrtToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double cbrt(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapCeilToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapFloorToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double floor(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapRintToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double rint(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapSignumToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double signum(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector mapUlpToSelf()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r2, $r3;
        int $i0, i1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i1 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r2[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double ulp(double)>($d0);

        $r3[i1] = $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public org.apache.commons.math.linear.RealVector ebeMultiply(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6, $r7, $r8;
        org.apache.commons.math.linear.RealVector r1;
        double[] r2, $r3, $r5;
        boolean $z0;
        java.lang.Object $r4;
        int $i0, i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r8 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector)>($r7);

        return $r8;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i1 = 0;

     label2:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        $d0 = r2[i1];

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        $d2 = $d0 * $d1;

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealVector ebeMultiply(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6;
        double[] r1, r2, $r3, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $d1 = r2[i2];

        $d0 = r1[i2];

        $d2 = $d1 * $d0;

        r2[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.ArrayRealVector ebeMultiply(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r4;
        double[] $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector ebeMultiply(double[])>($r2);

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) $r3;

        return $r4;
    }

    public org.apache.commons.math.linear.RealVector ebeDivide(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6, $r7, $r8;
        org.apache.commons.math.linear.RealVector r1;
        double[] r2, $r3, $r5;
        boolean $z0;
        java.lang.Object $r4;
        int $i0, i1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r8 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector)>($r7);

        return $r8;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i1 = 0;

     label2:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r5;

        if i1 >= $i0 goto label3;

        $d0 = r2[i1];

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        $d2 = $d0 / $d1;

        r2[i1] = $d2;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealVector ebeDivide(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6;
        double[] r1, r2, $r3, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[]) $r4;

        i2 = 0;

     label1:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r5;

        if i2 >= $i1 goto label2;

        $d1 = r2[i2];

        $d0 = r1[i2];

        $d2 = $d1 / $d0;

        r2[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.ArrayRealVector ebeDivide(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r4;
        double[] $r2;
        org.apache.commons.math.linear.RealVector $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector ebeDivide(double[])>($r2);

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) $r3;

        return $r4;
    }

    public double[] getData()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public double[] getDataRef()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        return $r1;
    }

    public double dotProduct(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r7;
        org.apache.commons.math.linear.RealVector r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r4;
        org.apache.commons.math.linear.RealVector$Entry $r5;
        double[] $r6;
        int $i0;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $d3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(org.apache.commons.math.linear.ArrayRealVector)>($r7);

        return $d3;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d4 = 0.0;

        r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: java.util.Iterator sparseIterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.math.linear.RealVector$Entry) $r4;

        if $r5 == null goto label3;

        $r6 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: int getIndex()>();

        $d0 = $r6[$i0];

        $d1 = virtualinvoke $r5.<org.apache.commons.math.linear.RealVector$Entry: double getValue()>();

        $d2 = $d0 * $d1;

        d4 = d4 + $d2;

        goto label2;

     label3:
        return d4;
    }

    public double dotProduct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r2, $r3;
        int $i0, $i1, i2;
        double $d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d3 = 0.0;

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r3[i2];

        $d0 = r1[i2];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d3;
    }

    public double dotProduct(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(double[])>($r2);

        return $d0;
    }

    public double getNorm()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0, $d1, $d2, d3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d3 = 0.0;

        r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        $d2 = d0 * d0;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d3);

        return $d1;
    }

    public double getL1Norm()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0, $d1, d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d2 = 0.0;

        r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d2 = d2 + $d1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d2;
    }

    public double getLInfNorm()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0, $d1, d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d2 = 0.0;

        r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d2 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d2, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d2;
    }

    public double getDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r4;
        org.apache.commons.math.linear.RealVector r1;
        double d0, $d1, $d2, $d3, $d4, $d5, d6;
        boolean $z0;
        double[] $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $d5 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getDistance(org.apache.commons.math.linear.ArrayRealVector)>($r4);

        return $d5;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d6 = 0.0;

        i1 = 0;

     label2:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d2 = $r3[i1];

        $d3 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        d0 = $d2 - $d3;

        $d4 = d0 * d0;

        d6 = d6 + $d4;

        i1 = i1 + 1;

        goto label2;

     label3:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d6);

        return $d1;
    }

    public double getDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r2, $r3;
        double d0, $d1, $d2, $d3, $d4, d5;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d5 = 0.0;

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d3 = $r3[i2];

        $d2 = r1[i2];

        d0 = $d3 - $d2;

        $d4 = d0 * d0;

        d5 = d5 + $d4;

        i2 = i2 + 1;

        goto label1;

     label2:
        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d5);

        return $d1;
    }

    public double getDistance(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getDistance(double[])>($r2);

        return $d0;
    }

    public double getL1Distance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r4;
        org.apache.commons.math.linear.RealVector r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        boolean $z0;
        double[] $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $d4 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getL1Distance(org.apache.commons.math.linear.ArrayRealVector)>($r4);

        return $d4;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d5 = 0.0;

        i1 = 0;

     label2:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r3[i1];

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        d0 = $d1 - $d2;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d5 = d5 + $d3;

        i1 = i1 + 1;

        goto label2;

     label3:
        return d5;
    }

    public double getL1Distance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r2, $r3;
        double d0, $d1, $d2, $d3, d4;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d2 = $r3[i2];

        $d1 = r1[i2];

        d0 = $d2 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d4 = d4 + $d3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d4;
    }

    public double getL1Distance(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getL1Distance(double[])>($r2);

        return $d0;
    }

    public double getLInfDistance(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r4;
        org.apache.commons.math.linear.RealVector r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        boolean $z0;
        double[] $r2, $r3;
        int $i0, i1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $d4 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector)>($r4);

        return $d4;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        d5 = 0.0;

        i1 = 0;

     label2:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label3;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r3[i1];

        $d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i1);

        d0 = $d1 - $d2;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d5 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d5, $d3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return d5;
    }

    public double getLInfDistance(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r2, $r3;
        double d0, $d1, $d2, $d3, d4;
        int $i0, $i1, i2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        d4 = 0.0;

        i2 = 0;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r2;

        if i2 >= $i1 goto label2;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d2 = $r3[i2];

        $d1 = r1[i2];

        d0 = $d2 - $d1;

        $d3 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d0);

        d4 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>(d4, $d3);

        i2 = i2 + 1;

        goto label1;

     label2:
        return d4;
    }

    public double getLInfDistance(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getLInfDistance(double[])>($r2);

        return $d0;
    }

    public org.apache.commons.math.linear.RealVector unitVector() throws java.lang.ArithmeticException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0;
        byte $b0;
        org.apache.commons.math.linear.RealVector $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ZERO_NORM>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector mapDivide(double)>(d0);

        return $r1;
    }

    public void unitize() throws java.lang.ArithmeticException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r3;
        java.lang.ArithmeticException $r4;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double getNorm()>();

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.ArithmeticException createArithmeticException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector mapDivideToSelf(double)>(d0);

        return;
    }

    public org.apache.commons.math.linear.RealVector projection(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        org.apache.commons.math.linear.RealVector r1, $r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double dotProduct(org.apache.commons.math.linear.RealVector)>(r1);

        $d2 = $d0 / $d1;

        $r2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: org.apache.commons.math.linear.RealVector mapMultiply(double)>($d2);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector projection(double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r2, $r3;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector)>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.ArrayRealVector projection(org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r3;
        double $d0, $d1, $d2;
        org.apache.commons.math.linear.RealVector $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $d0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(org.apache.commons.math.linear.ArrayRealVector)>(r1);

        $d1 = virtualinvoke r1.<org.apache.commons.math.linear.ArrayRealVector: double dotProduct(org.apache.commons.math.linear.ArrayRealVector)>(r1);

        $d2 = $d0 / $d1;

        $r2 = virtualinvoke r1.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVector mapMultiply(double)>($d2);

        $r3 = (org.apache.commons.math.linear.ArrayRealVector) $r2;

        return $r3;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r7;
        org.apache.commons.math.linear.RealVector r1;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math.linear.RealMatrix r2, $r8;
        boolean $z0;
        double[] $r3, $r4, $r5, $r6;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $z0 = r1 instanceof org.apache.commons.math.linear.ArrayRealVector;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        $r8 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector)>($r7);

        return $r8;

     label1:
        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(org.apache.commons.math.linear.RealVector)>(r1);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r3;

        r2 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        i3 = 0;

     label2:
        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r4;

        if i3 >= $i1 goto label5;

        i4 = 0;

     label3:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r5;

        if i4 >= $i2 goto label4;

        $r6 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r6[i3];

        $d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i4);

        $d2 = $d0 * $d1;

        interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i3, i4, $d2);

        i4 = i4 + 1;

        goto label3;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        return r2;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(org.apache.commons.math.linear.ArrayRealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        double[] $r2;
        org.apache.commons.math.linear.RealMatrix $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealMatrix outerProduct(double[])>($r2);

        return $r3;
    }

    public org.apache.commons.math.linear.RealMatrix outerProduct(double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1, $r3, $r4, $r5, $r6;
        int i0, $i1, $i2, $i3, i4, i5;
        org.apache.commons.math.linear.RealMatrix r2;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i1);

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof $r3;

        r2 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        i4 = 0;

     label1:
        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r4;

        if i4 >= $i2 goto label4;

        i5 = 0;

     label2:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i3 = lengthof $r5;

        if i5 >= $i3 goto label3;

        $r6 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d1 = $r6[i4];

        $d0 = r1[i5];

        $d2 = $d1 * $d0;

        interfaceinvoke r2.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i4, i5, $d2);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return r2;
    }

    public double getEntry(int) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r1[i0];

        return $d0;
    }

    public int getDimension()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.apache.commons.math.linear.RealVector append(org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r3, $r4, $r6;
        org.apache.commons.math.linear.RealVector r1;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

     label1:
        $r3 = new org.apache.commons.math.linear.ArrayRealVector;

        $r4 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        specialinvoke $r3.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,org.apache.commons.math.linear.ArrayRealVector)>(r0, $r4);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,org.apache.commons.math.linear.RealVector)>(r0, r1);

        return $r6;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public org.apache.commons.math.linear.ArrayRealVector append(org.apache.commons.math.linear.ArrayRealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1, $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,org.apache.commons.math.linear.ArrayRealVector)>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector append(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r6;
        double d0;
        double[] r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r2;

        $i1 = $i0 + 1;

        r1 = newarray (double)[$i1];

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i2);

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i3 = lengthof $r5;

        r1[$i3] = d0;

        $r6 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r6.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[],boolean)>(r1, 0);

        return $r6;
    }

    public org.apache.commons.math.linear.RealVector append(double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r2;
        double[] r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: double[];

        $r2 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: void <init>(org.apache.commons.math.linear.ArrayRealVector,double[])>(r0, r1);

        return $r2;
    }

    public org.apache.commons.math.linear.RealVector getSubVector(int, int)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r3;
        int i0, i1, $i2, $i3;
        double[] $r4, $r5;
        java.lang.IndexOutOfBoundsException $r6;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r3.<org.apache.commons.math.linear.ArrayRealVector: void <init>(int)>(i1);

     label1:
        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r4 = $r3.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i0, $r4, 0, i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>(i0);

        $i2 = i0 + i1;

        $i3 = $i2 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>($i3);

     label4:
        return $r3;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setEntry(int, double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0;
        double d0;
        double[] $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2[i0] = d0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>(i0);

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setSubVector(int, org.apache.commons.math.linear.RealVector)
    {
        org.apache.commons.math.linear.ArrayRealVector r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        org.apache.commons.math.linear.RealVector r1;
        java.lang.ClassCastException $r3;
        double[] $r4;
        double $d0;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.RealVector;

     label1:
        $r2 = (org.apache.commons.math.linear.ArrayRealVector) r1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void set(int,org.apache.commons.math.linear.ArrayRealVector)>(i0, $r2);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        i7 = i0;

     label4:
        $i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $i2 = i0 + $i1;

        if i7 >= $i2 goto label5;

        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i3 = i7 - i0;

        $d0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: double getEntry(int)>($i3);

        $r4[i7] = $d0;

        i7 = i7 + 1;

        goto label4;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>(i0);

        $i4 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        $i5 = i0 + $i4;

        $i6 = $i5 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>($i6);

     label7:
        return;

        catch java.lang.ClassCastException from label1 to label2 with label3;
        catch java.lang.IndexOutOfBoundsException from label1 to label5 with label6;
    }

    public void setSubVector(int, double[])
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0, $i1, $i2, $i3, $i4;
        double[] r1, $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

     label1:
        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, i0, $i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>(i0);

        $i2 = lengthof r1;

        $i3 = i0 + $i2;

        $i4 = $i3 - 1;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkIndex(int)>($i4);

     label4:
        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void set(int, org.apache.commons.math.linear.ArrayRealVector) throws org.apache.commons.math.linear.MatrixIndexException
    {
        org.apache.commons.math.linear.ArrayRealVector r0, r1;
        int i0;
        double[] $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.linear.ArrayRealVector;

        $r2 = r1.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void setSubVector(int,double[])>(i0, $r2);

        return;
    }

    public void set(double)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double d0;
        double[] $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, d0);

        return;
    }

    public double[] toArray()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        org.apache.commons.math.linear.RealVectorFormat $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = <org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math.linear.RealVectorFormat: java.lang.String format(java.lang.Object)>(r0);

        return $r2;
    }

    protected void checkVectorDimensions(org.apache.commons.math.linear.RealVector) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        org.apache.commons.math.linear.RealVector r1;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: org.apache.commons.math.linear.RealVector;

        $i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: void checkVectorDimensions(int)>($i0);

        return;
    }

    protected void checkVectorDimensions(int) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        int i0, $i1, $i2;
        double[] $r1, $r3;
        java.lang.Object[] $r2;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        java.lang.Integer $r5, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i1 = lengthof $r1;

        if $i1 == i0 goto label1;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats VECTOR_LENGTH_MISMATCH>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r2[0] = $r5;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r2);

        throw $r7;

     label1:
        return;
    }

    public boolean isNaN()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        d0 = r1[i1];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isInfinite()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        double[] r1;
        int i0, i1;
        double d0;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        d0 = r1[i1];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        java.lang.Object r1;
        org.apache.commons.math.linear.RealVector r2;
        boolean $z0, $z1, $z2;
        double[] $r3, $r4, $r5;
        int $i0, $i1, $i2, i4;
        double $d0, $d1;
        byte $b3;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $z0 = r1 instanceof org.apache.commons.math.linear.RealVector;

        if $z0 != 0 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.commons.math.linear.RealVector) r1;

        $r3 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = lengthof $r3;

        $i1 = interfaceinvoke r2.<org.apache.commons.math.linear.RealVector: int getDimension()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $z1 = interfaceinvoke r2.<org.apache.commons.math.linear.RealVector: boolean isNaN()>();

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: boolean isNaN()>();

        return $z2;

     label5:
        i4 = 0;

     label6:
        $r4 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i2 = lengthof $r4;

        if i4 >= $i2 goto label8;

        $r5 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $d0 = $r5[i4];

        $d1 = interfaceinvoke r2.<org.apache.commons.math.linear.RealVector: double getEntry(int)>(i4);

        $b3 = $d0 cmpl $d1;

        if $b3 == 0 goto label7;

        return 0;

     label7:
        i4 = i4 + 1;

        goto label6;

     label8:
        return 1;
    }

    public int hashCode()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        boolean $z0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $z0 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: boolean isNaN()>();

        if $z0 == 0 goto label1;

        return 9;

     label1:
        $r1 = r0.<org.apache.commons.math.linear.ArrayRealVector: double[] data>;

        $i0 = staticinvoke <org.apache.commons.math.util.MathUtils: int hash(double[])>($r1);

        return $i0;
    }

    public volatile org.apache.commons.math.linear.RealVector copy()
    {
        org.apache.commons.math.linear.ArrayRealVector r0;
        org.apache.commons.math.linear.AbstractRealVector $r1;

        r0 := @this: org.apache.commons.math.linear.ArrayRealVector;

        $r1 = virtualinvoke r0.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.commons.math.linear.RealVectorFormat $r0;

        <org.apache.commons.math.linear.ArrayRealVector: long serialVersionUID> = -1097961340710804027L;

        $r0 = staticinvoke <org.apache.commons.math.linear.RealVectorFormat: org.apache.commons.math.linear.RealVectorFormat getInstance()>();

        <org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.RealVectorFormat DEFAULT_FORMAT> = $r0;

        return;
    }
}
