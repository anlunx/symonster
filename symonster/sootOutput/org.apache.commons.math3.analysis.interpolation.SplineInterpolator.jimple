public class org.apache.commons.math3.analysis.interpolation.SplineInterpolator extends java.lang.Object implements org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator
{

    public void <init>()
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;
        double[] r1, r2, r3, r4, r5, r6, r7, r15, r16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, d64;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r9;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12, $r13;
        org.apache.commons.math3.exception.DimensionMismatchException $r14;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r17;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i2 = lengthof r1;

        $i1 = lengthof r2;

        if $i2 == $i1 goto label01;

        $r14 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i26 = lengthof r1;

        $i25 = lengthof r2;

        specialinvoke $r14.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i26, $i25);

        throw $r14;

     label01:
        $i3 = lengthof r1;

        if $i3 >= 3 goto label02;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_POINTS>;

        $i24 = lengthof r1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i24);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r11, $r12, $r13, 1);

        throw $r10;

     label02:
        $i4 = lengthof r1;

        i0 = $i4 - 1;

        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        r3 = newarray (double)[i0];

        i27 = 0;

     label03:
        if i27 >= i0 goto label04;

        $i23 = i27 + 1;

        $d61 = r1[$i23];

        $d60 = r1[i27];

        $d62 = $d61 - $d60;

        r3[i27] = $d62;

        i27 = i27 + 1;

        goto label03;

     label04:
        r15 = newarray (double)[i0];

        $i5 = i0 + 1;

        r4 = newarray (double)[$i5];

        r15[0] = 0.0;

        r4[0] = 0.0;

        i28 = 1;

     label05:
        if i28 >= i0 goto label06;

        $i11 = i28 + 1;

        $d29 = r1[$i11];

        $i12 = i28 - 1;

        $d28 = r1[$i12];

        $d30 = $d29 - $d28;

        $d34 = 2.0 * $d30;

        $i13 = i28 - 1;

        $d32 = r3[$i13];

        $i14 = i28 - 1;

        $d31 = r15[$i14];

        $d33 = $d32 * $d31;

        d64 = $d34 - $d33;

        $d35 = r3[i28];

        $d36 = $d35 / d64;

        r15[i28] = $d36;

        $i15 = i28 + 1;

        $d38 = r2[$i15];

        $i16 = i28 - 1;

        $d37 = r3[$i16];

        $d44 = $d38 * $d37;

        $d42 = r2[i28];

        $i17 = i28 + 1;

        $d40 = r1[$i17];

        $i18 = i28 - 1;

        $d39 = r1[$i18];

        $d41 = $d40 - $d39;

        $d43 = $d42 * $d41;

        $d48 = $d44 - $d43;

        $i19 = i28 - 1;

        $d46 = r2[$i19];

        $d45 = r3[i28];

        $d47 = $d46 * $d45;

        $d49 = $d48 + $d47;

        $d53 = 3.0 * $d49;

        $i20 = i28 - 1;

        $d51 = r3[$i20];

        $d50 = r3[i28];

        $d52 = $d51 * $d50;

        $d57 = $d53 / $d52;

        $i21 = i28 - 1;

        $d55 = r3[$i21];

        $i22 = i28 - 1;

        $d54 = r4[$i22];

        $d56 = $d55 * $d54;

        $d58 = $d57 - $d56;

        $d59 = $d58 / d64;

        r4[i28] = $d59;

        i28 = i28 + 1;

        goto label05;

     label06:
        r16 = newarray (double)[i0];

        $i6 = i0 + 1;

        r5 = newarray (double)[$i6];

        r6 = newarray (double)[i0];

        r4[i0] = 0.0;

        r5[i0] = 0.0;

        i29 = i0 - 1;

     label07:
        if i29 < 0 goto label08;

        $d7 = r4[i29];

        $d5 = r15[i29];

        $i7 = i29 + 1;

        $d4 = r5[$i7];

        $d6 = $d5 * $d4;

        $d8 = $d7 - $d6;

        r5[i29] = $d8;

        $i8 = i29 + 1;

        $d10 = r2[$i8];

        $d9 = r2[i29];

        $d12 = $d10 - $d9;

        $d11 = r3[i29];

        $d20 = $d12 / $d11;

        $d17 = r3[i29];

        $i9 = i29 + 1;

        $d15 = r5[$i9];

        $d13 = r5[i29];

        $d14 = 2.0 * $d13;

        $d16 = $d15 + $d14;

        $d18 = $d17 * $d16;

        $d19 = $d18 / 3.0;

        $d21 = $d20 - $d19;

        r16[i29] = $d21;

        $i10 = i29 + 1;

        $d23 = r5[$i10];

        $d22 = r5[i29];

        $d26 = $d23 - $d22;

        $d24 = r3[i29];

        $d25 = 3.0 * $d24;

        $d27 = $d26 / $d25;

        r6[i29] = $d27;

        i29 = i29 + -1;

        goto label07;

     label08:
        r17 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[i0];

        r7 = newarray (double)[4];

        i30 = 0;

     label09:
        if i30 >= i0 goto label10;

        $d0 = r2[i30];

        r7[0] = $d0;

        $d1 = r16[i30];

        r7[1] = $d1;

        $d2 = r5[i30];

        r7[2] = $d2;

        $d3 = r6[i30];

        r7[3] = $d3;

        $r9 = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction;

        specialinvoke $r9.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: void <init>(double[])>(r7);

        r17[i30] = $r9;

        i30 = i30 + 1;

        goto label09;

     label10:
        $r8 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        specialinvoke $r8.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>(r1, r17);

        return $r8;
    }

    public volatile org.apache.commons.math3.analysis.UnivariateFunction interpolate(double[], double[]) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.interpolation.SplineInterpolator r0;
        double[] r1, r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction $r3;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.SplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $r3 = virtualinvoke r0.<org.apache.commons.math3.analysis.interpolation.SplineInterpolator: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction interpolate(double[],double[])>(r1, r2);

        return $r3;
    }
}
