public class org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double[] knots;
    private final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials;
    private final int n;

    public void <init>(double[], org.apache.commons.math3.analysis.polynomials.PolynomialFunction[]) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NonMonotonicSequenceException
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double[] r1, $r4, $r5;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r2, $r6, $r7;
        org.apache.commons.math3.exception.NullArgumentException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r9;
        org.apache.commons.math3.exception.util.LocalizedFormats $r10;
        java.lang.Integer $r11, $r12;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r3.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r3;

     label2:
        $i0 = lengthof r1;

        if $i0 >= 2 goto label3;

        $r9 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r10 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $i14 = lengthof r1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        specialinvoke $r9.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r10, $r11, $r12, 0);

        throw $r9;

     label3:
        $i1 = lengthof r1;

        $i3 = $i1 - 1;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label4;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i13 = lengthof r2;

        $i12 = lengthof r1;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i13, $i12);

        throw $r8;

     label4:
        staticinvoke <org.apache.commons.math3.util.MathArrays: void checkOrder(double[])>(r1);

        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n> = $i5;

        $i6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i7 = $i6 + 1;

        $r4 = newarray (double)[$i7];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots> = $r4;

        $r5 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i8 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i9 = $i8 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i9);

        $i10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $r6 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i10];

        r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials> = $r6;

        $r7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i11 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r7, 0, $i11);

        return;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        double[] $r1, $r4, $r6, $r8, $r9, $r12;
        byte $b0, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3, $r5, $r7;
        int $i1, $i2, $i4, $i5, i6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r10, $r11;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r13;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[0];

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $r8 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d4 = $r8[$i2];

        $b3 = d0 cmpl $d4;

        if $b3 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d2 = $r4[0];

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r6 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d3 = $r6[$i1];

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r5, $r7);

        throw $r2;

     label2:
        $r9 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        i6 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r9, d0);

        if i6 >= 0 goto label3;

        $i5 = neg i6;

        i6 = $i5 - 2;

     label3:
        $r10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i4 = lengthof $r10;

        if i6 < $i4 goto label4;

        i6 = i6 + -1;

     label4:
        $r11 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r13 = $r11[i6];

        $r12 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d5 = $r12[i6];

        $d6 = d0 - $d5;

        $d7 = virtualinvoke $r13.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: double value(double)>($d6);

        return $d7;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0, $r1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()>();

        return $r1;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0, $r2;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r1, $r4;
        int $i0, $i1, i2;
        double[] $r3;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r5, $r6;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction polynomialDerivative()>();

        r1[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $r3 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        specialinvoke $r2.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math3.analysis.polynomials.PolynomialFunction[])>($r3, r1);

        return $r2;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r15, $r16;
        double d0, $d1, $d2, $d3, $d4, $d5;
        double[] $r2, $r5, $r7, $r9, $r10, $r13;
        byte $b0, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r3;
        java.lang.Double $r4, $r6, $r8;
        int $i1, $i2, $i4, $i5, i6;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] $r11, $r12;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction $r14;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        d0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r2[0];

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $r9 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d4 = $r9[$i2];

        $b3 = d0 cmpl $d4;

        if $b3 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d2 = $r5[0];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r7 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d3 = $r7[$i1];

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r6, $r8);

        throw $r3;

     label2:
        $r10 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        i6 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r10, d0);

        if i6 >= 0 goto label3;

        $i5 = neg i6;

        i6 = $i5 - 2;

     label3:
        $r11 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i4 = lengthof $r11;

        if i6 < $i4 goto label4;

        i6 = i6 + -1;

     label4:
        $r12 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r14 = $r12[i6];

        $r13 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d5 = $r13[i6];

        $r15 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure subtract(double)>($d5);

        $r16 = virtualinvoke $r14.<org.apache.commons.math3.analysis.polynomials.PolynomialFunction: org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure)>($r15);

        return $r16;
    }

    public int getN()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        return $i0;
    }

    public org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] getPolynomials()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math3.analysis.polynomials.PolynomialFunction)[$i0];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getKnots()
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double[] r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i1 = $i0 + 1;

        r1 = newarray (double)[$i1];

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i3 = $i2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i3);

        return r1;
    }

    public boolean isValidPoint(double)
    {
        org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction r0;
        double d0, $d1, $d2;
        double[] $r1, $r2;
        byte $b0, $b2;
        int $i1;

        r0 := @this: org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[0];

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $r2 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i1 = r0.<org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d2 = $r2[$i1];

        $b2 = d0 cmpl $d2;

        if $b2 <= 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }
}
