public abstract class org.apache.commons.math3.distribution.AbstractRealDistribution extends java.lang.Object implements org.apache.commons.math3.distribution.RealDistribution, java.io.Serializable
{
    public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    protected org.apache.commons.math3.random.RandomDataImpl randomData;
    protected final org.apache.commons.math3.random.RandomGenerator random;
    private double solverAbsoluteAccuracy;

    protected void <init>()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomDataImpl $r1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r1;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy> = 1.0E-6;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = null;

        return;
    }

    protected void <init>(org.apache.commons.math3.random.RandomGenerator)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.random.RandomDataImpl;

        specialinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData> = $r2;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy> = 1.0E-6;

        r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random> = r1;

        return;
    }

    public double cumulativeProbability(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double probability(double,double)>(d0, d1);

        return $d2;
    }

    public double probability(double, double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0, d1, $d2, $d3, $d4;
        byte $b0;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r1;
        org.apache.commons.math3.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 <= 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r2 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r1.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r2, $r3, $r4, 1);

        throw $r1;

     label1:
        $d2 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d1);

        $d3 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d0);

        $d4 = $d2 - $d3;

        return $d4;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, d26, $d27, d28;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        java.lang.Double $r3;
        java.lang.Integer $r4, $r5;
        org.apache.commons.math3.distribution.AbstractRealDistribution$1 $r6;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label01;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label02;

     label01:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5);

        throw $r2;

     label02:
        d25 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportLowerBound()>();

        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label03;

        return d25;

     label03:
        d26 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportUpperBound()>();

        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label04;

        return d26;

     label04:
        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getNumericalMean()>();

        $d7 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getNumericalVariance()>();

        d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d1);

        if $z1 != 0 goto label05;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 != 0 goto label05;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d2);

        if $z3 != 0 goto label05;

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2);

        if $z4 != 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        z0 = $z5;

        $b10 = d25 cmpl #-Infinity;

        if $b10 != 0 goto label09;

        if $z5 == 0 goto label07;

        $d21 = 1.0 - d0;

        $d22 = $d21 / d0;

        $d23 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d22);

        $d24 = d2 * $d23;

        d25 = d1 - $d24;

        goto label09;

     label07:
        d25 = -1.0;

     label08:
        $d20 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d25);

        $b9 = $d20 cmpl d0;

        if $b9 < 0 goto label09;

        d25 = d25 * 2.0;

        goto label08;

     label09:
        $b11 = d26 cmpl #Infinity;

        if $b11 != 0 goto label12;

        if z0 == 0 goto label10;

        $d16 = 1.0 - d0;

        $d17 = d0 / $d16;

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d17);

        $d19 = d2 * $d18;

        d26 = d1 + $d19;

        goto label12;

     label10:
        d26 = 1.0;

     label11:
        $d15 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d26);

        $b8 = $d15 cmpg d0;

        if $b8 >= 0 goto label12;

        d26 = d26 * 2.0;

        goto label11;

     label12:
        $r6 = new org.apache.commons.math3.distribution.AbstractRealDistribution$1;

        specialinvoke $r6.<org.apache.commons.math3.distribution.AbstractRealDistribution$1: void <init>(org.apache.commons.math3.distribution.AbstractRealDistribution,double)>(r0, d0);

        $d27 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSolverAbsoluteAccuracy()>();

        d3 = staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: double solve(org.apache.commons.math3.analysis.UnivariateFunction,double,double,double)>($r6, d25, d26, $d27);

        $z6 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: boolean isSupportConnected()>();

        if $z6 != 0 goto label17;

        d4 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSolverAbsoluteAccuracy()>();

        $d8 = d3 - d4;

        $d9 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double getSupportLowerBound()>();

        $b4 = $d8 cmpl $d9;

        if $b4 < 0 goto label17;

        d5 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d3);

        $d10 = d3 - d4;

        $d11 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>($d10);

        $b5 = $d11 cmpl d5;

        if $b5 != 0 goto label17;

        d28 = d3;

     label13:
        $d12 = d28 - d25;

        $b6 = $d12 cmpl d4;

        if $b6 <= 0 goto label16;

        $d13 = d25 + d28;

        d6 = 0.5 * $d13;

        $d14 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double cumulativeProbability(double)>(d6);

        $b7 = $d14 cmpg d5;

        if $b7 >= 0 goto label14;

        d25 = d6;

        goto label15;

     label14:
        d28 = d6;

     label15:
        goto label13;

     label16:
        return d28;

     label17:
        return d3;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public void reseedRandomGenerator(long)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        long l0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        org.apache.commons.math3.random.RandomDataImpl $r2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: void setSeed(long)>(l0);

        $r2 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomDataImpl randomData>;

        virtualinvoke $r2.<org.apache.commons.math3.random.RandomDataImpl: void reSeed(long)>(l0);

        return;
    }

    public double sample()
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        org.apache.commons.math3.random.RandomGenerator $r1;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        $r1 = r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: org.apache.commons.math3.random.RandomGenerator random>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math3.random.RandomGenerator: double nextDouble()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double inverseCumulativeProbability(double)>($d0);

        return $d1;
    }

    public double[] sample(int)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        int i0, i1;
        double[] r1;
        double $d0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r3, $r4);

        throw $r2;

     label1:
        r1 = newarray (double)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double sample()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label2;

     label3:
        return r1;
    }

    public double probability(double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 := @parameter0: double;

        return 0.0;
    }

    public double logDensity(double)
    {
        org.apache.commons.math3.distribution.AbstractRealDistribution r0;
        double d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.distribution.AbstractRealDistribution;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: double density(double)>(d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d1);

        return $d2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.AbstractRealDistribution: long serialVersionUID> = -38038050983108802L;

        <org.apache.commons.math3.distribution.AbstractRealDistribution: double SOLVER_DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
