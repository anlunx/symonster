public class org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile extends org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic implements org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic, java.io.Serializable
{
    private static final int PSQUARE_CONSTANT;
    private static final double DEFAULT_QUANTILE_DESIRED;
    private static final long serialVersionUID;
    private static final java.text.DecimalFormat DECIMAL_FORMAT;
    private final java.util.List initialFive;
    private final double quantile;
    private transient double lastObservation;
    private org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers;
    private double pValue;
    private long countOfObservations;

    public void <init>(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double d0, $d1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList $r1;
        byte $b0, $b1;
        org.apache.commons.math3.exception.OutOfRangeException $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Double $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic: void <init>()>();

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$FixedCapacityList: void <init>(int)>(5);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive> = $r1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = null;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = #NaN;

        $b0 = d0 cmpl 100.0;

        if $b0 > 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats OUT_OF_RANGE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(100);

        specialinvoke $r2.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,java.lang.Number)>($r3, $r4, $r5, $r6);

        throw $r2;

     label2:
        $d1 = d0 / 100.0;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile> = $d1;

        return;
    }

    void <init>()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: void <init>(double)>(50.0);

        return;
    }

    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        boolean $z0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r2, $r3;
        int $i0, $i2;
        double[] $r4;
        double $d1, $d2, d3, $d4, d5, $d6;
        long $l1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double getResult()>();

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3);

        if $z0 == 0 goto label1;

        $d4 = 37.0;

        goto label2;

     label1:
        $d4 = d3;

     label2:
        d5 = $d4;

        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r2 != null goto label3;

        $d6 = 0.0;

        goto label4;

     label3:
        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $i0 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        $d6 = (double) $i0;

     label4:
        $r4 = newarray (double)[4];

        $r4[0] = d5;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $r4[1] = $d1;

        $r4[2] = $d6;

        $l1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        $d2 = (double) $l1;

        $r4[3] = $d2;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r4);

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0, r2;
        java.lang.Object r1;
        boolean z0, $z2, z3, $z4, $z5, $z6, $z8;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r3, $r4, $r5, $r6, $r7, $r8;
        long $l0, $l1;
        byte $b2;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        r1 := @parameter0: java.lang.Object;

        z3 = 0;

        if r0 != r1 goto label01;

        z3 = 1;

        goto label10;

     label01:
        if r1 == null goto label10;

        $z2 = r1 instanceof org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        if $z2 == 0 goto label10;

        r2 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile) r1;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r3 == null goto label02;

        $r7 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r7 == null goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        z0 = $z4;

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r8 != null goto label04;

        $r6 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r6 != null goto label04;

        $z5 = 1;

        goto label05;

     label04:
        $z5 = 0;

     label05:
        if z0 == 0 goto label06;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r4 = r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $z6 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        goto label07;

     label06:
        $z6 = $z5;

     label07:
        if $z6 == 0 goto label08;

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long getN()>();

        $l1 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long getN()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label08;

        $z8 = 1;

        goto label09;

     label08:
        $z8 = 0;

     label09:
        z3 = $z8;

     label10:
        return z3;
    }

    public void increment(double)
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        long $l0, $l1;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1, $r2, $r6;
        java.util.List $r3, $r5, $r7, $r8, $r9;
        java.lang.Double $r4, $r11;
        boolean $z0;
        int $i2, $i3, $i4;
        java.lang.Object $r10;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d0 := @parameter0: double;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        $l1 = $l0 + 1L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = $l1;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation> = d0;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $z0 = interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        $r9 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $d3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $r8 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $d4 = (double) $i3;

        $d5 = $d3 * $d4;

        $i4 = (int) $d5;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i4);

        $r11 = (java.lang.Double) $r10;

        $d6 = virtualinvoke $r11.<java.lang.Double: double doubleValue()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d6;

        return;

     label1:
        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $r6 = staticinvoke <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers newMarkers(java.util.List,double)>($r5, $d2);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = $r6;

     label2:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $d1 = interfaceinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double processDataPoint(double)>(d0);

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d1;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1, $r5;
        java.lang.Object[] $r2, $r8;
        double $d0, $d1, $d2;
        java.text.DecimalFormat $r3, $r9, $r11;
        java.lang.String $r4, $r6, $r7, $r10, $r12, $r13;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 != null goto label1;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation>;

        $r10 = virtualinvoke $r9.<java.text.DecimalFormat: java.lang.String format(double)>($d1);

        $r8[0] = $r10;

        $r11 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        $r12 = virtualinvoke $r11.<java.text.DecimalFormat: java.lang.String format(double)>($d2);

        $r8[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("obs=%s pValue=%s", $r8);

        return $r13;

     label1:
        $r2 = newarray (java.lang.Object)[2];

        $r3 = <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT>;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double lastObservation>;

        $r4 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.String format(double)>($d0);

        $r2[0] = $r4;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r2[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("obs=%s markers=%s", $r2);

        return $r7;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        return $l0;
    }

    public org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0, $r2;
        double $d0, $d1, $d2;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r3, $r7, $r9;
        long $l0;
        java.util.List $r4, $r5, $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r2 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $d1 = 100.0 * $d0;

        specialinvoke $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: void <init>(double)>($d1);

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r3 == null goto label1;

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        $r8 = interfaceinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: java.lang.Object clone()>();

        $r9 = (org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers) $r8;

        $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = $r9;

     label1:
        $l0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations>;

        $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = $l0;

        $d2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d2;

        $r4 = $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r6 = $r2.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r5 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return $r2;
    }

    public double quantile()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        return $d0;
    }

    public void clear()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers> = null;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long countOfObservations> = 0L;

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = #NaN;

        return;
    }

    public double getResult()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        double $d0, $d1, $d2, $d3, $d4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, 1.0);

        if $i0 != 0 goto label1;

        $d3 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double maximum()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d3;

        goto label2;

     label1:
        $d1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double quantile>;

        $i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, 0.0);

        if $i1 != 0 goto label2;

        $d2 = specialinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double minimum()>();

        r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue> = $d2;

     label2:
        $d4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double pValue>;

        return $d4;
    }

    private double maximum()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1, $r7;
        java.util.List $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.Double $r6;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d0 = #NaN;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 == null goto label1;

        $r7 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        d0 = interfaceinvoke $r7.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double height(int)>(5);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (java.lang.Double) $r5;

        d0 = virtualinvoke $r6.<java.lang.Double: double doubleValue()>();

     label2:
        return d0;
    }

    private double minimum()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers $r1, $r6;
        java.util.List $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Double $r5;
        double d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        d0 = #NaN;

        $r1 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        if $r1 == null goto label1;

        $r6 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers markers>;

        d0 = interfaceinvoke $r6.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers: double height(int)>(1);

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.util.List initialFive>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.Double) $r4;

        d0 = virtualinvoke $r5.<java.lang.Double: double doubleValue()>();

     label2:
        return d0;
    }

    public static org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$PSquareMarkers newMarkers(java.util.List, double)
    {
        java.util.List r0;
        double d0;
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers $r1;

        r0 := @parameter0: java.util.List;

        d0 := @parameter1: double;

        $r1 = new org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers;

        specialinvoke $r1.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$Markers: void <init>(java.util.List,double,org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile$1)>(r0, d0, null);

        return $r1;
    }

    public volatile org.apache.commons.math3.stat.descriptive.UnivariateStatistic copy()
    {
        org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile r0;
        org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic $r1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic copy()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.text.DecimalFormat $r0;

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: long serialVersionUID> = 2283912083175715479L;

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: double DEFAULT_QUANTILE_DESIRED> = 50.0;

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: int PSQUARE_CONSTANT> = 5;

        $r0 = new java.text.DecimalFormat;

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>("00.00");

        <org.apache.commons.math3.stat.descriptive.rank.PSquarePercentile: java.text.DecimalFormat DECIMAL_FORMAT> = $r0;

        return;
    }
}
