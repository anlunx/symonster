public class org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm extends java.lang.Object implements org.apache.commons.math.analysis.UnivariateRealFunction
{
    private double[] coefficients;
    private final double[] c;
    private final double[] a;
    private boolean coefficientsComputed;

    public void <init>(double[], double[]) throws java.lang.IllegalArgumentException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: void verifyInputArray(double[],double[])>(r1, r2);

        $i0 = lengthof r1;

        $r3 = newarray (double)[$i0];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a> = $r3;

        $i1 = lengthof r2;

        $r4 = newarray (double)[$i1];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c> = $r4;

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i2 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r5, 0, $i2);

        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i3 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i3);

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed> = 0;

        return;
    }

    public double value(double) throws org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double d0, $d1;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        d0 := @parameter0: double;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d1 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double evaluate(double[],double[],double)>($r2, $r1, d0);

        return $d1;
    }

    public int degree()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] $r1;
        int $i0;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public double[] getNewtonCoefficients()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getCenters()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getCoefficients()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        double[] r1, $r2, $r3, $r4;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        $z0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: void computeCoefficients()>();

     label1:
        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i0 = lengthof $r2;

        r1 = newarray (double)[$i0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, 0, $i1);

        return r1;
    }

    public static double evaluate(double[], double[], double) throws org.apache.commons.math.FunctionEvaluationException, java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        double d0, $d1, $d2, $d3, $d4, d5;
        int i0, i1;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: void verifyInputArray(double[],double[])>(r0, r1);

        i0 = lengthof r1;

        d5 = r0[i0];

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $d4 = r0[i1];

        $d1 = r1[i1];

        $d2 = d0 - $d1;

        $d3 = $d2 * d5;

        d5 = $d4 + $d3;

        i1 = i1 + -1;

        goto label1;

     label2:
        return d5;
    }

    protected void computeCoefficients()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm r0;
        int i0, $i1, $i2, i3, i4, i5;
        double[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;

        i0 = virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: int degree()>();

        $i1 = i0 + 1;

        $r1 = newarray (double)[$i1];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients> = $r1;

        i3 = 0;

     label1:
        if i3 > i0 goto label2;

        $r12 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r12[i3] = 0.0;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d0 = $r2[i0];

        $r3[0] = $d0;

        i4 = i0 - 1;

     label3:
        if i4 < 0 goto label6;

        i5 = i0 - i4;

     label4:
        if i5 <= 0 goto label5;

        $r11 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r8 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $i2 = i5 - 1;

        $d9 = $r8[$i2];

        $r9 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d7 = $r9[i4];

        $r10 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $d6 = $r10[i5];

        $d8 = $d7 * $d6;

        $d10 = $d9 - $d8;

        $r11[i5] = $d10;

        i5 = i5 + -1;

        goto label4;

     label5:
        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] a>;

        $d4 = $r4[i4];

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] c>;

        $d2 = $r5[i4];

        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: double[] coefficients>;

        $d1 = $r6[0];

        $d3 = $d2 * $d1;

        $d5 = $d4 - $d3;

        $r7[0] = $d5;

        i4 = i4 + -1;

        goto label3;

     label6:
        r0.<org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm: boolean coefficientsComputed> = 1;

        return;
    }

    protected static void verifyInputArray(double[], double[]) throws java.lang.IllegalArgumentException
    {
        double[] r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r2, $r5;
        org.apache.commons.math.exception.util.LocalizedFormats $r3, $r6;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.Integer $r7, $r8;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i0 = lengthof r0;

        if $i0 < 1 goto label1;

        $i1 = lengthof r1;

        if $i1 >= 1 goto label2;

     label1:
        $r3 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY>;

        $r2 = newarray (java.lang.Object)[0];

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r4;

     label2:
        $i4 = lengthof r0;

        $i2 = lengthof r1;

        $i3 = $i2 + 1;

        if $i4 == $i3 goto label3;

        $r6 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1>;

        $r5 = newarray (java.lang.Object)[2];

        $i5 = lengthof r0;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r5[0] = $r7;

        $i6 = lengthof r1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r5[1] = $r8;

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r9;

     label3:
        return;
    }
}
