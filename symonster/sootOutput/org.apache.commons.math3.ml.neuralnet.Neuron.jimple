public class org.apache.commons.math3.ml.neuralnet.Neuron extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final long identifier;
    private final int size;
    private final java.util.concurrent.atomic.AtomicReference features;

    void <init>(long, double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long l0;
        double[] r1;
        int $i1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        l0 := @parameter0: long;

        r1 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier> = l0;

        $i1 = lengthof r1;

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size> = $i1;

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r3);

        r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features> = $r2;

        return;
    }

    public long getIdentifier()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $l0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier>;

        return $l0;
    }

    public int getSize()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        return $i0;
    }

    public double[] getFeatures()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2, $r4;
        double[] $r3, $r5;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (double[]) $r2;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        return $r5;
    }

    public boolean compareAndSetFeatures(double[], double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        double[] r1, r2, r3;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicReference $r4, $r6;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.DimensionMismatchException $r8;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r2;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if $i1 == $i0 goto label1;

        $r8 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r2;

        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        specialinvoke $r8.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, $i2);

        throw $r8;

     label1:
        $r4 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (double[]) $r5;

        $z0 = specialinvoke r0.<org.apache.commons.math3.ml.neuralnet.Neuron: boolean containSameValues(double[],double[])>(r3, r1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r6 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $z1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, $r7);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean containSameValues(double[], double[])
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        double[] r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        double $d0, $d1;
        boolean $z0;
        org.apache.commons.math3.exception.DimensionMismatchException $r3;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        $i1 = lengthof r2;

        $i0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if $i1 == $i0 goto label1;

        $r3 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i4 = lengthof r2;

        $i3 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        specialinvoke $r3.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i4, $i3);

        throw $r3;

     label1:
        i5 = 0;

     label2:
        $i2 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: int size>;

        if i5 >= $i2 goto label4;

        $d1 = r1[i5];

        $d0 = r2[i5];

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>($d1, $d0);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return 1;
    }

    private void readObject(java.io.ObjectInputStream)
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        java.io.ObjectInputStream r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    private java.lang.Object writeReplace()
    {
        org.apache.commons.math3.ml.neuralnet.Neuron r0;
        org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy $r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        long $l0;
        java.lang.Object $r3;
        double[] $r4;

        r0 := @this: org.apache.commons.math3.ml.neuralnet.Neuron;

        $r1 = new org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy;

        $l0 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: long identifier>;

        $r2 = r0.<org.apache.commons.math3.ml.neuralnet.Neuron: java.util.concurrent.atomic.AtomicReference features>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r4 = (double[]) $r3;

        specialinvoke $r1.<org.apache.commons.math3.ml.neuralnet.Neuron$SerializationProxy: void <init>(long,double[])>($l0, $r4);

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.ml.neuralnet.Neuron: long serialVersionUID> = 20130207L;

        return;
    }
}
