public class com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression extends com.opengamma.analytics.math.regression.LeastSquaresRegression
{
    private static final org.slf4j.Logger s_logger;
    private final cern.colt.matrix.linalg.Algebra _algebra;

    public void <init>()
    {
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression r0;
        cern.colt.matrix.linalg.Algebra $r1;

        r0 := @this: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression;

        specialinvoke r0.<com.opengamma.analytics.math.regression.LeastSquaresRegression: void <init>()>();

        $r1 = new cern.colt.matrix.linalg.Algebra;

        specialinvoke $r1.<cern.colt.matrix.linalg.Algebra: void <init>()>();

        r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra> = $r1;

        return;
    }

    public com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][], double[][], double[], boolean)
    {
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression r0;
        double[][] r1, r2;
        double[] r3;
        boolean z0;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r4;
        org.slf4j.Logger $r5;

        r0 := @this: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[][];

        r3 := @parameter2: double[];

        z0 := @parameter3: boolean;

        if r2 == null goto label1;

        $r5 = <com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: org.slf4j.Logger s_logger>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Weights were provided for OLS regression: they will be ignored");

     label1:
        $r4 = virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][],double[],boolean)>(r1, r3, z0);

        return $r4;
    }

    public com.opengamma.analytics.math.regression.LeastSquaresRegressionResult regress(double[][], double[], boolean)
    {
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression r0;
        double[][] r1, r3;
        double[] r2, r4, r8, r9, $r22, $r23;
        boolean z0;
        cern.colt.matrix.DoubleMatrix1D r5, r7, $r21;
        cern.colt.matrix.DoubleMatrix2D r6, $r17, $r18, $r19, r25;
        int $i0, $i1, i2;
        cern.colt.matrix.DoubleFactory2D $r10;
        cern.colt.matrix.DoubleFactory1D $r11;
        cern.colt.matrix.linalg.Algebra $r12, $r13, $r14, $r15, $r16, $r20;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r24;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: void checkData(double[][],double[])>(r1, r2);

        r3 = virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: double[][] addInterceptVariable(double[][],boolean)>(r1, z0);

        $i0 = lengthof r2;

        r4 = newarray (double)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $d0 = r2[i2];

        r4[i2] = $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r10 = <cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleFactory2D dense>;

        r25 = virtualinvoke $r10.<cern.colt.matrix.DoubleFactory2D: cern.colt.matrix.DoubleMatrix2D make(double[][])>(r3);

        $r11 = <cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleFactory1D dense>;

        r5 = virtualinvoke $r11.<cern.colt.matrix.DoubleFactory1D: cern.colt.matrix.DoubleMatrix1D make(double[])>(r4);

        $r12 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        r6 = virtualinvoke $r12.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D transpose(cern.colt.matrix.DoubleMatrix2D)>(r25);

        $r14 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r15 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r16 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r13 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r17 = virtualinvoke $r13.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>(r6, r25);

        $r18 = virtualinvoke $r16.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D inverse(cern.colt.matrix.DoubleMatrix2D)>($r17);

        $r19 = virtualinvoke $r15.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>($r18, r6);

        r7 = virtualinvoke $r14.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix1D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix1D)>($r19, r5);

        $r20 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r21 = virtualinvoke $r20.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix1D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix1D)>(r25, r7);

        $r22 = virtualinvoke $r21.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        r8 = virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: double[] convertArray(double[])>($r22);

        $r23 = virtualinvoke r7.<cern.colt.matrix.DoubleMatrix1D: double[] toArray()>();

        r9 = virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: double[] convertArray(double[])>($r23);

        $r24 = specialinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: com.opengamma.analytics.math.regression.LeastSquaresRegressionResult getResultWithStatistics(double[][],double[],double[],double[],cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D,boolean)>(r1, r2, r9, r8, r6, r25, z0);

        return $r24;
    }

    private com.opengamma.analytics.math.regression.LeastSquaresRegressionResult getResultWithStatistics(double[][], double[], double[], double[], cern.colt.matrix.DoubleMatrix2D, cern.colt.matrix.DoubleMatrix2D, boolean)
    {
        com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression r0;
        double[][] r1, r11, $r18;
        double[] r2, r3, r4, r7, r8, r9, r10, $r21;
        cern.colt.matrix.DoubleMatrix2D r5, r6, $r16, $r17;
        boolean z0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, d34, d35, d36, d37, d38;
        cern.colt.matrix.linalg.Algebra $r14, $r15;
        org.apache.commons.math.distribution.TDistributionImpl $r19;
        com.opengamma.analytics.math.regression.LeastSquaresRegressionResult $r20;
        org.apache.commons.math.MathException $r22;
        com.opengamma.analytics.math.MathException $r23;

        r0 := @this: com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression;

        r1 := @parameter0: double[][];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r5 := @parameter4: cern.colt.matrix.DoubleMatrix2D;

        r6 := @parameter5: cern.colt.matrix.DoubleMatrix2D;

        z0 := @parameter6: boolean;

        d34 = 0.0;

        i0 = lengthof r2;

        i7 = 0;

     label01:
        if i7 >= i0 goto label02;

        d0 = r2[i7];

        d34 = d34 + d0;

        i7 = i7 + 1;

        goto label01;

     label02:
        $i3 = lengthof r2;

        $d4 = (double) $i3;

        d35 = d34 / $d4;

        d36 = 0.0;

        d37 = 0.0;

        i1 = lengthof r1;

        i2 = lengthof r3;

        r7 = newarray (double)[i1];

        r8 = newarray (double)[i2];

        r9 = newarray (double)[i2];

        r10 = newarray (double)[i2];

        i8 = 0;

     label03:
        if i8 >= i1 goto label04;

        $d23 = r2[i8];

        $d26 = $d23 - d35;

        $d24 = r2[i8];

        $d25 = $d24 - d35;

        $d27 = $d26 * $d25;

        d36 = d36 + $d27;

        $d29 = r2[i8];

        $d28 = r4[i8];

        $d30 = $d29 - $d28;

        r7[i8] = $d30;

        $d32 = r7[i8];

        $d31 = r7[i8];

        $d33 = $d32 * $d31;

        d37 = d37 + $d33;

        i8 = i8 + 1;

        goto label03;

     label04:
        d38 = d36 - d37;

        $r15 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r14 = r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: cern.colt.matrix.linalg.Algebra _algebra>;

        $r16 = virtualinvoke $r14.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D mult(cern.colt.matrix.DoubleMatrix2D,cern.colt.matrix.DoubleMatrix2D)>(r5, r6);

        $r17 = virtualinvoke $r15.<cern.colt.matrix.linalg.Algebra: cern.colt.matrix.DoubleMatrix2D inverse(cern.colt.matrix.DoubleMatrix2D)>($r16);

        $r18 = virtualinvoke $r17.<cern.colt.matrix.DoubleMatrix2D: double[][] toArray()>();

        r11 = virtualinvoke r0.<com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: double[][] convertArray(double[][])>($r18);

        d1 = d38 / d36;

        $d7 = 1.0 - d1;

        $d5 = (double) i1;

        $d6 = $d5 - 1.0;

        $d9 = $d7 * $d6;

        $i4 = i1 - i2;

        $d8 = (double) $i4;

        $d10 = $d9 / $d8;

        d2 = 1.0 - $d10;

        $i5 = i1 - i2;

        $d11 = (double) $i5;

        d3 = d37 / $d11;

        $r19 = new org.apache.commons.math.distribution.TDistributionImpl;

        $i6 = i1 - i2;

        $d12 = (double) $i6;

        specialinvoke $r19.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double)>($d12);

        i9 = 0;

     label05:
        if i9 >= i2 goto label10;

        $r21 = r11[i9];

        $d13 = $r21[i9];

        $d14 = d3 * $d13;

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        r8[i9] = $d15;

        $d17 = r3[i9];

        $d16 = r8[i9];

        $d18 = $d17 / $d16;

        r9[i9] = $d18;

     label06:
        $d19 = r9[i9];

        $d20 = staticinvoke <java.lang.Math: double abs(double)>($d19);

        $d21 = interfaceinvoke $r19.<org.apache.commons.math.distribution.ContinuousDistribution: double cumulativeProbability(double)>($d20);

        $d22 = 1.0 - $d21;

        r10[i9] = $d22;

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

        $r23 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r23.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r22);

        throw $r23;

     label09:
        i9 = i9 + 1;

        goto label05;

     label10:
        $r20 = new com.opengamma.analytics.math.regression.LeastSquaresRegressionResult;

        specialinvoke $r20.<com.opengamma.analytics.math.regression.LeastSquaresRegressionResult: void <init>(double[],double[],double,double[],double,double,double[],double[],boolean)>(r3, r7, d3, r8, d1, d2, r9, r10, z0);

        return $r20;

        catch org.apache.commons.math.MathException from label06 to label07 with label08;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "com/opengamma/analytics/math/regression/OrdinaryLeastSquaresRegression");

        <com.opengamma.analytics.math.regression.OrdinaryLeastSquaresRegression: org.slf4j.Logger s_logger> = $r0;

        return;
    }
}
