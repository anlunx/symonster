public abstract class org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator extends java.lang.Object implements org.apache.commons.math3.analysis.integration.UnivariateIntegrator
{
    public static final double DEFAULT_ABSOLUTE_ACCURACY;
    public static final double DEFAULT_RELATIVE_ACCURACY;
    public static final int DEFAULT_MIN_ITERATIONS_COUNT;
    public static final int DEFAULT_MAX_ITERATIONS_COUNT;
    protected final org.apache.commons.math3.util.Incrementor iterations;
    private final double absoluteAccuracy;
    private final double relativeAccuracy;
    private final int minimalIterationCount;
    private final org.apache.commons.math3.util.Incrementor evaluations;
    private org.apache.commons.math3.analysis.UnivariateFunction function;
    private double min;
    private double max;

    protected void <init>(double, double, int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0, d1;
        int i0, i1;
        org.apache.commons.math3.util.Incrementor $r1, $r2, $r3;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r4;
        java.lang.Integer $r5, $r6, $r8;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r7;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double relativeAccuracy> = d0;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double absoluteAccuracy> = d1;

        if i0 > 0 goto label1;

        $r7 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r7.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r8);

        throw $r7;

     label1:
        if i1 > i0 goto label2;

        $r4 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r4.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r5, $r6, 0);

        throw $r4;

     label2:
        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int minimalIterationCount> = i0;

        $r1 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r1.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations> = $r1;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i1);

        $r3 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r3.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor evaluations> = $r3;

        return;
    }

    protected void <init>(double, double)
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(d0, d1, 3, 2147483647);

        return;
    }

    protected void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void <init>(double,double,int,int)>(1.0E-6, 1.0E-15, i0, i1);

        return;
    }

    public double getRelativeAccuracy()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double relativeAccuracy>;

        return $d0;
    }

    public double getAbsoluteAccuracy()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double absoluteAccuracy>;

        return $d0;
    }

    public int getMinimalIterationCount()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $i0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int minimalIterationCount>;

        return $i0;
    }

    public int getMaximalIterationCount()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public int getIterations()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $r1 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    protected double getMin()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double min>;

        return $d0;
    }

    protected double getMax()
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        $d0 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double max>;

        return $d0;
    }

    protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        double d0, $d1;
        org.apache.commons.math3.util.Incrementor $r2;
        org.apache.commons.math3.analysis.UnivariateFunction $r3;
        org.apache.commons.math3.exception.MaxCountExceededException $r4;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r5;
        java.lang.Number $r6;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        d0 := @parameter0: double;

     label1:
        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r6);

        throw $r5;

     label4:
        $r3 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d1 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        return $d1;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }

    protected void setup(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1;
        org.apache.commons.math3.util.Incrementor $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        staticinvoke <org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils: void verifyInterval(double,double)>(d0, d1);

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double min> = d0;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double max> = d1;

        r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.analysis.UnivariateFunction function> = r1;

        $r2 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i0);

        $r3 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r4 = r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: org.apache.commons.math3.util.Incrementor iterations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        return;
    }

    public double integrate(int, org.apache.commons.math3.analysis.UnivariateFunction, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException, org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        double d0, d1, $d2;

        r0 := @this: org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        virtualinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: void setup(int,org.apache.commons.math3.analysis.UnivariateFunction,double,double)>(i0, r1, d0, d1);

        $d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double doIntegrate()>();

        return $d2;
    }

    protected abstract double doIntegrate() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.MaxCountExceededException;

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int DEFAULT_MAX_ITERATIONS_COUNT> = 2147483647;

        <org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: int DEFAULT_MIN_ITERATIONS_COUNT> = 3;

        <org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double DEFAULT_RELATIVE_ACCURACY> = 1.0E-6;

        <org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-15;

        return;
    }
}
