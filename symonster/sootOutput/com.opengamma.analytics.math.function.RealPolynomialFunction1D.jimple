public class com.opengamma.analytics.math.function.RealPolynomialFunction1D extends com.opengamma.analytics.math.function.DoubleFunction1D
{
    private final double[] _coefficients;
    private final int _n;

    public transient void <init>(double[])
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0;
        double[] r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: double[];

        specialinvoke r0.<com.opengamma.analytics.math.function.DoubleFunction1D: void <init>()>();

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object)>(r1);

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, "coefficients length must be greater than zero");

        r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients> = r1;

        $r2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i1 = lengthof $r2;

        r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n> = $i1;

        return;
    }

    public java.lang.Double evaluate(java.lang.Double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0;
        java.lang.Double r1, $r3;
        int $i0, $i1, $i2, i3;
        double[] $r2, $r4;
        double $d0, $d1, $d2, d3;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        $r2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $i1 = $i0 - 1;

        d3 = $r2[$i1];

        $i2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        i3 = $i2 - 2;

     label1:
        if i3 < 0 goto label2;

        $d0 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d2 = $d0 * d3;

        $r4 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $d1 = $r4[i3];

        d3 = $d2 + $d1;

        i3 = i3 + -1;

        goto label1;

     label2:
        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        return $r3;
    }

    public double[] getCoefficients()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        return $r1;
    }

    public com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, r2, $r7;
        com.opengamma.analytics.math.function.DoubleFunction1D r1, $r6;
        double[] r3, r4, r5, $r9;
        int i0, $i1, $i2, $i3, $i4, i5, $i6;
        boolean z0, $z1, $z2;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.function.DoubleFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $z1 = r1 instanceof com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        if $z1 == 0 goto label11;

        r2 = (com.opengamma.analytics.math.function.RealPolynomialFunction1D) r1;

        r3 = virtualinvoke r2.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        r4 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        i0 = lengthof r3;

        $i1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        if i0 <= $i1 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        if $z2 == 0 goto label03;

        $r9 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r3, i0);

        goto label04;

     label03:
        $i2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $r9 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r4, $i2);

     label04:
        r5 = $r9;

        i5 = 0;

     label05:
        $i4 = i5;

        if z0 == 0 goto label06;

        $i6 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        goto label07;

     label06:
        $i6 = i0;

     label07:
        if $i4 >= $i6 goto label10;

        $i3 = i5;

        $d0 = r5[i5];

        if z0 == 0 goto label08;

        $d2 = r4[i5];

        goto label09;

     label08:
        $d2 = r3[i5];

     label09:
        $d1 = $d0 + $d2;

        r5[$i3] = $d1;

        i5 = i5 + 1;

        goto label05;

     label10:
        $r7 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r7.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r5);

        return $r7;

     label11:
        $r6 = specialinvoke r0.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D add(com.opengamma.analytics.math.function.DoubleFunction1D)>(r1);

        return $r6;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D add(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3;
        double d0, $d1, $d2;
        double[] r1, $r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        $d1 = r1[0];

        $d2 = $d1 + d0;

        r1[0] = $d2;

        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D derivative()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3;
        int i0, $i1, $i2, i3;
        double[] r1, $r2, $r4;
        double $d0, $d1, $d2;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i1 = lengthof $r2;

        i0 = $i1 - 1;

        r1 = newarray (double)[i0];

        i3 = 1;

     label1:
        if i3 > i0 goto label2;

        $i2 = i3 - 1;

        $d1 = (double) i3;

        $r4 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $d0 = $r4[i3];

        $d2 = $d1 * $d0;

        r1[$i2] = $d2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D divide(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3;
        double d0, $d1, $d2;
        double[] r1, $r2;
        int $i0, $i1, i2;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        i2 = 0;

     label1:
        $i1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        if i2 >= $i1 goto label2;

        $d1 = r1[i2];

        $d2 = $d1 / d0;

        r1[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.function.DoubleFunction1D multiply(com.opengamma.analytics.math.function.DoubleFunction1D)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, r2, $r7;
        com.opengamma.analytics.math.function.DoubleFunction1D r1, $r6;
        double[] r3, r4, r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.function.DoubleFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $z0 = r1 instanceof com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        if $z0 == 0 goto label5;

        r2 = (com.opengamma.analytics.math.function.RealPolynomialFunction1D) r1;

        r3 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        i0 = lengthof r4;

        $i1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $i2 = $i1 + i0;

        $i3 = $i2 - 1;

        r5 = newarray (double)[$i3];

        i11 = 0;

     label1:
        $i4 = lengthof r5;

        if i11 >= $i4 goto label4;

        r5[i11] = 0.0;

        $i5 = i11 + 1;

        $i6 = $i5 - i0;

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6);

     label2:
        $i8 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $i7 = i11 + 1;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i7);

        if i12 >= $i9 goto label3;

        $d3 = r5[i11];

        $d1 = r3[i12];

        $i10 = i11 - i12;

        $d0 = r4[$i10];

        $d2 = $d1 * $d0;

        $d4 = $d3 + $d2;

        r5[i11] = $d4;

        i12 = i12 + 1;

        goto label2;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        $r7 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r7.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r5);

        return $r7;

     label5:
        $r6 = specialinvoke r0.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D multiply(com.opengamma.analytics.math.function.DoubleFunction1D)>(r1);

        return $r6;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D multiply(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3;
        double d0, $d1, $d2;
        double[] r1, $r2;
        int $i0, $i1, i2;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        i2 = 0;

     label1:
        $i1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        if i2 >= $i1 goto label2;

        $d1 = r1[i2];

        $d2 = $d1 * d0;

        r1[i2] = $d2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.function.DoubleFunction1D subtract(com.opengamma.analytics.math.function.DoubleFunction1D)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, r2, $r7;
        com.opengamma.analytics.math.function.DoubleFunction1D r1, $r6;
        double[] r3, r4, r5;
        int i0, i1, i2, i3, i4, i5;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: com.opengamma.analytics.math.function.DoubleFunction1D;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "function");

        $z0 = r1 instanceof com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        if $z0 == 0 goto label7;

        r2 = (com.opengamma.analytics.math.function.RealPolynomialFunction1D) r1;

        r3 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        r4 = virtualinvoke r2.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        i0 = lengthof r3;

        i1 = lengthof r4;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        r5 = newarray (double)[i3];

        i4 = 0;

     label1:
        if i4 >= i2 goto label2;

        $d4 = r3[i4];

        $d3 = r4[i4];

        $d5 = $d4 - $d3;

        r5[i4] = $d5;

        i4 = i4 + 1;

        goto label1;

     label2:
        i5 = i2;

     label3:
        if i5 >= i3 goto label6;

        if i0 != i3 goto label4;

        $d2 = r3[i5];

        r5[i5] = $d2;

        goto label5;

     label4:
        $d0 = r4[i5];

        $d1 = neg $d0;

        r5[i5] = $d1;

     label5:
        i5 = i5 + 1;

        goto label3;

     label6:
        $r7 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r7.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r5);

        return $r7;

     label7:
        $r6 = specialinvoke r0.<com.opengamma.analytics.math.function.DoubleFunction1D: com.opengamma.analytics.math.function.DoubleFunction1D subtract(com.opengamma.analytics.math.function.DoubleFunction1D)>(r1);

        return $r6;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D subtract(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3;
        double d0, $d1, $d2;
        double[] r1, $r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r2 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] getCoefficients()>();

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        $d1 = r1[0];

        $d2 = $d1 - d0;

        r1[0] = $d2;

        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public com.opengamma.analytics.math.function.RealPolynomialFunction1D toMonic()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r3, $r5;
        double d0, $d1, $d2;
        double[] r1, $r2, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i0 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $i1 = $i0 - 1;

        d0 = $r2[$i1];

        $z0 = staticinvoke <com.opengamma.util.CompareUtils: boolean closeEquals(double,double)>(d0, 1.0);

        if $z0 == 0 goto label1;

        $r5 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r6 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i4 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        $r7 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r6, $i4);

        specialinvoke $r5.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>($r7);

        return $r5;

     label1:
        $i2 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        r1 = newarray (double)[$i2];

        i5 = 0;

     label2:
        $i3 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: int _n>;

        if i5 >= $i3 goto label3;

        $r4 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $d1 = $r4[i5];

        $d2 = $d1 / d0;

        r1[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        $r3 = new com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: void <init>(double[])>(r1);

        return $r3;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0;
        double[] $r1;
        int $i1, $i2, i4;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i4 = $i1 + $i2;

        return i4;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double[] $r5, $r6;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.function.RealPolynomialFunction1D) r1;

        $r6 = r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $r5 = r2.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: double[] _coefficients>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    public volatile com.opengamma.analytics.math.function.DoubleFunction1D subtract(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r1;
        double d0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: com.opengamma.analytics.math.function.RealPolynomialFunction1D subtract(double)>(d0);

        return $r1;
    }

    public volatile com.opengamma.analytics.math.function.DoubleFunction1D multiply(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r1;
        double d0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: com.opengamma.analytics.math.function.RealPolynomialFunction1D multiply(double)>(d0);

        return $r1;
    }

    public volatile com.opengamma.analytics.math.function.DoubleFunction1D divide(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r1;
        double d0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: com.opengamma.analytics.math.function.RealPolynomialFunction1D divide(double)>(d0);

        return $r1;
    }

    public volatile com.opengamma.analytics.math.function.DoubleFunction1D add(double)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r1;
        double d0;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: com.opengamma.analytics.math.function.RealPolynomialFunction1D add(double)>(d0);

        return $r1;
    }

    public volatile com.opengamma.analytics.math.function.DoubleFunction1D derivative()
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0, $r1;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        $r1 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: com.opengamma.analytics.math.function.RealPolynomialFunction1D derivative()>();

        return $r1;
    }

    public volatile java.lang.Object evaluate(java.lang.Object)
    {
        com.opengamma.analytics.math.function.RealPolynomialFunction1D r0;
        java.lang.Object r1;
        java.lang.Double $r2, $r3;

        r0 := @this: com.opengamma.analytics.math.function.RealPolynomialFunction1D;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $r3 = virtualinvoke r0.<com.opengamma.analytics.math.function.RealPolynomialFunction1D: java.lang.Double evaluate(java.lang.Double)>($r2);

        return $r3;
    }
}
