public class org.apache.commons.math3.util.Precision extends java.lang.Object
{
    public static final double EPSILON;
    public static final double SAFE_MIN;
    private static final long EXPONENT_OFFSET;
    private static final long SGN_MASK;
    private static final int SGN_MASK_FLOAT;
    private static final double POSITIVE_ZERO;
    private static final long POSITIVE_ZERO_DOUBLE_BITS;
    private static final long NEGATIVE_ZERO_DOUBLE_BITS;
    private static final int POSITIVE_ZERO_FLOAT_BITS;
    private static final int NEGATIVE_ZERO_FLOAT_BITS;

    private void <init>()
    {
        org.apache.commons.math3.util.Precision r0;

        r0 := @this: org.apache.commons.math3.util.Precision;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int compareTo(double, double, double)
    {
        double d0, d1, d2;
        boolean $z0;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,double)>(d0, d1, d2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        return -1;

     label2:
        return 1;
    }

    public static int compareTo(double, double, int)
    {
        double d0, d1;
        int i0;
        boolean $z0;
        byte $b1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $b1 = d0 cmpg d1;

        if $b1 >= 0 goto label2;

        return -1;

     label2:
        return 1;
    }

    public static boolean equals(float, float)
    {
        float f0, f1;
        boolean $z0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>(f0, f1, 1);

        return $z0;
    }

    public static boolean equalsIncludingNaN(float, float)
    {
        float f0, f1;
        byte $b0, $b1, $b2, $b3;
        boolean $z0, $z1, $z2, $z3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b0 = f0 cmpl f0;

        if $b0 != 0 goto label1;

        $b3 = f1 cmpl f1;

        if $b3 == 0 goto label7;

     label1:
        $b1 = f0 cmpl f0;

        if $b1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $b2 = f1 cmpl f1;

        if $b2 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $z2 = $z0 ^ $z1;

        if $z2 != 0 goto label6;

        $z3 = 1;

        goto label8;

     label6:
        $z3 = 0;

        goto label8;

     label7:
        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>(f0, f1, 1);

     label8:
        return $z3;
    }

    public static boolean equals(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;
        boolean $z0, $z1;
        byte $b0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>(f0, f1, 1);

        if $z0 != 0 goto label1;

        $f3 = f1 - f0;

        $f4 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f3);

        $b0 = $f4 cmpg f2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equalsIncludingNaN(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;
        boolean $z0, $z1;
        byte $b0;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>(f0, f1);

        if $z0 != 0 goto label1;

        $f3 = f1 - f0;

        $f4 = staticinvoke <org.apache.commons.math3.util.FastMath: float abs(float)>($f3);

        $b0 = $f4 cmpg f2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equals(float, float, int)
    {
        float f0, f1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        boolean $z0, $z1, $z2, z3, $z4, $z5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i3 = i1 ^ i2;

        $i4 = $i3 & -2147483648;

        if $i4 != 0 goto label03;

        $i10 = i1 - i2;

        $i11 = staticinvoke <org.apache.commons.math3.util.FastMath: int abs(int)>($i10);

        if $i11 > i0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z3 = $z2;

        goto label09;

     label03:
        if i1 >= i2 goto label04;

        $i8 = <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS>;

        i12 = i2 - $i8;

        $i9 = <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS>;

        i13 = i1 - $i9;

        goto label05;

     label04:
        $i5 = <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS>;

        i12 = i1 - $i5;

        $i6 = <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS>;

        i13 = i2 - $i6;

     label05:
        if i12 <= i0 goto label06;

        z3 = 0;

        goto label09;

     label06:
        $i7 = i0 - i12;

        if i13 > $i7 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z3 = $z4;

     label09:
        if z3 == 0 goto label10;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label10;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 != 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        return $z5;
    }

    public static boolean equalsIncludingNaN(float, float, int)
    {
        float f0, f1;
        int i0;
        byte $b1, $b2, $b3, $b4;
        boolean $z0, $z1, $z2, $z3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 := @parameter2: int;

        $b1 = f0 cmpl f0;

        if $b1 != 0 goto label1;

        $b4 = f1 cmpl f1;

        if $b4 == 0 goto label7;

     label1:
        $b2 = f0 cmpl f0;

        if $b2 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $b3 = f1 cmpl f1;

        if $b3 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $z2 = $z0 ^ $z1;

        if $z2 != 0 goto label6;

        $z3 = 1;

        goto label8;

     label6:
        $z3 = 0;

        goto label8;

     label7:
        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(float,float,int)>(f0, f1, i0);

     label8:
        return $z3;
    }

    public static boolean equals(double, double)
    {
        double d0, d1;
        boolean $z0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, 1);

        return $z0;
    }

    public static boolean equalsIncludingNaN(double, double)
    {
        double d0, d1;
        byte $b0, $b1, $b2, $b3;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d0;

        if $b0 != 0 goto label1;

        $b3 = d1 cmpl d1;

        if $b3 == 0 goto label7;

     label1:
        $b1 = d0 cmpl d0;

        if $b1 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $b2 = d1 cmpl d1;

        if $b2 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $z2 = $z0 ^ $z1;

        if $z2 != 0 goto label6;

        $z3 = 1;

        goto label8;

     label6:
        $z3 = 0;

        goto label8;

     label7:
        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, 1);

     label8:
        return $z3;
    }

    public static boolean equals(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;
        boolean $z0, $z1;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, 1);

        if $z0 != 0 goto label1;

        $d3 = d1 - d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b0 = $d4 cmpg d2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equalsWithRelativeTolerance(double, double, double)
    {
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8;
        boolean $z0, $z1;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, 1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d1);

        d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d5, $d6);

        $d7 = d0 - d1;

        $d8 = $d7 / d3;

        d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d8);

        $b0 = d4 cmpg d2;

        if $b0 > 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equalsIncludingNaN(double, double, double)
    {
        double d0, d1, d2, $d3, $d4;
        boolean $z0, $z1;
        byte $b0;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>(d0, d1);

        if $z0 != 0 goto label1;

        $d3 = d1 - d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d3);

        $b0 = $d4 cmpg d2;

        if $b0 > 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public static boolean equals(double, double, int)
    {
        double d0, d1;
        int i0;
        long l1, l2, $l3, $l4, $l7, $l8, $l9, $l11, $l12, $l14, $l15, $l16, $l17, $l18, l20, l21;
        byte $b5, $b6, $b10, $b13, $b19;
        boolean $z0, $z1, $z2, z3, $z4, $z5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l3 = l1 ^ l2;

        $l4 = $l3 & -9223372036854775808L;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label03;

        $l16 = l1 - l2;

        $l17 = staticinvoke <org.apache.commons.math3.util.FastMath: long abs(long)>($l16);

        $l18 = (long) i0;

        $b19 = $l17 cmp $l18;

        if $b19 > 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z3 = $z2;

        goto label09;

     label03:
        $b6 = l1 cmp l2;

        if $b6 >= 0 goto label04;

        $l14 = <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS>;

        l20 = l2 - $l14;

        $l15 = <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS>;

        l21 = l1 - $l15;

        goto label05;

     label04:
        $l7 = <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS>;

        l20 = l1 - $l7;

        $l8 = <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS>;

        l21 = l2 - $l8;

     label05:
        $l9 = (long) i0;

        $b10 = l20 cmp $l9;

        if $b10 <= 0 goto label06;

        z3 = 0;

        goto label09;

     label06:
        $l11 = (long) i0;

        $l12 = $l11 - l20;

        $b13 = l21 cmp $l12;

        if $b13 > 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z3 = $z4;

     label09:
        if z3 == 0 goto label10;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label10;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label10;

        $z5 = 1;

        goto label11;

     label10:
        $z5 = 0;

     label11:
        return $z5;
    }

    public static boolean equalsIncludingNaN(double, double, int)
    {
        double d0, d1;
        int i0;
        byte $b1, $b2, $b3, $b4;
        boolean $z0, $z1, $z2, $z3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        $b1 = d0 cmpl d0;

        if $b1 != 0 goto label1;

        $b4 = d1 cmpl d1;

        if $b4 == 0 goto label7;

     label1:
        $b2 = d0 cmpl d0;

        if $b2 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $b3 = d1 cmpl d1;

        if $b3 == 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $z2 = $z0 ^ $z1;

        if $z2 != 0 goto label6;

        $z3 = 1;

        goto label8;

     label6:
        $z3 = 0;

        goto label8;

     label7:
        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double,int)>(d0, d1, i0);

     label8:
        return $z3;
    }

    public static double round(double, int)
    {
        double d0, $d1;
        int i0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $d1 = staticinvoke <org.apache.commons.math3.util.Precision: double round(double,int,int)>(d0, i0, 4);

        return $d1;
    }

    public static double round(double, int, int)
    {
        double d0, d1, $d2;
        int i0, i1;
        java.math.BigDecimal $r0, $r2;
        java.lang.String $r1;
        byte $b2;
        java.lang.NumberFormatException $r3;
        boolean $z0;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r0 = new java.math.BigDecimal;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)>(i0, i1);

        d1 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label2;

        $d2 = 0.0 * d0;

        goto label3;

     label2:
        $d2 = d1;

     label3:
        return $d2;

     label4:
        $r3 := @caughtexception;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label5;

        return d0;

     label5:
        return #NaN;

        catch java.lang.NumberFormatException from label1 to label3 with label4;
    }

    public static float round(float, int)
    {
        float f0, $f1;
        int i0;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $f1 = staticinvoke <org.apache.commons.math3.util.Precision: float round(float,int,int)>(f0, i0, 4);

        return $f1;
    }

    public static float round(float, int, int) throws org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6;
        int i0, i1;
        double $d0, $d1, $d2, $d3;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f1 = staticinvoke <org.apache.commons.math3.util.FastMath: float copySign(float,float)>(1.0F, f0);

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,int)>(10.0, i0);

        $f3 = (float) $d0;

        f2 = $f3 * f1;

        $f4 = f0 * f2;

        $d2 = (double) $f4;

        $d1 = (double) f1;

        $d3 = staticinvoke <org.apache.commons.math3.util.Precision: double roundUnscaled(double,double,int)>($d2, $d1, i1);

        $f5 = (float) $d3;

        $f6 = $f5 / f2;

        return $f6;
    }

    private static double roundUnscaled(double, double, int) throws org.apache.commons.math3.exception.MathArithmeticException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, d20, d21, d22;
        int i0;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        org.apache.commons.math3.exception.MathArithmeticException $r0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r1;
        java.lang.Object[] $r2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3;
        java.lang.Integer $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        d17 := @parameter0: double;

        d0 := @parameter1: double;

        i0 := @parameter2: int;

        tableswitch(i0)
        {
            case 0: goto label15;
            case 1: goto label03;
            case 2: goto label01;
            case 3: goto label04;
            case 4: goto label12;
            case 5: goto label06;
            case 6: goto label08;
            case 7: goto label14;
            default: goto label16;
        };

     label01:
        $b1 = d0 cmpl -1.0;

        if $b1 != 0 goto label02;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #-Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d2);

        goto label17;

     label02:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d1);

        goto label17;

     label03:
        $d14 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #-Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d14);

        goto label17;

     label04:
        $b8 = d0 cmpl -1.0;

        if $b8 != 0 goto label05;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d13);

        goto label17;

     label05:
        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #-Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d12);

        goto label17;

     label06:
        d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #-Infinity);

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d18);

        d19 = d18 - $d10;

        $b6 = d19 cmpl 0.5;

        if $b6 <= 0 goto label07;

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d18);

        goto label17;

     label07:
        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d18);

        goto label17;

     label08:
        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        d20 = d17 - $d4;

        $b3 = d20 cmpl 0.5;

        if $b3 <= 0 goto label09;

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d17);

        goto label17;

     label09:
        $b4 = d20 cmpg 0.5;

        if $b4 >= 0 goto label10;

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        goto label17;

     label10:
        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        $d6 = $d5 / 2.0;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        $d8 = $d7 / 2.0;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d8);

        $b5 = $d6 cmpl $d9;

        if $b5 != 0 goto label11;

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        goto label17;

     label11:
        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d17);

        goto label17;

     label12:
        d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #Infinity);

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d21);

        d22 = d21 - $d11;

        $b7 = d22 cmpl 0.5;

        if $b7 < 0 goto label13;

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>(d21);

        goto label17;

     label13:
        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d21);

        goto label17;

     label14:
        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        $b2 = d17 cmpl $d3;

        if $b2 == 0 goto label17;

        $r0 = new org.apache.commons.math3.exception.MathArithmeticException;

        specialinvoke $r0.<org.apache.commons.math3.exception.MathArithmeticException: void <init>()>();

        throw $r0;

     label15:
        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>(d17);

        $b9 = d17 cmpl $d15;

        if $b9 == 0 goto label17;

        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double nextAfter(double,double)>(d17, #Infinity);

        d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double ceil(double)>($d16);

        goto label17;

     label16:
        $r1 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_ROUNDING_METHOD>;

        $r2 = newarray (java.lang.Object)[17];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r2[1] = "ROUND_CEILING";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r2[2] = $r5;

        $r2[3] = "ROUND_DOWN";

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r2[4] = $r6;

        $r2[5] = "ROUND_FLOOR";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r2[6] = $r7;

        $r2[7] = "ROUND_HALF_DOWN";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r2[8] = $r8;

        $r2[9] = "ROUND_HALF_EVEN";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        $r2[10] = $r9;

        $r2[11] = "ROUND_HALF_UP";

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r2[12] = $r10;

        $r2[13] = "ROUND_UNNECESSARY";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7);

        $r2[14] = $r11;

        $r2[15] = "ROUND_UP";

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2[16] = $r12;

        specialinvoke $r1.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r3, $r2);

        throw $r1;

     label17:
        return d17;
    }

    public static double representableDelta(double, double)
    {
        double d0, d1, $d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 + d1;

        $d3 = $d2 - d0;

        return $d3;
    }

    static void <clinit>()
    {
        long $l0, $l1;
        int $i2, $i3;
        double $d0, $d1;

        <org.apache.commons.math3.util.Precision: double POSITIVE_ZERO> = 0.0;

        <org.apache.commons.math3.util.Precision: int SGN_MASK_FLOAT> = -2147483648;

        <org.apache.commons.math3.util.Precision: long SGN_MASK> = -9223372036854775808L;

        <org.apache.commons.math3.util.Precision: long EXPONENT_OFFSET> = 1023L;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(0.0);

        <org.apache.commons.math3.util.Precision: long POSITIVE_ZERO_DOUBLE_BITS> = $l0;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(-0.0);

        <org.apache.commons.math3.util.Precision: long NEGATIVE_ZERO_DOUBLE_BITS> = $l1;

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(0.0F);

        <org.apache.commons.math3.util.Precision: int POSITIVE_ZERO_FLOAT_BITS> = $i2;

        $i3 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(-0.0F);

        <org.apache.commons.math3.util.Precision: int NEGATIVE_ZERO_FLOAT_BITS> = $i3;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(4368491638549381120L);

        <org.apache.commons.math3.util.Precision: double EPSILON> = $d0;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(4503599627370496L);

        <org.apache.commons.math3.util.Precision: double SAFE_MIN> = $d1;

        return;
    }
}
