public class org.apache.commons.math3.optimization.direct.PowellOptimizer extends org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer implements org.apache.commons.math3.optimization.MultivariateOptimizer
{
    private static final double MIN_RELATIVE_TOLERANCE;
    private final double relativeThreshold;
    private final double absoluteThreshold;
    private final org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch line;

    public void <init>(double, double, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        double d0, d1, $d2, $d3;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        r1 := @parameter2: org.apache.commons.math3.optimization.ConvergenceChecker;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d1);

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: void <init>(double,double,double,double,org.apache.commons.math3.optimization.ConvergenceChecker)>(d0, d1, $d2, $d3, r1);

        return;
    }

    public void <init>(double, double, double, double, org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        double d0, d1, d2, d3, $d4, $d5;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        byte $b0, $b1;
        org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch $r2;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r3;
        java.lang.Double $r4, $r6, $r7;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        r1 := @parameter4: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateOptimizer: void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)>(r1);

        $d4 = <org.apache.commons.math3.optimization.direct.PowellOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $b0 = d0 cmpg $d4;

        if $b0 >= 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $d5 = <org.apache.commons.math3.optimization.direct.PowellOptimizer: double MIN_RELATIVE_TOLERANCE>;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        specialinvoke $r5.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r6, $r7, 1);

        throw $r5;

     label1:
        $b1 = d1 cmpg 0.0;

        if $b1 > 0 goto label2;

        $r3 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        specialinvoke $r3.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r4);

        throw $r3;

     label2:
        r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double relativeThreshold> = d0;

        r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double absoluteThreshold> = d1;

        $r2 = new org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch;

        specialinvoke $r2.<org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch: void <init>(org.apache.commons.math3.optimization.direct.PowellOptimizer,double,double)>(r0, d2, d3);

        r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch line> = $r2;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: void <init>(double,double,org.apache.commons.math3.optimization.ConvergenceChecker)>(d0, d1, null);

        return;
    }

    public void <init>(double, double, double, double)
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        double d0, d1, d2, d3;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: void <init>(double,double,double,double,org.apache.commons.math3.optimization.ConvergenceChecker)>(d0, d1, d2, d3, null);

        return;
    }

    protected org.apache.commons.math3.optimization.PointValuePair doOptimize()
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        org.apache.commons.math3.optimization.GoalType r1, $r14;
        double[] r2, r4, $r12, $r13, $r15, $r17, r19, r20, r21, r28;
        int i0, i1, i8, i9, i10, i11, i12;
        double[][] r3, r6, r23;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, d27, d29, d30, d31, d32, d33, d34, d35, d36, d37;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair r5, r22;
        java.lang.Object $r7, $r10;
        byte $b2, $b3, $b4, $b5, $b6, $b7;
        org.apache.commons.math3.optimization.PointValuePair $r8, $r9, $r26, $r27;
        org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch $r11, $r16;
        org.apache.commons.math3.optimization.ConvergenceChecker r18;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        r1 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: org.apache.commons.math3.optimization.GoalType getGoalType()>();

        r2 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double[] getStartPoint()>();

        i0 = lengthof r2;

        r3 = newmultiarray (double)[i0][i0];

        i8 = 0;

     label01:
        if i8 >= i0 goto label02;

        $r17 = r3[i8];

        $r17[i8] = 1.0;

        i8 = i8 + 1;

        goto label01;

     label02:
        r18 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()>();

        r19 = r2;

        d25 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double computeObjectiveValue(double[])>(r2);

        $r7 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r20 = (double[]) $r7;

        i9 = 0;

     label03:
        i9 = i9 + 1;

        d0 = d25;

        d27 = 0.0;

        i10 = 0;

        i11 = 0;

     label04:
        if i11 >= i0 goto label06;

        $r15 = r3[i11];

        r21 = staticinvoke <org.apache.commons.math3.util.MathArrays: double[] copyOf(double[])>($r15);

        d29 = d25;

        $r16 = r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch line>;

        r22 = virtualinvoke $r16.<org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair search(double[],double[])>(r19, r21);

        d25 = virtualinvoke r22.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        d30 = virtualinvoke r22.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getPoint()>();

        r23 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>(r19, r21, d30);

        r19 = r23[0];

        $d24 = d29 - d25;

        $b7 = $d24 cmpl d27;

        if $b7 <= 0 goto label05;

        d27 = d29 - d25;

        i10 = i11;

     label05:
        i11 = i11 + 1;

        goto label04;

     label06:
        $d1 = d0 - d25;

        $d2 = 2.0 * $d1;

        $d3 = r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double relativeThreshold>;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d25);

        $d6 = $d4 + $d5;

        $d8 = $d3 * $d6;

        $d7 = r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double absoluteThreshold>;

        $d9 = $d8 + $d7;

        $b2 = $d2 cmpg $d9;

        if $b2 > 0 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        z1 = $z0;

        $r8 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r8.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r20, d0);

        $r9 = new org.apache.commons.math3.optimization.PointValuePair;

        specialinvoke $r9.<org.apache.commons.math3.optimization.PointValuePair: void <init>(double[],double)>(r19, d25);

        if $z0 != 0 goto label09;

        if r18 == null goto label09;

        z1 = interfaceinvoke r18.<org.apache.commons.math3.optimization.ConvergenceChecker: boolean converged(int,java.lang.Object,java.lang.Object)>(i9, $r8, $r9);

     label09:
        if z1 == 0 goto label15;

        $r14 = <org.apache.commons.math3.optimization.GoalType: org.apache.commons.math3.optimization.GoalType MINIMIZE>;

        if r1 != $r14 goto label12;

        $b6 = d25 cmpg d0;

        if $b6 >= 0 goto label10;

        $r26 = $r9;

        goto label11;

     label10:
        $r26 = $r8;

     label11:
        return $r26;

     label12:
        $b5 = d25 cmpl d0;

        if $b5 <= 0 goto label13;

        $r27 = $r9;

        goto label14;

     label13:
        $r27 = $r8;

     label14:
        return $r27;

     label15:
        r28 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        i12 = 0;

     label16:
        if i12 >= i0 goto label17;

        $d18 = r19[i12];

        $d17 = r20[i12];

        $d19 = $d18 - $d17;

        r28[i12] = $d19;

        $d20 = r19[i12];

        $d22 = 2.0 * $d20;

        $d21 = r20[i12];

        $d23 = $d22 - $d21;

        r4[i12] = $d23;

        i12 = i12 + 1;

        goto label16;

     label17:
        $r10 = virtualinvoke r19.<java.lang.Object: java.lang.Object clone()>();

        r20 = (double[]) $r10;

        d31 = virtualinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double computeObjectiveValue(double[])>(r4);

        $b3 = d0 cmpl d31;

        if $b3 <= 0 goto label18;

        $d11 = d0 + d31;

        $d10 = 2.0 * d25;

        $d12 = $d11 - $d10;

        d32 = 2.0 * $d12;

        $d13 = d0 - d25;

        d33 = $d13 - d27;

        $d14 = d33 * d33;

        d34 = d32 * $d14;

        d35 = d0 - d31;

        $d15 = d27 * d35;

        $d16 = $d15 * d35;

        d36 = d34 - $d16;

        $b4 = d36 cmpg 0.0;

        if $b4 >= 0 goto label18;

        $r11 = r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch line>;

        r5 = virtualinvoke $r11.<org.apache.commons.math3.optimization.direct.PowellOptimizer$LineSearch: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair search(double[],double[])>(r19, r28);

        d25 = virtualinvoke r5.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getValue()>();

        d37 = virtualinvoke r5.<org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair: double getPoint()>();

        r6 = specialinvoke r0.<org.apache.commons.math3.optimization.direct.PowellOptimizer: double[][] newPointAndDirection(double[],double[],double)>(r19, r28, d37);

        r19 = r6[0];

        i1 = i0 - 1;

        $r12 = r3[i1];

        r3[i10] = $r12;

        $r13 = r6[1];

        r3[i1] = $r13;

     label18:
        goto label03;
    }

    private double[][] newPointAndDirection(double[], double[], double)
    {
        org.apache.commons.math3.optimization.direct.PowellOptimizer r0;
        double[] r1, r2, r3, r4;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int i0, i1;
        double[][] r5;

        r0 := @this: org.apache.commons.math3.optimization.direct.PowellOptimizer;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        i0 = lengthof r1;

        r3 = newarray (double)[i0];

        r4 = newarray (double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r2[i1];

        $d2 = $d1 * d0;

        r4[i1] = $d2;

        $d4 = r1[i1];

        $d3 = r4[i1];

        $d5 = $d4 + $d3;

        r3[i1] = $d5;

        i1 = i1 + 1;

        goto label1;

     label2:
        r5 = newarray (double[])[2];

        r5[0] = r3;

        r5[1] = r4;

        return r5;
    }

    static void <clinit>()
    {
        double $d0, $d1;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(1.0);

        $d1 = 2.0 * $d0;

        <org.apache.commons.math3.optimization.direct.PowellOptimizer: double MIN_RELATIVE_TOLERANCE> = $d1;

        return;
    }
}
