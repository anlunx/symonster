public final class org.joda.time.Partial extends org.joda.time.base.AbstractPartial implements org.joda.time.ReadablePartial, java.io.Serializable
{
    private static final long serialVersionUID;
    private final org.joda.time.Chronology iChronology;
    private final org.joda.time.DateTimeFieldType[] iTypes;
    private final int[] iValues;
    private transient org.joda.time.format.DateTimeFormatter[] iFormatter;

    public void <init>()
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.Partial;

        $r1 = (org.joda.time.Chronology) null;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.Chronology)>($r1);

        return;
    }

    public void <init>(org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology r1, $r2, $r3;
        org.joda.time.DateTimeFieldType[] $r4;
        int[] $r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        $r4 = newarray (org.joda.time.DateTimeFieldType)[0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        $r5 = newarray (int)[0];

        r0.<org.joda.time.Partial: int[] iValues> = $r5;

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType,int,org.joda.time.Chronology)>(r1, i0, null);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType, int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType r1;
        int i0;
        org.joda.time.Chronology $r2, r7, r8;
        org.joda.time.DateTimeFieldType[] $r3;
        int[] $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        r7 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r7);

        r8 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = r8;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r6;

     label1:
        $r3 = newarray (org.joda.time.DateTimeFieldType)[1];

        $r3[0] = r1;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r3;

        $r4 = newarray (int)[1];

        $r4[0] = i0;

        r0.<org.joda.time.Partial: int[] iValues> = $r4;

        $r5 = r0.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke r8.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, $r5);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] r1;
        int[] r2;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType[];

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>(r1, r2, null);

        return;
    }

    public void <init>(org.joda.time.DateTimeFieldType[], int[], org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] r1, $r11, $r12;
        int[] r2, $r14, $r15;
        org.joda.time.DateTimeFieldType r3, $r23, $r30, $r36, $r46, $r56, $r66, $r76, $r86, $r96, $r103;
        org.joda.time.DurationField r4, r7, r8, r114;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        org.joda.time.DurationFieldType r5, r6, $r16, $r18, $r19;
        org.joda.time.Chronology $r9, $r17, $r31, $r32, r112, r113;
        java.lang.Object $r10, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r20, $r33, $r43, $r53, $r63, $r73, $r83, $r93, $r104, $r109, $r110, $r111;
        java.lang.StringBuilder $r21, $r22, $r25, $r26, $r28, $r34, $r35, $r38, $r39, $r41, $r44, $r45, $r48, $r49, $r51, $r54, $r55, $r58, $r59, $r61, $r64, $r65, $r68, $r69, $r71, $r74, $r75, $r78, $r79, $r81, $r84, $r85, $r88, $r89, $r91, $r94, $r95, $r98, $r99, $r101, $r105, $r106, $r107;
        java.lang.String $r24, $r27, $r29, $r37, $r40, $r42, $r47, $r50, $r52, $r57, $r60, $r62, $r67, $r70, $r72, $r77, $r80, $r82, $r87, $r90, $r92, $r97, $r100, $r102, $r108;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType[];

        r2 := @parameter1: int[];

        r112 := @parameter2: org.joda.time.Chronology;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r9 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r112);

        r113 = virtualinvoke $r9.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = r113;

        if r1 != null goto label01;

        $r111 = new java.lang.IllegalArgumentException;

        specialinvoke $r111.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not be null");

        throw $r111;

     label01:
        if r2 != null goto label02;

        $r110 = new java.lang.IllegalArgumentException;

        specialinvoke $r110.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must not be null");

        throw $r110;

     label02:
        $i2 = lengthof r2;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label03;

        $r109 = new java.lang.IllegalArgumentException;

        specialinvoke $r109.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Values array must be the same length as the types array");

        throw $r109;

     label03:
        $i3 = lengthof r1;

        if $i3 != 0 goto label04;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = r1;

        r0.<org.joda.time.Partial: int[] iValues> = r2;

        return;

     label04:
        i17 = 0;

     label05:
        $i4 = lengthof r1;

        if i17 >= $i4 goto label07;

        $r103 = r1[i17];

        if $r103 != null goto label06;

        $r104 = new java.lang.IllegalArgumentException;

        $r105 = new java.lang.StringBuilder;

        specialinvoke $r105.<java.lang.StringBuilder: void <init>()>();

        $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain null: index ");

        $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r104.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r108);

        throw $r104;

     label06:
        i17 = i17 + 1;

        goto label05;

     label07:
        r114 = null;

        i18 = 0;

     label08:
        $i5 = lengthof r1;

        if i18 >= $i5 goto label18;

        r3 = r1[i18];

        $r16 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r17 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r4 = virtualinvoke $r16.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r17);

        if i18 <= 0 goto label17;

        $z0 = virtualinvoke r4.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 != 0 goto label10;

        $z3 = virtualinvoke r114.<org.joda.time.DurationField: boolean isSupported()>();

        if $z3 == 0 goto label09;

        $r93 = new java.lang.IllegalArgumentException;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i16 = i18 - 1;

        $r96 = r1[$i16];

        $r97 = virtualinvoke $r96.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r98 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r100 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r101 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r93.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r102);

        throw $r93;

     label09:
        $r83 = new java.lang.IllegalArgumentException;

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate unsupported: ");

        $i15 = i18 - 1;

        $r86 = r1[$i15];

        $r87 = virtualinvoke $r86.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r88 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r87);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r90 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r91 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r90);

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r83.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r92);

        throw $r83;

     label10:
        i0 = virtualinvoke r114.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r4);

        if i0 >= 0 goto label11;

        $r73 = new java.lang.IllegalArgumentException;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i14 = i18 - 1;

        $r76 = r1[$i14];

        $r77 = virtualinvoke $r76.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r78 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r80 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r73.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r82);

        throw $r73;

     label11:
        if i0 != 0 goto label17;

        $z1 = virtualinvoke r114.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label16;

        $i7 = i18 - 1;

        $r30 = r1[$i7];

        r5 = virtualinvoke $r30.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        r6 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if r5 != null goto label12;

        if r6 != null goto label15;

        $r63 = new java.lang.IllegalArgumentException;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate: ");

        $i13 = i18 - 1;

        $r66 = r1[$i13];

        $r67 = virtualinvoke $r66.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r70 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r72);

        throw $r63;

     label12:
        if r6 != null goto label13;

        $r53 = new java.lang.IllegalArgumentException;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i12 = i18 - 1;

        $r56 = r1[$i12];

        $r57 = virtualinvoke $r56.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r60 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r62);

        throw $r53;

     label13:
        $r31 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r7 = virtualinvoke r5.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r31);

        $r32 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r8 = virtualinvoke r6.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r32);

        $i8 = virtualinvoke r7.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r8);

        if $i8 >= 0 goto label14;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest: ");

        $i11 = i18 - 1;

        $r46 = r1[$i11];

        $r47 = virtualinvoke $r46.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r50 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r52);

        throw $r43;

     label14:
        $i9 = virtualinvoke r7.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r8);

        if $i9 != 0 goto label15;

        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must not contain duplicate: ");

        $i10 = i18 - 1;

        $r36 = r1[$i10];

        $r37 = virtualinvoke $r36.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r40 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);

        throw $r33;

     label15:
        goto label17;

     label16:
        $z2 = virtualinvoke r114.<org.joda.time.DurationField: boolean isSupported()>();

        if $z2 == 0 goto label17;

        $r18 = virtualinvoke r114.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>();

        $r19 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>;

        if $r18 == $r19 goto label17;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Types array must be in order largest-smallest, for year-based fields, years is defined as being largest: ");

        $i6 = i18 - 1;

        $r23 = r1[$i6];

        $r24 = virtualinvoke $r23.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        $r27 = virtualinvoke r3.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r20;

     label17:
        r114 = r4;

        i18 = i18 + 1;

        goto label08;

     label18:
        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (org.joda.time.DateTimeFieldType[]) $r10;

        $r12 = (org.joda.time.DateTimeFieldType[]) $r11;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r12;

        virtualinvoke r113.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r0, r2);

        $r13 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r14 = (int[]) $r13;

        $r15 = (int[]) $r14;

        r0.<org.joda.time.Partial: int[] iValues> = $r15;

        return;
    }

    public void <init>(org.joda.time.ReadablePartial)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePartial r1;
        org.joda.time.Chronology $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType[] $r5, $r7;
        int[] $r6, $r9;
        org.joda.time.DateTimeFieldType $r8;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r10;

     label1:
        $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r2);

        $r4 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r4;

        $i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $r5 = newarray (org.joda.time.DateTimeFieldType)[$i0];

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r5;

        $i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        $r6 = newarray (int)[$i1];

        r0.<org.joda.time.Partial: int[] iValues> = $r6;

        i4 = 0;

     label2:
        $i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>();

        if i4 >= $i2 goto label3;

        $r7 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r8 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i4);

        $r7[i4] = $r8;

        $r9 = r0.<org.joda.time.Partial: int[] iValues>;

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i4);

        $r9[i4] = $i3;

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    void <init>(org.joda.time.Partial, int[])
    {
        org.joda.time.Partial r0, r1;
        int[] r2;
        org.joda.time.Chronology $r3;
        org.joda.time.DateTimeFieldType[] $r4;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Partial;

        r2 := @parameter1: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        $r3 = r1.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = $r3;

        $r4 = r1.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = $r4;

        r0.<org.joda.time.Partial: int[] iValues> = r2;

        return;
    }

    void <init>(org.joda.time.Chronology, org.joda.time.DateTimeFieldType[], int[])
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeFieldType[] r2;
        int[] r3;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.Chronology;

        r2 := @parameter1: org.joda.time.DateTimeFieldType[];

        r3 := @parameter2: int[];

        specialinvoke r0.<org.joda.time.base.AbstractPartial: void <init>()>();

        r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> = r1;

        r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> = r2;

        r0.<org.joda.time.Partial: int[] iValues> = r3;

        return;
    }

    public int size()
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1;
        int $i0;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public org.joda.time.Chronology getChronology()
    {
        org.joda.time.Partial r0;
        org.joda.time.Chronology $r1;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        return $r1;
    }

    protected org.joda.time.DateTimeField getField(int, org.joda.time.Chronology)
    {
        org.joda.time.Partial r0;
        int i0;
        org.joda.time.Chronology r1;
        org.joda.time.DateTimeFieldType[] $r2;
        org.joda.time.DateTimeFieldType $r3;
        org.joda.time.DateTimeField $r4;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        r1 := @parameter1: org.joda.time.Chronology;

        $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r3 = $r2[i0];

        $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        return $r4;
    }

    public org.joda.time.DateTimeFieldType getFieldType(int)
    {
        org.joda.time.Partial r0;
        int i0;
        org.joda.time.DateTimeFieldType[] $r1;
        org.joda.time.DateTimeFieldType $r2;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r2 = $r1[i0];

        return $r2;
    }

    public org.joda.time.DateTimeFieldType[] getFieldTypes()
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.joda.time.DateTimeFieldType[]) $r2;

        $r4 = (org.joda.time.DateTimeFieldType[]) $r3;

        return $r4;
    }

    public int getValue(int)
    {
        org.joda.time.Partial r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: org.joda.time.Partial;

        i0 := @parameter0: int;

        $r1 = r0.<org.joda.time.Partial: int[] iValues>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int[] getValues()
    {
        org.joda.time.Partial r0;
        int[] $r1, $r3, $r4;
        java.lang.Object $r2;

        r0 := @this: org.joda.time.Partial;

        $r1 = r0.<org.joda.time.Partial: int[] iValues>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        $r4 = (int[]) $r3;

        return $r4;
    }

    public org.joda.time.Partial withChronologyRetainFields(org.joda.time.Chronology)
    {
        org.joda.time.Partial r0, $r3;
        org.joda.time.Chronology $r2, r7, r8, r9;
        int[] $r4, $r6;
        org.joda.time.DateTimeFieldType[] $r5;

        r0 := @this: org.joda.time.Partial;

        r7 := @parameter0: org.joda.time.Chronology;

        r8 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r7);

        r9 = virtualinvoke r8.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>();

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Chronology getChronology()>();

        if r9 != $r2 goto label1;

        return r0;

     label1:
        $r3 = new org.joda.time.Partial;

        $r5 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = r0.<org.joda.time.Partial: int[] iValues>;

        specialinvoke $r3.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>(r9, $r5, $r4);

        $r6 = r0.<org.joda.time.Partial: int[] iValues>;

        virtualinvoke r9.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r3, $r6);

        return $r3;
    }

    public org.joda.time.Partial 'with'(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Partial r0, $r8, $r29;
        org.joda.time.DateTimeFieldType r1, r24;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        int[] r2, $r26, $r28, r33, r34;
        org.joda.time.DurationField r3, r4, r5, r6;
        org.joda.time.DateTimeField $r7;
        org.joda.time.DateTimeFieldType[] $r9, $r12, $r13, r23, $r25, $r27;
        org.joda.time.DurationFieldType $r10, $r14, $r16, $r17, $r18, $r20;
        org.joda.time.Chronology $r11, $r15, $r19, $r21, $r30, $r32;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null");

        throw $r22;

     label1:
        i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r1);

        if i1 != -1 goto label8;

        $r9 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i4 = lengthof $r9;

        $i5 = $i4 + 1;

        r23 = newarray (org.joda.time.DateTimeFieldType)[$i5];

        $i6 = lengthof r23;

        r2 = newarray (int)[$i6];

        i9 = 0;

        $r10 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r11 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r3 = virtualinvoke $r10.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r11);

        $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isSupported()>();

        if $z0 == 0 goto label7;

     label2:
        $r12 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i7 = lengthof $r12;

        if i9 >= $i7 goto label7;

        $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        r24 = $r13[i9];

        $r14 = virtualinvoke r24.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>();

        $r15 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r4 = virtualinvoke $r14.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r15);

        $z1 = virtualinvoke r4.<org.joda.time.DurationField: boolean isSupported()>();

        if $z1 == 0 goto label6;

        i2 = virtualinvoke r3.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r4);

        if i2 <= 0 goto label3;

        goto label7;

     label3:
        if i2 != 0 goto label6;

        $r16 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r16 != null goto label4;

        goto label7;

     label4:
        $r17 = virtualinvoke r24.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        if $r17 != null goto label5;

        goto label6;

     label5:
        $r18 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r19 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r5 = virtualinvoke $r18.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r19);

        $r20 = virtualinvoke r24.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>();

        $r21 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        r6 = virtualinvoke $r20.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r21);

        $i8 = virtualinvoke r5.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r6);

        if $i8 <= 0 goto label6;

        goto label7;

     label6:
        i9 = i9 + 1;

        goto label2;

     label7:
        $r25 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r23, 0, i9);

        $r26 = r0.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r2, 0, i9);

        r23[i9] = r1;

        r2[i9] = i0;

        $r27 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i10 = i9 + 1;

        $i11 = lengthof r23;

        $i12 = $i11 - i9;

        $i13 = $i12 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r27, i9, r23, $i10, $i13);

        $r28 = r0.<org.joda.time.Partial: int[] iValues>;

        $i14 = i9 + 1;

        $i15 = lengthof r2;

        $i16 = $i15 - i9;

        $i17 = $i16 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r28, i9, r2, $i14, $i17);

        $r29 = new org.joda.time.Partial;

        $r30 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r29.<org.joda.time.Partial: void <init>(org.joda.time.DateTimeFieldType[],int[],org.joda.time.Chronology)>(r23, r2, $r30);

        $r32 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r32.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r29, r2);

        return $r29;

     label8:
        $i3 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1);

        if i0 != $i3 goto label9;

        return r0;

     label9:
        r33 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r7 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1);

        r34 = virtualinvoke $r7.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r33, i0);

        $r8 = new org.joda.time.Partial;

        specialinvoke $r8.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r34);

        return $r8;
    }

    public org.joda.time.Partial without(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Partial r0, $r9;
        org.joda.time.DateTimeFieldType r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.joda.time.DateTimeFieldType[] r2, $r5, $r6;
        int[] r3, $r7, $r8;
        org.joda.time.Chronology $r10, $r11;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r1);

        if i0 == -1 goto label1;

        $i1 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $i2 = $i1 - 1;

        r2 = newarray (org.joda.time.DateTimeFieldType)[$i2];

        $i3 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $i4 = $i3 - 1;

        r3 = newarray (int)[$i4];

        $r5 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, i0);

        $r6 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i7 = i0 + 1;

        $i5 = lengthof r2;

        $i6 = $i5 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i7, r2, i0, $i6);

        $r7 = r0.<org.joda.time.Partial: int[] iValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r3, 0, i0);

        $r8 = r0.<org.joda.time.Partial: int[] iValues>;

        $i10 = i0 + 1;

        $i8 = lengthof r3;

        $i9 = $i8 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i10, r3, i0, $i9);

        $r9 = new org.joda.time.Partial;

        $r10 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        specialinvoke $r9.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r10, r2, r3);

        $r11 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>;

        virtualinvoke $r11.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>($r9, r3);

        return $r9;

     label1:
        return r0;
    }

    public org.joda.time.Partial withField(org.joda.time.DateTimeFieldType, int)
    {
        org.joda.time.Partial r0, $r3;
        org.joda.time.DateTimeFieldType r1;
        int i0, i1, $i2;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        $i2 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1);

        if i0 != $i2 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.Partial;

        specialinvoke $r3.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.Partial withFieldAdded(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.Partial r0, $r3;
        org.joda.time.DurationFieldType r1;
        int i0, i1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i0 != 0 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.Partial;

        specialinvoke $r3.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.Partial withFieldAddWrapped(org.joda.time.DurationFieldType, int)
    {
        org.joda.time.Partial r0, $r3;
        org.joda.time.DurationFieldType r1;
        int i0, i1;
        org.joda.time.DateTimeField $r2;
        int[] r4, r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DurationFieldType;

        i0 := @parameter1: int;

        i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DurationFieldType)>(r1);

        if i0 != 0 goto label1;

        return r0;

     label1:
        r4 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1);

        r5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r4, i0);

        $r3 = new org.joda.time.Partial;

        specialinvoke $r3.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod, int)
    {
        org.joda.time.Partial r0, $r3;
        org.joda.time.ReadablePeriod r1;
        int i0, i1, $i2, $i3, $i4, i5;
        org.joda.time.DurationFieldType r2;
        org.joda.time.DateTimeField $r4;
        int[] r5;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 != 0 goto label2;

     label1:
        return r0;

     label2:
        r5 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>();

        i5 = 0;

     label3:
        $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>();

        if i5 >= $i2 goto label5;

        r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i5);

        i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DurationFieldType)>(r2);

        if i1 < 0 goto label4;

        $r4 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1);

        $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i5);

        $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i3, i0);

        r5 = virtualinvoke $r4.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r5, $i4);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r3 = new org.joda.time.Partial;

        specialinvoke $r3.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r5);

        return $r3;
    }

    public org.joda.time.Partial plus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, 1);

        return $r2;
    }

    public org.joda.time.Partial minus(org.joda.time.ReadablePeriod)
    {
        org.joda.time.Partial r0, $r2;
        org.joda.time.ReadablePeriod r1;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePeriod;

        $r2 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.Partial withPeriodAdded(org.joda.time.ReadablePeriod,int)>(r1, -1);

        return $r2;
    }

    public org.joda.time.Partial$Property property(org.joda.time.DateTimeFieldType)
    {
        org.joda.time.Partial r0;
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.Partial$Property $r2;
        int $i0;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        $r2 = new org.joda.time.Partial$Property;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1);

        specialinvoke $r2.<org.joda.time.Partial$Property: void <init>(org.joda.time.Partial,int)>(r0, $i0);

        return $r2;
    }

    public boolean isMatch(org.joda.time.ReadableInstant)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadableInstant r1;
        long l0;
        org.joda.time.Chronology r2;
        int i1, $i2, $i3, i4;
        org.joda.time.DateTimeFieldType[] $r3, $r4;
        org.joda.time.DateTimeFieldType $r5;
        org.joda.time.DateTimeField $r6;
        int[] $r7;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadableInstant;

        l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1);

        r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1);

        i4 = 0;

     label1:
        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i2 = lengthof $r3;

        if i4 >= $i2 goto label3;

        $r4 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r5 = $r4[i4];

        $r6 = virtualinvoke $r5.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2);

        i1 = virtualinvoke $r6.<org.joda.time.DateTimeField: int get(long)>(l0);

        $r7 = r0.<org.joda.time.Partial: int[] iValues>;

        $i3 = $r7[i4];

        if i1 == $i3 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public boolean isMatch(org.joda.time.ReadablePartial)
    {
        org.joda.time.Partial r0;
        org.joda.time.ReadablePartial r1;
        int i0, $i1, $i2, i3;
        org.joda.time.DateTimeFieldType[] $r2, $r3;
        org.joda.time.DateTimeFieldType $r4;
        int[] $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: org.joda.time.ReadablePartial;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The partial must not be null");

        throw $r6;

     label1:
        i3 = 0;

     label2:
        $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $i1 = lengthof $r2;

        if i3 >= $i1 goto label4;

        $r3 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r4 = $r3[i3];

        i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r4);

        $r5 = r0.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r5[i3];

        if i0 == $i2 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public org.joda.time.format.DateTimeFormatter getFormatter()
    {
        org.joda.time.Partial r0;
        int $i0, $i1;
        java.util.ArrayList $r1;
        org.joda.time.DateTimeFieldType[] $r2;
        java.util.List $r3;
        org.joda.time.format.DateTimeFormatter $r4, $r5, $r10;
        java.lang.IllegalArgumentException $r6;
        org.joda.time.format.DateTimeFormatter[] r7;

        r0 := @this: org.joda.time.Partial;

        r7 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r7 != null goto label6;

        $i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        r7 = newarray (org.joda.time.format.DateTimeFormatter)[2];

     label2:
        $r1 = new java.util.ArrayList;

        $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter forFields(java.util.Collection,boolean,boolean)>($r1, 1, 0);

        r7[0] = $r4;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 != 0 goto label3;

        $r5 = r7[0];

        r7[1] = $r5;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter> = r7;

     label6:
        $r10 = r7[0];

        return $r10;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        org.joda.time.Partial r0;
        org.joda.time.format.DateTimeFormatter r1;
        java.lang.String $r2, $r3, $r5;
        org.joda.time.format.DateTimeFormatter[] r6;

        r0 := @this: org.joda.time.Partial;

        r6 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r6 != null goto label1;

        virtualinvoke r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter getFormatter()>();

        r6 = r0.<org.joda.time.Partial: org.joda.time.format.DateTimeFormatter[] iFormatter>;

        if r6 != null goto label1;

        $r5 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r5;

     label1:
        r1 = r6[1];

        if r1 != null goto label2;

        $r3 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toStringList()>();

        return $r3;

     label2:
        $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r2;
    }

    public java.lang.String toStringList()
    {
        org.joda.time.Partial r0;
        int i0, $i1, $i2, i3;
        java.lang.StringBuilder $r2, $r13;
        java.lang.String $r5, $r8;
        org.joda.time.DateTimeFieldType[] $r6;
        org.joda.time.DateTimeFieldType $r7;
        int[] $r11;

        r0 := @this: org.joda.time.Partial;

        i0 = virtualinvoke r0.<org.joda.time.Partial: int size()>();

        $r2 = new java.lang.StringBuilder;

        $i1 = 20 * i0;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        if i3 <= 0 goto label2;

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r6 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>;

        $r7 = $r6[i3];

        $r8 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r11 = r0.<org.joda.time.Partial: int[] iValues>;

        $i2 = $r11[i3];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toString(java.lang.String)
    {
        org.joda.time.Partial r0;
        java.lang.String r1, $r3, $r4;
        org.joda.time.format.DateTimeFormatter $r2;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toString()>();

        return $r4;

     label1:
        $r2 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r3;
    }

    public java.lang.String toString(java.lang.String, java.util.Locale)
    {
        org.joda.time.Partial r0;
        java.lang.String r1, $r5, $r6;
        java.util.Locale r2;
        org.joda.time.format.DateTimeFormatter $r3, $r4;

        r0 := @this: org.joda.time.Partial;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        if r1 != null goto label1;

        $r6 = virtualinvoke r0.<org.joda.time.Partial: java.lang.String toString()>();

        return $r6;

     label1:
        $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withLocale(java.util.Locale)>(r2);

        $r5 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0);

        return $r5;
    }

    public static void <clinit>()
    {
        <org.joda.time.Partial: long serialVersionUID> = 12324121189002L;

        return;
    }
}
