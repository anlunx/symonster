public abstract class org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer extends java.lang.Object implements org.apache.commons.math3.optimization.univariate.UnivariateOptimizer
{
    private final org.apache.commons.math3.optimization.ConvergenceChecker checker;
    private final org.apache.commons.math3.util.Incrementor evaluations;
    private org.apache.commons.math3.optimization.GoalType goal;
    private double searchMin;
    private double searchMax;
    private double searchStart;
    private org.apache.commons.math3.analysis.UnivariateFunction function;

    protected void <init>(org.apache.commons.math3.optimization.ConvergenceChecker)
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker r1;
        org.apache.commons.math3.util.Incrementor $r2;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        r1 := @parameter0: org.apache.commons.math3.optimization.ConvergenceChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new org.apache.commons.math3.util.Incrementor;

        specialinvoke $r2.<org.apache.commons.math3.util.Incrementor: void <init>()>();

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations> = $r2;

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker> = r1;

        return;
    }

    public int getMaxEvaluations()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getMaximalCount()>();

        return $i0;
    }

    public int getEvaluations()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        org.apache.commons.math3.util.Incrementor $r1;
        int $i0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        $i0 = virtualinvoke $r1.<org.apache.commons.math3.util.Incrementor: int getCount()>();

        return $i0;
    }

    public org.apache.commons.math3.optimization.GoalType getGoalType()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        org.apache.commons.math3.optimization.GoalType $r1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal>;

        return $r1;
    }

    public double getMin()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $d0 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchMin>;

        return $d0;
    }

    public double getMax()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $d0 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchMax>;

        return $d0;
    }

    public double getStartValue()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $d0 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchStart>;

        return $d0;
    }

    protected double computeObjectiveValue(double)
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        double d0, $d1;
        org.apache.commons.math3.util.Incrementor $r2;
        org.apache.commons.math3.analysis.UnivariateFunction $r3;
        org.apache.commons.math3.exception.MaxCountExceededException $r4;
        org.apache.commons.math3.exception.TooManyEvaluationsException $r5;
        java.lang.Number $r6;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        d0 := @parameter0: double;

     label1:
        $r2 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r2.<org.apache.commons.math3.util.Incrementor: void incrementCount()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.apache.commons.math3.exception.TooManyEvaluationsException;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.exception.MaxCountExceededException: java.lang.Number getMax()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.TooManyEvaluationsException: void <init>(java.lang.Number)>($r6);

        throw $r5;

     label4:
        $r3 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.analysis.UnivariateFunction function>;

        $d1 = interfaceinvoke $r3.<org.apache.commons.math3.analysis.UnivariateFunction: double value(double)>(d0);

        return $d1;

        catch org.apache.commons.math3.exception.MaxCountExceededException from label1 to label2 with label3;
    }

    public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double, double)
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        double d0, d1, d2;
        org.apache.commons.math3.util.Incrementor $r3, $r4;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r5;
        org.apache.commons.math3.exception.NullArgumentException $r6, $r7;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        d2 := @parameter5: double;

        if r1 != null goto label1;

        $r7 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r7.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r7;

     label1:
        if r2 != null goto label2;

        $r6 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r6.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r6;

     label2:
        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchMin> = d0;

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchMax> = d1;

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: double searchStart> = d2;

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.GoalType goal> = r2;

        r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.analysis.UnivariateFunction function> = r1;

        $r3 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r3.<org.apache.commons.math3.util.Incrementor: void setMaximalCount(int)>(i0);

        $r4 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.util.Incrementor evaluations>;

        virtualinvoke $r4.<org.apache.commons.math3.util.Incrementor: void resetCount()>();

        $r5 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize()>();

        return $r5;
    }

    public org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int, org.apache.commons.math3.analysis.UnivariateFunction, org.apache.commons.math3.optimization.GoalType, double, double)
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        int i0;
        org.apache.commons.math3.analysis.UnivariateFunction r1;
        org.apache.commons.math3.optimization.GoalType r2;
        double d0, d1, $d2, $d3, $d4;
        org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair $r3;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math3.analysis.UnivariateFunction;

        r2 := @parameter2: org.apache.commons.math3.optimization.GoalType;

        d0 := @parameter3: double;

        d1 := @parameter4: double;

        $d2 = d1 - d0;

        $d3 = 0.5 * $d2;

        $d4 = d0 + $d3;

        $r3 = virtualinvoke r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair optimize(int,org.apache.commons.math3.analysis.UnivariateFunction,org.apache.commons.math3.optimization.GoalType,double,double,double)>(i0, r1, r2, d0, d1, $d4);

        return $r3;
    }

    public org.apache.commons.math3.optimization.ConvergenceChecker getConvergenceChecker()
    {
        org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer r0;
        org.apache.commons.math3.optimization.ConvergenceChecker $r1;

        r0 := @this: org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer;

        $r1 = r0.<org.apache.commons.math3.optimization.univariate.BaseAbstractUnivariateOptimizer: org.apache.commons.math3.optimization.ConvergenceChecker checker>;

        return $r1;
    }

    protected abstract org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair doOptimize();
}
