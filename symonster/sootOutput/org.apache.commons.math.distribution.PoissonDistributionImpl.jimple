public class org.apache.commons.math.distribution.PoissonDistributionImpl extends org.apache.commons.math.distribution.AbstractIntegerDistribution implements org.apache.commons.math.distribution.PoissonDistribution, java.io.Serializable
{
    public static final int DEFAULT_MAX_ITERATIONS;
    public static final double DEFAULT_EPSILON;
    private static final long serialVersionUID;
    private org.apache.commons.math.distribution.NormalDistribution normal;
    private double mean;
    private int maxIterations;
    private double epsilon;

    public void <init>(double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;
        org.apache.commons.math.distribution.NormalDistributionImpl $r1;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math.distribution.NormalDistributionImpl;

        specialinvoke $r1.<org.apache.commons.math.distribution.NormalDistributionImpl: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void <init>(double,org.apache.commons.math.distribution.NormalDistribution)>(d0, $r1);

        return;
    }

    public void <init>(double, double, int)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0, d1;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = 10000000;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = 1.0E-12;

        virtualinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setMean(double)>(d0);

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = d1;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = i0;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = 10000000;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = 1.0E-12;

        virtualinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setMean(double)>(d0);

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = d1;

        return;
    }

    public void <init>(double, int)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;
        int i0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = 10000000;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = 1.0E-12;

        virtualinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setMean(double)>(d0);

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = i0;

        return;
    }

    public void <init>(double, org.apache.commons.math.distribution.NormalDistribution)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;
        org.apache.commons.math.distribution.NormalDistribution r1;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        r1 := @parameter1: org.apache.commons.math.distribution.NormalDistribution;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractIntegerDistribution: void <init>()>();

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations> = 10000000;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon> = 1.0E-12;

        specialinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setNormalAndMeanInternal(org.apache.commons.math.distribution.NormalDistribution,double)>(r1, d0);

        return;
    }

    public double getMean()
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        return $d0;
    }

    public void setMean(double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;
        org.apache.commons.math.distribution.NormalDistribution $r1;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.distribution.NormalDistribution normal>;

        specialinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setNormalAndMeanInternal(org.apache.commons.math.distribution.NormalDistribution,double)>($r1, d0);

        return;
    }

    private void setNormalAndMeanInternal(org.apache.commons.math.distribution.NormalDistribution, double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        org.apache.commons.math.distribution.NormalDistribution r1, $r2, $r3;
        double d0, $d1;
        byte $b0;
        java.lang.Object[] $r4;
        org.apache.commons.math.exception.util.LocalizedFormats $r5;
        java.lang.Double $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.NormalDistribution;

        d0 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r5 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_POISSON_MEAN>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4[0] = $r6;

        $r7 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r7;

     label1:
        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean> = d0;

        r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.distribution.NormalDistribution normal> = r1;

        $r2 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.distribution.NormalDistribution normal>;

        interfaceinvoke $r2.<org.apache.commons.math.distribution.NormalDistribution: void setMean(double)>(d0);

        $r3 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.distribution.NormalDistribution normal>;

        $d1 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d0);

        interfaceinvoke $r3.<org.apache.commons.math.distribution.NormalDistribution: void setStandardDeviation(double)>($d1);

        return;
    }

    public double probability(int)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        int i0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 != 2147483647 goto label2;

     label1:
        d13 = 0.0;

        goto label4;

     label2:
        if i0 != 0 goto label3;

        $d11 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        $d12 = neg $d11;

        d13 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d12);

        goto label4;

     label3:
        $d0 = (double) i0;

        $d1 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double getStirlingError(double)>($d0);

        $d4 = neg $d1;

        $d3 = (double) i0;

        $d2 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        $d5 = staticinvoke <org.apache.commons.math.distribution.SaddlePointExpansion: double getDeviancePart(double,double)>($d3, $d2);

        $d6 = $d4 - $d5;

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d6);

        $d8 = (double) i0;

        $d9 = 6.283185307179586 * $d8;

        $d10 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d9);

        d13 = $d7 / $d10;

     label4:
        return d13;
    }

    public double cumulativeProbability(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        int i0, $i1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        return 0.0;

     label1:
        if i0 != 2147483647 goto label2;

        return 1.0;

     label2:
        $d0 = (double) i0;

        $d3 = $d0 + 1.0;

        $d2 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        $d1 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double epsilon>;

        $i1 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: int maxIterations>;

        $d4 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaQ(double,double,double,int)>($d3, $d2, $d1, $i1);

        return $d4;
    }

    public double normalApproximateProbability(int) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        int i0;
        double $d0, $d1, $d2;
        org.apache.commons.math.distribution.NormalDistribution $r1;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.distribution.NormalDistribution normal>;

        $d0 = (double) i0;

        $d1 = $d0 + 0.5;

        $d2 = interfaceinvoke $r1.<org.apache.commons.math.distribution.NormalDistribution: double cumulativeProbability(double)>($d1);

        return $d2;
    }

    public int sample() throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double $d0;
        org.apache.commons.math.random.RandomDataImpl $r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        $r1 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: org.apache.commons.math.random.RandomDataImpl randomData>;

        $d0 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        $l0 = virtualinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: long nextPoisson(double)>($d0);

        $l1 = staticinvoke <org.apache.commons.math.util.FastMath: long min(long,long)>($l0, 2147483647L);

        $i2 = (int) $l1;

        return $i2;
    }

    protected int getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        return 0;
    }

    protected int getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        d0 := @parameter0: double;

        return 2147483647;
    }

    public void setNormal(org.apache.commons.math.distribution.NormalDistribution)
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        org.apache.commons.math.distribution.NormalDistribution r1;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        r1 := @parameter0: org.apache.commons.math.distribution.NormalDistribution;

        $d0 = r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double mean>;

        specialinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: void setNormalAndMeanInternal(org.apache.commons.math.distribution.NormalDistribution,double)>(r1, $d0);

        return;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        return 0;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        return 2147483647;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.PoissonDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.PoissonDistributionImpl;

        $d0 = virtualinvoke r0.<org.apache.commons.math.distribution.PoissonDistributionImpl: double getMean()>();

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.PoissonDistributionImpl: long serialVersionUID> = -3349935121172596109L;

        <org.apache.commons.math.distribution.PoissonDistributionImpl: double DEFAULT_EPSILON> = 1.0E-12;

        <org.apache.commons.math.distribution.PoissonDistributionImpl: int DEFAULT_MAX_ITERATIONS> = 10000000;

        return;
    }
}
