public class org.apache.commons.lang.time.FastDateFormat extends java.text.Format
{
    private static final long serialVersionUID;
    public static final int FULL;
    public static final int LONG;
    public static final int MEDIUM;
    public static final int SHORT;
    private static java.lang.String cDefaultPattern;
    private static final java.util.Map cInstanceCache;
    private static final java.util.Map cDateInstanceCache;
    private static final java.util.Map cTimeInstanceCache;
    private static final java.util.Map cDateTimeInstanceCache;
    private static final java.util.Map cTimeZoneDisplayCache;
    private final java.lang.String mPattern;
    private final java.util.TimeZone mTimeZone;
    private final boolean mTimeZoneForced;
    private final java.util.Locale mLocale;
    private final boolean mLocaleForced;
    private transient org.apache.commons.lang.time.FastDateFormat$Rule[] mRules;
    private transient int mMaxLengthEstimate;

    public static org.apache.commons.lang.time.FastDateFormat getInstance()
    {
        java.lang.String $r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: java.lang.String getDefaultPattern()>();

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>($r0, null, null);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, null, null);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone)
    {
        java.lang.String r0;
        java.util.TimeZone r1;
        org.apache.commons.lang.time.FastDateFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        $r2 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, r1, null);

        return $r2;
    }

    public static org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        org.apache.commons.lang.time.FastDateFormat $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, null, r1);

        return $r2;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)
    {
        java.lang.String r0;
        java.util.TimeZone r1;
        java.util.Locale r2;
        org.apache.commons.lang.time.FastDateFormat $r4, r9;
        java.util.Map $r5, $r7;
        java.lang.Object $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.TimeZone;

        r2 := @parameter2: java.util.Locale;

        $r4 = new org.apache.commons.lang.time.FastDateFormat;

        specialinvoke $r4.<org.apache.commons.lang.time.FastDateFormat: void <init>(java.lang.String,java.util.TimeZone,java.util.Locale)>(r0, r1, r2);

        $r5 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r9 = (org.apache.commons.lang.time.FastDateFormat) $r6;

        if r9 != null goto label1;

        r9 = $r4;

        virtualinvoke $r4.<org.apache.commons.lang.time.FastDateFormat: void init()>();

        $r7 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r4);

     label1:
        return r9;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.Locale)
    {
        int i0;
        java.util.Locale r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone)
    {
        int i0;
        java.util.TimeZone r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateInstance(int,java.util.TimeZone,java.util.Locale)>(i0, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone, java.util.Locale)
    {
        int i0;
        java.util.TimeZone r0;
        java.lang.String r1, $r15;
        java.lang.Integer $r2;
        org.apache.commons.lang.time.FastDateFormat$Pair $r3, $r9;
        java.util.Map $r4, $r7;
        java.lang.Object $r5, r17;
        java.text.DateFormat $r6;
        java.lang.ClassCastException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuffer $r12, $r13, $r14;
        java.util.Locale r16;
        org.apache.commons.lang.time.FastDateFormat r19;
        java.text.SimpleDateFormat r20;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        r16 := @parameter2: java.util.Locale;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        r17 = $r2;

        if r0 == null goto label1;

        $r9 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r9.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r2, r0);

        r17 = $r9;

     label1:
        if r16 != null goto label2;

        r16 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label2:
        $r3 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r3.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r17, r16);

        $r4 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r19 = (org.apache.commons.lang.time.FastDateFormat) $r5;

        if r19 != null goto label6;

     label3:
        $r6 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>(i0, r16);

        r20 = (java.text.SimpleDateFormat) $r6;

        r1 = virtualinvoke r20.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        r19 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r1, r0, r16);

        $r7 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r19);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date pattern for locale: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r16);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label6:
        return r19;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int)
    {
        int i0;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.Locale)
    {
        int i0;
        java.util.Locale r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone)
    {
        int i0;
        java.util.TimeZone r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getTimeInstance(int,java.util.TimeZone,java.util.Locale)>(i0, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone, java.util.Locale)
    {
        int i0;
        java.util.TimeZone r0;
        java.lang.String r1, $r15;
        java.lang.Integer $r2;
        java.util.Map $r3, $r6;
        java.lang.Object $r4, r17;
        java.text.DateFormat $r5;
        org.apache.commons.lang.time.FastDateFormat$Pair $r8, $r9;
        java.lang.ClassCastException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuffer $r12, $r13, $r14;
        java.util.Locale r16;
        org.apache.commons.lang.time.FastDateFormat r18;
        java.text.SimpleDateFormat r19;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.TimeZone;

        r16 := @parameter2: java.util.Locale;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0);

        r17 = $r2;

        if r0 == null goto label1;

        $r9 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r9.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r2, r0);

        r17 = $r9;

     label1:
        if r16 == null goto label2;

        $r8 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r8.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r17, r16);

        r17 = $r8;

     label2:
        $r3 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (org.apache.commons.lang.time.FastDateFormat) $r4;

        if r18 != null goto label6;

        if r16 != null goto label3;

        r16 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label3:
        $r5 = staticinvoke <java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>(i0, r16);

        r19 = (java.text.SimpleDateFormat) $r5;

        r1 = virtualinvoke r19.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        r18 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r1, r0, r16);

        $r6 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r18);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date pattern for locale: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r16);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label6:
        return r18;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int)
    {
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, null, null);

        return $r0;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.Locale)
    {
        int i0, i1;
        java.util.Locale r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.Locale;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, null, r0);

        return $r1;
    }

    public static org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone)
    {
        int i0, i1;
        java.util.TimeZone r0;
        org.apache.commons.lang.time.FastDateFormat $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.TimeZone;

        $r1 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int,int,java.util.TimeZone,java.util.Locale)>(i0, i1, r0, null);

        return $r1;
    }

    public static synchronized org.apache.commons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)
    {
        int i0, i1;
        java.util.TimeZone r0;
        java.lang.String r1, $r17;
        org.apache.commons.lang.time.FastDateFormat$Pair $r2, $r5, $r11, r19;
        java.lang.Integer $r3, $r4;
        java.util.Map $r6, $r9;
        java.lang.Object $r7;
        java.text.DateFormat $r8;
        java.lang.ClassCastException $r12;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuffer $r14, $r15, $r16;
        java.util.Locale r18;
        org.apache.commons.lang.time.FastDateFormat r21;
        java.text.SimpleDateFormat r22;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.TimeZone;

        r18 := @parameter3: java.util.Locale;

        $r2 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i0);

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i1);

        specialinvoke $r2.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4);

        r19 = $r2;

        if r0 == null goto label1;

        $r11 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r11.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>($r2, r0);

        r19 = $r11;

     label1:
        if r18 != null goto label2;

        r18 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label2:
        $r5 = new org.apache.commons.lang.time.FastDateFormat$Pair;

        specialinvoke $r5.<org.apache.commons.lang.time.FastDateFormat$Pair: void <init>(java.lang.Object,java.lang.Object)>(r19, r18);

        $r6 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r21 = (org.apache.commons.lang.time.FastDateFormat) $r7;

        if r21 != null goto label6;

     label3:
        $r8 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>(i0, i1, r18);

        r22 = (java.text.SimpleDateFormat) $r8;

        r1 = virtualinvoke r22.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        r21 = staticinvoke <org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat getInstance(java.lang.String,java.util.TimeZone,java.util.Locale)>(r1, r0, r18);

        $r9 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r21);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No date time pattern for locale: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r18);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label6:
        return r21;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    static synchronized java.lang.String getTimeZoneDisplay(java.util.TimeZone, boolean, int, java.util.Locale)
    {
        java.util.TimeZone r0;
        boolean z0;
        int i0;
        java.util.Locale r1;
        org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey $r3;
        java.util.Map $r4, $r6;
        java.lang.Object $r5;
        java.lang.String r8;

        r0 := @parameter0: java.util.TimeZone;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Locale;

        $r3 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey;

        specialinvoke $r3.<org.apache.commons.lang.time.FastDateFormat$TimeZoneDisplayKey: void <init>(java.util.TimeZone,boolean,int,java.util.Locale)>(r0, z0, i0, r1);

        $r4 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (java.lang.String) $r5;

        if r8 != null goto label1;

        r8 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>(z0, i0, r1);

        $r6 = <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r8);

     label1:
        return r8;
    }

    private static synchronized java.lang.String getDefaultPattern()
    {
        java.lang.String $r0, $r1, $r3;
        java.text.SimpleDateFormat $r2;

        $r0 = <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern>;

        if $r0 != null goto label1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>()>();

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String toPattern()>();

        <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern> = $r3;

     label1:
        $r1 = <org.apache.commons.lang.time.FastDateFormat: java.lang.String cDefaultPattern>;

        return $r1;
    }

    protected void <init>(java.lang.String, java.util.TimeZone, java.util.Locale)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r4;
        java.util.TimeZone r5;
        java.util.Locale r6;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.util.TimeZone;

        r6 := @parameter2: java.util.Locale;

        specialinvoke r0.<java.text.Format: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The pattern must not be null");

        throw $r4;

     label1:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern> = r1;

        if r5 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced> = $z0;

        if r5 != null goto label4;

        r5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

     label4:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone> = r5;

        if r6 == null goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        r0.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced> = $z1;

        if r6 != null goto label7;

        r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label7:
        r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale> = r6;

        return;
    }

    protected void init()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.List r1;
        int $i0, $i1, i2, i3;
        org.apache.commons.lang.time.FastDateFormat$Rule[] $r2, $r4, $r5, $r6, $r7;
        java.lang.Object[] $r3;
        org.apache.commons.lang.time.FastDateFormat$Rule $r8;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.util.List parsePattern()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (org.apache.commons.lang.time.FastDateFormat$Rule)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (org.apache.commons.lang.time.FastDateFormat$Rule[]) $r3;

        $r5 = (org.apache.commons.lang.time.FastDateFormat$Rule[]) $r4;

        r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules> = $r5;

        i2 = 0;

        $r6 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        i3 = lengthof $r6;

     label1:
        i3 = i3 + -1;

        if i3 < 0 goto label2;

        $r7 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        $r8 = $r7[i3];

        $i1 = interfaceinvoke $r8.<org.apache.commons.lang.time.FastDateFormat$Rule: int estimateLength()>();

        i2 = i2 + $i1;

        goto label1;

     label2:
        r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate> = i2;

        return;
    }

    protected java.util.List parsePattern()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String[] r3, r4, r5, r6, r7, r8, $r40;
        int i0, i1, $i4, i6, i7;
        int[] r9;
        java.lang.String r10, r11, $r15, $r16, $r38;
        char c2, $c5;
        java.text.DateFormatSymbols $r12;
        java.util.Locale $r13, $r19, $r22;
        java.util.ArrayList $r14;
        org.apache.commons.lang.time.FastDateFormat$TextField $r17, $r28, $r29, $r30, $r31;
        org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule $r18, $r21;
        boolean $z1, $z2;
        java.util.TimeZone $r20, $r23;
        org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField $r24;
        org.apache.commons.lang.time.FastDateFormat$NumberRule $r25, $r27;
        org.apache.commons.lang.time.FastDateFormat$TwelveHourField $r26;
        org.apache.commons.lang.time.FastDateFormat$StringLiteral $r32;
        org.apache.commons.lang.time.FastDateFormat$CharacterLiteral $r33;
        java.lang.IllegalArgumentException $r34;
        java.lang.StringBuffer $r35, $r36, $r37;
        org.apache.commons.lang.time.FastDateFormat$Rule r39;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r12 = new java.text.DateFormatSymbols;

        $r13 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r12.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r13);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r3 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();

        r4 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        r5 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

        r6 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        r7 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

        r8 = virtualinvoke $r12.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

        $r15 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        i0 = virtualinvoke $r15.<java.lang.String: int length()>();

        r9 = newarray (int)[1];

        i6 = 0;

     label01:
        if i6 >= i0 goto label34;

        r9[0] = i6;

        $r16 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        r10 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String parseToken(java.lang.String,int[])>($r16, r9);

        i7 = r9[0];

        i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if i1 != 0 goto label02;

        goto label34;

     label02:
        c2 = virtualinvoke r10.<java.lang.String: char charAt(int)>(0);

        tableswitch(c2)
        {
            case 39: goto label30;
            case 40: goto label32;
            case 41: goto label32;
            case 42: goto label32;
            case 43: goto label32;
            case 44: goto label32;
            case 45: goto label32;
            case 46: goto label32;
            case 47: goto label32;
            case 48: goto label32;
            case 49: goto label32;
            case 50: goto label32;
            case 51: goto label32;
            case 52: goto label32;
            case 53: goto label32;
            case 54: goto label32;
            case 55: goto label32;
            case 56: goto label32;
            case 57: goto label32;
            case 58: goto label32;
            case 59: goto label32;
            case 60: goto label32;
            case 61: goto label32;
            case 62: goto label32;
            case 63: goto label32;
            case 64: goto label32;
            case 65: goto label32;
            case 66: goto label32;
            case 67: goto label32;
            case 68: goto label19;
            case 69: goto label16;
            case 70: goto label20;
            case 71: goto label03;
            case 72: goto label12;
            case 73: goto label32;
            case 74: goto label32;
            case 75: goto label25;
            case 76: goto label32;
            case 77: goto label06;
            case 78: goto label32;
            case 79: goto label32;
            case 80: goto label32;
            case 81: goto label32;
            case 82: goto label32;
            case 83: goto label15;
            case 84: goto label32;
            case 85: goto label32;
            case 86: goto label32;
            case 87: goto label22;
            case 88: goto label32;
            case 89: goto label32;
            case 90: goto label28;
            case 91: goto label32;
            case 92: goto label32;
            case 93: goto label32;
            case 94: goto label32;
            case 95: goto label32;
            case 96: goto label32;
            case 97: goto label23;
            case 98: goto label32;
            case 99: goto label32;
            case 100: goto label10;
            case 101: goto label32;
            case 102: goto label32;
            case 103: goto label32;
            case 104: goto label11;
            case 105: goto label32;
            case 106: goto label32;
            case 107: goto label24;
            case 108: goto label32;
            case 109: goto label13;
            case 110: goto label32;
            case 111: goto label32;
            case 112: goto label32;
            case 113: goto label32;
            case 114: goto label32;
            case 115: goto label14;
            case 116: goto label32;
            case 117: goto label32;
            case 118: goto label32;
            case 119: goto label21;
            case 120: goto label32;
            case 121: goto label04;
            case 122: goto label26;
            default: goto label32;
        };

     label03:
        $r17 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r17.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(0, r3);

        r39 = $r17;

        goto label33;

     label04:
        if i1 < 4 goto label05;

        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(1, i1);

        goto label33;

     label05:
        r39 = <org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField: org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField INSTANCE>;

        goto label33;

     label06:
        if i1 < 4 goto label07;

        $r30 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r30.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, r4);

        r39 = $r30;

        goto label33;

     label07:
        if i1 != 3 goto label08;

        $r29 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r29.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(2, r5);

        r39 = $r29;

        goto label33;

     label08:
        if i1 != 2 goto label09;

        r39 = <org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField: org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField INSTANCE>;

        goto label33;

     label09:
        r39 = <org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField: org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField INSTANCE>;

        goto label33;

     label10:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(5, i1);

        goto label33;

     label11:
        $r26 = new org.apache.commons.lang.time.FastDateFormat$TwelveHourField;

        $r27 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, i1);

        specialinvoke $r26.<org.apache.commons.lang.time.FastDateFormat$TwelveHourField: void <init>(org.apache.commons.lang.time.FastDateFormat$NumberRule)>($r27);

        r39 = $r26;

        goto label33;

     label12:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, i1);

        goto label33;

     label13:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(12, i1);

        goto label33;

     label14:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(13, i1);

        goto label33;

     label15:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(14, i1);

        goto label33;

     label16:
        $r31 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        if i1 >= 4 goto label17;

        $r40 = r7;

        goto label18;

     label17:
        $r40 = r6;

     label18:
        specialinvoke $r31.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(7, $r40);

        r39 = $r31;

        goto label33;

     label19:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(6, i1);

        goto label33;

     label20:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(8, i1);

        goto label33;

     label21:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(3, i1);

        goto label33;

     label22:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(4, i1);

        goto label33;

     label23:
        $r28 = new org.apache.commons.lang.time.FastDateFormat$TextField;

        specialinvoke $r28.<org.apache.commons.lang.time.FastDateFormat$TextField: void <init>(int,java.lang.String[])>(9, r8);

        r39 = $r28;

        goto label33;

     label24:
        $r24 = new org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField;

        $r25 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(11, i1);

        specialinvoke $r24.<org.apache.commons.lang.time.FastDateFormat$TwentyFourHourField: void <init>(org.apache.commons.lang.time.FastDateFormat$NumberRule)>($r25);

        r39 = $r24;

        goto label33;

     label25:
        r39 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int,int)>(10, i1);

        goto label33;

     label26:
        if i1 < 4 goto label27;

        $r21 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule;

        $r23 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z2 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $r22 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r21.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule: void <init>(java.util.TimeZone,boolean,java.util.Locale,int)>($r23, $z2, $r22, 1);

        r39 = $r21;

        goto label33;

     label27:
        $r18 = new org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule;

        $r20 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z1 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $r19 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r18.<org.apache.commons.lang.time.FastDateFormat$TimeZoneNameRule: void <init>(java.util.TimeZone,boolean,java.util.Locale,int)>($r20, $z1, $r19, 0);

        r39 = $r18;

        goto label33;

     label28:
        if i1 != 1 goto label29;

        r39 = <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_NO_COLON>;

        goto label33;

     label29:
        r39 = <org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule: org.apache.commons.lang.time.FastDateFormat$TimeZoneNumberRule INSTANCE_COLON>;

        goto label33;

     label30:
        r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>(1);

        $i4 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i4 != 1 goto label31;

        $r33 = new org.apache.commons.lang.time.FastDateFormat$CharacterLiteral;

        $c5 = virtualinvoke r11.<java.lang.String: char charAt(int)>(0);

        specialinvoke $r33.<org.apache.commons.lang.time.FastDateFormat$CharacterLiteral: void <init>(char)>($c5);

        r39 = $r33;

        goto label33;

     label31:
        $r32 = new org.apache.commons.lang.time.FastDateFormat$StringLiteral;

        specialinvoke $r32.<org.apache.commons.lang.time.FastDateFormat$StringLiteral: void <init>(java.lang.String)>(r11);

        r39 = $r32;

        goto label33;

     label32:
        $r34 = new java.lang.IllegalArgumentException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal pattern component: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r10);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r38);

        throw $r34;

     label33:
        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r39);

        i6 = i7 + 1;

        goto label01;

     label34:
        return $r14;
    }

    protected java.lang.String parseToken(java.lang.String, int[])
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String r1, $r10;
        int[] r2;
        int i0, $i1, $i2, $i4, i5, $i7;
        org.apache.commons.lang.text.StrBuilder $r4;
        char $c3, c6, c8, c9;
        boolean z0, $z1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        $r4 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r4.<org.apache.commons.lang.text.StrBuilder: void <init>()>();

        i5 = r2[0];

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if c6 < 65 goto label01;

        if c6 <= 90 goto label02;

     label01:
        if c6 < 97 goto label04;

        if c6 > 122 goto label04;

     label02:
        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c6);

     label03:
        $i7 = i5 + 1;

        if $i7 >= i0 goto label14;

        $i4 = i5 + 1;

        c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4);

        if c8 != c6 goto label14;

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c6);

        i5 = i5 + 1;

        goto label03;

     label04:
        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(39);

        z0 = 0;

     label05:
        if i5 >= i0 goto label14;

        c9 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if c9 != 39 goto label09;

        $i1 = i5 + 1;

        if $i1 >= i0 goto label06;

        $i2 = i5 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i2);

        if $c3 != 39 goto label06;

        i5 = i5 + 1;

        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c9);

        goto label13;

     label06:
        if z0 != 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        z0 = $z1;

        goto label13;

     label09:
        if z0 != 0 goto label12;

        if c9 < 65 goto label10;

        if c9 <= 90 goto label11;

     label10:
        if c9 < 97 goto label12;

        if c9 > 122 goto label12;

     label11:
        i5 = i5 + -1;

        goto label14;

     label12:
        virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(c9);

     label13:
        i5 = i5 + 1;

        goto label05;

     label14:
        r2[0] = i5;

        $r10 = virtualinvoke $r4.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected org.apache.commons.lang.time.FastDateFormat$NumberRule selectNumberRule(int, int)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField $r1;
        org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField $r2;
        org.apache.commons.lang.time.FastDateFormat$PaddedNumberField $r3;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = new org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField;

        specialinvoke $r2.<org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField: void <init>(int)>(i0);

        return $r2;

     label2:
        $r1 = new org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField;

        specialinvoke $r1.<org.apache.commons.lang.time.FastDateFormat$TwoDigitNumberField: void <init>(int)>(i0);

        return $r1;

     label3:
        $r3 = new org.apache.commons.lang.time.FastDateFormat$PaddedNumberField;

        specialinvoke $r3.<org.apache.commons.lang.time.FastDateFormat$PaddedNumberField: void <init>(int,int)>(i0, i1);

        return $r3;
    }

    public java.lang.StringBuffer format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.Object r1;
        java.lang.StringBuffer r2, $r5, $r6, $r8, $r11, $r13, $r15;
        java.text.FieldPosition r3;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class $r7;
        java.lang.String $r9, $r16;
        java.lang.Long $r10;
        long $l0;
        java.util.Calendar $r12;
        java.util.Date $r14;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        $z0 = r1 instanceof java.util.Date;

        if $z0 == 0 goto label1;

        $r14 = (java.util.Date) r1;

        $r15 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)>($r14, r2);

        return $r15;

     label1:
        $z1 = r1 instanceof java.util.Calendar;

        if $z1 == 0 goto label2;

        $r12 = (java.util.Calendar) r1;

        $r13 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)>($r12, r2);

        return $r13;

     label2:
        $z2 = r1 instanceof java.lang.Long;

        if $z2 == 0 goto label3;

        $r10 = (java.lang.Long) r1;

        $l0 = virtualinvoke $r10.<java.lang.Long: long longValue()>();

        $r11 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer)>($l0, r2);

        return $r11;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown class: ");

        if r1 != null goto label4;

        $r16 = "<null>";

        goto label5;

     label4:
        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

     label5:
        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public java.lang.String format(long)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        long l0;
        java.util.Date $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        l0 := @parameter0: long;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l0);

        $r2 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }

    public java.lang.String format(java.util.Date)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Date r1;
        java.util.GregorianCalendar $r3;
        java.util.Locale $r4;
        java.util.TimeZone $r5;
        java.lang.StringBuffer $r6, $r7;
        int $i0;
        java.lang.String $r8;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.util.Date;

        $r3 = new java.util.GregorianCalendar;

        $r5 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $r4 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        specialinvoke $r3.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>($r5, $r4);

        virtualinvoke $r3.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $r6 = new java.lang.StringBuffer;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r7 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r3, $r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String format(java.util.Calendar)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Calendar r1;
        java.lang.StringBuffer $r2, $r3;
        int $i0;
        java.lang.String $r4;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.util.Calendar;

        $r2 = new java.lang.StringBuffer;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r3 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Calendar,java.lang.StringBuffer)>(r1, $r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.lang.StringBuffer format(long, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        long l0;
        java.lang.StringBuffer r1, $r3;
        java.util.Date $r2;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>(long)>(l0);

        $r3 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer)>($r2, r1);

        return $r3;
    }

    public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Date r1;
        java.lang.StringBuffer r2, $r6;
        java.util.GregorianCalendar $r4;
        java.util.TimeZone $r5;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: java.lang.StringBuffer;

        $r4 = new java.util.GregorianCalendar;

        $r5 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        specialinvoke $r4.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>($r5);

        virtualinvoke $r4.<java.util.Calendar: void setTime(java.util.Date)>(r1);

        $r6 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>($r4, r2);

        return $r6;
    }

    public java.lang.StringBuffer format(java.util.Calendar, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.StringBuffer r1, $r2;
        boolean $z0;
        java.lang.Object $r4;
        java.util.TimeZone $r5;
        java.util.Calendar r6;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r6 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.lang.StringBuffer;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z0 == 0 goto label1;

        virtualinvoke r6.<java.util.Calendar: java.util.Date getTime()>();

        $r4 = virtualinvoke r6.<java.util.Calendar: java.lang.Object clone()>();

        r6 = (java.util.Calendar) $r4;

        $r5 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        virtualinvoke r6.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r5);

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.StringBuffer applyRules(java.util.Calendar,java.lang.StringBuffer)>(r6, r1);

        return $r2;
    }

    protected java.lang.StringBuffer applyRules(java.util.Calendar, java.lang.StringBuffer)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Calendar r1;
        java.lang.StringBuffer r2;
        org.apache.commons.lang.time.FastDateFormat$Rule[] r3, $r4;
        int i0, i1;
        org.apache.commons.lang.time.FastDateFormat$Rule $r5;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.util.Calendar;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        $r4 = r0.<org.apache.commons.lang.time.FastDateFormat: org.apache.commons.lang.time.FastDateFormat$Rule[] mRules>;

        i0 = lengthof $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r3[i1];

        interfaceinvoke $r5.<org.apache.commons.lang.time.FastDateFormat$Rule: void appendTo(java.lang.StringBuffer,java.util.Calendar)>(r2, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.lang.Object parseObject(java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(0);

        virtualinvoke r2.<java.text.ParsePosition: void setErrorIndex(int)>(0);

        return null;
    }

    public java.lang.String getPattern()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        return $r1;
    }

    public java.util.TimeZone getTimeZone()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.TimeZone $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        return $r1;
    }

    public boolean getTimeZoneOverridesCalendar()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        return $z0;
    }

    public java.util.Locale getLocale()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.util.Locale $r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        return $r1;
    }

    public int getMaxLengthEstimate()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $i0 = r0.<org.apache.commons.lang.time.FastDateFormat: int mMaxLengthEstimate>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.time.FastDateFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r3, $r4, $r13, $r14;
        java.util.TimeZone $r5, $r6, $r11, $r12;
        java.util.Locale $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.apache.commons.lang.time.FastDateFormat;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (org.apache.commons.lang.time.FastDateFormat) r1;

        $r4 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r3 = r2.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        if $r4 == $r3 goto label2;

        $r14 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r13 = r2.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z7 == 0 goto label5;

     label2:
        $r6 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $r5 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        if $r6 == $r5 goto label3;

        $r12 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $r11 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $z6 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z6 == 0 goto label5;

     label3:
        $r8 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $r7 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        if $r8 == $r7 goto label4;

        $r10 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $r9 = r2.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $z5 = virtualinvoke $r10.<java.util.Locale: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label5;

     label4:
        $z2 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        $z1 = r2.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z2 != $z1 goto label5;

        $z4 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        $z3 = r2.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        if $z4 != $z3 goto label5;

        return 1;

     label5:
        return 0;
    }

    public int hashCode()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, i6, i7, i9, i10, i12;
        java.util.TimeZone $r2;
        boolean $z0, $z1;
        java.util.Locale $r3;
        byte $b8, $b11;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i6 = 0 + $i0;

        $r2 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.TimeZone mTimeZone>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i7 = i6 + $i1;

        $z0 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mTimeZoneForced>;

        if $z0 == 0 goto label1;

        $b8 = 1;

        goto label2;

     label1:
        $b8 = 0;

     label2:
        i9 = i7 + $b8;

        $r3 = r0.<org.apache.commons.lang.time.FastDateFormat: java.util.Locale mLocale>;

        $i2 = virtualinvoke $r3.<java.util.Locale: int hashCode()>();

        i10 = i9 + $i2;

        $z1 = r0.<org.apache.commons.lang.time.FastDateFormat: boolean mLocaleForced>;

        if $z1 == 0 goto label3;

        $b11 = 1;

        goto label4;

     label3:
        $b11 = 0;

     label4:
        i12 = i10 + $b11;

        return i12;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FastDateFormat[");

        $r3 = r0.<org.apache.commons.lang.time.FastDateFormat: java.lang.String mPattern>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.lang.time.FastDateFormat r0;
        java.io.ObjectInputStream r1;

        r0 := @this: org.apache.commons.lang.time.FastDateFormat;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        virtualinvoke r0.<org.apache.commons.lang.time.FastDateFormat: void init()>();

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1, $r2, $r3, $r4;

        <org.apache.commons.lang.time.FastDateFormat: int SHORT> = 3;

        <org.apache.commons.lang.time.FastDateFormat: int MEDIUM> = 2;

        <org.apache.commons.lang.time.FastDateFormat: int LONG> = 1;

        <org.apache.commons.lang.time.FastDateFormat: int FULL> = 0;

        <org.apache.commons.lang.time.FastDateFormat: long serialVersionUID> = 1L;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cInstanceCache> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateInstanceCache> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeInstanceCache> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cDateTimeInstanceCache> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(int)>(7);

        <org.apache.commons.lang.time.FastDateFormat: java.util.Map cTimeZoneDisplayCache> = $r4;

        return;
    }
}
