class org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction extends java.lang.Object implements org.apache.commons.math3.analysis.BivariateFunction
{
    private static final short N;
    private final double[][] a;
    private final org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX;
    private final org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY;
    private final org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX;
    private final org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY;
    private final org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY;

    public void <init>(double[])
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        double[] r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: void <init>(double[],boolean)>(r1, 0);

        return;
    }

    public void <init>(double[], boolean)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        double[] r1, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        boolean z0;
        double[][] r2, r3, r4, $r5, $r11, $r21, r23, r24;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$1 $r6;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$2 $r7;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$3 $r8;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$4 $r9;
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$5 $r10;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        r1 := @parameter0: double[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = newmultiarray (double)[4][4];

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double[][] a> = $r5;

        i4 = 0;

     label01:
        if i4 >= 4 goto label04;

        i5 = 0;

     label02:
        if i5 >= 4 goto label03;

        $r21 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double[][] a>;

        $r22 = $r21[i4];

        $i2 = i4 * 4;

        $i3 = $i2 + i5;

        $d14 = r1[$i3];

        $r22[i5] = $d14;

        i5 = i5 + 1;

        goto label02;

     label03:
        i4 = i4 + 1;

        goto label01;

     label04:
        if z0 == 0 goto label09;

        r23 = newmultiarray (double)[4][4];

        r24 = newmultiarray (double)[4][4];

        r2 = newmultiarray (double)[4][4];

        r3 = newmultiarray (double)[4][4];

        r4 = newmultiarray (double)[4][4];

        i6 = 0;

     label05:
        if i6 >= 4 goto label08;

        i7 = 0;

     label06:
        if i7 >= 4 goto label07;

        $r11 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double[][] a>;

        $r12 = $r11[i6];

        d0 = $r12[i7];

        $r13 = r23[i6];

        $d1 = (double) i6;

        $d2 = $d1 * d0;

        $r13[i7] = $d2;

        $r14 = r24[i6];

        $d3 = (double) i7;

        $d4 = $d3 * d0;

        $r14[i7] = $d4;

        $r16 = r2[i6];

        $i0 = i6 - 1;

        $d6 = (double) $i0;

        $r15 = r23[i6];

        $d5 = $r15[i7];

        $d7 = $d6 * $d5;

        $r16[i7] = $d7;

        $r18 = r3[i6];

        $i1 = i7 - 1;

        $d9 = (double) $i1;

        $r17 = r24[i6];

        $d8 = $r17[i7];

        $d10 = $d9 * $d8;

        $r18[i7] = $d10;

        $r20 = r4[i6];

        $d12 = (double) i7;

        $r19 = r23[i6];

        $d11 = $r19[i7];

        $d13 = $d12 * $d11;

        $r20[i7] = $d13;

        i7 = i7 + 1;

        goto label06;

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        $r6 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$1;

        specialinvoke $r6.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$1: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction,double[][])>(r0, r23);

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX> = $r6;

        $r7 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$2;

        specialinvoke $r7.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$2: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction,double[][])>(r0, r24);

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY> = $r7;

        $r8 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$3;

        specialinvoke $r8.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$3: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction,double[][])>(r0, r2);

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX> = $r8;

        $r9 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$4;

        specialinvoke $r9.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$4: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction,double[][])>(r0, r3);

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY> = $r9;

        $r10 = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$5;

        specialinvoke $r10.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction$5: void <init>(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction,double[][])>(r0, r4);

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY> = $r10;

        goto label10;

     label09:
        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX> = null;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY> = null;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX> = null;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY> = null;

        r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY> = null;

     label10:
        return;
    }

    public double value(double, double)
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        double d0, d1, d2, d3, d4, d5, $d6;
        byte $b0, $b1, $b2, $b3;
        org.apache.commons.math3.exception.OutOfRangeException $r3, $r7;
        java.lang.Double $r4, $r8;
        java.lang.Integer $r5, $r6, $r9, $r10;
        double[] $r11, $r12;
        double[][] $r13;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r3.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r4, $r5, $r6);

        throw $r3;

     label2:
        $b2 = d1 cmpg 0.0;

        if $b2 < 0 goto label3;

        $b3 = d1 cmpl 1.0;

        if $b3 <= 0 goto label4;

     label3:
        $r7 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r7.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r8, $r9, $r10);

        throw $r7;

     label4:
        d2 = d0 * d0;

        d3 = d2 * d0;

        $r11 = newarray (double)[4];

        $r11[0] = 1.0;

        $r11[1] = d0;

        $r11[2] = d2;

        $r11[3] = d3;

        d4 = d1 * d1;

        d5 = d4 * d1;

        $r12 = newarray (double)[4];

        $r12[0] = 1.0;

        $r12[1] = d1;

        $r12[2] = d4;

        $r12[3] = d5;

        $r13 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double[][] a>;

        $d6 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double apply(double[],double[],double[][])>($r11, $r12, $r13);

        return $d6;
    }

    private double apply(double[], double[], double[][])
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        double[] r1, r2, $r4;
        double[][] r3;
        double $d0, $d1, $d2, $d3, $d4, d5;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[][];

        d5 = 0.0;

        i0 = 0;

     label1:
        if i0 >= 4 goto label4;

        i1 = 0;

     label2:
        if i1 >= 4 goto label3;

        $r4 = r3[i0];

        $d1 = $r4[i1];

        $d0 = r1[i0];

        $d3 = $d1 * $d0;

        $d2 = r2[i1];

        $d4 = $d3 * $d2;

        d5 = d5 + $d4;

        i1 = i1 + 1;

        goto label2;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return d5;
    }

    public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        org.apache.commons.math3.analysis.BivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeX>;

        return $r1;
    }

    public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        org.apache.commons.math3.analysis.BivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeY>;

        return $r1;
    }

    public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        org.apache.commons.math3.analysis.BivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXX>;

        return $r1;
    }

    public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        org.apache.commons.math3.analysis.BivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeYY>;

        return $r1;
    }

    public org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY()
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        org.apache.commons.math3.analysis.BivariateFunction $r1;

        r0 := @this: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        $r1 = r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: org.apache.commons.math3.analysis.BivariateFunction partialDerivativeXY>;

        return $r1;
    }

    static double access$000(org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction, double[], double[], double[][])
    {
        org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction r0;
        double[] r1, r2;
        double[][] r3;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction;

        r1 := @parameter1: double[];

        r2 := @parameter2: double[];

        r3 := @parameter3: double[][];

        $d0 = specialinvoke r0.<org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: double apply(double[],double[],double[][])>(r1, r2, r3);

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction: short N> = 4;

        return;
    }
}
