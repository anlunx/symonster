public class org.apache.commons.math3.analysis.solvers.BrentSolver extends org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver
{
    private static final double DEFAULT_ABSOLUTE_ACCURACY;

    public void <init>()
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: void <init>(double)>(1.0E-6);

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double d0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double)>(d0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double)>(d0, d1);

        return;
    }

    public void <init>(double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double d0, d1, d2;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        specialinvoke r0.<org.apache.commons.math3.analysis.solvers.AbstractUnivariateSolver: void <init>(double,double,double)>(d0, d1, d2);

        return;
    }

    protected double doSolve() throws org.apache.commons.math3.exception.NoBracketingException, org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double d0, d1, d2, d3, d4, d5, d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b0, $b1, $b2, $b3, $b4;
        org.apache.commons.math3.exception.NoBracketingException $r1;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        d0 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getMin()>();

        d1 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getMax()>();

        d2 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getStartValue()>();

        d3 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getFunctionValueAccuracy()>();

        virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: void verifySequence(double,double,double)>(d0, d2, d1);

        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>(d2);

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d4);

        $b0 = $d7 cmpg d3;

        if $b0 > 0 goto label1;

        return d2;

     label1:
        d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>(d0);

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d5);

        $b1 = $d8 cmpg d3;

        if $b1 > 0 goto label2;

        return d0;

     label2:
        $d9 = d4 * d5;

        $b2 = $d9 cmpg 0.0;

        if $b2 >= 0 goto label3;

        $d13 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double brent(double,double,double,double)>(d0, d2, d5, d4);

        return $d13;

     label3:
        d6 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>(d1);

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d6);

        $b3 = $d10 cmpg d3;

        if $b3 > 0 goto label4;

        return d1;

     label4:
        $d11 = d4 * d6;

        $b4 = $d11 cmpg 0.0;

        if $b4 >= 0 goto label5;

        $d12 = specialinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double brent(double,double,double,double)>(d2, d1, d4, d6);

        return $d12;

     label5:
        $r1 = new org.apache.commons.math3.exception.NoBracketingException;

        specialinvoke $r1.<org.apache.commons.math3.exception.NoBracketingException: void <init>(double,double,double,double)>(d0, d1, d5, d6);

        throw $r1;
    }

    private double brent(double, double, double, double)
    {
        org.apache.commons.math3.analysis.solvers.BrentSolver r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, d40, d41, d42, d43, d44, d45, d46, d47, d48, d49, d50, d51, d52, $d53;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.solvers.BrentSolver;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        d3 := @parameter3: double;

        d40 = d0;

        d41 = d2;

        d42 = d1;

        d43 = d3;

        d44 = d0;

        d45 = d2;

        d46 = d1 - d0;

        d47 = d46;

        d4 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getAbsoluteAccuracy()>();

        d5 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double getRelativeAccuracy()>();

     label01:
        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d45);

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d43);

        $b0 = $d9 cmpg $d10;

        if $b0 >= 0 goto label02;

        d40 = d42;

        d42 = d44;

        d44 = d40;

        d41 = d43;

        d43 = d45;

        d45 = d41;

     label02:
        $d11 = 2.0 * d5;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d42);

        $d13 = $d11 * $d12;

        d6 = $d13 + d4;

        $d14 = d44 - d42;

        d7 = 0.5 * $d14;

        $d15 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d7);

        $b1 = $d15 cmpg d6;

        if $b1 <= 0 goto label03;

        $z0 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equals(double,double)>(d43, 0.0);

        if $z0 == 0 goto label04;

     label03:
        return d42;

     label04:
        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d47);

        $b2 = $d16 cmpg d6;

        if $b2 < 0 goto label05;

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d41);

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d43);

        $b7 = $d17 cmpg $d18;

        if $b7 > 0 goto label06;

     label05:
        d46 = d7;

        d47 = d7;

        goto label13;

     label06:
        d48 = d43 / d41;

        $b8 = d40 cmpl d44;

        if $b8 != 0 goto label07;

        $d39 = 2.0 * d7;

        d49 = $d39 * d48;

        d50 = 1.0 - d48;

        goto label08;

     label07:
        d51 = d41 / d45;

        d8 = d43 / d45;

        $d19 = 2.0 * d7;

        $d21 = $d19 * d51;

        $d20 = d51 - d8;

        $d25 = $d21 * $d20;

        $d23 = d42 - d40;

        $d22 = d8 - 1.0;

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        d49 = d48 * $d26;

        $d28 = d51 - 1.0;

        $d27 = d8 - 1.0;

        $d30 = $d28 * $d27;

        $d29 = d48 - 1.0;

        d50 = $d30 * $d29;

     label08:
        $b9 = d49 cmpl 0.0;

        if $b9 <= 0 goto label09;

        d50 = neg d50;

        goto label10;

     label09:
        d49 = neg d49;

     label10:
        d52 = d47;

        d47 = d46;

        $d31 = 1.5 * d7;

        $d33 = $d31 * d50;

        $d32 = d6 * d50;

        $d34 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d32);

        $d35 = $d33 - $d34;

        $b10 = d49 cmpl $d35;

        if $b10 >= 0 goto label11;

        $d36 = 0.5 * d52;

        $d37 = $d36 * d50;

        $d38 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d37);

        $b11 = d49 cmpl $d38;

        if $b11 < 0 goto label12;

     label11:
        d46 = d7;

        d47 = d7;

        goto label13;

     label12:
        d46 = d49 / d50;

     label13:
        d40 = d42;

        d41 = d43;

        $d53 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d46);

        $b12 = $d53 cmpl d6;

        if $b12 <= 0 goto label14;

        d42 = d42 + d46;

        goto label16;

     label14:
        $b3 = d7 cmpl 0.0;

        if $b3 <= 0 goto label15;

        d42 = d42 + d6;

        goto label16;

     label15:
        d42 = d42 - d6;

     label16:
        d43 = virtualinvoke r0.<org.apache.commons.math3.analysis.solvers.BrentSolver: double computeObjectiveValue(double)>(d42);

        $b13 = d43 cmpl 0.0;

        if $b13 <= 0 goto label17;

        $b6 = d45 cmpl 0.0;

        if $b6 > 0 goto label18;

     label17:
        $b4 = d43 cmpg 0.0;

        if $b4 > 0 goto label19;

        $b5 = d45 cmpg 0.0;

        if $b5 > 0 goto label19;

     label18:
        d44 = d40;

        d45 = d41;

        d46 = d42 - d40;

        d47 = d46;

     label19:
        goto label01;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.analysis.solvers.BrentSolver: double DEFAULT_ABSOLUTE_ACCURACY> = 1.0E-6;

        return;
    }
}
