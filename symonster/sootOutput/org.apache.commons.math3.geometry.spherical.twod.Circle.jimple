public class org.apache.commons.math3.geometry.spherical.twod.Circle extends java.lang.Object implements org.apache.commons.math3.geometry.partitioning.Hyperplane, org.apache.commons.math3.geometry.partitioning.Embedding
{
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D x;
    private org.apache.commons.math3.geometry.euclidean.threed.Vector3D y;
    private final double tolerance;

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1);

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance> = d0;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.spherical.twod.S2Point, org.apache.commons.math3.geometry.spherical.twod.S2Point, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.spherical.twod.S2Point r1, r2;
        double d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4, $r5;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        r2 := @parameter1: org.apache.commons.math3.geometry.spherical.twod.S2Point;

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r4 = virtualinvoke r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $r5 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>($r4);

        virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r5);

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance> = d0;

        return;
    }

    private void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole> = r1;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x> = r2;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y> = r3;

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance> = d0;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, r1;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r4 = r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $r3 = r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        $r2 = r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        $d0 = r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r4, $r3, $r2, $d0);

        return;
    }

    public org.apache.commons.math3.geometry.spherical.twod.Circle copySelf()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.spherical.twod.Circle)>(r0);

        return $r1;
    }

    public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole> = $r2;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x> = $r3;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        $r5 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>(r1, $r4);

        $r6 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y> = $r6;

        return;
    }

    public void revertSelf()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        $r2 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y> = $r2;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole> = $r4;

        return;
    }

    public org.apache.commons.math3.geometry.spherical.twod.Circle getReverse()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, $r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2, $r3, $r4, $r5, $r6;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = new org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        $r5 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        $r6 = virtualinvoke $r4.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate()>();

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r3, $r5, $r6, $d0);

        return $r1;
    }

    public org.apache.commons.math3.geometry.Point project(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.oned.S1Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        $r3 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>($r2);

        return $r3;
    }

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        return $d0;
    }

    public org.apache.commons.math3.geometry.spherical.oned.S1Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r3;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r4;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.S1Point;

        $r3 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) r1;

        $r4 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.S1Point: void <init>(double)>($d0);

        return $r2;
    }

    public double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2, $r3;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        $d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        $d1 = neg $d0;

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        $d2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r3);

        $d3 = neg $d2;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d1, $d3);

        $d5 = 3.141592653589793 + $d4;

        return $d5;
    }

    public org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r3;
        double $d0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = new org.apache.commons.math3.geometry.spherical.twod.S2Point;

        $r3 = (org.apache.commons.math3.geometry.spherical.oned.S1Point) r1;

        $d0 = virtualinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.S1Point: double getAlpha()>();

        $r4 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)>($d0);

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(double)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        double d0, $d1, $d2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        d0 := @parameter0: double;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d0);

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d0);

        $r3 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($d1, $r2, $d2, $r3);

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getXAxis()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getYAxis()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPole()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        return $r1;
    }

    public org.apache.commons.math3.geometry.spherical.oned.Arc getInsideArc(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, r1;
        double d0, $d2, $d3, $d4;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r2;
        org.apache.commons.math3.geometry.spherical.oned.Arc $r3;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r2 = r1.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getPhase(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2);

        $r3 = new org.apache.commons.math3.geometry.spherical.oned.Arc;

        $d4 = d0 - 1.5707963267948966;

        $d3 = d0 + 1.5707963267948966;

        $d2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        specialinvoke $r3.<org.apache.commons.math3.geometry.spherical.oned.Arc: void <init>(double,double,double)>($d4, $d3, $d2);

        return $r3;
    }

    public org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r1;
        org.apache.commons.math3.geometry.spherical.oned.ArcsSet $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = new org.apache.commons.math3.geometry.spherical.twod.SubCircle;

        $r2 = new org.apache.commons.math3.geometry.spherical.oned.ArcsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.spherical.oned.ArcsSet: void <init>(double)>($d0);

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.SubCircle: void <init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)>(r0, $r2);

        return $r1;
    }

    public org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet wholeSpace()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet $r1;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = new org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet: void <init>(double)>($d0);

        return $r1;
    }

    public double getOffset(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = (org.apache.commons.math3.geometry.spherical.twod.S2Point) r1;

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.geometry.spherical.twod.S2Point: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getVector()>();

        $d0 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r3);

        return $d0;
    }

    public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r2 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r2, r1);

        $d1 = $d0 - 1.5707963267948966;

        return $d1;
    }

    public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, r2;
        org.apache.commons.math3.geometry.partitioning.Hyperplane r1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r3, $r4;
        double $d0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.partitioning.Hyperplane;

        r2 = (org.apache.commons.math3.geometry.spherical.twod.Circle) r1;

        $r4 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $r3 = r2.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        $d0 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r4, $r3);

        $b0 = $d0 cmpl 0.0;

        if $b0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static org.apache.commons.math3.geometry.partitioning.Transform getTransform(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 = new org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform;

        specialinvoke $r1.<org.apache.commons.math3.geometry.spherical.twod.Circle$CircleTransform: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>(r0);

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Region wholeSpace()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.SphericalPolygonsSet wholeSpace()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.spherical.twod.SubCircle $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.SubCircle wholeHyperplane()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf()
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0, $r1;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.Circle copySelf()>();

        return $r1;
    }

    public volatile org.apache.commons.math3.geometry.Point toSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.twod.S2Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.twod.S2Point toSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    public volatile org.apache.commons.math3.geometry.Point toSubSpace(org.apache.commons.math3.geometry.Point)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.Point r1;
        org.apache.commons.math3.geometry.spherical.oned.S1Point $r2;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.Point;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.spherical.oned.S1Point toSubSpace(org.apache.commons.math3.geometry.Point)>(r1);

        return $r2;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$000(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D pole>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$100(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D x>;

        return $r1;
    }

    static org.apache.commons.math3.geometry.euclidean.threed.Vector3D access$200(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $r1 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: org.apache.commons.math3.geometry.euclidean.threed.Vector3D y>;

        return $r1;
    }

    static double access$300(org.apache.commons.math3.geometry.spherical.twod.Circle)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.spherical.twod.Circle;

        $d0 = r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: double tolerance>;

        return $d0;
    }

    void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.spherical.twod.Circle$1)
    {
        org.apache.commons.math3.geometry.spherical.twod.Circle r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3;
        double d0;
        org.apache.commons.math3.geometry.spherical.twod.Circle$1 r4;

        r0 := @this: org.apache.commons.math3.geometry.spherical.twod.Circle;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r3 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter3: double;

        r4 := @parameter4: org.apache.commons.math3.geometry.spherical.twod.Circle$1;

        specialinvoke r0.<org.apache.commons.math3.geometry.spherical.twod.Circle: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>(r1, r2, r3, d0);

        return;
    }
}
