public abstract class org.apache.commons.lang.math.Range extends java.lang.Object
{

    public void <init>()
    {
        org.apache.commons.lang.math.Range r0;

        r0 := @this: org.apache.commons.lang.math.Range;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Number getMinimumNumber();

    public long getMinimumLong()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        long $l0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $l0 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public int getMinimumInteger()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $i0 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public double getMinimumDouble()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public float getMinimumFloat()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        float $f0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $f0 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public abstract java.lang.Number getMaximumNumber();

    public long getMaximumLong()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        long $l0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $l0 = virtualinvoke $r1.<java.lang.Number: long longValue()>();

        return $l0;
    }

    public int getMaximumInteger()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $i0 = virtualinvoke $r1.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public double getMaximumDouble()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $d0 = virtualinvoke $r1.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public float getMaximumFloat()
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number $r1;
        float $f0;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $f0 = virtualinvoke $r1.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public abstract boolean containsNumber(java.lang.Number);

    public boolean containsLong(java.lang.Number)
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number r1;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: java.lang.Number;

        if r1 != null goto label1;

        return 0;

     label1:
        $l0 = virtualinvoke r1.<java.lang.Number: long longValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsLong(long)>($l0);

        return $z0;
    }

    public boolean containsLong(long)
    {
        org.apache.commons.lang.math.Range r0;
        long l0, $l1, $l3;
        byte $b2, $b4;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: long getMinimumLong()>();

        $b2 = l0 cmp $l1;

        if $b2 < 0 goto label1;

        $l3 = virtualinvoke r0.<org.apache.commons.lang.math.Range: long getMaximumLong()>();

        $b4 = l0 cmp $l3;

        if $b4 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsInteger(java.lang.Number)
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: java.lang.Number;

        if r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.Number: int intValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsInteger(int)>($i0);

        return $z0;
    }

    public boolean containsInteger(int)
    {
        org.apache.commons.lang.math.Range r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: int getMinimumInteger()>();

        if i0 < $i1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: int getMaximumInteger()>();

        if i0 > $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsDouble(java.lang.Number)
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number r1;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: java.lang.Number;

        if r1 != null goto label1;

        return 0;

     label1:
        $d0 = virtualinvoke r1.<java.lang.Number: double doubleValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsDouble(double)>($d0);

        return $z0;
    }

    public boolean containsDouble(double)
    {
        org.apache.commons.lang.math.Range r0;
        double d0, $d1, $d2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        d0 := @parameter0: double;

        $d1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: double getMinimumDouble()>();

        i0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(double,double)>($d1, d0);

        $d2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: double getMaximumDouble()>();

        i1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(double,double)>($d2, d0);

        if i0 > 0 goto label1;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsFloat(java.lang.Number)
    {
        org.apache.commons.lang.math.Range r0;
        java.lang.Number r1;
        float $f0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: java.lang.Number;

        if r1 != null goto label1;

        return 0;

     label1:
        $f0 = virtualinvoke r1.<java.lang.Number: float floatValue()>();

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsFloat(float)>($f0);

        return $z0;
    }

    public boolean containsFloat(float)
    {
        org.apache.commons.lang.math.Range r0;
        float f0, $f1, $f2;
        int i0, i1;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.Range;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: float getMinimumFloat()>();

        i0 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(float,float)>($f1, f0);

        $f2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: float getMaximumFloat()>();

        i1 = staticinvoke <org.apache.commons.lang.math.NumberUtils: int compare(float,float)>($f2, f0);

        if i0 > 0 goto label1;

        if i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsRange(org.apache.commons.lang.math.Range)
    {
        org.apache.commons.lang.math.Range r0, r1;
        java.lang.Number $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: org.apache.commons.lang.math.Range;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $z0 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsNumber(java.lang.Number)>($r2);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r1.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $z1 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsNumber(java.lang.Number)>($r3);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean overlapsRange(org.apache.commons.lang.math.Range)
    {
        org.apache.commons.lang.math.Range r0, r1;
        java.lang.Number $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: org.apache.commons.lang.math.Range;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $z0 = virtualinvoke r1.<org.apache.commons.lang.math.Range: boolean containsNumber(java.lang.Number)>($r2);

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $z1 = virtualinvoke r1.<org.apache.commons.lang.math.Range: boolean containsNumber(java.lang.Number)>($r3);

        if $z1 != 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $z2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: boolean containsNumber(java.lang.Number)>($r4);

        if $z2 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.lang.math.Range r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.Number $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.commons.lang.math.Range;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (org.apache.commons.lang.math.Range) r1;

        $r5 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $r6 = virtualinvoke r2.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $r8 = virtualinvoke r2.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $z1 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label4;

        $z2 = 1;

        goto label5;

     label4:
        $z2 = 0;

     label5:
        return $z2;
    }

    public int hashCode()
    {
        org.apache.commons.lang.math.Range r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i7, i8, i9;
        java.lang.Class $r1;
        java.lang.Number $r2, $r3;

        r0 := @this: org.apache.commons.lang.math.Range;

        $i0 = 37 * 17;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        i7 = $i0 + $i1;

        $i2 = 37 * i7;

        $r2 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        $i3 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        i8 = $i2 + $i3;

        $i4 = 37 * i8;

        $r3 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        $i5 = virtualinvoke $r3.<java.lang.Object: int hashCode()>();

        i9 = $i4 + $i5;

        return i9;
    }

    public java.lang.String toString()
    {
        org.apache.commons.lang.math.Range r0;
        org.apache.commons.lang.text.StrBuilder $r2;
        java.lang.Number $r4, $r7;
        java.lang.String $r10;

        r0 := @this: org.apache.commons.lang.math.Range;

        $r2 = new org.apache.commons.lang.text.StrBuilder;

        specialinvoke $r2.<org.apache.commons.lang.text.StrBuilder: void <init>(int)>(32);

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.String)>("Range[");

        $r4 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMinimumNumber()>();

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(44);

        $r7 = virtualinvoke r0.<org.apache.commons.lang.math.Range: java.lang.Number getMaximumNumber()>();

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: org.apache.commons.lang.text.StrBuilder append(char)>(93);

        $r10 = virtualinvoke $r2.<org.apache.commons.lang.text.StrBuilder: java.lang.String toString()>();

        return $r10;
    }
}
