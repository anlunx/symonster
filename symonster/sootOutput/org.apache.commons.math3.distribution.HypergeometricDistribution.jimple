public class org.apache.commons.math3.distribution.HypergeometricDistribution extends org.apache.commons.math3.distribution.AbstractIntegerDistribution
{
    private static final long serialVersionUID;
    private final int numberOfSuccesses;
    private final int populationSize;
    private final int sampleSize;
    private double numericalVariance;
    private boolean numericalVarianceIsCalculated;

    public void <init>(int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, i1, i2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,int,int,int)>($r1, i0, i1, i2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, int, int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        int i0, i1, i2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2, $r6;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3, $r7, $r11, $r14, $r17;
        java.lang.Integer $r4, $r5, $r8, $r9, $r12, $r15, $r18;
        org.apache.commons.math3.exception.NotPositiveException $r10, $r13;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r16;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractIntegerDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance> = #NaN;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated> = 0;

        if i0 > 0 goto label1;

        $r16 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r17 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats POPULATION_SIZE>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r16.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r17, $r18);

        throw $r16;

     label1:
        if i1 >= 0 goto label2;

        $r13 = new org.apache.commons.math3.exception.NotPositiveException;

        $r14 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESSES>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke $r13.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r14, $r15);

        throw $r13;

     label2:
        if i2 >= 0 goto label3;

        $r10 = new org.apache.commons.math3.exception.NotPositiveException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SAMPLES>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        specialinvoke $r10.<org.apache.commons.math3.exception.NotPositiveException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number)>($r11, $r12);

        throw $r10;

     label3:
        if i1 <= i0 goto label4;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r7, $r8, $r9, 1);

        throw $r6;

     label4:
        if i2 <= i0 goto label5;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label5:
        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses> = i1;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize> = i0;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize> = i2;

        return;
    }

    public double cumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] r1;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 >= $i4 goto label1;

        d0 = 0.0;

        goto label3;

     label1:
        $i5 = r1[1];

        if i0 < $i5 goto label2;

        d0 = 1.0;

        goto label3;

     label2:
        $i6 = r1[0];

        d0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double innerCumulativeProbability(int,int,int)>($i6, i0, 1);

     label3:
        return d0;
    }

    private int[] getDomain(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, i1, i2, $i3, $i4;
        int[] $r1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = newarray (int)[2];

        $i3 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getLowerDomain(int,int,int)>(i0, i1, i2);

        $r1[0] = $i3;

        $i4 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getUpperDomain(int,int)>(i1, i2);

        $r1[1] = $i4;

        return $r1;
    }

    private int getLowerDomain(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 - i2;

        $i4 = i1 - $i3;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i4);

        return $i5;
    }

    public int getNumberOfSuccesses()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        return $i0;
    }

    public int getPopulationSize()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        return $i0;
    }

    public int getSampleSize()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        return $i0;
    }

    private int getUpperDomain(int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, i0);

        return $i2;
    }

    public double probability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0;
        double d0, $d1;
        byte $b1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double logProbability(int)>(i0);

        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label1;

        $d1 = 0.0;

        goto label2;

     label1:
        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>(d0);

     label2:
        return $d1;
    }

    public double logProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] r1;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, d10;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 < $i4 goto label1;

        $i5 = r1[1];

        if i0 <= $i5 goto label2;

     label1:
        d10 = #-Infinity;

        goto label3;

     label2:
        $i6 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $d6 = (double) $i6;

        $i7 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $d5 = (double) $i7;

        d0 = $d6 / $d5;

        $i9 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i8 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i10 = $i9 - $i8;

        $d8 = (double) $i10;

        $i11 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $d7 = (double) $i11;

        d1 = $d8 / $d7;

        $i12 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        d2 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>(i0, $i12, d0, d1);

        $i13 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i17 = $i13 - i0;

        $i15 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i14 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i16 = $i15 - $i14;

        d3 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i17, $i16, d0, d1);

        $i19 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        $i18 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        d4 = staticinvoke <org.apache.commons.math3.distribution.SaddlePointExpansion: double logBinomialProbability(int,int,double,double)>($i19, $i18, d0, d1);

        $d9 = d2 + d3;

        d10 = $d9 - d4;

     label3:
        return d10;
    }

    public double upperCumulativeProbability(int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] r1;
        double d0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int populationSize>;

        $i2 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int numberOfSuccesses>;

        $i1 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int sampleSize>;

        r1 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int[] getDomain(int,int,int)>($i3, $i2, $i1);

        $i4 = r1[0];

        if i0 > $i4 goto label1;

        d0 = 1.0;

        goto label3;

     label1:
        $i5 = r1[1];

        if i0 <= $i5 goto label2;

        d0 = 0.0;

        goto label3;

     label2:
        $i6 = r1[1];

        d0 = specialinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double innerCumulativeProbability(int,int,int)>($i6, i0, -1);

     label3:
        return d0;
    }

    private double innerCumulativeProbability(int, int, int)
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int i0, i1, i2;
        double $d0, d1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double probability(int)>(i2);

     label1:
        if i2 == i0 goto label2;

        i2 = i2 + i1;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double probability(int)>(i2);

        d1 = d1 + $d0;

        goto label1;

     label2:
        return d1;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $d0 = (double) $i0;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $d1 = (double) $i1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        $d2 = (double) $i2;

        $d3 = $d1 / $d2;

        $d4 = $d0 * $d3;

        return $d4;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $z0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated>;

        if $z0 != 0 goto label1;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double calculateNumericalVariance()>();

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance> = $d1;

        r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: boolean numericalVarianceIsCalculated> = 1;

     label1:
        $d0 = r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: double numericalVariance>;

        return $d0;
    }

    protected double calculateNumericalVariance()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        d0 = (double) $i0;

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        d1 = (double) $i1;

        $i2 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        d2 = (double) $i2;

        $d4 = d2 * d1;

        $d3 = d0 - d2;

        $d6 = $d4 * $d3;

        $d5 = d0 - d1;

        $d10 = $d6 * $d5;

        $d8 = d0 * d0;

        $d7 = d0 - 1.0;

        $d9 = $d8 * $d7;

        $d11 = $d10 / $d9;

        return $d11;
    }

    public int getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getPopulationSize()>();

        $i4 = $i2 - $i3;

        $i5 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(0, $i4);

        return $i5;
    }

    public int getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        $i0 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getNumberOfSuccesses()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.distribution.HypergeometricDistribution: int getSampleSize()>();

        $i2 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i0, $i1);

        return $i2;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.HypergeometricDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.HypergeometricDistribution;

        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.HypergeometricDistribution: long serialVersionUID> = -436928820673516179L;

        return;
    }
}
