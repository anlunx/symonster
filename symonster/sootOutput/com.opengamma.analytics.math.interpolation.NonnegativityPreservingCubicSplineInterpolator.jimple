public class com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator extends com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator
{
    private static final double SMALL;
    private final com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver;
    private final com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function;
    private com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method;

    public void <init>(com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator)
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator r1;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r2;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r3;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator;

        specialinvoke r0.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: void <init>()>();

        $r2 = new com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider;

        specialinvoke $r2.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver> = $r2;

        $r3 = new com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D;

        specialinvoke $r3.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: void <init>()>();

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function> = $r3;

        r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method> = r1;

        return;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r4, r6, r7, $r21, $r22, r23, r24, r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, i13, i14, i15, i16, $i17, i18;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult r5, $r18;
        double[][] r8, $r16;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r11, $r12, $r17;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r13;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r15, $r20;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        byte $b10;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i3 = lengthof r1;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i4 = lengthof r1;

        $i6 = $i4 + 2;

        $i5 = lengthof r2;

        if $i6 != $i5 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i11 = lengthof r1;

        if $i11 <= 2 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i12 = 0;

     label07:
        if i12 >= i0 goto label08;

        $d6 = r1[i12];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i12];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i12 = i12 + 1;

        goto label07;

     label08:
        i13 = 0;

     label09:
        if i13 >= i1 goto label10;

        $d4 = r2[i13];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing NaN");

        $d5 = r2[i13];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValues containing Infinity");

        i13 = i13 + 1;

        goto label09;

     label10:
        i14 = 0;

     label11:
        $i7 = i0 - 1;

        if i14 >= $i7 goto label16;

        i15 = i14 + 1;

     label12:
        if i15 >= i0 goto label15;

        $d3 = r1[i14];

        $d2 = r1[i15];

        $b10 = $d3 cmpl $d2;

        if $b10 != 0 goto label13;

        $z10 = 1;

        goto label14;

     label13:
        $z10 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i15 = i15 + 1;

        goto label12;

     label15:
        i14 = i14 + 1;

        goto label11;

     label16:
        r23 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r24 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r25 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i8 = i0 + 1;

        r25 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i8);

     label18:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r23, r25);

        $r11 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r11.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r23);

        $r12 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r4 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r25, r3);

        $r13 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r5 = virtualinvoke $r13.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, r2);

        $i9 = virtualinvoke r5.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i9 != 4 goto label19;

        $z11 = 1;

        goto label20;

     label19:
        $z11 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r14 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r15 = virtualinvoke $r14.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r5, r23);

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r6 = $r16[0];

        r7 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r25, r3, r4, r6);

        $r17 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r8 = virtualinvoke $r17.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r25, r3, r4, r7);

        i16 = 0;

     label21:
        $i17 = i0 - 1;

        if i16 >= $i17 goto label24;

        i18 = 0;

     label22:
        if i18 >= 4 goto label23;

        $r21 = r8[i16];

        $d0 = $r21[i18];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r22 = r8[i16];

        $d1 = $r22[i18];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i18 = i18 + 1;

        goto label22;

     label23:
        i16 = i16 + 1;

        goto label21;

     label24:
        $r18 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r19 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r23);

        $r20 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r20.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r8);

        specialinvoke $r18.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r19, $r20, 4, 1);

        return $r18;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[], double[][])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        double[] r1, r3, r4, $r7, $r8, $r9, $r15, $r16, $r19, $r20, $r23, $r31, $r32, $r33, r34, r36, r37, r38, r39;
        double[][] r2, $r27, $r30, r41;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r10, $r11, $r14, $r17, $r26, $r28;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult $r12, r40;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r13, $r18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r21, $r22, $r29;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r24;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r25;
        byte $b14;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r35;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[][];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValuesMatrix");

        $i4 = lengthof r1;

        $r7 = r2[0];

        $i3 = lengthof $r7;

        if $i4 != $i3 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $r8 = r2[0];

        $i6 = lengthof $r8;

        if $i7 != $i6 goto label03;

        $z7 = 1;

        goto label04;

     label03:
        $z7 = 0;

     label04:
        $z8 = $z6 | $z7;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "(xValues length = yValuesMatrix\'s row vector length) or (xValues length + 2 = yValuesMatrix\'s row vector length)");

        $i15 = lengthof r1;

        if $i15 <= 2 goto label05;

        $z9 = 1;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z9, "Data points should be more than 2");

        i0 = lengthof r1;

        $r9 = r2[0];

        i1 = lengthof $r9;

        i2 = lengthof r2;

        i16 = 0;

     label07:
        if i16 >= i0 goto label08;

        $d6 = r1[i16];

        $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing NaN");

        $d7 = r1[i16];

        $z5 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d7);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z5, "xValues containing Infinity");

        i16 = i16 + 1;

        goto label07;

     label08:
        i17 = 0;

     label09:
        if i17 >= i1 goto label12;

        i18 = 0;

     label10:
        if i18 >= i2 goto label11;

        $r32 = r2[i18];

        $d4 = $r32[i17];

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValuesMatrix containing NaN");

        $r33 = r2[i18];

        $d5 = $r33[i17];

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "yValuesMatrix containing Infinity");

        i18 = i18 + 1;

        goto label10;

     label11:
        i17 = i17 + 1;

        goto label09;

     label12:
        i19 = 0;

     label13:
        if i19 >= i0 goto label18;

        i20 = i19 + 1;

     label14:
        if i20 >= i0 goto label17;

        $d3 = r1[i19];

        $d2 = r1[i20];

        $b14 = $d3 cmpl $d2;

        if $b14 != 0 goto label15;

        $z10 = 1;

        goto label16;

     label15:
        $z10 = 0;

     label16:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z10, "xValues should be distinct");

        i20 = i20 + 1;

        goto label14;

     label17:
        i19 = i19 + 1;

        goto label13;

     label18:
        r34 = newarray (double)[i0];

        r35 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[i2];

        i21 = 0;

     label19:
        if i21 >= i2 goto label24;

        r34 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r1, i0);

        r36 = newarray (double)[i0];

        if i0 != i1 goto label20;

        $r31 = r2[i21];

        r37 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r31, i0);

        goto label21;

     label20:
        $r20 = r2[i21];

        $i12 = i0 + 1;

        r37 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>($r20, 1, $i12);

     label21:
        staticinvoke <com.opengamma.util.ParallelArrayBinarySort: void parallelBinarySort(double[],double[])>(r34, r37);

        $r21 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r38 = virtualinvoke $r21.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r34);

        $r22 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r39 = virtualinvoke $r22.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r37, r38);

        $r24 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        $r23 = r2[i21];

        r40 = virtualinvoke $r24.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult interpolate(double[],double[])>(r1, $r23);

        $i13 = virtualinvoke r40.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: int getOrder()>();

        if $i13 != 4 goto label22;

        $z11 = 1;

        goto label23;

     label22:
        $z11 = 0;

     label23:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z11, "Primary interpolant is not cubic");

        $r25 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r40, r34);

        $r27 = virtualinvoke $r26.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r3 = $r27[0];

        r4 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: double[] firstDerivativeCalculator(double[],double[],double[],double[])>(r37, r38, r39, r3);

        $r28 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        $r29 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        $r30 = virtualinvoke $r29.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] solve(double[],double[],double[],double[])>(r37, r38, r39, r4);

        specialinvoke $r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>($r30);

        r35[i21] = $r28;

        i21 = i21 + 1;

        goto label19;

     label24:
        $r10 = r35[0];

        i22 = virtualinvoke $r10.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        $r11 = r35[0];

        i23 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $i8 = i2 * i22;

        r41 = newmultiarray (double)[$i8][i23];

        i24 = 0;

     label25:
        if i24 >= i22 goto label28;

        i25 = 0;

     label26:
        if i25 >= i2 goto label27;

        $i10 = i2 * i24;

        $i11 = $i10 + i25;

        $r17 = r35[i25];

        $r18 = virtualinvoke $r17.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: com.opengamma.analytics.math.matrix.DoubleMatrix1D getRowVector(int)>(i24);

        $r19 = virtualinvoke $r18.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        r41[$i11] = $r19;

        i25 = i25 + 1;

        goto label26;

     label27:
        i24 = i24 + 1;

        goto label25;

     label28:
        i26 = 0;

     label29:
        $i9 = i22 * i2;

        if i26 >= $i9 goto label32;

        i27 = 0;

     label30:
        if i27 >= i23 goto label31;

        $r15 = r41[i26];

        $d0 = $r15[i27];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z0, "Too large input");

        $r16 = r41[i26];

        $d1 = $r16[i27];

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d1);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "Too large input");

        i27 = i27 + 1;

        goto label30;

     label31:
        i26 = i26 + 1;

        goto label29;

     label32:
        $r12 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult;

        $r13 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r34);

        $r14 = new com.opengamma.analytics.math.matrix.DoubleMatrix2D;

        specialinvoke $r14.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: void <init>(double[][])>(r41);

        specialinvoke $r12.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int)>($r13, $r14, i23, i2);

        return $r12;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r5, r25, r26, r27;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity r4, $r21;
        double[][] r6, $r17;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r7, r8;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D[] r9, r30;
        com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider $r12, $r13, $r18, $r20;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r14;
        com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D $r15, $r19;
        com.opengamma.analytics.math.matrix.DoubleMatrix2D $r16, r28, r29;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r22;
        int[] $r23;
        java.lang.Double $r24;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        byte $b13;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "xValues");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "yValues");

        $i4 = lengthof r1;

        $i3 = lengthof r2;

        if $i4 != $i3 goto label01;

        $z5 = 1;

        goto label02;

     label01:
        $z5 = 0;

     label02:
        $i5 = lengthof r1;

        $i7 = $i5 + 2;

        $i6 = lengthof r2;

        if $i7 != $i6 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        $z7 = $z5 | $z6;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z7, "(xValues length = yValues length) or (xValues length + 2 = yValues length)");

        $i14 = lengthof r1;

        if $i14 <= 2 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z8, "Data points should be more than 2");

        i0 = lengthof r1;

        i1 = lengthof r2;

        i15 = 0;

     label07:
        if i15 >= i0 goto label08;

        $d5 = r1[i15];

        $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d5);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z3, "xValues containing NaN");

        $d6 = r1[i15];

        $z4 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d6);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z4, "xValues containing Infinity");

        i15 = i15 + 1;

        goto label07;

     label08:
        i16 = 0;

     label09:
        if i16 >= i1 goto label10;

        $d3 = r2[i16];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z1, "yValues containing NaN");

        $d4 = r2[i16];

        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d4);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z2, "yValues containing Infinity");

        i16 = i16 + 1;

        goto label09;

     label10:
        i17 = 0;

     label11:
        $i8 = i0 - 1;

        if i17 >= $i8 goto label16;

        i18 = i17 + 1;

     label12:
        if i18 >= i0 goto label15;

        $d2 = r1[i17];

        $d1 = r1[i18];

        $b13 = $d2 cmpl $d1;

        if $b13 != 0 goto label13;

        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isFalse(boolean,java.lang.String)>($z9, "xValues should be distinct");

        i18 = i18 + 1;

        goto label12;

     label15:
        i17 = i17 + 1;

        goto label11;

     label16:
        r25 = newarray (double)[i0];

        if i0 != i1 goto label17;

        r26 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>(r2, i0);

        goto label18;

     label17:
        $i9 = i0 + 1;

        r26 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r2, 1, $i9);

     label18:
        $r12 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r27 = virtualinvoke $r12.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] intervalsCalculator(double[])>(r1);

        $r13 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r3 = virtualinvoke $r13.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[] slopesCalculator(double[],double[])>(r26, r27);

        $r14 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        r4 = virtualinvoke $r14.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity interpolateWithSensitivity(double[],double[])>(r1, r2);

        $i10 = virtualinvoke r4.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: int getOrder()>();

        if $i10 != 4 goto label19;

        $z10 = 1;

        goto label20;

     label19:
        $z10 = 0;

     label20:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z10, "Primary interpolant is not cubic");

        $r15 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        $r16 = virtualinvoke $r15.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix2D differentiate(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResult,double[])>(r4, r1);

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: double[][] getData()>();

        r5 = $r17[0];

        $r18 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r6 = virtualinvoke $r18.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: double[][] slopeSensitivityCalculator(double[])>(r27);

        $r19 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D _function>;

        r7 = virtualinvoke $r19.<com.opengamma.analytics.math.function.PiecewisePolynomialWithSensitivityFunction1D: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] differentiateNodeSensitivity(com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity,double[])>(r4, r1);

        r8 = specialinvoke r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[],double[],double[],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r26, r27, r5, r7);

        $r20 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider _solver>;

        r9 = virtualinvoke $r20.<com.opengamma.analytics.math.interpolation.HermiteCoefficientsProvider: com.opengamma.analytics.math.matrix.DoubleMatrix2D[] solveWithSensitivity(double[],double[],double[],double[][],com.opengamma.analytics.math.matrix.DoubleMatrix1D[])>(r26, r27, r3, r6, r8);

        i19 = 0;

     label21:
        if i19 >= i0 goto label26;

        r28 = r9[i19];

        i20 = virtualinvoke r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfRows()>();

        i2 = virtualinvoke r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        i21 = 0;

     label22:
        if i21 >= i20 goto label25;

        i22 = 0;

     label23:
        if i22 >= i2 goto label24;

        $r23 = newarray (int)[2];

        $r23[0] = i21;

        $r23[1] = i22;

        $r24 = virtualinvoke r28.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: java.lang.Double getEntry(int[])>($r23);

        $d0 = virtualinvoke $r24.<java.lang.Double: double doubleValue()>();

        $z0 = staticinvoke <com.google.common.primitives.Doubles: boolean isFinite(double)>($d0);

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Matrix contains a NaN or infinite");

        i22 = i22 + 1;

        goto label23;

     label24:
        i21 = i21 + 1;

        goto label22;

     label25:
        i19 = i19 + 1;

        goto label21;

     label26:
        r29 = r9[0];

        $i11 = i0 - 1;

        r30 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix2D)[$i11];

        $i12 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 1, r30, 0, $i12);

        i23 = virtualinvoke r29.<com.opengamma.analytics.math.matrix.DoubleMatrix2D: int getNumberOfColumns()>();

        $r21 = new com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity;

        $r22 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r1);

        specialinvoke $r21.<com.opengamma.analytics.math.interpolation.PiecewisePolynomialResultsWithSensitivity: void <init>(com.opengamma.analytics.math.matrix.DoubleMatrix1D,com.opengamma.analytics.math.matrix.DoubleMatrix2D,int,int,com.opengamma.analytics.math.matrix.DoubleMatrix2D[])>($r22, r29, i23, 1, r30);

        return $r21;
    }

    public com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator getPrimaryMethod()
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator $r1;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        $r1 = r0.<com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: com.opengamma.analytics.math.interpolation.PiecewisePolynomialInterpolator _method>;

        return $r1;
    }

    private double[] firstDerivativeCalculator(double[], double[], double[], double[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r4, r5;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, i16;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d48, $d49, $d50;
        byte $b3, $b5, $b13;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        i0 = lengthof r1;

        r5 = newarray (double)[i0];

        i16 = 1;

     label1:
        $i1 = i0 - 1;

        if i16 >= $i1 goto label4;

        $d32 = r1[i16];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d32);

        $i15 = i16;

        $b13 = d0 cmpl 0.0;

        if $b13 != 0 goto label2;

        $d47 = r4[i16];

        goto label3;

     label2:
        $d34 = 3.0 * d0;

        $d33 = r1[i16];

        $d36 = $d34 * $d33;

        $i14 = i16 - 1;

        $d35 = r2[$i14];

        $d44 = $d36 / $d35;

        $d38 = -3.0 * d0;

        $d37 = r1[i16];

        $d40 = $d38 * $d37;

        $d39 = r2[i16];

        $d43 = $d40 / $d39;

        $d41 = r4[i16];

        $d42 = d0 * $d41;

        $d45 = staticinvoke <java.lang.Math: double max(double,double)>($d43, $d42);

        $d46 = staticinvoke <java.lang.Math: double min(double,double)>($d44, $d45);

        $d47 = $d46 / d0;

     label3:
        r5[$i15] = $d47;

        i16 = i16 + 1;

        goto label1;

     label4:
        $d2 = r1[0];

        d48 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $i2 = i0 - 1;

        $d3 = r1[$i2];

        d1 = staticinvoke <java.lang.Math: double signum(double)>($d3);

        $b3 = d48 cmpl 0.0;

        if $b3 != 0 goto label5;

        $d49 = r4[0];

        goto label6;

     label5:
        $d5 = 3.0 * d48;

        $d4 = r1[0];

        $d7 = $d5 * $d4;

        $d6 = r2[0];

        $d15 = $d7 / $d6;

        $d9 = -3.0 * d48;

        $d8 = r1[0];

        $d11 = $d9 * $d8;

        $d10 = r2[0];

        $d14 = $d11 / $d10;

        $d12 = r4[0];

        $d13 = d48 * $d12;

        $d16 = staticinvoke <java.lang.Math: double max(double,double)>($d14, $d13);

        $d17 = staticinvoke <java.lang.Math: double min(double,double)>($d15, $d16);

        $d49 = $d17 / d48;

     label6:
        r5[0] = $d49;

        $i11 = i0 - 1;

        $b5 = d1 cmpl 0.0;

        if $b5 != 0 goto label7;

        $i12 = i0 - 1;

        $d50 = r4[$i12];

        goto label8;

     label7:
        $d19 = 3.0 * d1;

        $i6 = i0 - 1;

        $d18 = r1[$i6];

        $d21 = $d19 * $d18;

        $i7 = i0 - 2;

        $d20 = r2[$i7];

        $d29 = $d21 / $d20;

        $d23 = -3.0 * d1;

        $i8 = i0 - 1;

        $d22 = r1[$i8];

        $d25 = $d23 * $d22;

        $i9 = i0 - 2;

        $d24 = r2[$i9];

        $d28 = $d25 / $d24;

        $i10 = i0 - 1;

        $d26 = r4[$i10];

        $d27 = d1 * $d26;

        $d30 = staticinvoke <java.lang.Math: double max(double,double)>($d28, $d27);

        $d31 = staticinvoke <java.lang.Math: double min(double,double)>($d29, $d30);

        $d50 = $d31 / d1;

     label8:
        r5[$i11] = $d50;

        return r5;
    }

    private com.opengamma.analytics.math.matrix.DoubleMatrix1D[] firstDerivativeWithSensitivityCalculator(double[], double[], double[], com.opengamma.analytics.math.matrix.DoubleMatrix1D[])
    {
        com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator r0;
        double[] r1, r2, r3, r6, r7, r8, $r10, $r12, $r14, $r17, $r20, $r23, $r26, $r28, $r31, r33;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D[] r4, r5;
        int i0, $i1, $i2, $i10, $i11, $i12, $i13, $i14, $i15, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i28, $i29, $i30, $i31, $i32, $i39, $i44, $i47, $i48, $i51, i52, i53, i54, $i55, i56, i57, $i58, $i59, $i60, $i61, $i62, $i63, i65, i66;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, d99, $d100, $d101, $d102, d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116;
        byte $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b16, $b17, $b26, $b27, $b33, $b34, $b36, $b37, $b40, $b41, $b42, $b43, $b45, $b46, $b49, $b50, $b64;
        com.opengamma.analytics.math.matrix.DoubleMatrix1D $r9, $r11, $r13, $r16, $r19, $r22, $r25, $r27, $r30, $r34, $r35, $r36, $r37;

        r0 := @this: com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: com.opengamma.analytics.math.matrix.DoubleMatrix1D[];

        i0 = lengthof r1;

        $i1 = i0 + 1;

        r5 = newarray (com.opengamma.analytics.math.matrix.DoubleMatrix1D)[$i1];

        r6 = newarray (double)[i0];

        i52 = 1;

     label01:
        $i2 = i0 - 1;

        if i52 >= $i2 goto label15;

        $d64 = r1[i52];

        d0 = staticinvoke <java.lang.Math: double signum(double)>($d64);

        $d66 = -3.0 * d0;

        $d65 = r1[i52];

        $d68 = $d66 * $d65;

        $d67 = r2[i52];

        d2 = $d68 / $d67;

        $d70 = 3.0 * d0;

        $d69 = r1[i52];

        $d72 = $d70 * $d69;

        $i39 = i52 - 1;

        $d71 = r2[$i39];

        d4 = $d72 / $d71;

        $d73 = r3[i52];

        d6 = d0 * $d73;

        r33 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r33, 0.0);

        $d74 = d6 - d2;

        $d75 = staticinvoke <java.lang.Math: double abs(double)>($d74);

        $b40 = $d75 cmpg 1.0E-14;

        if $b40 >= 0 goto label06;

        $b49 = d0 cmpl 0.0;

        if $b49 == 0 goto label06;

        $i51 = i52;

        $b50 = d6 cmpl d2;

        if $b50 < 0 goto label02;

        $d97 = r3[i52];

        goto label03;

     label02:
        $d97 = d2 / d0;

     label03:
        r6[$i51] = $d97;

        i53 = 0;

     label04:
        if i53 >= i0 goto label05;

        $r30 = r4[i52];

        $r31 = virtualinvoke $r30.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d95 = $r31[i53];

        $d96 = 0.5 * $d95;

        r33[i53] = $d96;

        i53 = i53 + 1;

        goto label04;

     label05:
        $d93 = r33[i52];

        $d91 = r2[i52];

        $d92 = 1.5 / $d91;

        $d94 = $d93 - $d92;

        r33[i52] = $d94;

        goto label14;

     label06:
        $b41 = d6 cmpg d2;

        if $b41 >= 0 goto label07;

        $d88 = d2 / d0;

        r6[i52] = $d88;

        $d89 = r2[i52];

        $d90 = -3.0 / $d89;

        r33[i52] = $d90;

        goto label14;

     label07:
        $d76 = d6 - d4;

        $d77 = staticinvoke <java.lang.Math: double abs(double)>($d76);

        $b42 = $d77 cmpg 1.0E-14;

        if $b42 >= 0 goto label12;

        $b45 = d0 cmpl 0.0;

        if $b45 == 0 goto label12;

        $i48 = i52;

        $b46 = d6 cmpg d4;

        if $b46 > 0 goto label08;

        $d98 = r3[i52];

        goto label09;

     label08:
        $d98 = d4 / d0;

     label09:
        r6[$i48] = $d98;

        i54 = 0;

     label10:
        if i54 >= i0 goto label11;

        $r27 = r4[i52];

        $r28 = virtualinvoke $r27.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d86 = $r28[i54];

        $d87 = 0.5 * $d86;

        r33[i54] = $d87;

        i54 = i54 + 1;

        goto label10;

     label11:
        $d84 = r33[i52];

        $i47 = i52 - 1;

        $d82 = r2[$i47];

        $d83 = 1.5 / $d82;

        $d85 = $d84 + $d83;

        r33[i52] = $d85;

        goto label14;

     label12:
        $b43 = d6 cmpl d4;

        if $b43 <= 0 goto label13;

        $d79 = d4 / d0;

        r6[i52] = $d79;

        $i44 = i52 - 1;

        $d80 = r2[$i44];

        $d81 = 3.0 / $d80;

        r33[i52] = $d81;

        goto label14;

     label13:
        $d78 = r3[i52];

        r6[i52] = $d78;

        $r25 = r4[i52];

        $r26 = virtualinvoke $r25.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r26, 0, r33, 0, i0);

     label14:
        $i55 = i52 + 1;

        $r34 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r34.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r33);

        r5[$i55] = $r34;

        i52 = i52 + 1;

        goto label01;

     label15:
        $d10 = r1[0];

        d99 = staticinvoke <java.lang.Math: double signum(double)>($d10);

        $d12 = -3.0 * d99;

        $d11 = r1[0];

        $d14 = $d12 * $d11;

        $d13 = r2[0];

        d1 = $d14 / $d13;

        $d16 = 3.0 * d99;

        $d15 = r1[0];

        $d18 = $d16 * $d15;

        $d17 = r2[0];

        d3 = $d18 / $d17;

        $d19 = r3[0];

        d5 = d99 * $d19;

        r7 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r7, 0.0);

        $d20 = d5 - d1;

        $d21 = staticinvoke <java.lang.Math: double abs(double)>($d20);

        $b3 = $d21 cmpg 1.0E-14;

        if $b3 >= 0 goto label20;

        $b36 = d99 cmpl 0.0;

        if $b36 == 0 goto label20;

        $b37 = d5 cmpl d1;

        if $b37 < 0 goto label16;

        $d100 = r3[0];

        goto label17;

     label16:
        $d100 = d1 / d99;

     label17:
        r6[0] = $d100;

        i56 = 0;

     label18:
        if i56 >= i0 goto label19;

        $r22 = r4[0];

        $r23 = virtualinvoke $r22.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d62 = $r23[i56];

        $d63 = 0.5 * $d62;

        r7[i56] = $d63;

        i56 = i56 + 1;

        goto label18;

     label19:
        $d60 = r7[0];

        $d58 = r2[0];

        $d59 = 1.5 / $d58;

        $d61 = $d60 - $d59;

        r7[0] = $d61;

        goto label28;

     label20:
        $b4 = d5 cmpg d1;

        if $b4 >= 0 goto label21;

        $d55 = d1 / d99;

        r6[0] = $d55;

        $d56 = r2[0];

        $d57 = -3.0 / $d56;

        r7[0] = $d57;

        goto label28;

     label21:
        $d22 = d5 - d3;

        $d23 = staticinvoke <java.lang.Math: double abs(double)>($d22);

        $b5 = $d23 cmpg 1.0E-14;

        if $b5 >= 0 goto label26;

        $b33 = d99 cmpl 0.0;

        if $b33 == 0 goto label26;

        $b34 = d5 cmpg d3;

        if $b34 > 0 goto label22;

        $d101 = r3[0];

        goto label23;

     label22:
        $d101 = d3 / d99;

     label23:
        r6[0] = $d101;

        i57 = 0;

     label24:
        if i57 >= i0 goto label25;

        $r19 = r4[0];

        $r20 = virtualinvoke $r19.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d53 = $r20[i57];

        $d54 = 0.5 * $d53;

        r7[i57] = $d54;

        i57 = i57 + 1;

        goto label24;

     label25:
        $d51 = r7[0];

        $d49 = r2[0];

        $d50 = 1.5 / $d49;

        $d52 = $d51 + $d50;

        r7[0] = $d52;

        goto label28;

     label26:
        $b6 = d5 cmpl d3;

        if $b6 <= 0 goto label27;

        $d46 = d3 / d99;

        r6[0] = $d46;

        $d47 = r2[0];

        $d48 = 3.0 / $d47;

        r7[0] = $d48;

        goto label28;

     label27:
        $d24 = r3[0];

        r6[0] = $d24;

        $r9 = r4[0];

        $r10 = virtualinvoke $r9.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r7, 0, i0);

     label28:
        $r35 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r35.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r7);

        r5[1] = $r35;

        $i58 = i0 - 1;

        $d102 = r1[$i58];

        d103 = staticinvoke <java.lang.Math: double signum(double)>($d102);

        $d104 = -3.0 * d103;

        $i59 = i0 - 1;

        $d105 = r1[$i59];

        $d106 = $d104 * $d105;

        $i60 = i0 - 2;

        $d107 = r2[$i60];

        d7 = $d106 / $d107;

        $d108 = 3.0 * d103;

        $i61 = i0 - 1;

        $d109 = r1[$i61];

        $d110 = $d108 * $d109;

        $i62 = i0 - 2;

        $d111 = r2[$i62];

        d8 = $d110 / $d111;

        $i63 = i0 - 1;

        $d112 = r3[$i63];

        d9 = d103 * $d112;

        r8 = newarray (double)[i0];

        staticinvoke <java.util.Arrays: void fill(double[],double)>(r8, 0.0);

        $d113 = d9 - d7;

        $d114 = staticinvoke <java.lang.Math: double abs(double)>($d113);

        $b64 = $d114 cmpg 1.0E-14;

        if $b64 >= 0 goto label33;

        $b26 = d103 cmpl 0.0;

        if $b26 == 0 goto label33;

        $i28 = i0 - 1;

        $b27 = d9 cmpl d7;

        if $b27 < 0 goto label29;

        $i32 = i0 - 1;

        $d115 = r3[$i32];

        goto label30;

     label29:
        $d115 = d7 / d103;

     label30:
        r6[$i28] = $d115;

        i65 = 0;

     label31:
        if i65 >= i0 goto label32;

        $i31 = i0 - 1;

        $r16 = r4[$i31];

        $r17 = virtualinvoke $r16.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d44 = $r17[i65];

        $d45 = 0.5 * $d44;

        r8[i65] = $d45;

        i65 = i65 + 1;

        goto label31;

     label32:
        $i29 = i0 - 1;

        $d42 = r8[$i29];

        $i30 = i0 - 2;

        $d40 = r2[$i30];

        $d41 = 1.5 / $d40;

        $d43 = $d42 - $d41;

        r8[$i29] = $d43;

        goto label41;

     label33:
        $b7 = d9 cmpg d7;

        if $b7 >= 0 goto label34;

        $i23 = i0 - 1;

        $d37 = d7 / d103;

        r6[$i23] = $d37;

        $i25 = i0 - 1;

        $i24 = i0 - 2;

        $d38 = r2[$i24];

        $d39 = -3.0 / $d38;

        r8[$i25] = $d39;

        goto label41;

     label34:
        $d25 = d9 - d8;

        $d26 = staticinvoke <java.lang.Math: double abs(double)>($d25);

        $b8 = $d26 cmpg 1.0E-14;

        if $b8 >= 0 goto label39;

        $b16 = d103 cmpl 0.0;

        if $b16 == 0 goto label39;

        $i18 = i0 - 1;

        $b17 = d9 cmpg d8;

        if $b17 > 0 goto label35;

        $i22 = i0 - 1;

        $d116 = r3[$i22];

        goto label36;

     label35:
        $d116 = d8 / d103;

     label36:
        r6[$i18] = $d116;

        i66 = 0;

     label37:
        if i66 >= i0 goto label38;

        $i21 = i0 - 1;

        $r13 = r4[$i21];

        $r14 = virtualinvoke $r13.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        $d35 = $r14[i66];

        $d36 = 0.5 * $d35;

        r8[i66] = $d36;

        i66 = i66 + 1;

        goto label37;

     label38:
        $i19 = i0 - 1;

        $d33 = r8[$i19];

        $i20 = i0 - 2;

        $d31 = r2[$i20];

        $d32 = 1.5 / $d31;

        $d34 = $d33 + $d32;

        r8[$i19] = $d34;

        goto label41;

     label39:
        $b9 = d9 cmpl d8;

        if $b9 <= 0 goto label40;

        $i13 = i0 - 1;

        $d28 = d8 / d103;

        r6[$i13] = $d28;

        $i15 = i0 - 1;

        $i14 = i0 - 2;

        $d29 = r2[$i14];

        $d30 = 3.0 / $d29;

        r8[$i15] = $d30;

        goto label41;

     label40:
        $i11 = i0 - 1;

        $i10 = i0 - 1;

        $d27 = r3[$i10];

        r6[$i11] = $d27;

        $i12 = i0 - 1;

        $r11 = r4[$i12];

        $r12 = virtualinvoke $r11.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: double[] getData()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r8, 0, i0);

     label41:
        $r36 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r36.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r8);

        r5[i0] = $r36;

        $r37 = new com.opengamma.analytics.math.matrix.DoubleMatrix1D;

        specialinvoke $r37.<com.opengamma.analytics.math.matrix.DoubleMatrix1D: void <init>(double[])>(r6);

        r5[0] = $r37;

        return r5;
    }

    public static void <clinit>()
    {
        <com.opengamma.analytics.math.interpolation.NonnegativityPreservingCubicSplineInterpolator: double SMALL> = 1.0E-14;

        return;
    }
}
