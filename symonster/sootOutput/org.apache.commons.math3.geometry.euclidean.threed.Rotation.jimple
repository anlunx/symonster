public class org.apache.commons.math3.geometry.euclidean.threed.Rotation extends java.lang.Object implements java.io.Serializable
{
    public static final org.apache.commons.math3.geometry.euclidean.threed.Rotation IDENTITY;
    private static final long serialVersionUID;
    private final double q0;
    private final double q1;
    private final double q2;
    private final double q3;

    public void <init>(double, double, double, double, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        boolean z0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, d9, d10, d11, d12;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        d9 := @parameter0: double;

        d10 := @parameter1: double;

        d11 := @parameter2: double;

        d12 := @parameter3: double;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        $d2 = d9 * d9;

        $d1 = d10 * d10;

        $d4 = $d2 + $d1;

        $d3 = d11 * d11;

        $d6 = $d4 + $d3;

        $d5 = d12 * d12;

        $d7 = $d6 + $d5;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        d0 = 1.0 / $d8;

        d9 = d9 * d0;

        d10 = d10 * d0;

        d11 = d11 * d0;

        d12 = d12 * d0;

     label1:
        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = d9;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = d10;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = d11;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = d12;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double) throws org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math3.exception.util.LocalizedFormats $r4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $b0 = d1 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r2 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r4 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_AXIS>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label1:
        d2 = -0.5 * d0;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>(d2);

        d3 = $d4 / d1;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double cos(double)>(d2);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d5;

        $d6 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d7 = d3 * $d6;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d7;

        $d8 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d9 = d3 * $d8;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d9;

        $d10 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d11 = d3 * $d10;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d11;

        return;
    }

    public void <init>(double[][], double) throws org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] r1, r2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33;
        double[] r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r30;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        byte $b4;
        org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException $r22, $r26;
        java.lang.Object[] $r23, $r28;
        org.apache.commons.math3.exception.util.LocalizedFormats $r24, $r27;
        java.lang.Double $r25;
        java.lang.Integer $r29, $r31;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 3 goto label1;

        $r4 = r1[0];

        $i1 = lengthof $r4;

        if $i1 != 3 goto label1;

        $r5 = r1[1];

        $i2 = lengthof $r5;

        if $i2 != 3 goto label1;

        $r6 = r1[2];

        $i3 = lengthof $r6;

        if $i3 == 3 goto label2;

     label1:
        $r26 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r27 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ROTATION_MATRIX_DIMENSIONS>;

        $r28 = newarray (java.lang.Object)[2];

        $i5 = lengthof r1;

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r28[0] = $r29;

        $r30 = r1[0];

        $i6 = lengthof $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r28[1] = $r31;

        specialinvoke $r26.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r27, $r28);

        throw $r26;

     label2:
        r2 = specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[][] orthogonalizeMatrix(double[][],double)>(r1, d0);

        $r7 = r2[0];

        $d9 = $r7[0];

        $r8 = r2[1];

        $d3 = $r8[1];

        $r9 = r2[2];

        $d2 = $r9[2];

        $d7 = $d3 * $d2;

        $r10 = r2[2];

        $d5 = $r10[1];

        $r11 = r2[1];

        $d4 = $r11[2];

        $d6 = $d5 * $d4;

        $d8 = $d7 - $d6;

        $d19 = $d9 * $d8;

        $r12 = r2[1];

        $d17 = $r12[0];

        $r13 = r2[0];

        $d11 = $r13[1];

        $r14 = r2[2];

        $d10 = $r14[2];

        $d15 = $d11 * $d10;

        $r15 = r2[2];

        $d13 = $r15[1];

        $r16 = r2[0];

        $d12 = $r16[2];

        $d14 = $d13 * $d12;

        $d16 = $d15 - $d14;

        $d18 = $d17 * $d16;

        $d29 = $d19 - $d18;

        $r17 = r2[2];

        $d27 = $r17[0];

        $r18 = r2[0];

        $d21 = $r18[1];

        $r19 = r2[1];

        $d20 = $r19[2];

        $d25 = $d21 * $d20;

        $r20 = r2[1];

        $d23 = $r20[1];

        $r21 = r2[0];

        $d22 = $r21[2];

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        $d28 = $d27 * $d26;

        d1 = $d29 + $d28;

        $b4 = d1 cmpg 0.0;

        if $b4 >= 0 goto label3;

        $r22 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r24 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT>;

        $r23 = newarray (java.lang.Object)[1];

        $r25 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r23[0] = $r25;

        specialinvoke $r22.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r24, $r23);

        throw $r22;

     label3:
        r3 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[] mat2quat(double[][])>(r2);

        $d30 = r3[0];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d30;

        $d31 = r3[1];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d31;

        $d32 = r3[2];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d32;

        $d33 = r3[3];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d33;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, $r5, $r6, $r7, $r8, r13, r14, r15, r16, r17, r18, r19, r20;
        double[] r4, $r10, $r11, $r12;
        double[][] $r9;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r13 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r14 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r15 := @parameter2: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r16 := @parameter3: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = virtualinvoke r13.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>(r14);

        r1 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r6 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>(r13);

        r17 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        r18 = virtualinvoke r13.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r7 = virtualinvoke r15.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>(r16);

        r2 = virtualinvoke $r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r8 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>(r15);

        r19 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        r20 = virtualinvoke r15.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize()>();

        $r9 = newarray (double[])[3];

        $r10 = newarray (double)[3];

        $d0 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d1 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d2 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d3 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d4 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d5 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d6 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d0, $d1, $d2, $d3, $d4, $d5);

        $r10[0] = $d6;

        $d7 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d8 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d9 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d10 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d11 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d12 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d13 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d7, $d8, $d9, $d10, $d11, $d12);

        $r10[1] = $d13;

        $d14 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d15 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d16 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d17 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d18 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d19 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d20 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d14, $d15, $d16, $d17, $d18, $d19);

        $r10[2] = $d20;

        $r9[0] = $r10;

        $r11 = newarray (double)[3];

        $d21 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d22 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d23 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d24 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d25 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d26 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d27 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d21, $d22, $d23, $d24, $d25, $d26);

        $r11[0] = $d27;

        $d28 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d29 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d30 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d31 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d32 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d33 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d34 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d28, $d29, $d30, $d31, $d32, $d33);

        $r11[1] = $d34;

        $d35 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d36 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d37 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d38 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d39 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d40 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d41 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d35, $d36, $d37, $d38, $d39, $d40);

        $r11[2] = $d41;

        $r9[1] = $r11;

        $r12 = newarray (double)[3];

        $d42 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d43 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d44 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d45 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d46 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d47 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d48 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d42, $d43, $d44, $d45, $d46, $d47);

        $r12[0] = $d48;

        $d49 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d50 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d51 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d52 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d53 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d54 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d55 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d49, $d50, $d51, $d52, $d53, $d54);

        $r12[1] = $d55;

        $d56 = virtualinvoke r18.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d57 = virtualinvoke r20.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d58 = virtualinvoke r17.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d59 = virtualinvoke r19.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d60 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d61 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d62 = staticinvoke <org.apache.commons.math3.util.MathArrays: double linearCombination(double,double,double,double,double,double)>($d56, $d57, $d58, $d59, $d60, $d61);

        $r12[2] = $d62;

        $r9[2] = $r12;

        r4 = staticinvoke <org.apache.commons.math3.geometry.euclidean.threed.Rotation: double[] mat2quat(double[][])>($r9);

        $d63 = r4[0];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d63;

        $d64 = r4[1];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d64;

        $d65 = r4[2];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d65;

        $d66 = r4[3];

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d66;

        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, r2, r3, r7;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, d24;
        byte $b0, $b1;
        org.apache.commons.math3.exception.MathArithmeticException $r4;
        java.lang.Object[] $r5;
        org.apache.commons.math3.exception.util.LocalizedFormats $r6;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        r2 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $d2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        $d3 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getNorm()>();

        d0 = $d2 * $d3;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r4 = new org.apache.commons.math3.exception.MathArithmeticException;

        $r6 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR>;

        $r5 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.apache.commons.math3.exception.MathArithmeticException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r6, $r5);

        throw $r4;

     label1:
        d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>(r2);

        $d4 = -0.999999999999998 * d0;

        $b1 = d1 cmpg $d4;

        if $b1 >= 0 goto label2;

        r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal()>();

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = 0.0;

        $d18 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d19 = neg $d18;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d19;

        $d20 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d21 = neg $d20;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d21;

        $d22 = virtualinvoke r7.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d23 = neg $d22;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d23;

        goto label3;

     label2:
        $d5 = d1 / d0;

        $d6 = 1.0 + $d5;

        $d7 = 0.5 * $d6;

        $d8 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d7);

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d8;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d10 = 2.0 * $d9;

        $d11 = $d10 * d0;

        d24 = 1.0 / $d11;

        r3 = virtualinvoke r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector)>(r1);

        $d12 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d13 = d24 * $d12;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d13;

        $d14 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d15 = d24 * $d14;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d15;

        $d16 = virtualinvoke r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d17 = d24 * $d16;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d17;

     label3:
        return;
    }

    public void <init>(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder, double, double, double)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, r5, $r6, $r8, $r10, $r12;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r7, $r9, $r11;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r7 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA1()>();

        specialinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r7, d0);

        $r8 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r9 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA2()>();

        specialinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r9, d1);

        $r10 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.Vector3D getA3()>();

        specialinvoke $r10.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(org.apache.commons.math3.geometry.euclidean.threed.Vector3D,double)>($r11, d2);

        $r12 = virtualinvoke $r8.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r10);

        r5 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>($r12);

        $d3 = r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0> = $d3;

        $d4 = r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1> = $d4;

        $d5 = r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2> = $d5;

        $d6 = r5.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3> = $d6;

        return;
    }

    private static double[] mat2quat(double[][])
    {
        double[][] r0;
        double[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, d80, d81, d82, d83, d84, d85, d86, d87;
        byte $b0, $b1, $b2;

        r0 := @parameter0: double[][];

        r1 = newarray (double)[4];

        $r2 = r0[0];

        $d1 = $r2[0];

        $r3 = r0[1];

        $d0 = $r3[1];

        $d3 = $d1 + $d0;

        $r4 = r0[2];

        $d2 = $r4[2];

        d80 = $d3 + $d2;

        $b0 = d80 cmpl -0.19;

        if $b0 <= 0 goto label1;

        $d64 = d80 + 1.0;

        $d65 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d64);

        $d66 = 0.5 * $d65;

        r1[0] = $d66;

        $d67 = r1[0];

        d81 = 0.25 / $d67;

        $r32 = r0[1];

        $d69 = $r32[2];

        $r33 = r0[2];

        $d68 = $r33[1];

        $d70 = $d69 - $d68;

        $d71 = d81 * $d70;

        r1[1] = $d71;

        $r34 = r0[2];

        $d73 = $r34[0];

        $r35 = r0[0];

        $d72 = $r35[2];

        $d74 = $d73 - $d72;

        $d75 = d81 * $d74;

        r1[2] = $d75;

        $r36 = r0[0];

        $d77 = $r36[1];

        $r37 = r0[1];

        $d76 = $r37[0];

        $d78 = $d77 - $d76;

        $d79 = d81 * $d78;

        r1[3] = $d79;

        goto label4;

     label1:
        $r5 = r0[0];

        $d5 = $r5[0];

        $r6 = r0[1];

        $d4 = $r6[1];

        $d7 = $d5 - $d4;

        $r7 = r0[2];

        $d6 = $r7[2];

        d82 = $d7 - $d6;

        $b1 = d82 cmpl -0.19;

        if $b1 <= 0 goto label2;

        $d48 = d82 + 1.0;

        $d49 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d48);

        $d50 = 0.5 * $d49;

        r1[1] = $d50;

        $d51 = r1[1];

        d83 = 0.25 / $d51;

        $r26 = r0[1];

        $d53 = $r26[2];

        $r27 = r0[2];

        $d52 = $r27[1];

        $d54 = $d53 - $d52;

        $d55 = d83 * $d54;

        r1[0] = $d55;

        $r28 = r0[0];

        $d57 = $r28[1];

        $r29 = r0[1];

        $d56 = $r29[0];

        $d58 = $d57 + $d56;

        $d59 = d83 * $d58;

        r1[2] = $d59;

        $r30 = r0[0];

        $d61 = $r30[2];

        $r31 = r0[2];

        $d60 = $r31[0];

        $d62 = $d61 + $d60;

        $d63 = d83 * $d62;

        r1[3] = $d63;

        goto label4;

     label2:
        $r8 = r0[1];

        $d9 = $r8[1];

        $r9 = r0[0];

        $d8 = $r9[0];

        $d11 = $d9 - $d8;

        $r10 = r0[2];

        $d10 = $r10[2];

        d84 = $d11 - $d10;

        $b2 = d84 cmpl -0.19;

        if $b2 <= 0 goto label3;

        $d32 = d84 + 1.0;

        $d33 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d32);

        $d34 = 0.5 * $d33;

        r1[2] = $d34;

        $d35 = r1[2];

        d85 = 0.25 / $d35;

        $r20 = r0[2];

        $d37 = $r20[0];

        $r21 = r0[0];

        $d36 = $r21[2];

        $d38 = $d37 - $d36;

        $d39 = d85 * $d38;

        r1[0] = $d39;

        $r22 = r0[0];

        $d41 = $r22[1];

        $r23 = r0[1];

        $d40 = $r23[0];

        $d42 = $d41 + $d40;

        $d43 = d85 * $d42;

        r1[1] = $d43;

        $r24 = r0[2];

        $d45 = $r24[1];

        $r25 = r0[1];

        $d44 = $r25[2];

        $d46 = $d45 + $d44;

        $d47 = d85 * $d46;

        r1[3] = $d47;

        goto label4;

     label3:
        $r11 = r0[2];

        $d13 = $r11[2];

        $r12 = r0[0];

        $d12 = $r12[0];

        $d15 = $d13 - $d12;

        $r13 = r0[1];

        $d14 = $r13[1];

        d86 = $d15 - $d14;

        $d16 = d86 + 1.0;

        $d17 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d16);

        $d18 = 0.5 * $d17;

        r1[3] = $d18;

        $d19 = r1[3];

        d87 = 0.25 / $d19;

        $r14 = r0[0];

        $d21 = $r14[1];

        $r15 = r0[1];

        $d20 = $r15[0];

        $d22 = $d21 - $d20;

        $d23 = d87 * $d22;

        r1[0] = $d23;

        $r16 = r0[0];

        $d25 = $r16[2];

        $r17 = r0[2];

        $d24 = $r17[0];

        $d26 = $d25 + $d24;

        $d27 = d87 * $d26;

        r1[1] = $d27;

        $r18 = r0[2];

        $d29 = $r18[1];

        $r19 = r0[1];

        $d28 = $r19[2];

        $d30 = $d29 + $d28;

        $d31 = d87 * $d30;

        r1[2] = $d31;

     label4:
        return r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Rotation revert()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, $r1;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d4 = neg $d0;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d4, $d3, $d2, $d1, 0);

        return $r1;
    }

    public double getQ0()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        return $d0;
    }

    public double getQ1()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        return $d0;
    }

    public double getQ2()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        return $d0;
    }

    public double getQ3()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        return $d0;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getAxis()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27;
        byte $b0, $b1;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r1, $r2, $r3;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d6 = $d2 * $d1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d5 = $d4 * $d3;

        $d10 = $d6 + $d5;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d9 = $d8 * $d7;

        d0 = $d10 + $d9;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $r3 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        specialinvoke $r3.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>(1.0, 0.0, 0.0);

        return $r3;

     label1:
        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b1 = $d11 cmpg 0.0;

        if $b1 >= 0 goto label2;

        $d19 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d26 = 1.0 / $d19;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d25 = $d20 * d26;

        $d21 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d24 = $d21 * d26;

        $d22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d23 = $d22 * d26;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d25, $d24, $d23);

        return $r2;

     label2:
        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>(d0);

        d27 = -1.0 / $d12;

        $r1 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d18 = $d13 * d27;

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d17 = $d14 * d27;

        $d15 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d16 = $d15 * d27;

        specialinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d18, $d17, $d16);

        return $r1;
    }

    public double getAngle()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b0 = $d0 cmpg -0.1;

        if $b0 < 0 goto label1;

        $d15 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b1 = $d15 cmpl 0.1;

        if $b1 <= 0 goto label2;

     label1:
        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d6 = $d2 * $d1;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d5 = $d4 * $d3;

        $d10 = $d6 + $d5;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d7 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d9 = $d8 * $d7;

        $d11 = $d10 + $d9;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d11);

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d12);

        $d14 = 2.0 * $d13;

        return $d14;

     label2:
        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $b2 = $d16 cmpg 0.0;

        if $b2 >= 0 goto label3;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d21 = neg $d20;

        $d22 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d21);

        $d23 = 2.0 * $d22;

        return $d23;

     label3:
        $d17 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d17);

        $d19 = 2.0 * $d18;

        return $d19;
    }

    public double[] getAngles(org.apache.commons.math3.geometry.euclidean.threed.RotationOrder) throws org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.RotationOrder r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D $r13, $r14, $r17, $r18, $r21, $r22, $r25, $r26, $r29, $r30, $r33, $r34, $r37, $r38, $r41, $r42, $r45, $r46, $r49, $r50, $r53, $r54, $r57, $r58, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23;
        org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r43, $r47, $r51, $r55, $r59;
        double[] $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder;

        $r2 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYZ>;

        if r1 != $r2 goto label03;

        $r57 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r61 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r57);

        $r58 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r62 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r58);

        $d123 = virtualinvoke r62.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b22 = $d123 cmpg -0.9999999999;

        if $b22 < 0 goto label01;

        $d124 = virtualinvoke r62.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b23 = $d124 cmpl 0.9999999999;

        if $b23 <= 0 goto label02;

     label01:
        $r59 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r59.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r59;

     label02:
        $r60 = newarray (double)[3];

        $d125 = virtualinvoke r61.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d126 = neg $d125;

        $d127 = virtualinvoke r61.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d128 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d126, $d127);

        $r60[0] = $d128;

        $d129 = virtualinvoke r62.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d130 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d129);

        $r60[1] = $d130;

        $d131 = virtualinvoke r62.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d132 = neg $d131;

        $d133 = virtualinvoke r62.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d134 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d132, $d133);

        $r60[2] = $d134;

        return $r60;

     label03:
        $r3 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZY>;

        if r1 != $r3 goto label06;

        $r53 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r63 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r53);

        $r54 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r64 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r54);

        $d112 = virtualinvoke r64.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b20 = $d112 cmpg -0.9999999999;

        if $b20 < 0 goto label04;

        $d113 = virtualinvoke r64.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b21 = $d113 cmpl 0.9999999999;

        if $b21 <= 0 goto label05;

     label04:
        $r55 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r55.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r55;

     label05:
        $r56 = newarray (double)[3];

        $d114 = virtualinvoke r63.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d115 = virtualinvoke r63.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d116 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d114, $d115);

        $r56[0] = $d116;

        $d117 = virtualinvoke r64.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d118 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d117);

        $d119 = neg $d118;

        $r56[1] = $d119;

        $d120 = virtualinvoke r64.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d121 = virtualinvoke r64.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d122 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d120, $d121);

        $r56[2] = $d122;

        return $r56;

     label06:
        $r4 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXZ>;

        if r1 != $r4 goto label09;

        $r49 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r65 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r49);

        $r50 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r66 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r50);

        $d101 = virtualinvoke r66.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b18 = $d101 cmpg -0.9999999999;

        if $b18 < 0 goto label07;

        $d102 = virtualinvoke r66.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b19 = $d102 cmpl 0.9999999999;

        if $b19 <= 0 goto label08;

     label07:
        $r51 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r51.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r51;

     label08:
        $r52 = newarray (double)[3];

        $d103 = virtualinvoke r65.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d104 = virtualinvoke r65.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d105 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d103, $d104);

        $r52[0] = $d105;

        $d106 = virtualinvoke r66.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d107 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d106);

        $d108 = neg $d107;

        $r52[1] = $d108;

        $d109 = virtualinvoke r66.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d110 = virtualinvoke r66.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d111 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d109, $d110);

        $r52[2] = $d111;

        return $r52;

     label09:
        $r5 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZX>;

        if r1 != $r5 goto label12;

        $r45 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r67 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r45);

        $r46 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r68 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r46);

        $d89 = virtualinvoke r68.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b16 = $d89 cmpg -0.9999999999;

        if $b16 < 0 goto label10;

        $d90 = virtualinvoke r68.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b17 = $d90 cmpl 0.9999999999;

        if $b17 <= 0 goto label11;

     label10:
        $r47 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r47.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r47;

     label11:
        $r48 = newarray (double)[3];

        $d91 = virtualinvoke r67.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d92 = neg $d91;

        $d93 = virtualinvoke r67.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d94 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d92, $d93);

        $r48[0] = $d94;

        $d95 = virtualinvoke r68.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d96 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d95);

        $r48[1] = $d96;

        $d97 = virtualinvoke r68.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d98 = neg $d97;

        $d99 = virtualinvoke r68.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d100 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d98, $d99);

        $r48[2] = $d100;

        return $r48;

     label12:
        $r6 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXY>;

        if r1 != $r6 goto label15;

        $r41 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r69 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r41);

        $r42 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r70 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r42);

        $d77 = virtualinvoke r70.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b14 = $d77 cmpg -0.9999999999;

        if $b14 < 0 goto label13;

        $d78 = virtualinvoke r70.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b15 = $d78 cmpl 0.9999999999;

        if $b15 <= 0 goto label14;

     label13:
        $r43 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r43.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r43;

     label14:
        $r44 = newarray (double)[3];

        $d79 = virtualinvoke r69.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d80 = neg $d79;

        $d81 = virtualinvoke r69.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d82 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d80, $d81);

        $r44[0] = $d82;

        $d83 = virtualinvoke r70.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d84 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d83);

        $r44[1] = $d84;

        $d85 = virtualinvoke r70.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d86 = neg $d85;

        $d87 = virtualinvoke r70.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d88 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d86, $d87);

        $r44[2] = $d88;

        return $r44;

     label15:
        $r7 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZYX>;

        if r1 != $r7 goto label18;

        $r37 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r71 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r37);

        $r38 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r72 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r38);

        $d66 = virtualinvoke r72.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b12 = $d66 cmpg -0.9999999999;

        if $b12 < 0 goto label16;

        $d67 = virtualinvoke r72.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b13 = $d67 cmpl 0.9999999999;

        if $b13 <= 0 goto label17;

     label16:
        $r39 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r39.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(1);

        throw $r39;

     label17:
        $r40 = newarray (double)[3];

        $d68 = virtualinvoke r71.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d69 = virtualinvoke r71.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d70 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d68, $d69);

        $r40[0] = $d70;

        $d71 = virtualinvoke r72.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d72 = staticinvoke <org.apache.commons.math3.util.FastMath: double asin(double)>($d71);

        $d73 = neg $d72;

        $r40[1] = $d73;

        $d74 = virtualinvoke r72.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d75 = virtualinvoke r72.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d76 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d74, $d75);

        $r40[2] = $d76;

        return $r40;

     label18:
        $r8 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XYX>;

        if r1 != $r8 goto label21;

        $r33 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r73 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r33);

        $r34 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r74 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r34);

        $d55 = virtualinvoke r74.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b10 = $d55 cmpg -0.9999999999;

        if $b10 < 0 goto label19;

        $d56 = virtualinvoke r74.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b11 = $d56 cmpl 0.9999999999;

        if $b11 <= 0 goto label20;

     label19:
        $r35 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r35.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r35;

     label20:
        $r36 = newarray (double)[3];

        $d57 = virtualinvoke r73.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d58 = virtualinvoke r73.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d59 = neg $d58;

        $d60 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d57, $d59);

        $r36[0] = $d60;

        $d61 = virtualinvoke r74.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d62 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d61);

        $r36[1] = $d62;

        $d63 = virtualinvoke r74.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d64 = virtualinvoke r74.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d65 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d63, $d64);

        $r36[2] = $d65;

        return $r36;

     label21:
        $r9 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder XZX>;

        if r1 != $r9 goto label24;

        $r29 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r75 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r29);

        $r30 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I>;

        r76 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r30);

        $d44 = virtualinvoke r76.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b8 = $d44 cmpg -0.9999999999;

        if $b8 < 0 goto label22;

        $d45 = virtualinvoke r76.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $b9 = $d45 cmpl 0.9999999999;

        if $b9 <= 0 goto label23;

     label22:
        $r31 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r31.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r31;

     label23:
        $r32 = newarray (double)[3];

        $d46 = virtualinvoke r75.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d47 = virtualinvoke r75.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d48 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d46, $d47);

        $r32[0] = $d48;

        $d49 = virtualinvoke r76.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d50 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d49);

        $r32[1] = $d50;

        $d51 = virtualinvoke r76.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d52 = virtualinvoke r76.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d53 = neg $d52;

        $d54 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d51, $d53);

        $r32[2] = $d54;

        return $r32;

     label24:
        $r10 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YXY>;

        if r1 != $r10 goto label27;

        $r25 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r77 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r25);

        $r26 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r78 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r26);

        $d33 = virtualinvoke r78.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b6 = $d33 cmpg -0.9999999999;

        if $b6 < 0 goto label25;

        $d34 = virtualinvoke r78.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b7 = $d34 cmpl 0.9999999999;

        if $b7 <= 0 goto label26;

     label25:
        $r27 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r27.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r27;

     label26:
        $r28 = newarray (double)[3];

        $d35 = virtualinvoke r77.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d36 = virtualinvoke r77.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d37 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d35, $d36);

        $r28[0] = $d37;

        $d38 = virtualinvoke r78.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d39 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d38);

        $r28[1] = $d39;

        $d40 = virtualinvoke r78.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d41 = virtualinvoke r78.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d42 = neg $d41;

        $d43 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d40, $d42);

        $r28[2] = $d43;

        return $r28;

     label27:
        $r11 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder YZY>;

        if r1 != $r11 goto label30;

        $r21 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r79 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r21);

        $r22 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J>;

        r80 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r22);

        $d22 = virtualinvoke r80.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b4 = $d22 cmpg -0.9999999999;

        if $b4 < 0 goto label28;

        $d23 = virtualinvoke r80.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $b5 = $d23 cmpl 0.9999999999;

        if $b5 <= 0 goto label29;

     label28:
        $r23 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r23.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r23;

     label29:
        $r24 = newarray (double)[3];

        $d24 = virtualinvoke r79.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d25 = virtualinvoke r79.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d26 = neg $d25;

        $d27 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d24, $d26);

        $r24[0] = $d27;

        $d28 = virtualinvoke r80.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d29 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d28);

        $r24[1] = $d29;

        $d30 = virtualinvoke r80.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d31 = virtualinvoke r80.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d32 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d30, $d31);

        $r24[2] = $d32;

        return $r24;

     label30:
        $r12 = <org.apache.commons.math3.geometry.euclidean.threed.RotationOrder: org.apache.commons.math3.geometry.euclidean.threed.RotationOrder ZXZ>;

        if r1 != $r12 goto label33;

        $r17 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r81 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r17);

        $r18 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r82 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r18);

        $d11 = virtualinvoke r82.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b2 = $d11 cmpg -0.9999999999;

        if $b2 < 0 goto label31;

        $d12 = virtualinvoke r82.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b3 = $d12 cmpl 0.9999999999;

        if $b3 <= 0 goto label32;

     label31:
        $r19 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r19.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r19;

     label32:
        $r20 = newarray (double)[3];

        $d13 = virtualinvoke r81.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d14 = virtualinvoke r81.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d15 = neg $d14;

        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d13, $d15);

        $r20[0] = $d16;

        $d17 = virtualinvoke r82.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d17);

        $r20[1] = $d18;

        $d19 = virtualinvoke r82.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d20 = virtualinvoke r82.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d21 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d19, $d20);

        $r20[2] = $d21;

        return $r20;

     label33:
        $r13 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r83 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r13);

        $r14 = <org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K>;

        r84 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)>($r14);

        $d0 = virtualinvoke r84.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b0 = $d0 cmpg -0.9999999999;

        if $b0 < 0 goto label34;

        $d1 = virtualinvoke r84.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $b1 = $d1 cmpl 0.9999999999;

        if $b1 <= 0 goto label35;

     label34:
        $r15 = new org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException;

        specialinvoke $r15.<org.apache.commons.math3.geometry.euclidean.threed.CardanEulerSingularityException: void <init>(boolean)>(0);

        throw $r15;

     label35:
        $r16 = newarray (double)[3];

        $d2 = virtualinvoke r83.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d3 = virtualinvoke r83.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d2, $d3);

        $r16[0] = $d4;

        $d5 = virtualinvoke r84.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double acos(double)>($d5);

        $r16[1] = $d6;

        $d7 = virtualinvoke r84.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        $d8 = virtualinvoke r84.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        $d9 = neg $d8;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double atan2(double,double)>($d7, $d9);

        $r16[2] = $d10;

        return $r16;
    }

    public double[][] getMatrix()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50;
        double[][] r1;
        double[] $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d10 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d0 = $d11 * $d10;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d1 = $d13 * $d12;

        $d15 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d2 = $d15 * $d14;

        $d17 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d3 = $d17 * $d16;

        $d19 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d18 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        d4 = $d19 * $d18;

        $d21 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d5 = $d21 * $d20;

        $d23 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d6 = $d23 * $d22;

        $d25 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d24 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        d7 = $d25 * $d24;

        $d27 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d26 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d8 = $d27 * $d26;

        $d29 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d28 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        d9 = $d29 * $d28;

        r1 = newarray (double[])[3];

        $r2 = newarray (double)[3];

        r1[0] = $r2;

        $r3 = newarray (double)[3];

        r1[1] = $r3;

        $r4 = newarray (double)[3];

        r1[2] = $r4;

        $r5 = r1[0];

        $d30 = d0 + d4;

        $d31 = 2.0 * $d30;

        $d32 = $d31 - 1.0;

        $r5[0] = $d32;

        $r6 = r1[1];

        $d33 = d5 - d3;

        $d34 = 2.0 * $d33;

        $r6[0] = $d34;

        $r7 = r1[2];

        $d35 = d6 + d2;

        $d36 = 2.0 * $d35;

        $r7[0] = $d36;

        $r8 = r1[0];

        $d37 = d5 + d3;

        $d38 = 2.0 * $d37;

        $r8[1] = $d38;

        $r9 = r1[1];

        $d39 = d0 + d7;

        $d40 = 2.0 * $d39;

        $d41 = $d40 - 1.0;

        $r9[1] = $d41;

        $r10 = r1[2];

        $d42 = d8 - d1;

        $d43 = 2.0 * $d42;

        $r10[1] = $d43;

        $r11 = r1[0];

        $d44 = d6 - d2;

        $d45 = 2.0 * $d44;

        $r11[2] = $d45;

        $r12 = r1[1];

        $d46 = d8 + d1;

        $d47 = 2.0 * $d46;

        $r12[2] = $d47;

        $r13 = r1[2];

        $d48 = d0 + d9;

        $d49 = 2.0 * $d48;

        $d50 = $d49 - 1.0;

        $r13[2] = $d50;

        return r1;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        d2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d7 = $d4 * d0;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d5 * d1;

        $d10 = $d7 + $d6;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d9 = $d8 * d2;

        d3 = $d10 + $d9;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d19 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d17 = d0 * $d11;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d15 = $d12 * d2;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d14 = $d13 * d1;

        $d16 = $d15 - $d14;

        $d18 = $d17 - $d16;

        $d22 = $d19 * $d18;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d55 = $d24 - d0;

        $d33 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d25 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d31 = d1 * $d25;

        $d26 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d29 = $d26 * d0;

        $d27 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d28 = $d27 * d2;

        $d30 = $d29 - $d28;

        $d32 = $d31 - $d30;

        $d36 = $d33 * $d32;

        $d34 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d35 = d3 * $d34;

        $d37 = $d36 + $d35;

        $d38 = 2.0 * $d37;

        $d54 = $d38 - d1;

        $d47 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d39 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d45 = d2 * $d39;

        $d40 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d43 = $d40 * d1;

        $d41 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d42 = $d41 * d0;

        $d44 = $d43 - $d42;

        $d46 = $d45 - $d44;

        $d50 = $d47 * $d46;

        $d48 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d49 = d3 * $d48;

        $d51 = $d50 + $d49;

        $d52 = 2.0 * $d51;

        $d53 = $d52 - d2;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d55, $d54, $d53);

        return $r2;
    }

    public void applyTo(double[], double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[] r1, r2;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 = r1[0];

        d1 = r1[1];

        d2 = r1[2];

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d7 = $d4 * d0;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d5 * d1;

        $d10 = $d7 + $d6;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d9 = $d8 * d2;

        d3 = $d10 + $d9;

        $d19 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d11 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d17 = d0 * $d11;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d15 = $d12 * d2;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d14 = $d13 * d1;

        $d16 = $d15 - $d14;

        $d18 = $d17 - $d16;

        $d22 = $d19 * $d18;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d25 = $d24 - d0;

        r2[0] = $d25;

        $d34 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d26 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d32 = d1 * $d26;

        $d27 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d30 = $d27 * d0;

        $d28 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d29 = $d28 * d2;

        $d31 = $d30 - $d29;

        $d33 = $d32 - $d31;

        $d37 = $d34 * $d33;

        $d35 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d36 = d3 * $d35;

        $d38 = $d37 + $d36;

        $d39 = 2.0 * $d38;

        $d40 = $d39 - d1;

        r2[1] = $d40;

        $d49 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d41 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d47 = d2 * $d41;

        $d42 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d45 = $d42 * d1;

        $d43 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d44 = $d43 * d0;

        $d46 = $d45 - $d44;

        $d48 = $d47 - $d46;

        $d52 = $d49 * $d48;

        $d50 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d51 = d3 * $d50;

        $d53 = $d52 + $d51;

        $d54 = 2.0 * $d53;

        $d55 = $d54 - d2;

        r2[2] = $d55;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D r1, $r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        d0 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getX()>();

        d1 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getY()>();

        d2 = virtualinvoke r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double getZ()>();

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d8 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d7 = $d6 * d1;

        $d11 = $d8 + $d7;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d10 = $d9 * d2;

        d3 = $d11 + $d10;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d4 = neg $d12;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $d18 = d0 * d4;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d16 = $d13 * d2;

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d15 = $d14 * d1;

        $d17 = $d16 - $d15;

        $d19 = $d18 - $d17;

        $d22 = d4 * $d19;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d51 = $d24 - d0;

        $d30 = d1 * d4;

        $d25 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d28 = $d25 * d0;

        $d26 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d27 = $d26 * d2;

        $d29 = $d28 - $d27;

        $d31 = $d30 - $d29;

        $d34 = d4 * $d31;

        $d32 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d33 = d3 * $d32;

        $d35 = $d34 + $d33;

        $d36 = 2.0 * $d35;

        $d50 = $d36 - d1;

        $d42 = d2 * d4;

        $d37 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d40 = $d37 * d1;

        $d38 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d39 = $d38 * d0;

        $d41 = $d40 - $d39;

        $d43 = $d42 - $d41;

        $d46 = d4 * $d43;

        $d44 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d45 = d3 * $d44;

        $d47 = $d46 + $d45;

        $d48 = 2.0 * $d47;

        $d49 = $d48 - d2;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: void <init>(double,double,double)>($d51, $d50, $d49);

        return $r2;
    }

    public void applyInverseTo(double[], double[])
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[] r1, r2;
        double d0, d1, d2, d3, d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 = r1[0];

        d1 = r1[1];

        d2 = r1[2];

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d8 = $d5 * d0;

        $d6 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d7 = $d6 * d1;

        $d11 = $d8 + $d7;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d10 = $d9 * d2;

        d3 = $d11 + $d10;

        $d12 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        d4 = neg $d12;

        $d18 = d0 * d4;

        $d13 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d16 = $d13 * d2;

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d15 = $d14 * d1;

        $d17 = $d16 - $d15;

        $d19 = $d18 - $d17;

        $d22 = d4 * $d19;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d21 = d3 * $d20;

        $d23 = $d22 + $d21;

        $d24 = 2.0 * $d23;

        $d25 = $d24 - d0;

        r2[0] = $d25;

        $d31 = d1 * d4;

        $d26 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d29 = $d26 * d0;

        $d27 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d28 = $d27 * d2;

        $d30 = $d29 - $d28;

        $d32 = $d31 - $d30;

        $d35 = d4 * $d32;

        $d33 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d34 = d3 * $d33;

        $d36 = $d35 + $d34;

        $d37 = 2.0 * $d36;

        $d38 = $d37 - d1;

        r2[1] = $d38;

        $d44 = d2 * d4;

        $d39 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d42 = $d39 * d1;

        $d40 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d41 = $d40 * d0;

        $d43 = $d42 - $d41;

        $d45 = $d44 - $d43;

        $d48 = d4 * $d45;

        $d46 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d47 = d3 * $d46;

        $d49 = $d48 + $d47;

        $d50 = 2.0 * $d49;

        $d51 = $d50 - d2;

        r2[2] = $d51;

        return;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d1 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d13 = $d1 * $d0;

        $d3 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d2 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d7 = $d3 * $d2;

        $d5 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d4 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d6 = $d5 * $d4;

        $d11 = $d7 + $d6;

        $d9 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d8 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d10 = $d9 * $d8;

        $d12 = $d11 + $d10;

        $d59 = $d13 - $d12;

        $d15 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d14 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d19 = $d15 * $d14;

        $d17 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d18 = $d17 * $d16;

        $d27 = $d19 + $d18;

        $d21 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d20 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d25 = $d21 * $d20;

        $d23 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d24 = $d23 * $d22;

        $d26 = $d25 - $d24;

        $d58 = $d27 + $d26;

        $d29 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d28 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d33 = $d29 * $d28;

        $d31 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d30 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d32 = $d31 * $d30;

        $d41 = $d33 + $d32;

        $d35 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d34 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d39 = $d35 * $d34;

        $d37 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d36 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d38 = $d37 * $d36;

        $d40 = $d39 - $d38;

        $d57 = $d41 + $d40;

        $d43 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d42 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d47 = $d43 * $d42;

        $d45 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d44 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d46 = $d45 * $d44;

        $d55 = $d47 + $d46;

        $d49 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d48 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d53 = $d49 * $d48;

        $d51 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d50 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d52 = $d51 * $d50;

        $d54 = $d53 - $d52;

        $d56 = $d55 + $d54;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d59, $d58, $d57, $d56, 0);

        return $r2;
    }

    public org.apache.commons.math3.geometry.euclidean.threed.Rotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $d0 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d2 = neg $d0;

        $d1 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d14 = $d2 * $d1;

        $d4 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d3 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d8 = $d4 * $d3;

        $d6 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d5 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d7 = $d6 * $d5;

        $d12 = $d8 + $d7;

        $d10 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d9 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        $d63 = $d14 - $d13;

        $d15 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d17 = neg $d15;

        $d16 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d21 = $d17 * $d16;

        $d19 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d18 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d20 = $d19 * $d18;

        $d29 = $d21 + $d20;

        $d23 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d22 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d27 = $d23 * $d22;

        $d25 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d24 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d26 = $d25 * $d24;

        $d28 = $d27 - $d26;

        $d62 = $d29 + $d28;

        $d30 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d32 = neg $d30;

        $d31 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d36 = $d32 * $d31;

        $d34 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d33 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d35 = $d34 * $d33;

        $d44 = $d36 + $d35;

        $d38 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d37 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d42 = $d38 * $d37;

        $d40 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d39 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d41 = $d40 * $d39;

        $d43 = $d42 - $d41;

        $d61 = $d44 + $d43;

        $d45 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d47 = neg $d45;

        $d46 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d51 = $d47 * $d46;

        $d49 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q0>;

        $d48 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q3>;

        $d50 = $d49 * $d48;

        $d59 = $d51 + $d50;

        $d53 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d52 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d57 = $d53 * $d52;

        $d55 = r1.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q2>;

        $d54 = r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double q1>;

        $d56 = $d55 * $d54;

        $d58 = $d57 - $d56;

        $d60 = $d59 + $d58;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>($d63, $d62, $d61, $d60, 0);

        return $r2;
    }

    private double[][] orthogonalizeMatrix(double[][], double) throws org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0;
        double[][] r1, r5;
        double d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, $d83, $d84, $d85, $d86, $d87, $d88, $d89, $d90, $d91, $d92, $d93, $d94, $d95, $d96, $d97, $d98, $d99, $d100, $d101, $d102, $d103, $d104, $d105, $d106, $d107, $d108, $d109, $d110, $d111, $d112, $d113, $d114, $d115, $d116, $d117, $d118, $d119, $d120, $d121, $d122, $d123, $d124, $d125, $d126, $d127, $d128, $d129, $d130, $d131, $d132, $d133, $d134, $d135, $d136, $d137, $d138, $d139, $d140, $d141, $d142, $d143, $d144, $d145, $d146, $d147, $d148, $d149, $d150, $d151, $d152, $d153, $d154, $d155, $d156, $d157, $d158, $d159, $d160, $d161, $d162, $d163, $d164, $d165, $d166, $d167, $d168, $d169, $d170, $d171, $d172, $d173, $d174, $d175, $d176, $d177, $d178, $d179, $d180, $d181, $d182, $d183, $d184, $d185, $d186, $d187, $d188, $d189, $d190, $d191, $d192, $d193, $d194, $d195, $d196, $d197, $d198, $d199, d200, d201, d202, d203, d204, d205, d206, d207, d208, d209;
        double[] r2, r3, r4, r6, r7, r8;
        org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException $r9;
        java.lang.Object[] $r10;
        int $i0, i2;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.lang.Integer $r12;
        byte $b1;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter0: double[][];

        d0 := @parameter1: double;

        r2 = r1[0];

        r3 = r1[1];

        r4 = r1[2];

        d200 = r2[0];

        d201 = r2[1];

        d202 = r2[2];

        d203 = r3[0];

        d204 = r3[1];

        d205 = r3[2];

        d206 = r4[0];

        d207 = r4[1];

        d208 = r4[2];

        d209 = 0.0;

        r5 = newmultiarray (double)[3][3];

        r6 = r5[0];

        r7 = r5[1];

        r8 = r5[2];

        i2 = 0;

     label1:
        i2 = i2 + 1;

        if i2 >= 11 goto label3;

        $d20 = r2[0];

        $d23 = $d20 * d200;

        $d21 = r3[0];

        $d22 = $d21 * d203;

        $d26 = $d23 + $d22;

        $d24 = r4[0];

        $d25 = $d24 * d206;

        d2 = $d26 + $d25;

        $d27 = r2[1];

        $d30 = $d27 * d200;

        $d28 = r3[1];

        $d29 = $d28 * d203;

        $d33 = $d30 + $d29;

        $d31 = r4[1];

        $d32 = $d31 * d206;

        d3 = $d33 + $d32;

        $d34 = r2[2];

        $d37 = $d34 * d200;

        $d35 = r3[2];

        $d36 = $d35 * d203;

        $d40 = $d37 + $d36;

        $d38 = r4[2];

        $d39 = $d38 * d206;

        d4 = $d40 + $d39;

        $d41 = r2[0];

        $d44 = $d41 * d201;

        $d42 = r3[0];

        $d43 = $d42 * d204;

        $d47 = $d44 + $d43;

        $d45 = r4[0];

        $d46 = $d45 * d207;

        d5 = $d47 + $d46;

        $d48 = r2[1];

        $d51 = $d48 * d201;

        $d49 = r3[1];

        $d50 = $d49 * d204;

        $d54 = $d51 + $d50;

        $d52 = r4[1];

        $d53 = $d52 * d207;

        d6 = $d54 + $d53;

        $d55 = r2[2];

        $d58 = $d55 * d201;

        $d56 = r3[2];

        $d57 = $d56 * d204;

        $d61 = $d58 + $d57;

        $d59 = r4[2];

        $d60 = $d59 * d207;

        d7 = $d61 + $d60;

        $d62 = r2[0];

        $d65 = $d62 * d202;

        $d63 = r3[0];

        $d64 = $d63 * d205;

        $d68 = $d65 + $d64;

        $d66 = r4[0];

        $d67 = $d66 * d208;

        d8 = $d68 + $d67;

        $d69 = r2[1];

        $d72 = $d69 * d202;

        $d70 = r3[1];

        $d71 = $d70 * d205;

        $d75 = $d72 + $d71;

        $d73 = r4[1];

        $d74 = $d73 * d208;

        d9 = $d75 + $d74;

        $d76 = r2[2];

        $d79 = $d76 * d202;

        $d77 = r3[2];

        $d78 = $d77 * d205;

        $d82 = $d79 + $d78;

        $d80 = r4[2];

        $d81 = $d80 * d208;

        d10 = $d82 + $d81;

        $d84 = d200 * d2;

        $d83 = d201 * d3;

        $d86 = $d84 + $d83;

        $d85 = d202 * d4;

        $d88 = $d86 + $d85;

        $d87 = r2[0];

        $d89 = $d88 - $d87;

        $d90 = 0.5 * $d89;

        $d91 = d200 - $d90;

        r6[0] = $d91;

        $d93 = d200 * d5;

        $d92 = d201 * d6;

        $d95 = $d93 + $d92;

        $d94 = d202 * d7;

        $d97 = $d95 + $d94;

        $d96 = r2[1];

        $d98 = $d97 - $d96;

        $d99 = 0.5 * $d98;

        $d100 = d201 - $d99;

        r6[1] = $d100;

        $d102 = d200 * d8;

        $d101 = d201 * d9;

        $d104 = $d102 + $d101;

        $d103 = d202 * d10;

        $d106 = $d104 + $d103;

        $d105 = r2[2];

        $d107 = $d106 - $d105;

        $d108 = 0.5 * $d107;

        $d109 = d202 - $d108;

        r6[2] = $d109;

        $d111 = d203 * d2;

        $d110 = d204 * d3;

        $d113 = $d111 + $d110;

        $d112 = d205 * d4;

        $d115 = $d113 + $d112;

        $d114 = r3[0];

        $d116 = $d115 - $d114;

        $d117 = 0.5 * $d116;

        $d118 = d203 - $d117;

        r7[0] = $d118;

        $d120 = d203 * d5;

        $d119 = d204 * d6;

        $d122 = $d120 + $d119;

        $d121 = d205 * d7;

        $d124 = $d122 + $d121;

        $d123 = r3[1];

        $d125 = $d124 - $d123;

        $d126 = 0.5 * $d125;

        $d127 = d204 - $d126;

        r7[1] = $d127;

        $d129 = d203 * d8;

        $d128 = d204 * d9;

        $d131 = $d129 + $d128;

        $d130 = d205 * d10;

        $d133 = $d131 + $d130;

        $d132 = r3[2];

        $d134 = $d133 - $d132;

        $d135 = 0.5 * $d134;

        $d136 = d205 - $d135;

        r7[2] = $d136;

        $d138 = d206 * d2;

        $d137 = d207 * d3;

        $d140 = $d138 + $d137;

        $d139 = d208 * d4;

        $d142 = $d140 + $d139;

        $d141 = r4[0];

        $d143 = $d142 - $d141;

        $d144 = 0.5 * $d143;

        $d145 = d206 - $d144;

        r8[0] = $d145;

        $d147 = d206 * d5;

        $d146 = d207 * d6;

        $d149 = $d147 + $d146;

        $d148 = d208 * d7;

        $d151 = $d149 + $d148;

        $d150 = r4[1];

        $d152 = $d151 - $d150;

        $d153 = 0.5 * $d152;

        $d154 = d207 - $d153;

        r8[1] = $d154;

        $d156 = d206 * d8;

        $d155 = d207 * d9;

        $d158 = $d156 + $d155;

        $d157 = d208 * d10;

        $d160 = $d158 + $d157;

        $d159 = r4[2];

        $d161 = $d160 - $d159;

        $d162 = 0.5 * $d161;

        $d163 = d208 - $d162;

        r8[2] = $d163;

        $d165 = r6[0];

        $d164 = r2[0];

        d11 = $d165 - $d164;

        $d167 = r6[1];

        $d166 = r2[1];

        d12 = $d167 - $d166;

        $d169 = r6[2];

        $d168 = r2[2];

        d13 = $d169 - $d168;

        $d171 = r7[0];

        $d170 = r3[0];

        d14 = $d171 - $d170;

        $d173 = r7[1];

        $d172 = r3[1];

        d15 = $d173 - $d172;

        $d175 = r7[2];

        $d174 = r3[2];

        d16 = $d175 - $d174;

        $d177 = r8[0];

        $d176 = r4[0];

        d17 = $d177 - $d176;

        $d179 = r8[1];

        $d178 = r4[1];

        d18 = $d179 - $d178;

        $d181 = r8[2];

        $d180 = r4[2];

        d19 = $d181 - $d180;

        $d183 = d11 * d11;

        $d182 = d12 * d12;

        $d185 = $d183 + $d182;

        $d184 = d13 * d13;

        $d187 = $d185 + $d184;

        $d186 = d14 * d14;

        $d189 = $d187 + $d186;

        $d188 = d15 * d15;

        $d191 = $d189 + $d188;

        $d190 = d16 * d16;

        $d193 = $d191 + $d190;

        $d192 = d17 * d17;

        $d195 = $d193 + $d192;

        $d194 = d18 * d18;

        $d197 = $d195 + $d194;

        $d196 = d19 * d19;

        d1 = $d197 + $d196;

        $d198 = d1 - d209;

        $d199 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d198);

        $b1 = $d199 cmpg d0;

        if $b1 > 0 goto label2;

        return r5;

     label2:
        d200 = r6[0];

        d201 = r6[1];

        d202 = r6[2];

        d203 = r7[0];

        d204 = r7[1];

        d205 = r7[2];

        d206 = r8[0];

        d207 = r8[1];

        d208 = r8[2];

        d209 = d1;

        goto label1;

     label3:
        $r9 = new org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats UNABLE_TO_ORTHOGONOLIZE_MATRIX>;

        $r10 = newarray (java.lang.Object)[1];

        $i0 = i2 - 1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r10[0] = $r12;

        specialinvoke $r9.<org.apache.commons.math3.geometry.euclidean.threed.NotARotationMatrixException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;
    }

    public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Rotation, org.apache.commons.math3.geometry.euclidean.threed.Rotation)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation r0, r1, $r2;
        double $d0;

        r0 := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        r1 := @parameter1: org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation applyInverseTo(org.apache.commons.math3.geometry.euclidean.threed.Rotation)>(r1);

        $d0 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: double getAngle()>();

        return $d0;
    }

    static void <clinit>()
    {
        org.apache.commons.math3.geometry.euclidean.threed.Rotation $r0;

        <org.apache.commons.math3.geometry.euclidean.threed.Rotation: long serialVersionUID> = -2153622329907944313L;

        $r0 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation;

        specialinvoke $r0.<org.apache.commons.math3.geometry.euclidean.threed.Rotation: void <init>(double,double,double,double,boolean)>(1.0, 0.0, 0.0, 0.0, 0);

        <org.apache.commons.math3.geometry.euclidean.threed.Rotation: org.apache.commons.math3.geometry.euclidean.threed.Rotation IDENTITY> = $r0;

        return;
    }
}
