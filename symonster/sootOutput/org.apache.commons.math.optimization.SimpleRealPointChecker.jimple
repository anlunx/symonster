public class org.apache.commons.math.optimization.SimpleRealPointChecker extends java.lang.Object implements org.apache.commons.math.optimization.RealConvergenceChecker
{
    private static final double DEFAULT_RELATIVE_THRESHOLD;
    private static final double DEFAULT_ABSOLUTE_THRESHOLD;
    private final double relativeThreshold;
    private final double absoluteThreshold;

    public void <init>()
    {
        org.apache.commons.math.optimization.SimpleRealPointChecker r0;

        r0 := @this: org.apache.commons.math.optimization.SimpleRealPointChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double relativeThreshold> = 1.1102230246251565E-14;

        r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double absoluteThreshold> = 2.2250738585072014E-306;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.optimization.SimpleRealPointChecker r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.optimization.SimpleRealPointChecker;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double relativeThreshold> = d0;

        r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double absoluteThreshold> = d1;

        return;
    }

    public boolean converged(int, org.apache.commons.math.optimization.RealPointValuePair, org.apache.commons.math.optimization.RealPointValuePair)
    {
        org.apache.commons.math.optimization.SimpleRealPointChecker r0;
        int i0, $i1, i4;
        org.apache.commons.math.optimization.RealPointValuePair r1, r2;
        double[] r3, r4;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        byte $b2, $b3;

        r0 := @this: org.apache.commons.math.optimization.SimpleRealPointChecker;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.commons.math.optimization.RealPointValuePair;

        r2 := @parameter2: org.apache.commons.math.optimization.RealPointValuePair;

        r3 = virtualinvoke r1.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPoint()>();

        r4 = virtualinvoke r2.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPoint()>();

        i4 = 0;

     label1:
        $i1 = lengthof r3;

        if i4 >= $i1 goto label3;

        $d3 = r3[i4];

        $d2 = r4[i4];

        $d4 = $d3 - $d2;

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $d5 = r3[i4];

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d5);

        $d7 = r4[i4];

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d7);

        d1 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d6, $d8);

        $d9 = r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double relativeThreshold>;

        $d10 = d1 * $d9;

        $b2 = d0 cmpl $d10;

        if $b2 <= 0 goto label2;

        $d11 = r0.<org.apache.commons.math.optimization.SimpleRealPointChecker: double absoluteThreshold>;

        $b3 = d0 cmpl $d11;

        if $b3 <= 0 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.optimization.SimpleRealPointChecker: double DEFAULT_ABSOLUTE_THRESHOLD> = 2.2250738585072014E-306;

        <org.apache.commons.math.optimization.SimpleRealPointChecker: double DEFAULT_RELATIVE_THRESHOLD> = 1.1102230246251565E-14;

        return;
    }
}
