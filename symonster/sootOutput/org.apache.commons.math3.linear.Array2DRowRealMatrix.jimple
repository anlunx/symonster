public class org.apache.commons.math3.linear.Array2DRowRealMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable
{
    private static final long serialVersionUID;
    private double[][] data;

    public void <init>()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        return;
    }

    public void <init>(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, i1;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>(int,int)>(i0, i1);

        $r1 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data> = $r1;

        return;
    }

    public void <init>(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[][];

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void copyIn(double[][])>(r1);

        return;
    }

    public void <init>(double[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] r1;
        boolean z0;
        int i0, i1, $i2, $i3, i4;
        double[] $r2, $r3, $r5;
        org.apache.commons.math3.exception.DimensionMismatchException $r4;
        org.apache.commons.math3.exception.NoDataException $r6, $r8;
        org.apache.commons.math3.exception.util.LocalizedFormats $r7, $r9;
        org.apache.commons.math3.exception.NullArgumentException $r10;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[][];

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        if z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void copyIn(double[][])>(r1);

        goto label8;

     label1:
        if r1 != null goto label2;

        $r10 = new org.apache.commons.math3.exception.NullArgumentException;

        specialinvoke $r10.<org.apache.commons.math3.exception.NullArgumentException: void <init>()>();

        throw $r10;

     label2:
        i0 = lengthof r1;

        if i0 != 0 goto label3;

        $r8 = new org.apache.commons.math3.exception.NoDataException;

        $r9 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r8.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r9);

        throw $r8;

     label3:
        $r2 = r1[0];

        i1 = lengthof $r2;

        if i1 != 0 goto label4;

        $r6 = new org.apache.commons.math3.exception.NoDataException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r6.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r7);

        throw $r6;

     label4:
        i4 = 1;

     label5:
        if i4 >= i0 goto label7;

        $r3 = r1[i4];

        $i2 = lengthof $r3;

        if $i2 == i1 goto label6;

        $r4 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r5 = r1[i4];

        $i3 = lengthof $r5;

        specialinvoke $r4.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i1);

        throw $r4;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data> = r1;

     label8:
        return;
    }

    public void <init>(double[])
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[] r1, $r4;
        int i0, i1;
        double[][] $r2, $r3;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[];

        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void <init>()>();

        i0 = lengthof r1;

        $r2 = newmultiarray (double)[i0][1];

        r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r4 = $r3[i1];

        $d0 = r1[i1];

        $r4[0] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0, $r1;
        int i0, i1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(int,int)>(i0, i1);

        return $r1;
    }

    public org.apache.commons.math3.linear.RealMatrix copy()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0, $r1;
        double[][] $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r1 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r2 = specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] copyOut()>();

        specialinvoke $r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>($r2, 0);

        return $r1;
    }

    public org.apache.commons.math3.linear.Array2DRowRealMatrix add(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0, r1, $r6;
        int i0, i1, i2, i3;
        double[][] r2, $r7, $r8;
        double[] r3, r4, r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkAdditionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r3 = $r7[i2];

        $r8 = r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r4 = $r8[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = r3[i3];

        $d0 = r4[i3];

        $d2 = $d1 + $d0;

        r5[i3] = $d2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math3.linear.Array2DRowRealMatrix subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0, r1, $r6;
        int i0, i1, i2, i3;
        double[][] r2, $r7, $r8;
        double[] r3, r4, r5;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubtractionCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r3 = $r7[i2];

        $r8 = r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r4 = $r8[i2];

        r5 = r2[i2];

        i3 = 0;

     label2:
        if i3 >= i1 goto label3;

        $d1 = r3[i3];

        $d0 = r4[i3];

        $d2 = $d1 - $d0;

        r5[i3] = $d2;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r6;
    }

    public org.apache.commons.math3.linear.Array2DRowRealMatrix multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0, r1, $r6;
        int i0, i1, i2, i3, i4, i5, i6;
        double[][] r2, r4, $r7;
        double[] r3, r5, $r8, $r9;
        double $d0, $d1, $d2, $d3, d4;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMultiplicationCompatible(org.apache.commons.math3.linear.AnyMatrix,org.apache.commons.math3.linear.AnyMatrix)>(r0, r1);

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        i2 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        r2 = newmultiarray (double)[i0][i1];

        r3 = newarray (double)[i2];

        r4 = r1.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        i3 = 0;

     label1:
        if i3 >= i1 goto label8;

        i4 = 0;

     label2:
        if i4 >= i2 goto label3;

        $r9 = r4[i4];

        $d3 = $r9[i3];

        r3[i4] = $d3;

        i4 = i4 + 1;

        goto label2;

     label3:
        i5 = 0;

     label4:
        if i5 >= i0 goto label7;

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r5 = $r7[i5];

        d4 = 0.0;

        i6 = 0;

     label5:
        if i6 >= i2 goto label6;

        $d1 = r5[i6];

        $d0 = r3[i6];

        $d2 = $d1 * $d0;

        d4 = d4 + $d2;

        i6 = i6 + 1;

        goto label5;

     label6:
        $r8 = r2[i5];

        $r8[i3] = d4;

        i5 = i5 + 1;

        goto label4;

     label7:
        i3 = i3 + 1;

        goto label1;

     label8:
        $r6 = new org.apache.commons.math3.linear.Array2DRowRealMatrix;

        specialinvoke $r6.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void <init>(double[][],boolean)>(r2, 0);

        return $r6;
    }

    public double[][] getData()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r1 = specialinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] copyOut()>();

        return $r1;
    }

    public double[][] getDataRef()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] $r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        return $r1;
    }

    public void setSubMatrix(double[][], int, int) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] r1, $r2, $r4, $r5, $r7;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        double[] $r3, $r6, $r8, $r9, $r11;
        org.apache.commons.math3.exception.DimensionMismatchException $r10;
        org.apache.commons.math3.exception.NoDataException $r12, $r14;
        org.apache.commons.math3.exception.util.LocalizedFormats $r13, $r15, $r18, $r22;
        org.apache.commons.math3.exception.MathIllegalStateException $r16, $r20;
        java.lang.Object[] $r17, $r21;
        java.lang.Integer $r19, $r23;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[][];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        if $r2 != null goto label8;

        if i0 <= 0 goto label1;

        $r20 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r22 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_ROWS_NOT_INITIALIZED_YET>;

        $r21 = newarray (java.lang.Object)[1];

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r21[0] = $r23;

        specialinvoke $r20.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r22, $r21);

        throw $r20;

     label1:
        if i1 <= 0 goto label2;

        $r16 = new org.apache.commons.math3.exception.MathIllegalStateException;

        $r18 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats FIRST_COLUMNS_NOT_INITIALIZED_YET>;

        $r17 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r17[0] = $r19;

        specialinvoke $r16.<org.apache.commons.math3.exception.MathIllegalStateException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r18, $r17);

        throw $r16;

     label2:
        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        i2 = lengthof r1;

        if i2 != 0 goto label3;

        $r14 = new org.apache.commons.math3.exception.NoDataException;

        $r15 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_ROW>;

        specialinvoke $r14.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r15);

        throw $r14;

     label3:
        $r3 = r1[0];

        i3 = lengthof $r3;

        if i3 != 0 goto label4;

        $r12 = new org.apache.commons.math3.exception.NoDataException;

        $r13 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats AT_LEAST_ONE_COLUMN>;

        specialinvoke $r12.<org.apache.commons.math3.exception.NoDataException: void <init>(org.apache.commons.math3.exception.util.Localizable)>($r13);

        throw $r12;

     label4:
        $i4 = lengthof r1;

        $r4 = newmultiarray (double)[$i4][i3];

        r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data> = $r4;

        i9 = 0;

     label5:
        $r5 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $i5 = lengthof $r5;

        if i9 >= $i5 goto label7;

        $r6 = r1[i9];

        $i6 = lengthof $r6;

        if $i6 == i3 goto label6;

        $r10 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $r11 = r1[i9];

        $i8 = lengthof $r11;

        specialinvoke $r10.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i8, i3);

        throw $r10;

     label6:
        $r9 = r1[i9];

        $r7 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $i7 = i9 + i0;

        $r8 = $r7[$i7];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r8, i1, i3);

        i9 = i9 + 1;

        goto label5;

     label7:
        goto label9;

     label8:
        specialinvoke r0.<org.apache.commons.math3.linear.AbstractRealMatrix: void setSubMatrix(double[][],int,int)>(r1, i0, i1);

     label9:
        return;
    }

    public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, i1;
        double[][] $r1;
        double[] $r2;
        double $d0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r2 = $r1[i0];

        $d0 = $r2[i1];

        return $d0;
    }

    public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, i1;
        double d0;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r2 = $r1[i0];

        $r2[i1] = d0;

        return;
    }

    public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r2 = $r1[i0];

        $d1 = $r2[i1];

        $d2 = $d1 + d0;

        $r2[i1] = $d2;

        return;
    }

    public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, i1;
        double d0, $d1, $d2;
        double[][] $r1;
        double[] $r2;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int)>(r0, i0, i1);

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r2 = $r1[i0];

        $d1 = $r2[i1];

        $d2 = $d1 * d0;

        $r2[i1] = $d2;

        return;
    }

    public int getRowDimension()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] $r1, $r2;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $i0 = lengthof $r2;

     label2:
        return $i0;
    }

    public int getColumnDimension()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] $r1, $r2, $r4;
        double[] $r3, $r5;
        int $i0;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        $r1 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r3 = $r2[0];

        if $r3 != null goto label2;

     label1:
        $i0 = 0;

        goto label3;

     label2:
        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r5 = $r4[0];

        $i0 = lengthof $r5;

     label3:
        return $i0;
    }

    public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[] r1, r2, r3;
        int i0, i1, $i2, $i3, i4, i5;
        double[][] $r4;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i1 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i1);

        throw $r5;

     label1:
        r2 = newarray (double)[i0];

        i4 = 0;

     label2:
        if i4 >= i0 goto label5;

        $r4 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r3 = $r4[i4];

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i1 goto label4;

        $d1 = r3[i5];

        $d0 = r1[i5];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[] r1, r2, $r4;
        int i0, i1, $i2, $i3, i4, i5;
        double[][] $r3;
        double $d0, $d1, $d2, d3;
        org.apache.commons.math3.exception.DimensionMismatchException $r5;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[];

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i2 = lengthof r1;

        if $i2 == i0 goto label1;

        $r5 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i3 = lengthof r1;

        specialinvoke $r5.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i3, i0);

        throw $r5;

     label1:
        r2 = newarray (double)[i1];

        i4 = 0;

     label2:
        if i4 >= i1 goto label5;

        d3 = 0.0;

        i5 = 0;

     label3:
        if i5 >= i0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r4 = $r3[i5];

        $d1 = $r4[i4];

        $d0 = r1[i5];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i5 = i5 + 1;

        goto label3;

     label4:
        r2[i4] = d3;

        i4 = i4 + 1;

        goto label2;

     label5:
        return r2;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r2;
        double $d0, $d1, $d2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i4];

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $d1 = r2[i5];

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i4, i5, $d1);

        r2[i5] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r2;
        double $d0, $d1;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i4];

        i5 = 0;

     label2:
        if i5 >= i1 goto label3;

        $d1 = r2[i5];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i4, i5, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double[] r2;
        double $d0, $d1, $d2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i6];

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $d1 = r2[i7];

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i6, i7, $d1);

        r2[i7] = $d2;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double[] r2;
        double $d0, $d1;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i0;

     label1:
        if i6 > i1 goto label4;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i6];

        i7 = i2;

     label2:
        if i7 > i3 goto label3;

        $d1 = r2[i7];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i6, i7, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double[] r2;
        double $d0, $d1, $d2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i5];

        $d1 = r2[i4];

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i5, i4, $d1);

        r2[i4] = $d2;

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor)
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, $i2, $i3, i4, i5;
        double $d0, $d1;
        double[][] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        $i3 = i0 - 1;

        $i2 = i1 - 1;

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>(i0, i1, 0, $i3, 0, $i2);

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r3 = $r2[i5];

        $d1 = $r3[i4];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i5, i4, $d1);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixChangingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double[] r2;
        double $d0, $d1, $d2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixChangingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        r2 = $r3[i7];

        $d1 = r2[i6];

        $d2 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double visit(int,int,double)>(i7, i6, $d1);

        r2[i6] = $d2;

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixChangingVisitor: double end()>();

        return $d0;
    }

    public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        org.apache.commons.math3.linear.RealMatrixPreservingVisitor r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        double $d0, $d1;
        double[][] $r2;
        double[] $r3;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrixPreservingVisitor;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        staticinvoke <org.apache.commons.math3.linear.MatrixUtils: void checkSubMatrixIndex(org.apache.commons.math3.linear.AnyMatrix,int,int,int,int)>(r0, i0, i1, i2, i3);

        $i4 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        $i5 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void start(int,int,int,int,int,int)>($i4, $i5, i0, i1, i2, i3);

        i6 = i2;

     label1:
        if i6 > i3 goto label4;

        i7 = i0;

     label2:
        if i7 > i1 goto label3;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r3 = $r2[i7];

        $d1 = $r3[i6];

        interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: void visit(int,int,double)>(i7, i6, $d1);

        i7 = i7 + 1;

        goto label2;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrixPreservingVisitor: double end()>();

        return $d0;
    }

    private double[][] copyOut()
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        int i0, $i1, $i2, i3;
        double[][] r1, $r2, $r3;
        double[] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        i0 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getRowDimension()>();

        $i1 = virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: int getColumnDimension()>();

        r1 = newmultiarray (double)[i0][$i1];

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r2 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r6 = $r2[i3];

        $r5 = r1[i3];

        $r3 = r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: double[][] data>;

        $r4 = $r3[i3];

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void copyIn(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.linear.Array2DRowRealMatrix r0;
        double[][] r1;

        r0 := @this: org.apache.commons.math3.linear.Array2DRowRealMatrix;

        r1 := @parameter0: double[][];

        virtualinvoke r0.<org.apache.commons.math3.linear.Array2DRowRealMatrix: void setSubMatrix(double[][],int,int)>(r1, 0, 0);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.Array2DRowRealMatrix: long serialVersionUID> = -1067294169172445528L;

        return;
    }
}
