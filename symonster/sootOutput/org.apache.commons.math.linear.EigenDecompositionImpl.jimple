public class org.apache.commons.math.linear.EigenDecompositionImpl extends java.lang.Object implements org.apache.commons.math.linear.EigenDecomposition
{
    private byte maxIter;
    private double[] main;
    private double[] secondary;
    private org.apache.commons.math.linear.TriDiagonalTransformer transformer;
    private double[] realEigenvalues;
    private double[] imagEigenvalues;
    private org.apache.commons.math.linear.ArrayRealVector[] eigenvectors;
    private org.apache.commons.math.linear.RealMatrix cachedV;
    private org.apache.commons.math.linear.RealMatrix cachedD;
    private org.apache.commons.math.linear.RealMatrix cachedVt;

    public void <init>(org.apache.commons.math.linear.RealMatrix, double) throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix r1, $r6;
        double d0;
        boolean $z0;
        org.apache.commons.math.linear.InvalidMatrixException $r2;
        java.lang.Object[] $r3;
        org.apache.commons.math.exception.util.LocalizedFormats $r4;
        org.apache.commons.math.linear.TriDiagonalTransformer $r5;
        double[][] $r7;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: byte maxIter> = 30;

        $z0 = specialinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl: boolean isSymmetric(org.apache.commons.math.linear.RealMatrix)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl: void transformToTridiagonal(org.apache.commons.math.linear.RealMatrix)>(r1);

        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.TriDiagonalTransformer transformer>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.TriDiagonalTransformer: org.apache.commons.math.linear.RealMatrix getQ()>();

        $r7 = interfaceinvoke $r6.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

        specialinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl: void findEigenVectors(double[][])>($r7);

        goto label2;

     label1:
        $r2 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats ASSYMETRIC_EIGEN_NOT_SUPPORTED>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;

     label2:
        return;
    }

    public void <init>(double[], double[], double) throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        double[] r1, r2, $r5, $r7, $r8;
        double d0;
        int i0, i1;
        double[][] r3;
        java.lang.Object $r4, $r6;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        d0 := @parameter2: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: byte maxIter> = 30;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (double[]) $r4;

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] main> = $r5;

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (double[]) $r6;

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] secondary> = $r7;

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.TriDiagonalTransformer transformer> = null;

        i0 = lengthof r1;

        r3 = newmultiarray (double)[i0][i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = r3[i1];

        $r8[i1] = 1.0;

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.commons.math.linear.EigenDecompositionImpl: void findEigenVectors(double[][])>(r3);

        return;
    }

    private boolean isSymmetric(org.apache.commons.math.linear.RealMatrix)
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix r1;
        int i0, i1, $i2, $i3, i5, i6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        byte $b4;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $i2 = 10 * i0;

        $i3 = $i2 * i1;

        $d3 = (double) $i3;

        d0 = $d3 * 1.1102230246251565E-16;

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        i6 = i5 + 1;

     label2:
        if i6 >= i1 goto label4;

        d1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i5, i6);

        d2 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i6, i5);

        $d4 = d1 - d2;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d4);

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d1);

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d2);

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d6, $d7);

        $d9 = $d8 * d0;

        $b4 = $d5 cmpl $d9;

        if $b4 <= 0 goto label3;

        return 0;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return 1;
    }

    public org.apache.commons.math.linear.RealMatrix getV() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r4, $r7;
        org.apache.commons.math.linear.ArrayRealVector[] $r3, $r5;
        org.apache.commons.math.linear.ArrayRealVector $r6;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedV>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        i0 = lengthof $r3;

        $r4 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedV> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedV>;

        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        $r6 = $r5[i1];

        interfaceinvoke $r7.<org.apache.commons.math.linear.RealMatrix: void setColumnVector(int,org.apache.commons.math.linear.RealVector)>(i1, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedV>;

        return $r2;
    }

    public org.apache.commons.math.linear.RealMatrix getD() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r4;
        double[] $r3;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedD>;

        if $r1 != null goto label1;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r4 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealDiagonalMatrix(double[])>($r3);

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedD> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedD>;

        return $r2;
    }

    public org.apache.commons.math.linear.RealMatrix getVT() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        int i0, i1;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r4, $r7;
        org.apache.commons.math.linear.ArrayRealVector[] $r3, $r5;
        org.apache.commons.math.linear.ArrayRealVector $r6;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedVt>;

        if $r1 != null goto label2;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        i0 = lengthof $r3;

        $r4 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i0, i0);

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedVt> = $r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r7 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedVt>;

        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        $r6 = $r5[i1];

        interfaceinvoke $r7.<org.apache.commons.math.linear.RealMatrix: void setRowVector(int,org.apache.commons.math.linear.RealVector)>(i1, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedVt>;

        return $r2;
    }

    public double[] getRealEigenvalues() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public double getRealEigenvalue(int) throws org.apache.commons.math.linear.InvalidMatrixException, java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double[] getImagEigenvalues() throws org.apache.commons.math.linear.InvalidMatrixException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        double[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] imagEigenvalues>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (double[]) $r2;

        return $r3;
    }

    public double getImagEigenvalue(int) throws org.apache.commons.math.linear.InvalidMatrixException, java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] imagEigenvalues>;

        $d0 = $r1[i0];

        return $d0;
    }

    public org.apache.commons.math.linear.RealVector getEigenvector(int) throws org.apache.commons.math.linear.InvalidMatrixException, java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        int i0;
        org.apache.commons.math.linear.ArrayRealVector[] $r1;
        org.apache.commons.math.linear.ArrayRealVector $r2;
        org.apache.commons.math.linear.AbstractRealVector $r3;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        $r2 = $r1[i0];

        $r3 = virtualinvoke $r2.<org.apache.commons.math.linear.ArrayRealVector: org.apache.commons.math.linear.AbstractRealVector copy()>();

        return $r3;
    }

    public double getDeterminant()
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        double[] r1;
        int i0, i1;
        double d0, d1;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        d1 = 1.0;

        r1 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        d0 = r1[i1];

        d1 = d1 * d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }

    public org.apache.commons.math.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        org.apache.commons.math.linear.EigenDecompositionImpl$Solver $r1;
        org.apache.commons.math.linear.ArrayRealVector[] $r2;
        double[] $r3, $r4;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        $r1 = new org.apache.commons.math.linear.EigenDecompositionImpl$Solver;

        $r4 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] imagEigenvalues>;

        $r2 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        specialinvoke $r1.<org.apache.commons.math.linear.EigenDecompositionImpl$Solver: void <init>(double[],double[],org.apache.commons.math.linear.ArrayRealVector[],org.apache.commons.math.linear.EigenDecompositionImpl$1)>($r4, $r3, $r2, null);

        return $r1;
    }

    private void transformToTridiagonal(org.apache.commons.math.linear.RealMatrix)
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix r1;
        org.apache.commons.math.linear.TriDiagonalTransformer $r2, $r3, $r5;
        double[] $r4, $r6;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        $r2 = new org.apache.commons.math.linear.TriDiagonalTransformer;

        specialinvoke $r2.<org.apache.commons.math.linear.TriDiagonalTransformer: void <init>(org.apache.commons.math.linear.RealMatrix)>(r1);

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.TriDiagonalTransformer transformer> = $r2;

        $r3 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.TriDiagonalTransformer transformer>;

        $r4 = virtualinvoke $r3.<org.apache.commons.math.linear.TriDiagonalTransformer: double[] getMainDiagonalRef()>();

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] main> = $r4;

        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.TriDiagonalTransformer transformer>;

        $r6 = virtualinvoke $r5.<org.apache.commons.math.linear.TriDiagonalTransformer: double[] getSecondaryDiagonalRef()>();

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] secondary> = $r6;

        return;
    }

    private void findEigenVectors(double[][])
    {
        org.apache.commons.math.linear.EigenDecompositionImpl r0;
        double[][] r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i11, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i26, i32, i33, i34, i35, i36, i37, $i38, i39, i40, i41, i42, i43, i44, i45, i46, i47, i48;
        double[] r3, $r5, $r6, $r7, $r8, $r9, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, r55;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, $d65, $d66, $d67, $d68, $d69, $d70, $d71, $d72, $d73, $d74, $d75, $d76, $d77, $d78, $d79, $d80, $d81, $d82, d83, d84, d85, d86, d87, d88, d89, d90, d91, d92, d93, d94, d95, d96, d97, d98;
        java.lang.Object $r4;
        byte $b5, $b6, $b7, $b8, $b9, $b10, $b12, $b13, $b15, $b18, $b25, $b27, $b28, $b29, $b30, $b31;
        org.apache.commons.math.linear.ArrayRealVector[] $r10, $r12;
        org.apache.commons.math.linear.ArrayRealVector $r11;
        org.apache.commons.math.linear.InvalidMatrixException $r44;
        org.apache.commons.math.MaxIterationsExceededException $r45;

        r0 := @this: org.apache.commons.math.linear.EigenDecompositionImpl;

        r1 := @parameter0: double[][];

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (double[][]) $r4;

        $r5 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] main>;

        i0 = lengthof $r5;

        $r6 = newarray (double)[i0];

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues> = $r6;

        $r7 = newarray (double)[i0];

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] imagEigenvalues> = $r7;

        r3 = newarray (double)[i0];

        i32 = 0;

     label01:
        $i1 = i0 - 1;

        if i32 >= $i1 goto label02;

        $r53 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r52 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] main>;

        $d81 = $r52[i32];

        $r53[i32] = $d81;

        $r54 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] secondary>;

        $d82 = $r54[i32];

        r3[i32] = $d82;

        i32 = i32 + 1;

        goto label01;

     label02:
        $r9 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i3 = i0 - 1;

        $r8 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] main>;

        $i2 = i0 - 1;

        $d1 = $r8[$i2];

        $r9[$i3] = $d1;

        $i4 = i0 - 1;

        r3[$i4] = 0.0;

        d83 = 0.0;

        i33 = 0;

     label03:
        if i33 >= i0 goto label06;

        $r50 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d75 = $r50[i33];

        $d76 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d75);

        $b30 = $d76 cmpl d83;

        if $b30 <= 0 goto label04;

        $r51 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d80 = $r51[i33];

        d83 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d80);

     label04:
        $d77 = r3[i33];

        $d78 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d77);

        $b31 = $d78 cmpl d83;

        if $b31 <= 0 goto label05;

        $d79 = r3[i33];

        d83 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d79);

     label05:
        i33 = i33 + 1;

        goto label03;

     label06:
        $b5 = d83 cmpl 0.0;

        if $b5 == 0 goto label10;

        i34 = 0;

     label07:
        if i34 >= i0 goto label10;

        $r48 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d69 = $r48[i34];

        $d70 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d69);

        $d71 = 1.1102230246251565E-16 * d83;

        $b28 = $d70 cmpg $d71;

        if $b28 > 0 goto label08;

        $r49 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r49[i34] = 0.0;

     label08:
        $d72 = r3[i34];

        $d73 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d72);

        $d74 = 1.1102230246251565E-16 * d83;

        $b29 = $d73 cmpg $d74;

        if $b29 > 0 goto label09;

        r3[i34] = 0.0;

     label09:
        i34 = i34 + 1;

        goto label07;

     label10:
        i35 = 0;

     label11:
        if i35 >= i0 goto label28;

        i36 = 0;

     label12:
        i37 = i35;

     label13:
        $i38 = i0 - 1;

        if i37 >= $i38 goto label15;

        $r46 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d62 = $r46[i37];

        $d63 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d62);

        $r47 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i26 = i37 + 1;

        $d64 = $r47[$i26];

        $d65 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d64);

        d84 = $d63 + $d65;

        $d66 = r3[i37];

        $d67 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d66);

        $d68 = $d67 + d84;

        $b27 = $d68 cmpl d84;

        if $b27 != 0 goto label14;

        goto label15;

     label14:
        i37 = i37 + 1;

        goto label13;

     label15:
        if i37 == i35 goto label27;

        $b10 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: byte maxIter>;

        if i36 != $b10 goto label16;

        $r44 = new org.apache.commons.math.linear.InvalidMatrixException;

        $r45 = new org.apache.commons.math.MaxIterationsExceededException;

        $b25 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: byte maxIter>;

        specialinvoke $r45.<org.apache.commons.math.MaxIterationsExceededException: void <init>(int)>($b25);

        specialinvoke $r44.<org.apache.commons.math.linear.InvalidMatrixException: void <init>(java.lang.Throwable)>($r45);

        throw $r44;

     label16:
        i36 = i36 + 1;

        $r28 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i11 = i35 + 1;

        $d13 = $r28[$i11];

        $r29 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d12 = $r29[i35];

        $d16 = $d13 - $d12;

        $d14 = r3[i35];

        $d15 = 2.0 * $d14;

        d85 = $d16 / $d15;

        $d17 = d85 * d85;

        $d18 = 1.0 + $d17;

        d86 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d18);

        $b12 = d85 cmpg 0.0;

        if $b12 >= 0 goto label17;

        $r42 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d57 = $r42[i37];

        $r43 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d56 = $r43[i35];

        $d61 = $d57 - $d56;

        $d59 = r3[i35];

        $d58 = d85 - d86;

        $d60 = $d59 / $d58;

        d87 = $d61 + $d60;

        goto label18;

     label17:
        $r30 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d20 = $r30[i37];

        $r31 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d19 = $r31[i35];

        $d24 = $d20 - $d19;

        $d22 = r3[i35];

        $d21 = d85 + d86;

        $d23 = $d22 / $d21;

        d87 = $d24 + $d23;

     label18:
        d88 = 0.0;

        d89 = 1.0;

        d90 = 1.0;

        i39 = i37 - 1;

     label19:
        if i39 < i35 goto label25;

        $d27 = r3[i39];

        d91 = d89 * $d27;

        $d28 = r3[i39];

        d0 = d90 * $d28;

        $d29 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d91);

        $d30 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d87);

        $b15 = $d29 cmpl $d30;

        if $b15 < 0 goto label20;

        d92 = d87 / d91;

        $d53 = d92 * d92;

        $d54 = $d53 + 1.0;

        d86 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d54);

        $i24 = i39 + 1;

        $d55 = d91 * d86;

        r3[$i24] = $d55;

        d89 = 1.0 / d86;

        d90 = d92 * d89;

        goto label21;

     label20:
        d93 = d91 / d87;

        $d31 = d93 * d93;

        $d32 = $d31 + 1.0;

        d86 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d32);

        $i16 = i39 + 1;

        $d33 = d87 * d86;

        r3[$i16] = $d33;

        d90 = 1.0 / d86;

        d89 = d93 * d90;

     label21:
        $i17 = i39 + 1;

        $d34 = r3[$i17];

        $b18 = $d34 cmpl 0.0;

        if $b18 != 0 goto label22;

        $r41 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i23 = i39 + 1;

        $d51 = $r41[$i23];

        $d52 = $d51 - d88;

        $r41[$i23] = $d52;

        r3[i37] = 0.0;

        goto label25;

     label22:
        $r33 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i19 = i39 + 1;

        $d35 = $r33[$i19];

        d94 = $d35 - d88;

        $r34 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d36 = $r34[i39];

        $d37 = $d36 - d94;

        $d40 = $d37 * d89;

        $d38 = 2.0 * d90;

        $d39 = $d38 * d0;

        d86 = $d40 + $d39;

        d88 = d89 * d86;

        $r35 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $i20 = i39 + 1;

        $d41 = d94 + d88;

        $r35[$i20] = $d41;

        $d42 = d90 * d86;

        d87 = $d42 - d0;

        i40 = 0;

     label23:
        if i40 >= i0 goto label24;

        $r36 = r2[i40];

        $i21 = i39 + 1;

        d95 = $r36[$i21];

        $r38 = r2[i40];

        $i22 = i39 + 1;

        $r37 = r2[i40];

        $d43 = $r37[i39];

        $d45 = d89 * $d43;

        $d44 = d90 * d95;

        $d46 = $d45 + $d44;

        $r38[$i22] = $d46;

        $r40 = r2[i40];

        $r39 = r2[i40];

        $d47 = $r39[i39];

        $d49 = d90 * $d47;

        $d48 = d89 * d95;

        $d50 = $d49 - $d48;

        $r40[i39] = $d50;

        i40 = i40 + 1;

        goto label23;

     label24:
        i39 = i39 + -1;

        goto label19;

     label25:
        $b13 = d86 cmpl 0.0;

        if $b13 != 0 goto label26;

        if i39 < i35 goto label26;

        goto label27;

     label26:
        $r32 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d25 = $r32[i35];

        $d26 = $d25 - d88;

        $r32[i35] = $d26;

        r3[i35] = d87;

        r3[i37] = 0.0;

     label27:
        if i37 != i35 goto label12;

        i35 = i35 + 1;

        goto label11;

     label28:
        i41 = 0;

     label29:
        if i41 >= i0 goto label35;

        i42 = i41;

        $r18 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        d96 = $r18[i41];

        i43 = i41 + 1;

     label30:
        if i43 >= i0 goto label32;

        $r26 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d11 = $r26[i43];

        $b9 = $d11 cmpl d96;

        if $b9 <= 0 goto label31;

        i42 = i43;

        $r27 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        d96 = $r27[i43];

     label31:
        i43 = i43 + 1;

        goto label30;

     label32:
        if i42 == i41 goto label34;

        $r20 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r19 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d9 = $r19[i41];

        $r20[i42] = $d9;

        $r21 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r21[i41] = d96;

        i44 = 0;

     label33:
        if i44 >= i0 goto label34;

        $r22 = r2[i44];

        d97 = $r22[i41];

        $r24 = r2[i44];

        $r23 = r2[i44];

        $d10 = $r23[i42];

        $r24[i41] = $d10;

        $r25 = r2[i44];

        $r25[i42] = d97;

        i44 = i44 + 1;

        goto label33;

     label34:
        i41 = i41 + 1;

        goto label29;

     label35:
        d98 = 0.0;

        i45 = 0;

     label36:
        if i45 >= i0 goto label38;

        $r16 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d6 = $r16[i45];

        $d7 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d6);

        $b8 = $d7 cmpl d98;

        if $b8 <= 0 goto label37;

        $r17 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d8 = $r17[i45];

        d98 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d8);

     label37:
        i45 = i45 + 1;

        goto label36;

     label38:
        $b6 = d98 cmpl 0.0;

        if $b6 == 0 goto label41;

        i46 = 0;

     label39:
        if i46 >= i0 goto label41;

        $r14 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $d3 = $r14[i46];

        $d4 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d3);

        $d5 = 1.1102230246251565E-16 * d98;

        $b7 = $d4 cmpg $d5;

        if $b7 >= 0 goto label40;

        $r15 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: double[] realEigenvalues>;

        $r15[i46] = 0.0;

     label40:
        i46 = i46 + 1;

        goto label39;

     label41:
        $r10 = newarray (org.apache.commons.math.linear.ArrayRealVector)[i0];

        r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors> = $r10;

        r55 = newarray (double)[i0];

        i47 = 0;

     label42:
        if i47 >= i0 goto label45;

        i48 = 0;

     label43:
        if i48 >= i0 goto label44;

        $r13 = r2[i48];

        $d2 = $r13[i47];

        r55[i48] = $d2;

        i48 = i48 + 1;

        goto label43;

     label44:
        $r12 = r0.<org.apache.commons.math.linear.EigenDecompositionImpl: org.apache.commons.math.linear.ArrayRealVector[] eigenvectors>;

        $r11 = new org.apache.commons.math.linear.ArrayRealVector;

        specialinvoke $r11.<org.apache.commons.math.linear.ArrayRealVector: void <init>(double[])>(r55);

        $r12[i47] = $r11;

        i47 = i47 + 1;

        goto label42;

     label45:
        return;
    }
}
