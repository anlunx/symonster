public class org.apache.commons.math3.distribution.TriangularDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution
{
    private static final long serialVersionUID;
    private final double a;
    private final double b;
    private final double c;
    private final double solverAbsoluteAccuracy;

    public void <init>(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double d0, d1, d2;
        org.apache.commons.math3.random.Well19937c $r1;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = new org.apache.commons.math3.random.Well19937c;

        specialinvoke $r1.<org.apache.commons.math3.random.Well19937c: void <init>()>();

        specialinvoke r0.<org.apache.commons.math3.distribution.TriangularDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator,double,double,double)>($r1, d0, d1, d2);

        return;
    }

    public void <init>(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NumberIsTooSmallException
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        org.apache.commons.math3.random.RandomGenerator r1;
        double d0, d1, d2, $d3, $d4, $d5;
        byte $b0, $b1, $b2;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r2, $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r3, $r7, $r11;
        java.lang.Double $r4, $r5, $r8, $r9, $r12, $r13;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r6;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        r1 := @parameter0: org.apache.commons.math3.random.RandomGenerator;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        specialinvoke r0.<org.apache.commons.math3.distribution.AbstractRealDistribution: void <init>(org.apache.commons.math3.random.RandomGenerator)>(r1);

        $b0 = d0 cmpl d2;

        if $b0 < 0 goto label1;

        $r10 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats LOWER_BOUND_NOT_BELOW_UPPER_BOUND>;

        $r12 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        specialinvoke $r10.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r11, $r12, $r13, 0);

        throw $r10;

     label1:
        $b1 = d1 cmpg d0;

        if $b1 >= 0 goto label2;

        $r6 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r7 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_SMALL>;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        specialinvoke $r6.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r7, $r8, $r9, 1);

        throw $r6;

     label2:
        $b2 = d1 cmpl d2;

        if $b2 <= 0 goto label3;

        $r2 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r3 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats NUMBER_TOO_LARGE>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d2);

        specialinvoke $r2.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Number,java.lang.Number,boolean)>($r3, $r4, $r5, 1);

        throw $r2;

     label3:
        r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a> = d0;

        r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c> = d1;

        r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b> = d2;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(d0);

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double ulp(double)>(d2);

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double max(double,double)>($d3, $d4);

        r0.<org.apache.commons.math3.distribution.TriangularDistribution: double solverAbsoluteAccuracy> = $d5;

        return;
    }

    public double getMode()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        return $d0;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, d29, d30, d31, d32;
        byte $b0, $b1, $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $b1 = $d2 cmpg d0;

        if $b1 > 0 goto label2;

        $d19 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b5 = d0 cmpg $d19;

        if $b5 >= 0 goto label2;

        $d20 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d21 = d0 - $d20;

        d29 = 2.0 * $d21;

        $d23 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d22 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d27 = $d23 - $d22;

        $d25 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d24 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d26 = $d25 - $d24;

        d30 = $d27 * $d26;

        $d28 = d29 / d30;

        return $d28;

     label2:
        $d3 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b2 = d0 cmpl $d3;

        if $b2 != 0 goto label3;

        $d16 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d15 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d17 = $d16 - $d15;

        $d18 = 2.0 / $d17;

        return $d18;

     label3:
        $d4 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b3 = $d4 cmpg d0;

        if $b3 >= 0 goto label4;

        $d5 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $b4 = d0 cmpg $d5;

        if $b4 > 0 goto label4;

        $d6 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d7 = $d6 - d0;

        d31 = 2.0 * $d7;

        $d9 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d8 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d13 = $d9 - $d8;

        $d11 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d10 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d12 = $d11 - $d10;

        d32 = $d13 * $d12;

        $d14 = d31 / d32;

        return $d14;

     label4:
        return 0.0;
    }

    public double cumulativeProbability(double)
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, d37, d38, d39, d40;
        byte $b0, $b1, $b2, $b3, $b4, $b5;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $b0 = d0 cmpg $d1;

        if $b0 >= 0 goto label1;

        return 0.0;

     label1:
        $d2 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $b1 = $d2 cmpg d0;

        if $b1 > 0 goto label2;

        $d25 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b5 = d0 cmpg $d25;

        if $b5 >= 0 goto label2;

        $d26 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d29 = d0 - $d26;

        $d27 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d28 = d0 - $d27;

        d37 = $d29 * $d28;

        $d31 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d30 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d35 = $d31 - $d30;

        $d33 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d32 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d34 = $d33 - $d32;

        d38 = $d35 * $d34;

        $d36 = d37 / d38;

        return $d36;

     label2:
        $d3 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b2 = d0 cmpl $d3;

        if $b2 != 0 goto label3;

        $d19 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d18 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d23 = $d19 - $d18;

        $d21 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d20 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d22 = $d21 - $d20;

        $d24 = $d23 / $d22;

        return $d24;

     label3:
        $d4 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $b3 = $d4 cmpg d0;

        if $b3 >= 0 goto label4;

        $d5 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $b4 = d0 cmpg $d5;

        if $b4 > 0 goto label4;

        $d6 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d9 = $d6 - d0;

        $d7 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d8 = $d7 - d0;

        d39 = $d9 * $d8;

        $d11 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d10 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d15 = $d11 - $d10;

        $d13 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d12 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d14 = $d13 - $d12;

        d40 = $d15 * $d14;

        $d16 = d39 / d40;

        $d17 = 1.0 - $d16;

        return $d17;

     label4:
        return 1.0;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d3 = $d1 + $d0;

        $d2 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d4 = $d3 + $d2;

        $d5 = $d4 / 3.0;

        return $d5;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d1 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d5 = $d1 * $d0;

        $d3 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d2 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d4 = $d3 * $d2;

        $d9 = $d5 + $d4;

        $d7 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d6 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d8 = $d7 * $d6;

        $d13 = $d9 + $d8;

        $d11 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d10 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d12 = $d11 * $d10;

        $d17 = $d13 - $d12;

        $d15 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d14 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d16 = $d15 * $d14;

        $d21 = $d17 - $d16;

        $d19 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d18 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d20 = $d19 * $d18;

        $d22 = $d21 - $d20;

        $d23 = $d22 / 18.0;

        return $d23;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        return $d0;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        $d0 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        return $d0;
    }

    public boolean isSupportLowerBoundInclusive()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        return 1;
    }

    public boolean isSupportUpperBoundInclusive()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        return 1;
    }

    public boolean isSupportConnected()
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        return 1;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException
    {
        org.apache.commons.math3.distribution.TriangularDistribution r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32;
        byte $b0, $b1, $b2, $b3, $b4;
        org.apache.commons.math3.exception.OutOfRangeException $r1;
        java.lang.Double $r2;
        java.lang.Integer $r3, $r4;

        r0 := @this: org.apache.commons.math3.distribution.TriangularDistribution;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 < 0 goto label1;

        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

     label1:
        $r1 = new org.apache.commons.math3.exception.OutOfRangeException;

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r1.<org.apache.commons.math3.exception.OutOfRangeException: void <init>(java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, $r4);

        throw $r1;

     label2:
        $b2 = d0 cmpl 0.0;

        if $b2 != 0 goto label3;

        $d32 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        return $d32;

     label3:
        $b3 = d0 cmpl 1.0;

        if $b3 != 0 goto label4;

        $d31 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        return $d31;

     label4:
        $d2 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d1 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d6 = $d2 - $d1;

        $d4 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d3 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d5 = $d4 - $d3;

        $d7 = $d6 / $d5;

        $b4 = d0 cmpg $d7;

        if $b4 >= 0 goto label5;

        $d28 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d21 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d20 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d22 = $d21 - $d20;

        $d26 = d0 * $d22;

        $d24 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d23 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d25 = $d24 - $d23;

        $d27 = $d26 * $d25;

        $d29 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d27);

        $d30 = $d28 + $d29;

        return $d30;

     label5:
        $d17 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d11 = 1.0 - d0;

        $d9 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d8 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double a>;

        $d10 = $d9 - $d8;

        $d15 = $d11 * $d10;

        $d13 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double b>;

        $d12 = r0.<org.apache.commons.math3.distribution.TriangularDistribution: double c>;

        $d14 = $d13 - $d12;

        $d16 = $d15 * $d14;

        $d18 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d16);

        $d19 = $d17 - $d18;

        return $d19;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.distribution.TriangularDistribution: long serialVersionUID> = 20120112L;

        return;
    }
}
