public class org.apache.commons.math.optimization.direct.MultiDirectional extends org.apache.commons.math.optimization.direct.DirectSearchOptimizer
{
    private final double khi;
    private final double gamma;

    public void <init>()
    {
        org.apache.commons.math.optimization.direct.MultiDirectional r0;

        r0 := @this: org.apache.commons.math.optimization.direct.MultiDirectional;

        specialinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void <init>()>();

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double khi> = 2.0;

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double gamma> = 0.5;

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math.optimization.direct.MultiDirectional r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.optimization.direct.MultiDirectional;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.optimization.direct.DirectSearchOptimizer: void <init>()>();

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double khi> = d0;

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double gamma> = d1;

        return;
    }

    protected void iterateSimplex(java.util.Comparator) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException, java.lang.IllegalArgumentException
    {
        org.apache.commons.math.optimization.direct.MultiDirectional r0;
        java.util.Comparator r1;
        org.apache.commons.math.optimization.RealConvergenceChecker r2;
        org.apache.commons.math.optimization.RealPointValuePair[] r3, $r6, $r7, r10;
        org.apache.commons.math.optimization.RealPointValuePair r4, r5, $r8, $r9, r11, r12;
        int $i0, $i1, $i2, $i3, i4, i5;
        double $d0, $d1;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.math.optimization.direct.MultiDirectional;

        r1 := @parameter0: java.util.Comparator;

        r2 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealConvergenceChecker getConvergenceChecker()>();

     label1:
        virtualinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: void incrementIterationsCounter()>();

        r3 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        r4 = r3[0];

        r5 = specialinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator)>(r3, 1.0, r1);

        $i0 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r4);

        if $i0 >= 0 goto label3;

        r10 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $d1 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double khi>;

        r11 = specialinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator)>(r3, $d1, r1);

        $i3 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r5, r11);

        if $i3 > 0 goto label2;

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex> = r10;

     label2:
        return;

     label3:
        $d0 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: double gamma>;

        r12 = specialinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[],double,java.util.Comparator)>(r3, $d0, r1);

        $i1 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r12, r4);

        if $i1 >= 0 goto label4;

        return;

     label4:
        i4 = virtualinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: int getIterations()>();

        z1 = 1;

        i5 = 0;

     label5:
        $r6 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $i2 = lengthof $r6;

        if i5 >= $i2 goto label6;

        $r9 = r3[i5];

        $r7 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r8 = $r7[i5];

        $z0 = interfaceinvoke r2.<org.apache.commons.math.optimization.RealConvergenceChecker: boolean converged(int,org.apache.commons.math.optimization.RealPointValuePair,org.apache.commons.math.optimization.RealPointValuePair)>(i4, $r9, $r8);

        z1 = z1 & $z0;

        i5 = i5 + 1;

        goto label5;

     label6:
        if z1 == 0 goto label7;

        return;

     label7:
        goto label1;
    }

    private org.apache.commons.math.optimization.RealPointValuePair evaluateNewSimplex(org.apache.commons.math.optimization.RealPointValuePair[], double, java.util.Comparator) throws org.apache.commons.math.FunctionEvaluationException, org.apache.commons.math.optimization.OptimizationException
    {
        org.apache.commons.math.optimization.direct.MultiDirectional r0;
        org.apache.commons.math.optimization.RealPointValuePair[] r1, $r7, $r9, $r10, $r14;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        java.util.Comparator r2;
        double[] r3, r4, r5;
        int i0, $i1, i2, i3;
        org.apache.commons.math.optimization.RealPointValuePair $r6, $r8, $r11, $r12, $r13;

        r0 := @this: org.apache.commons.math.optimization.direct.MultiDirectional;

        r1 := @parameter0: org.apache.commons.math.optimization.RealPointValuePair[];

        d0 := @parameter1: double;

        r2 := @parameter2: java.util.Comparator;

        $r6 = r1[0];

        r3 = virtualinvoke $r6.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPointRef()>();

        i0 = lengthof r3;

        $i1 = i0 + 1;

        $r7 = newarray (org.apache.commons.math.optimization.RealPointValuePair)[$i1];

        r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex> = $r7;

        $r9 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r8 = r1[0];

        $r9[0] = $r8;

        i2 = 1;

     label1:
        if i2 > i0 goto label4;

        $r12 = r1[i2];

        r4 = virtualinvoke $r12.<org.apache.commons.math.optimization.RealPointValuePair: double[] getPointRef()>();

        r5 = newarray (double)[i0];

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $d5 = r3[i3];

        $d2 = r3[i3];

        $d1 = r4[i3];

        $d3 = $d2 - $d1;

        $d4 = d0 * $d3;

        $d6 = $d5 + $d4;

        r5[i3] = $d6;

        i3 = i3 + 1;

        goto label2;

     label3:
        $r14 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r13 = new org.apache.commons.math.optimization.RealPointValuePair;

        specialinvoke $r13.<org.apache.commons.math.optimization.RealPointValuePair: void <init>(double[],double,boolean)>(r5, #NaN, 0);

        $r14[i2] = $r13;

        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.commons.math.optimization.direct.MultiDirectional: void evaluateSimplex(java.util.Comparator)>(r2);

        $r10 = r0.<org.apache.commons.math.optimization.direct.MultiDirectional: org.apache.commons.math.optimization.RealPointValuePair[] simplex>;

        $r11 = $r10[0];

        return $r11;
    }
}
