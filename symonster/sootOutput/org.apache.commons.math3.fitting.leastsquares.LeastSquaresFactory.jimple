public class org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory r0;

        r0 := @this: org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.optim.ConvergenceChecker, int, int, boolean, org.apache.commons.math3.fitting.leastsquares.ParameterValidator)
    {
        org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction r0;
        org.apache.commons.math3.linear.RealVector r1, r2;
        org.apache.commons.math3.linear.RealMatrix r3;
        org.apache.commons.math3.optim.ConvergenceChecker r4;
        int i0, i1;
        boolean z0;
        org.apache.commons.math3.fitting.leastsquares.ParameterValidator r5;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem $r7;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r8;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter3: org.apache.commons.math3.linear.RealMatrix;

        r4 := @parameter4: org.apache.commons.math3.optim.ConvergenceChecker;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        z0 := @parameter7: boolean;

        r5 := @parameter8: org.apache.commons.math3.fitting.leastsquares.ParameterValidator;

        $r7 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem;

        specialinvoke $r7.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalLeastSquaresProblem: void <init>(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optim.ConvergenceChecker,int,int,boolean,org.apache.commons.math3.fitting.leastsquares.ParameterValidator)>(r0, r1, r2, r4, i0, i1, z0, r5);

        if r3 == null goto label1;

        $r8 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightMatrix(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem,org.apache.commons.math3.linear.RealMatrix)>($r7, r3);

        return $r8;

     label1:
        return $r7;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.optim.ConvergenceChecker, int, int)
    {
        org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction r0;
        org.apache.commons.math3.linear.RealVector r1, r2;
        org.apache.commons.math3.optim.ConvergenceChecker r3;
        int i0, i1;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r4;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter3: org.apache.commons.math3.optim.ConvergenceChecker;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r4 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.optim.ConvergenceChecker,int,int,boolean,org.apache.commons.math3.fitting.leastsquares.ParameterValidator)>(r0, r1, r2, null, r3, i0, i1, 0, null);

        return $r4;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealVector, org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.optim.ConvergenceChecker, int, int)
    {
        org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction r0;
        org.apache.commons.math3.linear.RealVector r1, r2;
        org.apache.commons.math3.linear.RealMatrix r3;
        org.apache.commons.math3.optim.ConvergenceChecker r4;
        int i0, i1;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r5, $r6;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        r2 := @parameter2: org.apache.commons.math3.linear.RealVector;

        r3 := @parameter3: org.apache.commons.math3.linear.RealMatrix;

        r4 := @parameter4: org.apache.commons.math3.optim.ConvergenceChecker;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        $r5 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.optim.ConvergenceChecker,int,int)>(r0, r1, r2, r4, i0, i1);

        $r6 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightMatrix(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem,org.apache.commons.math3.linear.RealMatrix)>($r5, r3);

        return $r6;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.analysis.MultivariateVectorFunction, org.apache.commons.math3.analysis.MultivariateMatrixFunction, double[], double[], org.apache.commons.math3.linear.RealMatrix, org.apache.commons.math3.optim.ConvergenceChecker, int, int)
    {
        org.apache.commons.math3.analysis.MultivariateVectorFunction r0;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction r1;
        double[] r2, r3;
        org.apache.commons.math3.linear.RealMatrix r4;
        org.apache.commons.math3.optim.ConvergenceChecker r5;
        int i0, i1;
        org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction $r6;
        org.apache.commons.math3.linear.ArrayRealVector $r7, $r8;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem $r9;

        r0 := @parameter0: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateMatrixFunction;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[];

        r4 := @parameter4: org.apache.commons.math3.linear.RealMatrix;

        r5 := @parameter5: org.apache.commons.math3.optim.ConvergenceChecker;

        i0 := @parameter6: int;

        i1 := @parameter7: int;

        $r6 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model(org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.analysis.MultivariateMatrixFunction)>(r0, r1);

        $r7 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r7.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r2, 0);

        $r8 = new org.apache.commons.math3.linear.ArrayRealVector;

        specialinvoke $r8.<org.apache.commons.math3.linear.ArrayRealVector: void <init>(double[],boolean)>(r3, 0);

        $r9 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem create(org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealVector,org.apache.commons.math3.linear.RealMatrix,org.apache.commons.math3.optim.ConvergenceChecker,int,int)>($r6, $r7, $r8, r4, r5, i0, i1);

        return $r9;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightMatrix(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem, org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem r0;
        org.apache.commons.math3.linear.RealMatrix r1, r2;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1 $r3;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        r1 := @parameter1: org.apache.commons.math3.linear.RealMatrix;

        r2 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix)>(r1);

        $r3 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1;

        specialinvoke $r3.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$1: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem,org.apache.commons.math3.linear.RealMatrix)>(r0, r2);

        return $r3;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightDiagonal(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem, org.apache.commons.math3.linear.RealVector)
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem r0, $r4;
        org.apache.commons.math3.linear.RealVector r1;
        org.apache.commons.math3.linear.DiagonalMatrix $r2;
        double[] $r3;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        r1 := @parameter1: org.apache.commons.math3.linear.RealVector;

        $r2 = new org.apache.commons.math3.linear.DiagonalMatrix;

        $r3 = virtualinvoke r1.<org.apache.commons.math3.linear.RealVector: double[] toArray()>();

        specialinvoke $r2.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(double[])>($r3);

        $r4 = staticinvoke <org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem weightMatrix(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem,org.apache.commons.math3.linear.RealMatrix)>(r0, $r2);

        return $r4;
    }

    public static org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem countEvaluations(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem, org.apache.commons.math3.util.Incrementor)
    {
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem r0;
        org.apache.commons.math3.util.Incrementor r1;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$2 $r2;

        r0 := @parameter0: org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

        r1 := @parameter1: org.apache.commons.math3.util.Incrementor;

        $r2 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$2;

        specialinvoke $r2.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$2: void <init>(org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem,org.apache.commons.math3.util.Incrementor)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.math3.optim.ConvergenceChecker evaluationChecker(org.apache.commons.math3.optim.ConvergenceChecker)
    {
        org.apache.commons.math3.optim.ConvergenceChecker r0;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$3 $r1;

        r0 := @parameter0: org.apache.commons.math3.optim.ConvergenceChecker;

        $r1 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$3;

        specialinvoke $r1.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$3: void <init>(org.apache.commons.math3.optim.ConvergenceChecker)>(r0);

        return $r1;
    }

    private static org.apache.commons.math3.linear.RealMatrix squareRoot(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrix r0, $r3;
        boolean $z0;
        org.apache.commons.math3.linear.EigenDecomposition $r2;
        org.apache.commons.math3.linear.DiagonalMatrix $r4;
        double $d0, $d1;
        int i0, i1;

        r0 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $z0 = r0 instanceof org.apache.commons.math3.linear.DiagonalMatrix;

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        $r4 = new org.apache.commons.math3.linear.DiagonalMatrix;

        specialinvoke $r4.<org.apache.commons.math3.linear.DiagonalMatrix: void <init>(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = interfaceinvoke r0.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i1, i1);

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        interfaceinvoke $r4.<org.apache.commons.math3.linear.RealMatrix: void setEntry(int,int,double)>(i1, i1, $d1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r4;

     label3:
        $r2 = new org.apache.commons.math3.linear.EigenDecomposition;

        specialinvoke $r2.<org.apache.commons.math3.linear.EigenDecomposition: void <init>(org.apache.commons.math3.linear.RealMatrix)>(r0);

        $r3 = virtualinvoke $r2.<org.apache.commons.math3.linear.EigenDecomposition: org.apache.commons.math3.linear.RealMatrix getSquareRoot()>();

        return $r3;
    }

    public static org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction model(org.apache.commons.math3.analysis.MultivariateVectorFunction, org.apache.commons.math3.analysis.MultivariateMatrixFunction)
    {
        org.apache.commons.math3.analysis.MultivariateVectorFunction r0;
        org.apache.commons.math3.analysis.MultivariateMatrixFunction r1;
        org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalValueAndJacobianFunction $r2;

        r0 := @parameter0: org.apache.commons.math3.analysis.MultivariateVectorFunction;

        r1 := @parameter1: org.apache.commons.math3.analysis.MultivariateMatrixFunction;

        $r2 = new org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalValueAndJacobianFunction;

        specialinvoke $r2.<org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory$LocalValueAndJacobianFunction: void <init>(org.apache.commons.math3.analysis.MultivariateVectorFunction,org.apache.commons.math3.analysis.MultivariateMatrixFunction)>(r0, r1);

        return $r2;
    }
}
