public abstract class com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective extends com.opengamma.analytics.math.function.Function1D
{
    private com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] _instruments;
    private double[] _prices;

    public void <init>()
    {
        com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective r0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective;

        specialinvoke r0.<com.opengamma.analytics.math.function.Function1D: void <init>()>();

        return;
    }

    public void setInstruments(com.opengamma.analytics.financial.interestrate.InstrumentDerivative[])
    {
        com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective;

        r1 := @parameter0: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[];

        r0.<com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] _instruments> = r1;

        return;
    }

    public void setPrice(double[])
    {
        com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective r0;
        double[] r1;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective;

        r1 := @parameter0: double[];

        $i1 = lengthof r1;

        $r2 = r0.<com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] _instruments>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "Incorrect number of prices.");

        r0.<com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective: double[] _prices> = r1;

        return;
    }

    public double[] getPrices()
    {
        com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective r0;
        double[] $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective: double[] _prices>;

        return $r1;
    }

    public com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] getInstruments()
    {
        com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective r0;
        com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] $r1;

        r0 := @this: com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective;

        $r1 = r0.<com.opengamma.analytics.financial.interestrate.method.SuccessiveLeastSquareCalibrationObjective: com.opengamma.analytics.financial.interestrate.InstrumentDerivative[] _instruments>;

        return $r1;
    }

    public abstract void setCurves(com.opengamma.analytics.financial.interestrate.YieldCurveBundle);
}
