public class com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution extends java.lang.Object implements com.opengamma.analytics.math.statistics.distribution.ProbabilityDistribution
{
    private final double _lambdaOverTwo;
    private final int _k;
    private final double _dofOverTwo;
    private final double _pStart;
    private final double _eps;

    public void <init>(double, double)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16;
        byte $b0, $b1, $b4;
        java.lang.StringBuilder $r1, $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4, $r8;
        long $l2;
        int $i3, $i5, $i6, $i7;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _eps> = 1.0E-16;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("degrees of freedom must be > 0, have ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z0, $r4);

        $b1 = d1 cmpl 0.0;

        if $b1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("non-centrality must be >= 0, have ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.lang.Validate: void isTrue(boolean,java.lang.String)>($z1, $r8);

        $d3 = d0 / 2.0;

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo> = $d3;

        $d4 = d1 / 2.0;

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo> = $d4;

        $d5 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $l2 = staticinvoke <java.lang.Math: long round(double)>($d5);

        $i3 = (int) $l2;

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k> = $i3;

        $d6 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $b4 = $d6 cmpl 0.0;

        if $b4 != 0 goto label5;

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _pStart> = 0.0;

        goto label6;

     label5:
        $d7 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d9 = neg $d7;

        $i5 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k>;

        $d10 = (double) $i5;

        $d8 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d11 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $d12 = $d10 * $d11;

        $d14 = $d9 + $d12;

        $i6 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k>;

        $i7 = $i6 + 1;

        $d13 = (double) $i7;

        $d15 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d13);

        d2 = $d14 - $d15;

        $d16 = staticinvoke <java.lang.Math: double exp(double)>(d2);

        r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _pStart> = $d16;

     label6:
        return;
    }

    private double getFraserApproxCDF(double)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21;
        long $l0, $l1;
        byte $b2;
        com.opengamma.analytics.math.statistics.distribution.NormalDistribution $r1;
        java.lang.Double $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        d0 := @parameter0: double;

        $d3 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d4 = $d3 * 2.0;

        d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        d2 = staticinvoke <java.lang.Math: double sqrt(double)>(d0);

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d2);

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $d17 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d18 = $d17 * 2.0;

        $d19 = 1.0 - $d18;

        $d20 = $d19 / 2.0;

        d21 = $d20 / d1;

        goto label2;

     label1:
        $d8 = d2 - d1;

        $d5 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d6 = $d5 * 2.0;

        $d7 = $d6 - 1.0;

        $d9 = $d7 / 2.0;

        $d10 = staticinvoke <java.lang.Math: double log(double)>(d2);

        $d11 = staticinvoke <java.lang.Math: double log(double)>(d1);

        $d12 = $d10 - $d11;

        $d14 = $d9 * $d12;

        $d13 = d2 - d1;

        $d15 = $d14 / $d13;

        d21 = $d8 - $d15;

     label2:
        $r1 = new com.opengamma.analytics.math.statistics.distribution.NormalDistribution;

        specialinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: void <init>(double,double)>(0.0, 1.0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d21);

        $d16 = virtualinvoke $r1.<com.opengamma.analytics.math.statistics.distribution.NormalDistribution: double getCDF(java.lang.Double)>($r2);

        return $d16;
    }

    public double getCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Double r1;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, d47, d48, d49, d50, d51, d52, d53, d54, d55, $d56, $d57, $d58, d59;
        byte $b0, $b1, $b3, $b7;
        int $i2, $i4, i5, i6;
        org.apache.commons.math.MathException $r2;
        com.opengamma.analytics.math.MathException $r3;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Double;

        staticinvoke <org.apache.commons.lang.Validate: void notNull(java.lang.Object,java.lang.String)>(r1, "x");

        $d2 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $b0 = $d2 cmpg 0.0;

        if $b0 >= 0 goto label01;

        return 0.0;

     label01:
        $d4 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d3 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d5 = $d4 + $d3;

        $b1 = $d5 cmpl 1000.0;

        if $b1 <= 0 goto label02;

        $d44 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        $d45 = specialinvoke r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double getFraserApproxCDF(double)>($d44);

        return $d45;

     label02:
        $d6 = virtualinvoke r1.<java.lang.Double: double doubleValue()>();

        d0 = $d6 / 2.0;

        d1 = staticinvoke <java.lang.Math: double log(double)>(d0);

     label03:
        $d8 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $i2 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k>;

        $d7 = (double) $i2;

        $d9 = $d8 + $d7;

        d47 = staticinvoke <org.apache.commons.math.special.Gamma: double regularizedGammaP(double,double)>($d9, d0);

     label04:
        goto label06;

     label05:
        $r2 := @caughtexception;

        $r3 = new com.opengamma.analytics.math.MathException;

        specialinvoke $r3.<com.opengamma.analytics.math.MathException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

     label06:
        $d10 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _pStart>;

        d48 = $d10 * d47;

        d49 = #-Infinity;

        d50 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _pStart>;

        d51 = d47;

        i5 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k>;

     label07:
        if i5 <= 0 goto label08;

        $d26 = d48 - d49;

        $d27 = staticinvoke <java.lang.Math: double abs(double)>($d26);

        $d28 = $d27 / d48;

        $b3 = $d28 cmpl 1.0E-16;

        if $b3 <= 0 goto label08;

        i5 = i5 + -1;

        $i4 = i5 + 1;

        $d30 = (double) $i4;

        $d29 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d31 = $d30 / $d29;

        d50 = d50 * $d31;

        $d33 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d32 = (double) i5;

        $d34 = $d33 + $d32;

        $d35 = $d34 * d1;

        $d40 = $d35 - d0;

        $d37 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d36 = (double) i5;

        $d38 = $d37 + $d36;

        $d39 = $d38 + 1.0;

        $d41 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d39);

        d52 = $d40 - $d41;

        $d42 = staticinvoke <java.lang.Math: double exp(double)>(d52);

        d51 = d51 + $d42;

        d49 = d48;

        $d43 = d50 * d51;

        d48 = d48 + $d43;

        goto label07;

     label08:
        d53 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _pStart>;

        d54 = d47;

        d55 = #-Infinity;

        i6 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: int _k>;

     label09:
        $d56 = d48 - d55;

        $d57 = staticinvoke <java.lang.Math: double abs(double)>($d56);

        $d58 = $d57 / d48;

        $b7 = $d58 cmpl 1.0E-16;

        if $b7 <= 0 goto label10;

        i6 = i6 + 1;

        $d12 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d11 = (double) i6;

        $d13 = $d12 / $d11;

        d53 = d53 * $d13;

        $d15 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d14 = (double) i6;

        $d16 = $d15 + $d14;

        $d17 = $d16 - 1.0;

        $d18 = $d17 * d1;

        $d22 = $d18 - d0;

        $d20 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d19 = (double) i6;

        $d21 = $d20 + $d19;

        $d23 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d21);

        d59 = $d22 - $d23;

        $d24 = staticinvoke <java.lang.Math: double exp(double)>(d59);

        d54 = d54 - $d24;

        d55 = d48;

        $d25 = d53 * d54;

        d48 = d48 + $d25;

        goto label09;

     label10:
        return d48;

        catch org.apache.commons.math.MathException from label03 to label04 with label05;
    }

    public double getInverseCDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Double r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double getPDF(java.lang.Double)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Double r1;
        org.apache.commons.lang.NotImplementedException $r2;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Double;

        $r2 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r2.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r2;
    }

    public double nextRandom()
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        org.apache.commons.lang.NotImplementedException $r1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        $r1 = new org.apache.commons.lang.NotImplementedException;

        specialinvoke $r1.<org.apache.commons.lang.NotImplementedException: void <init>()>();

        throw $r1;
    }

    public double getDegrees()
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $d1 = $d0 * 2.0;

        return $d1;
    }

    public double getNonCentrality()
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        double $d0, $d1;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $d1 = $d0 * 2.0;

        return $d1;
    }

    public int hashCode()
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        double $d0, $d1;
        long $l1, $l2, $l5, $l6, l10, l12;
        int $i3, $i4, $i7, $i8, i11, i13;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        l10 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i4 = 31 * 1;

        $l1 = l10 >>> 32;

        $l2 = l10 ^ $l1;

        $i3 = (int) $l2;

        i11 = $i4 + $i3;

        $d1 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        l12 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $i8 = 31 * i11;

        $l5 = l12 >>> 32;

        $l6 = l12 ^ $l5;

        $i7 = (int) $l6;

        i13 = $i8 + $i7;

        return i13;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        double $d0, $d1, $d2, $d3;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean $z0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 != null goto label2;

        return 0;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

        return 0;

     label3:
        r2 = (com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution) r1;

        $d0 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r2.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _dofOverTwo>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label4;

        return 0;

     label4:
        $d2 = r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d2);

        $d3 = r2.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double _lambdaOverTwo>;

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d3);

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public volatile double getInverseCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double getInverseCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getCDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double getCDF(java.lang.Double)>($r2);

        return $d0;
    }

    public volatile double getPDF(java.lang.Object)
    {
        com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution r0;
        java.lang.Object r1;
        java.lang.Double $r2;
        double $d0;

        r0 := @this: com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $d0 = virtualinvoke r0.<com.opengamma.analytics.math.statistics.distribution.NonCentralChiSquaredDistribution: double getPDF(java.lang.Double)>($r2);

        return $d0;
    }
}
