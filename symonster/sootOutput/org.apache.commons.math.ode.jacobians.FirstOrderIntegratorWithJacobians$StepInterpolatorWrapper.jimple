class org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper extends java.lang.Object implements org.apache.commons.math.ode.jacobians.StepInterpolatorWithJacobians
{
    private org.apache.commons.math.ode.sampling.StepInterpolator interpolator;
    private double[] y;
    private double[][] dydy0;
    private double[][] dydp;
    private double[] yDot;
    private double[][] dydy0Dot;
    private double[][] dydpDot;

    public void <init>()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.apache.commons.math.ode.sampling.StepInterpolator, int, int)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        org.apache.commons.math.ode.sampling.StepInterpolator r1;
        int i0, i1;
        double[] $r2, $r5;
        double[][] $r3, $r4, $r6, $r7;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        r1 := @parameter0: org.apache.commons.math.ode.sampling.StepInterpolator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator> = r1;

        $r2 = newarray (double)[i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y> = $r2;

        $r3 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0> = $r3;

        $r4 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp> = $r4;

        $r5 = newarray (double)[i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot> = $r5;

        $r6 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot> = $r6;

        $r7 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot> = $r7;

        return;
    }

    public void setInterpolatedTime(double)
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double d0;
        org.apache.commons.math.ode.sampling.StepInterpolator $r1;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        interfaceinvoke $r1.<org.apache.commons.math.ode.sampling.StepInterpolator: void setInterpolatedTime(double)>(d0);

        return;
    }

    public boolean isForward()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        org.apache.commons.math.ode.sampling.StepInterpolator $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        $z0 = interfaceinvoke $r1.<org.apache.commons.math.ode.sampling.StepInterpolator: boolean isForward()>();

        return $z0;
    }

    public double getPreviousTime()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        org.apache.commons.math.ode.sampling.StepInterpolator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getPreviousTime()>();

        return $d0;
    }

    public double getInterpolatedTime()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        org.apache.commons.math.ode.sampling.StepInterpolator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getInterpolatedTime()>();

        return $d0;
    }

    public double[] getInterpolatedY() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r4, $r5;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i0);

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        return $r5;
    }

    public double[][] getInterpolatedDyDy0() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r6;
        int i0, i1, i2;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        double[][] $r4, $r5;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        i0 = lengthof $r3;

        i1 = i0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        $r6 = $r5[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r6, 0, i0);

        i1 = i1 + i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        return $r4;
    }

    public double[][] getInterpolatedDyDp() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r5, $r8;
        int i0, i1, $i2, i3, i4;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        double[][] $r4, $r6, $r7;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedState()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        $r5 = $r4[0];

        i1 = lengthof $r5;

        $i2 = i0 + 1;

        i3 = i0 * $i2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r7 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        $r8 = $r7[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r8, 0, i1);

        i3 = i3 + i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        return $r6;
    }

    public double[] getInterpolatedYDot() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r4, $r5;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i0);

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        return $r5;
    }

    public double[][] getInterpolatedDyDy0Dot() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r6;
        int i0, i1, i2;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        double[][] $r4, $r5;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        i0 = lengthof $r3;

        i1 = i0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r5 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        $r6 = $r5[i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, $r6, 0, i0);

        i1 = i1 + i0;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        return $r4;
    }

    public double[][] getInterpolatedDyDpDot() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        double[] r1, $r3, $r5, $r8;
        int i0, i1, $i2, i3, i4;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        double[][] $r4, $r6, $r7;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        r1 = interfaceinvoke $r2.<org.apache.commons.math.ode.sampling.StepInterpolator: double[] getInterpolatedDerivatives()>();

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        $r5 = $r4[0];

        i1 = lengthof $r5;

        $i2 = i0 + 1;

        i3 = i0 * $i2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r7 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        $r8 = $r7[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, $r8, 0, i1);

        i3 = i3 + i1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r6 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        return $r6;
    }

    public double getCurrentTime()
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        org.apache.commons.math.ode.sampling.StepInterpolator $r1;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r1 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        $d0 = interfaceinvoke $r1.<org.apache.commons.math.ode.sampling.StepInterpolator: double getCurrentTime()>();

        return $d0;
    }

    public org.apache.commons.math.ode.jacobians.StepInterpolatorWithJacobians copy() throws org.apache.commons.math.ode.DerivativeException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0, $r5;
        int i0, i1;
        double[] $r2, $r4, $r8, $r9, $r14, $r15;
        double[][] $r3, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19;
        org.apache.commons.math.ode.sampling.StepInterpolator $r6, $r7;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        i0 = lengthof $r2;

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        $r4 = $r3[0];

        i1 = lengthof $r4;

        $r5 = new org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        $r6 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        $r7 = interfaceinvoke $r6.<org.apache.commons.math.ode.sampling.StepInterpolator: org.apache.commons.math.ode.sampling.StepInterpolator copy()>();

        specialinvoke $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void <init>(org.apache.commons.math.ode.sampling.StepInterpolator,int,int)>($r7, i0, i1);

        $r9 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        $r8 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[],double[])>($r9, $r8);

        $r11 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        $r10 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[][],double[][])>($r11, $r10);

        $r13 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        $r12 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[][],double[][])>($r13, $r12);

        $r15 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        $r14 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[],double[])>($r15, $r14);

        $r17 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        $r16 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[][],double[][])>($r17, $r16);

        $r19 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        $r18 = $r5.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[][],double[][])>($r19, $r18);

        return $r5;
    }

    public void writeExternal(java.io.ObjectOutput) throws java.io.IOException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        java.io.ObjectOutput r1;
        org.apache.commons.math.ode.sampling.StepInterpolator $r2;
        double[] $r3, $r5, $r6, $r9;
        int $i0, $i1;
        double[][] $r4, $r7, $r8, $r10, $r11;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        r1 := @parameter0: java.io.ObjectOutput;

        $r2 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator>;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeObject(java.lang.Object)>($r2);

        $r3 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        $i0 = lengthof $r3;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i0);

        $r4 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        $r5 = $r4[0];

        $i1 = lengthof $r5;

        interfaceinvoke r1.<java.io.ObjectOutput: void writeInt(int)>($i1);

        $r6 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[])>(r1, $r6);

        $r7 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[][])>(r1, $r7);

        $r8 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[][])>(r1, $r8);

        $r9 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[])>(r1, $r9);

        $r10 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[][])>(r1, $r10);

        $r11 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[][])>(r1, $r11);

        return;
    }

    public void readExternal(java.io.ObjectInput) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper r0;
        java.io.ObjectInput r1;
        int i0, i1;
        java.lang.Object $r2;
        org.apache.commons.math.ode.sampling.StepInterpolator $r3;
        double[] $r4, $r7, $r10, $r13;
        double[][] $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15;

        r0 := @this: org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper;

        r1 := @parameter0: java.io.ObjectInput;

        $r2 = interfaceinvoke r1.<java.io.ObjectInput: java.lang.Object readObject()>();

        $r3 = (org.apache.commons.math.ode.sampling.StepInterpolator) $r2;

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: org.apache.commons.math.ode.sampling.StepInterpolator interpolator> = $r3;

        i0 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        i1 = interfaceinvoke r1.<java.io.ObjectInput: int readInt()>();

        $r4 = newarray (double)[i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y> = $r4;

        $r5 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0> = $r5;

        $r6 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp> = $r6;

        $r7 = newarray (double)[i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot> = $r7;

        $r8 = newmultiarray (double)[i0][i0];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot> = $r8;

        $r9 = newmultiarray (double)[i0][i1];

        r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot> = $r9;

        $r10 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] y>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[])>(r1, $r10);

        $r11 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[][])>(r1, $r11);

        $r12 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydp>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[][])>(r1, $r12);

        $r13 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[] yDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[])>(r1, $r13);

        $r14 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydy0Dot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[][])>(r1, $r14);

        $r15 = r0.<org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: double[][] dydpDot>;

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[][])>(r1, $r15);

        return;
    }

    private static void copyArray(double[], double[])
    {
        double[] r0, r1;
        int $i0;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        $i0 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i0);

        return;
    }

    private static void copyArray(double[][], double[][])
    {
        double[][] r0, r1;
        int $i0, i1;
        double[] $r2, $r3;

        r0 := @parameter0: double[][];

        r1 := @parameter1: double[][];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        $r2 = r1[i1];

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void copyArray(double[],double[])>($r3, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeArray(java.io.ObjectOutput, double[]) throws java.io.IOException
    {
        java.io.ObjectOutput r0;
        double[] r1;
        int $i0, i1;
        double $d0;

        r0 := @parameter0: java.io.ObjectOutput;

        r1 := @parameter1: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d0 = r1[i1];

        interfaceinvoke r0.<java.io.ObjectOutput: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeArray(java.io.ObjectOutput, double[][]) throws java.io.IOException
    {
        java.io.ObjectOutput r0;
        double[][] r1;
        int $i0, i1;
        double[] $r2;

        r0 := @parameter0: java.io.ObjectOutput;

        r1 := @parameter1: double[][];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = r1[i1];

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void writeArray(java.io.ObjectOutput,double[])>(r0, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void readArray(java.io.ObjectInput, double[]) throws java.io.IOException
    {
        java.io.ObjectInput r0;
        double[] r1;
        int $i0, i1;
        double $d0;

        r0 := @parameter0: java.io.ObjectInput;

        r1 := @parameter1: double[];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $d0 = interfaceinvoke r0.<java.io.ObjectInput: double readDouble()>();

        r1[i1] = $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void readArray(java.io.ObjectInput, double[][]) throws java.io.IOException
    {
        java.io.ObjectInput r0;
        double[][] r1;
        int $i0, i1;
        double[] $r2;

        r0 := @parameter0: java.io.ObjectInput;

        r1 := @parameter1: double[][];

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = r1[i1];

        staticinvoke <org.apache.commons.math.ode.jacobians.FirstOrderIntegratorWithJacobians$StepInterpolatorWrapper: void readArray(java.io.ObjectInput,double[])>(r0, $r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
