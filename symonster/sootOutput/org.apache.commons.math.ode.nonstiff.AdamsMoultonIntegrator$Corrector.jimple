class org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector extends java.lang.Object implements org.apache.commons.math.linear.RealMatrixPreservingVisitor
{
    private final double[] previous;
    private final double[] scaled;
    private final double[] before;
    private final double[] after;
    final org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0;

    public void <init>(org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator, double[], double[], double[])
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator r1;
        double[] r2, r3, r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        r1 := @parameter0: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator;

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        r4 := @parameter3: double[];

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous> = r2;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] scaled> = r3;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after> = r4;

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (double[]) $r5;

        r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] before> = $r6;

        return;
    }

    public void start(int, int, int, int, int, int)
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        int i0, i1, i2, i3, i4, i5;
        double[] $r1;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        staticinvoke <java.util.Arrays: void fill(double[],double)>($r1, 0.0);

        return;
    }

    public void visit(int, int, double)
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        int i0, i1, $i2;
        double d0, $d1, $d2, $d3, $d4;
        double[] $r1, $r2;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        $i2 = i0 & 1;

        if $i2 != 0 goto label1;

        $r2 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d3 = $r2[i1];

        $d4 = $d3 - d0;

        $r2[i1] = $d4;

        goto label2;

     label1:
        $r1 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d1 = $r1[i1];

        $d2 = $d1 + d0;

        $r1[i1] = $d2;

     label2:
        return;
    }

    public double end()
    {
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector r0;
        double d0, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, d25, $d26;
        double[] $r1, $r3, $r4, $r5, $r7, $r8, $r10, $r12, $r14, $r15, $r16;
        int $i0, $i1, $i2, i3;
        org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator $r2, $r6, $r9, $r11, $r13, $r17, $r18;

        r0 := @this: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector;

        d25 = 0.0;

        i3 = 0;

     label1:
        $r1 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label5;

        $r3 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d9 = $r3[i3];

        $r4 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous>;

        $d7 = $r4[i3];

        $r5 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] scaled>;

        $d6 = $r5[i3];

        $d8 = $d7 + $d6;

        $d10 = $d9 + $d8;

        $r3[i3] = $d10;

        $r6 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $i2 = $r6.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: int mainSetDimension>;

        if i3 >= $i2 goto label4;

        $r7 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] previous>;

        $d11 = $r7[i3];

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d11);

        $r8 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d13 = $r8[i3];

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d13);

        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d12, $d14);

        $r9 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r10 = $r9.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] vecAbsoluteTolerance>;

        if $r10 != null goto label2;

        $r17 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $d24 = $r17.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double scalAbsoluteTolerance>;

        $r18 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $d22 = $r18.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double scalRelativeTolerance>;

        $d23 = $d22 * d0;

        $d26 = $d24 + $d23;

        goto label3;

     label2:
        $r11 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r12 = $r11.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] vecAbsoluteTolerance>;

        $d17 = $r12[i3];

        $r13 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $r14 = $r13.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: double[] vecRelativeTolerance>;

        $d15 = $r14[i3];

        $d16 = $d15 * d0;

        $d26 = $d17 + $d16;

     label3:
        $r15 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] after>;

        $d19 = $r15[i3];

        $r16 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: double[] before>;

        $d18 = $r16[i3];

        $d20 = $d19 - $d18;

        d2 = $d20 / $d26;

        $d21 = d2 * d2;

        d25 = d25 + $d21;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        $r2 = r0.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator$Corrector: org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator this$0>;

        $i1 = $r2.<org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegrator: int mainSetDimension>;

        $d3 = (double) $i1;

        $d4 = d25 / $d3;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>($d4);

        return $d5;
    }
}
