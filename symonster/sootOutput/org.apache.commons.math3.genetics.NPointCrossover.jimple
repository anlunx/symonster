public class org.apache.commons.math3.genetics.NPointCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
{
    private final int crossoverPoints;

    public void <init>(int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        int i0;
        org.apache.commons.math3.exception.NotStrictlyPositiveException $r1;
        java.lang.Integer $r2;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 > 0 goto label1;

        $r1 = new org.apache.commons.math3.exception.NotStrictlyPositiveException;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<org.apache.commons.math3.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints> = i0;

        return;
    }

    public int getCrossoverPoints()
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        int $i0;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        $i0 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        return $i0;
    }

    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        org.apache.commons.math3.genetics.Chromosome r1, r2;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        org.apache.commons.math3.genetics.AbstractListChromosome $r6, $r7;
        org.apache.commons.math3.genetics.ChromosomePair $r8;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z1 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) r1;

        $r6 = (org.apache.commons.math3.genetics.AbstractListChromosome) r2;

        $r8 = specialinvoke r0.<org.apache.commons.math3.genetics.NPointCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r6);

        return $r8;
    }

    private org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        org.apache.commons.math3.genetics.NPointCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2, $r11, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15;
        java.util.List r3, r4;
        org.apache.commons.math3.random.RandomGenerator r7;
        java.util.ArrayList $r8, $r9, r21, r22, r23;
        org.apache.commons.math3.genetics.ChromosomePair $r10;
        java.lang.Object $r13, $r14, $r15, $r16;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r17;
        java.lang.Integer $r18, $r19;
        org.apache.commons.math3.exception.DimensionMismatchException $r20;

        r0 := @this: org.apache.commons.math3.genetics.NPointCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        i0 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i2 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if i0 == $i2 goto label1;

        $r20 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i10 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r20.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, i0);

        throw $r20;

     label1:
        $i3 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        if $i3 < i0 goto label2;

        $r17 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $i9 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r17.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r18, $r19, 0);

        throw $r17;

     label2:
        r3 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r4 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i0);

        r7 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        r21 = $r8;

        r22 = $r9;

        i11 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        i12 = 0;

        i13 = 0;

     label3:
        $i4 = r0.<org.apache.commons.math3.genetics.NPointCrossover: int crossoverPoints>;

        if i13 >= $i4 goto label6;

        $i7 = 1 + i12;

        $i5 = i0 - i12;

        $i6 = $i5 - i11;

        $i8 = interfaceinvoke r7.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>($i6);

        i1 = $i7 + $i8;

        i14 = i12;

     label4:
        if i14 >= i1 goto label5;

        $r15 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i14);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r16 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i14);

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>($r16);

        i14 = i14 + 1;

        goto label4;

     label5:
        r23 = r21;

        r21 = r22;

        r22 = r23;

        i12 = i1;

        i13 = i13 + 1;

        i11 = i11 + -1;

        goto label3;

     label6:
        i15 = i12;

     label7:
        if i15 >= i0 goto label8;

        $r13 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i15);

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i15);

        interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>($r14);

        i15 = i15 + 1;

        goto label7;

     label8:
        $r10 = new org.apache.commons.math3.genetics.ChromosomePair;

        $r11 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r8);

        $r12 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r9);

        specialinvoke $r10.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r11, $r12);

        return $r10;
    }
}
