public class org.apache.commons.math3.util.KthSelector extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int MIN_SELECT_SIZE;
    private final org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy;

    public void <init>()
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.MedianOf3PivotingStrategy $r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.commons.math3.util.MedianOf3PivotingStrategy;

        specialinvoke $r1.<org.apache.commons.math3.util.MedianOf3PivotingStrategy: void <init>()>();

        r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy> = $r1;

        return;
    }

    public void <init>(org.apache.commons.math3.util.PivotingStrategyInterface) throws org.apache.commons.math3.exception.NullArgumentException
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.PivotingStrategyInterface r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        r1 := @parameter0: org.apache.commons.math3.util.PivotingStrategyInterface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy> = r1;

        return;
    }

    public org.apache.commons.math3.util.PivotingStrategyInterface getPivotingStrategy()
    {
        org.apache.commons.math3.util.KthSelector r0;
        org.apache.commons.math3.util.PivotingStrategyInterface $r1;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        $r1 = r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy>;

        return $r1;
    }

    public double select(double[], int[], int)
    {
        org.apache.commons.math3.util.KthSelector r0;
        double[] r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, i12, $i13, $i14, $i15;
        boolean z0, $z1;
        double $d0, $d1;
        org.apache.commons.math3.util.PivotingStrategyInterface $r3;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        r1 := @parameter0: double[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i8 = 0;

        i9 = lengthof r1;

        i10 = 0;

        if r2 == null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

     label03:
        $i11 = i9 - i8;

        if $i11 <= 15 goto label13;

        if z0 == 0 goto label04;

        $i6 = lengthof r2;

        if i10 >= $i6 goto label04;

        $i7 = r2[i10];

        if $i7 < 0 goto label04;

        i12 = r2[i10];

        goto label05;

     label04:
        $r3 = r0.<org.apache.commons.math3.util.KthSelector: org.apache.commons.math3.util.PivotingStrategyInterface pivotingStrategy>;

        $i13 = interfaceinvoke $r3.<org.apache.commons.math3.util.PivotingStrategyInterface: int pivotIndex(double[],int,int)>(r1, i8, i9);

        i12 = specialinvoke r0.<org.apache.commons.math3.util.KthSelector: int partition(double[],int,int,int)>(r1, i8, i9, $i13);

        if z0 == 0 goto label05;

        $i5 = lengthof r2;

        if i10 >= $i5 goto label05;

        r2[i10] = i12;

     label05:
        if i0 != i12 goto label06;

        $d1 = r1[i0];

        return $d1;

     label06:
        if i0 >= i12 goto label09;

        i9 = i12;

        $i3 = 2 * i10;

        $i4 = $i3 + 1;

        if z0 == 0 goto label07;

        $i14 = lengthof r2;

        goto label08;

     label07:
        $i14 = i12;

     label08:
        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i4, $i14);

        goto label12;

     label09:
        i8 = i12 + 1;

        $i1 = 2 * i10;

        $i2 = $i1 + 2;

        if z0 == 0 goto label10;

        $i15 = lengthof r2;

        goto label11;

     label10:
        $i15 = i9;

     label11:
        i10 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>($i2, $i15);

     label12:
        goto label03;

     label13:
        staticinvoke <java.util.Arrays: void sort(double[],int,int)>(r1, i8, i9);

        $d0 = r1[i0];

        return $d0;
    }

    private int partition(double[], int, int, int)
    {
        org.apache.commons.math3.util.KthSelector r0;
        double[] r1;
        int i0, i1, i2, $i4, $i5, i8, i9;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7;
        byte $b3, $b6, $b7;

        r0 := @this: org.apache.commons.math3.util.KthSelector;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        d0 = r1[i2];

        $d2 = r1[i0];

        r1[i2] = $d2;

        i8 = i0 + 1;

        i9 = i1 - 1;

     label1:
        if i8 >= i9 goto label5;

     label2:
        if i8 >= i9 goto label3;

        $d6 = r1[i9];

        $b7 = $d6 cmpl d0;

        if $b7 <= 0 goto label3;

        i9 = i9 + -1;

        goto label2;

     label3:
        if i8 >= i9 goto label4;

        $d5 = r1[i8];

        $b6 = $d5 cmpg d0;

        if $b6 >= 0 goto label4;

        i8 = i8 + 1;

        goto label3;

     label4:
        if i8 >= i9 goto label1;

        d1 = r1[i8];

        $i4 = i8;

        i8 = i8 + 1;

        $d4 = r1[i9];

        r1[$i4] = $d4;

        $i5 = i9;

        i9 = i9 + -1;

        r1[$i5] = d1;

        goto label1;

     label5:
        if i8 >= i1 goto label6;

        $d3 = r1[i8];

        $b3 = $d3 cmpl d0;

        if $b3 <= 0 goto label7;

     label6:
        i8 = i8 + -1;

     label7:
        $d7 = r1[i8];

        r1[i0] = $d7;

        r1[i8] = d0;

        return i8;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.util.KthSelector: int MIN_SELECT_SIZE> = 15;

        <org.apache.commons.math3.util.KthSelector: long serialVersionUID> = 20140713L;

        return;
    }
}
