abstract class org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D extends java.lang.Object implements org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHullGenerator2D
{
    private static final double DEFAULT_TOLERANCE;
    private final double tolerance;
    private final boolean includeCollinearPoints;

    protected void <init>(boolean)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: void <init>(boolean,double)>(z0, 1.0E-10);

        return;
    }

    protected void <init>(boolean, double)
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean z0;
        double d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        z0 := @parameter0: boolean;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean includeCollinearPoints> = z0;

        r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance> = d0;

        return;
    }

    public double getTolerance()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance>;

        return $d0;
    }

    public boolean isIncludeCollinearPoints()
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        $z0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: boolean includeCollinearPoints>;

        return $z0;
    }

    public org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        java.util.Collection r1, r8;
        int $i0, $i1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r2;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] $r3, $r5;
        java.lang.Object[] $r4;
        double $d0;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r6;
        org.apache.commons.math3.exception.ConvergenceException $r7;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        r1 := @parameter0: java.util.Collection;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= 2 goto label1;

        r8 = r1;

        goto label2;

     label1:
        r8 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: java.util.Collection findHullVertices(java.util.Collection)>(r1);

     label2:
        $r2 = new org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D;

        $i1 = interfaceinvoke r8.<java.util.Collection: int size()>();

        $r3 = newarray (org.apache.commons.math3.geometry.euclidean.twod.Vector2D)[$i1];

        $r4 = interfaceinvoke r8.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) $r4;

        $d0 = r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double tolerance>;

        specialinvoke $r2.<org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D: void <init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)>($r5, $d0);

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        $r7 = new org.apache.commons.math3.exception.ConvergenceException;

        specialinvoke $r7.<org.apache.commons.math3.exception.ConvergenceException: void <init>()>();

        throw $r7;

        catch org.apache.commons.math3.exception.MathIllegalArgumentException from label2 to label3 with label4;
    }

    protected abstract java.util.Collection findHullVertices(java.util.Collection);

    public volatile org.apache.commons.math3.geometry.hull.ConvexHull generate(java.util.Collection) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D r0;
        java.util.Collection r1;
        org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D $r2;

        r0 := @this: org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D;

        r1 := @parameter0: java.util.Collection;

        $r2 = virtualinvoke r0.<org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D generate(java.util.Collection)>(r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D: double DEFAULT_TOLERANCE> = 1.0E-10;

        return;
    }
}
