public class org.apache.commons.math.distribution.TDistributionImpl extends org.apache.commons.math.distribution.AbstractContinuousDistribution implements org.apache.commons.math.distribution.TDistribution, java.io.Serializable
{
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
    private static final long serialVersionUID;
    private double degreesOfFreedom;
    private final double solverAbsoluteAccuracy;

    public void <init>(double, double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: void <init>()>();

        specialinvoke r0.<org.apache.commons.math.distribution.TDistributionImpl: void setDegreesOfFreedomInternal(double)>(d0);

        r0.<org.apache.commons.math.distribution.TDistributionImpl: double solverAbsoluteAccuracy> = d1;

        return;
    }

    public void <init>(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.TDistributionImpl: void <init>(double,double)>(d0, 1.0E-9);

        return;
    }

    public void setDegreesOfFreedom(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        specialinvoke r0.<org.apache.commons.math.distribution.TDistributionImpl: void setDegreesOfFreedomInternal(double)>(d0);

        return;
    }

    private void setDegreesOfFreedomInternal(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;
        byte $b0;
        java.lang.Object[] $r1;
        org.apache.commons.math.exception.util.LocalizedFormats $r2;
        java.lang.Double $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r2 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_POSITIVE_DEGREES_OF_FREEDOM>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r1[0] = $r3;

        $r4 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r2, $r1);

        throw $r4;

     label1:
        r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom> = d0;

        return;
    }

    public double getDegreesOfFreedom()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom>;

        return $d0;
    }

    public double density(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        d1 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom>;

        $d3 = d1 + 1.0;

        d2 = $d3 / 2.0;

        $d4 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>(d2);

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(3.141592653589793);

        $d6 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>(d1);

        $d7 = $d5 + $d6;

        $d8 = 0.5 * $d7;

        $d10 = $d4 - $d8;

        $d9 = d1 / 2.0;

        $d11 = staticinvoke <org.apache.commons.math.special.Gamma: double logGamma(double)>($d9);

        $d15 = $d10 - $d11;

        $d12 = d0 * d0;

        $d13 = $d12 / d1;

        $d14 = 1.0 + $d13;

        $d16 = staticinvoke <org.apache.commons.math.util.FastMath: double log(double)>($d14);

        $d17 = d2 * $d16;

        $d18 = $d15 - $d17;

        $d19 = staticinvoke <org.apache.commons.math.util.FastMath: double exp(double)>($d18);

        return $d19;
    }

    public double cumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        d10 = 0.5;

        goto label3;

     label1:
        $d5 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom>;

        $d3 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom>;

        $d2 = d0 * d0;

        $d4 = $d3 + $d2;

        $d8 = $d5 / $d4;

        $d6 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double degreesOfFreedom>;

        $d7 = 0.5 * $d6;

        d1 = staticinvoke <org.apache.commons.math.special.Beta: double regularizedBeta(double,double,double)>($d8, $d7, 0.5);

        $b1 = d0 cmpg 0.0;

        if $b1 >= 0 goto label2;

        d10 = 0.5 * d1;

        goto label3;

     label2:
        $d9 = 0.5 * d1;

        d10 = 1.0 - $d9;

     label3:
        return d10;
    }

    public double inverseCumulativeProbability(double) throws org.apache.commons.math.MathException
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0, $d1;
        byte $b0, $b1;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        return #-Infinity;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 != 0 goto label2;

        return #Infinity;

     label2:
        $d1 = specialinvoke r0.<org.apache.commons.math.distribution.AbstractContinuousDistribution: double inverseCumulativeProbability(double)>(d0);

        return $d1;
    }

    protected double getDomainLowerBound(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        return -1.7976931348623157E308;
    }

    protected double getDomainUpperBound(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        return 1.7976931348623157E308;
    }

    protected double getInitialDomain(double)
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 := @parameter0: double;

        return 0.0;
    }

    protected double getSolverAbsoluteAccuracy()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double $d0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        $d0 = r0.<org.apache.commons.math.distribution.TDistributionImpl: double solverAbsoluteAccuracy>;

        return $d0;
    }

    public double getSupportLowerBound()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        return #-Infinity;
    }

    public double getSupportUpperBound()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        return #Infinity;
    }

    public double getNumericalMean()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0;
        byte $b0;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.TDistributionImpl: double getDegreesOfFreedom()>();

        $b0 = d0 cmpl 1.0;

        if $b0 <= 0 goto label1;

        return 0.0;

     label1:
        return #NaN;
    }

    public double getNumericalVariance()
    {
        org.apache.commons.math.distribution.TDistributionImpl r0;
        double d0, $d1, $d2;
        byte $b0, $b1, $b2;

        r0 := @this: org.apache.commons.math.distribution.TDistributionImpl;

        d0 = virtualinvoke r0.<org.apache.commons.math.distribution.TDistributionImpl: double getDegreesOfFreedom()>();

        $b0 = d0 cmpl 2.0;

        if $b0 <= 0 goto label1;

        $d1 = d0 - 2.0;

        $d2 = d0 / $d1;

        return $d2;

     label1:
        $b1 = d0 cmpl 1.0;

        if $b1 <= 0 goto label2;

        $b2 = d0 cmpg 2.0;

        if $b2 > 0 goto label2;

        return #Infinity;

     label2:
        return #NaN;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.distribution.TDistributionImpl: long serialVersionUID> = -5852615386664158222L;

        <org.apache.commons.math.distribution.TDistributionImpl: double DEFAULT_INVERSE_ABSOLUTE_ACCURACY> = 1.0E-9;

        return;
    }
}
