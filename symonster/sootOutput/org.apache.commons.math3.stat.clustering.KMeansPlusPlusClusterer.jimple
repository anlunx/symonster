public class org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer extends java.lang.Object
{
    private final java.util.Random random;
    private final org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy;

    public void <init>(java.util.Random)
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random r1;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Random;

        $r2 = <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy LARGEST_VARIANCE>;

        specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: void <init>(java.util.Random,org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)>(r1, $r2);

        return;
    }

    public void <init>(java.util.Random, org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy)
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Random r1;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy r2;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Random;

        r2 := @parameter1: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random> = r1;

        r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy> = r2;

        return;
    }

    public java.util.List cluster(java.util.Collection, int, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, i1, i2, i4;
        java.util.List r2, $r10, $r12, r14;
        java.util.Iterator r3, r7;
        org.apache.commons.math3.stat.clustering.Cluster r4;
        org.apache.commons.math3.stat.clustering.Clusterable r5, r8;
        boolean $z0, $z1, $z2;
        byte $b3;
        java.lang.Object $r9, $r13;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r11;
        double $d0, $d1, d2, d3;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r14 = null;

        d2 = #Infinity;

        i4 = 0;

     label1:
        if i4 >= i1 goto label8;

        r2 = virtualinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.List cluster(java.util.Collection,int,int)>(r1, i0, i2);

        d3 = 0.0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.stat.clustering.Cluster) $r9;

        $r10 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label5;

        r5 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $r11 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r11.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r12 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        r7 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r13 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.commons.math3.stat.clustering.Clusterable) $r13;

        $d1 = interfaceinvoke r8.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r5);

        virtualinvoke $r11.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d1);

        goto label3;

     label4:
        $d0 = virtualinvoke $r11.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        d3 = d3 + $d0;

     label5:
        goto label2;

     label6:
        $b3 = d3 cmpg d2;

        if $b3 > 0 goto label7;

        r14 = r2;

        d2 = d3;

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return r14;
    }

    public java.util.List cluster(java.util.Collection, int, int) throws org.apache.commons.math3.exception.MathIllegalArgumentException, org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, i10, i11;
        int[] r2, $r14;
        org.apache.commons.math3.stat.clustering.Cluster r4, $r12;
        java.util.Random $r5;
        java.util.ArrayList $r6;
        boolean $z0, $z1, z3;
        java.lang.Object $r7, $r11;
        java.util.List $r8, $r10, r21;
        org.apache.commons.math3.stat.clustering.Clusterable $r9, r23;
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy $r13;
        org.apache.commons.math3.exception.ConvergenceException $r15;
        java.lang.Object[] $r16;
        org.apache.commons.math3.exception.util.LocalizedFormats $r17;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r18;
        java.lang.Integer $r19, $r20;
        java.util.Iterator r22;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <org.apache.commons.math3.util.MathUtils: void checkNotNull(java.lang.Object)>(r1);

        $i3 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i3 >= i0 goto label01;

        $r18 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $i8 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r18.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r19, $r20, 0);

        throw $r18;

     label01:
        $r5 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        r21 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.List chooseInitialCenters(java.util.Collection,int,java.util.Random)>(r1, i0, $r5);

        $i4 = interfaceinvoke r1.<java.util.Collection: int size()>();

        r2 = newarray (int)[$i4];

        staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>(r21, r1, r2);

        if i1 >= 0 goto label02;

        $i9 = 2147483647;

        goto label03;

     label02:
        $i9 = i1;

     label03:
        i2 = $i9;

        i10 = 0;

     label04:
        if i10 >= i2 goto label15;

        z3 = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r22 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r7 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.stat.clustering.Cluster) $r7;

        $r8 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label11;

        $r14 = <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$1: int[] $SwitchMap$org$apache$commons$math3$stat$clustering$KMeansPlusPlusClusterer$EmptyClusterStrategy>;

        $r13 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy emptyStrategy>;

        $i6 = virtualinvoke $r13.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer$EmptyClusterStrategy: int ordinal()>();

        $i7 = $r14[$i6];

        tableswitch($i7)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            default: goto label09;
        };

     label06:
        r23 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection)>(r21);

        goto label10;

     label07:
        r23 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection)>(r21);

        goto label10;

     label08:
        r23 = specialinvoke r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: org.apache.commons.math3.stat.clustering.Clusterable getFarthestPoint(java.util.Collection)>(r21);

        goto label10;

     label09:
        $r15 = new org.apache.commons.math3.exception.ConvergenceException;

        $r17 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r16 = newarray (java.lang.Object)[0];

        specialinvoke $r15.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r17, $r16);

        throw $r15;

     label10:
        z3 = 1;

        goto label12;

     label11:
        $r9 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $r10 = virtualinvoke r4.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r11 = interfaceinvoke $r9.<org.apache.commons.math3.stat.clustering.Clusterable: java.lang.Object centroidOf(java.util.Collection)>($r10);

        r23 = (org.apache.commons.math3.stat.clustering.Clusterable) $r11;

     label12:
        $r12 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke $r12.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(r23);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label05;

     label13:
        i11 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int assignPointsToClusters(java.util.List,java.util.Collection,int[])>($r6, r1, r2);

        r21 = $r6;

        if i11 != 0 goto label14;

        if z3 != 0 goto label14;

        return $r6;

     label14:
        i10 = i10 + 1;

        goto label04;

     label15:
        return r21;
    }

    private static int assignPointsToClusters(java.util.List, java.util.Collection, int[])
    {
        java.util.List r0;
        java.util.Collection r1;
        int[] r2;
        java.util.Iterator r3;
        org.apache.commons.math3.stat.clustering.Clusterable r4;
        int i0, $i1, $i2, i3, i4;
        org.apache.commons.math3.stat.clustering.Cluster r5;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: int[];

        i3 = 0;

        i4 = 0;

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.commons.math3.stat.clustering.Clusterable) $r6;

        i0 = staticinvoke <org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: int getNearestCluster(java.util.Collection,org.apache.commons.math3.stat.clustering.Clusterable)>(r0, r4);

        $i1 = r2[i4];

        if i0 == $i1 goto label2;

        i3 = i3 + 1;

     label2:
        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (org.apache.commons.math3.stat.clustering.Cluster) $r7;

        virtualinvoke r5.<org.apache.commons.math3.stat.clustering.Cluster: void addPoint(org.apache.commons.math3.stat.clustering.Clusterable)>(r4);

        $i2 = i4;

        i4 = i4 + 1;

        r2[$i2] = i0;

        goto label1;

     label3:
        return i3;
    }

    private static java.util.List chooseInitialCenters(java.util.Collection, int, java.util.Random)
    {
        java.util.Collection r0;
        int i0, i1, i2, $i3, $i4, i7, i8, i9, i10, i11, i12;
        java.util.Random r1;
        java.util.List r2;
        boolean[] r3;
        org.apache.commons.math3.stat.clustering.Clusterable r5, r15;
        double[] r6;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, d8, d9, d10;
        java.util.ArrayList $r7, $r8;
        java.lang.Object $r9, $r11, $r13, $r14;
        org.apache.commons.math3.stat.clustering.Cluster $r10, $r12;
        boolean $z2, $z3, $z4, $z5;
        byte $b5, $b6;

        r0 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.Random;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>(r0);

        r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r7);

        i1 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (boolean)[i1];

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(i1);

        $r9 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i2);

        r5 = (org.apache.commons.math3.stat.clustering.Clusterable) $r9;

        $r10 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke $r10.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(r5);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r10);

        r3[i2] = 1;

        r6 = newarray (double)[i1];

        i7 = 0;

     label01:
        if i7 >= i1 goto label03;

        if i7 == i2 goto label02;

        $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i7);

        d0 = interfaceinvoke r5.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r14);

        $d7 = d0 * d0;

        r6[i7] = $d7;

     label02:
        i7 = i7 + 1;

        goto label01;

     label03:
        $i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i3 >= i0 goto label16;

        d8 = 0.0;

        i8 = 0;

     label04:
        if i8 >= i1 goto label06;

        $z5 = r3[i8];

        if $z5 != 0 goto label05;

        $d6 = r6[i8];

        d8 = d8 + $d6;

     label05:
        i8 = i8 + 1;

        goto label04;

     label06:
        $d3 = virtualinvoke r1.<java.util.Random: double nextDouble()>();

        d9 = $d3 * d8;

        i9 = -1;

        d10 = 0.0;

        i10 = 0;

     label07:
        if i10 >= i1 goto label09;

        $z4 = r3[i10];

        if $z4 != 0 goto label08;

        $d5 = r6[i10];

        d10 = d10 + $d5;

        $b6 = d10 cmpl d9;

        if $b6 < 0 goto label08;

        i9 = i10;

        goto label09;

     label08:
        i10 = i10 + 1;

        goto label07;

     label09:
        if i9 != -1 goto label12;

        i11 = i1 - 1;

     label10:
        if i11 < 0 goto label12;

        $z3 = r3[i11];

        if $z3 != 0 goto label11;

        i9 = i11;

        goto label12;

     label11:
        i11 = i11 + -1;

        goto label10;

     label12:
        if i9 < 0 goto label16;

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i9);

        r15 = (org.apache.commons.math3.stat.clustering.Clusterable) $r11;

        $r12 = new org.apache.commons.math3.stat.clustering.Cluster;

        specialinvoke $r12.<org.apache.commons.math3.stat.clustering.Cluster: void <init>(org.apache.commons.math3.stat.clustering.Clusterable)>(r15);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r12);

        r3[i9] = 1;

        $i4 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i4 >= i0 goto label15;

        i12 = 0;

     label13:
        if i12 >= i1 goto label15;

        $z2 = r3[i12];

        if $z2 != 0 goto label14;

        $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i12);

        d1 = interfaceinvoke r15.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r13);

        d2 = d1 * d1;

        $d4 = r6[i12];

        $b5 = d2 cmpg $d4;

        if $b5 >= 0 goto label14;

        r6[i12] = d2;

     label14:
        i12 = i12 + 1;

        goto label13;

     label15:
        goto label03;

     label16:
        return $r8;
    }

    private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestVarianceCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.stat.clustering.Cluster r2, r17;
        org.apache.commons.math3.stat.clustering.Clusterable r3, r5, $r8;
        boolean $z0, $z1, $z2;
        java.util.Random $r6;
        int $i0, $i1;
        java.lang.Object $r7, $r12, $r16;
        org.apache.commons.math3.exception.ConvergenceException $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        java.util.List $r13, $r15, r20;
        org.apache.commons.math3.stat.descriptive.moment.Variance $r14;
        byte $b2;
        double $d0, d1, d2;
        java.util.Iterator r18, r19;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r17 = null;

        r18 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.stat.clustering.Cluster) $r12;

        $r13 = virtualinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $z1 = interfaceinvoke $r13.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r3 = virtualinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        $r14 = new org.apache.commons.math3.stat.descriptive.moment.Variance;

        specialinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: void <init>()>();

        $r15 = virtualinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        r19 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r16 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.commons.math3.stat.clustering.Clusterable) $r16;

        $d0 = interfaceinvoke r5.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r3);

        virtualinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: void increment(double)>($d0);

        goto label2;

     label3:
        d2 = virtualinvoke $r14.<org.apache.commons.math3.stat.descriptive.moment.Variance: double getResult()>();

        $b2 = d2 cmpl d1;

        if $b2 <= 0 goto label4;

        d1 = d2;

        r17 = r2;

     label4:
        goto label1;

     label5:
        if r17 != null goto label6;

        $r9 = new org.apache.commons.math3.exception.ConvergenceException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r9.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label6:
        r20 = virtualinvoke r17.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r6 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        $i1 = virtualinvoke $r6.<java.util.Random: int nextInt(int)>($i0);

        $r7 = interfaceinvoke r20.<java.util.List: java.lang.Object remove(int)>($i1);

        $r8 = (org.apache.commons.math3.stat.clustering.Clusterable) $r7;

        return $r8;
    }

    private org.apache.commons.math3.stat.clustering.Clusterable getPointFromLargestNumberCluster(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        org.apache.commons.math3.stat.clustering.Cluster r2, r11;
        int i0, $i1, $i2, i3;
        boolean $z0;
        java.util.Random $r3;
        java.lang.Object $r4, $r9;
        org.apache.commons.math3.stat.clustering.Clusterable $r5;
        org.apache.commons.math3.exception.ConvergenceException $r6;
        java.lang.Object[] $r7;
        org.apache.commons.math3.exception.util.LocalizedFormats $r8;
        java.util.List $r10, r13;
        java.util.Iterator r12;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        i3 = 0;

        r11 = null;

        r12 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.commons.math3.stat.clustering.Cluster) $r9;

        $r10 = virtualinvoke r2.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i0 <= i3 goto label2;

        i3 = i0;

        r11 = r2;

     label2:
        goto label1;

     label3:
        if r11 != null goto label4;

        $r6 = new org.apache.commons.math3.exception.ConvergenceException;

        $r8 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r7 = newarray (java.lang.Object)[0];

        specialinvoke $r6.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r6;

     label4:
        r13 = virtualinvoke r11.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r3 = r0.<org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer: java.util.Random random>;

        $i1 = interfaceinvoke r13.<java.util.List: int size()>();

        $i2 = virtualinvoke $r3.<java.util.Random: int nextInt(int)>($i1);

        $r4 = interfaceinvoke r13.<java.util.List: java.lang.Object remove(int)>($i2);

        $r5 = (org.apache.commons.math3.stat.clustering.Clusterable) $r4;

        return $r5;
    }

    private org.apache.commons.math3.stat.clustering.Clusterable getFarthestPoint(java.util.Collection) throws org.apache.commons.math3.exception.ConvergenceException
    {
        org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        org.apache.commons.math3.stat.clustering.Cluster r3, r15;
        org.apache.commons.math3.stat.clustering.Clusterable r4, $r8, $r14;
        java.util.List r5, $r6;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r7, $r12, $r13;
        org.apache.commons.math3.exception.ConvergenceException $r9;
        java.lang.Object[] $r10;
        org.apache.commons.math3.exception.util.LocalizedFormats $r11;
        int $i0, i2, i3;
        byte $b1;

        r0 := @this: org.apache.commons.math3.stat.clustering.KMeansPlusPlusClusterer;

        r1 := @parameter0: java.util.Collection;

        d1 = #-Infinity;

        r15 = null;

        i2 = -1;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.stat.clustering.Cluster) $r12;

        r4 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        r5 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        i3 = 0;

     label2:
        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if i3 >= $i0 goto label4;

        $r13 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r14 = (org.apache.commons.math3.stat.clustering.Clusterable) $r13;

        d0 = interfaceinvoke $r14.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>(r4);

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label3;

        d1 = d0;

        r15 = r3;

        i2 = i3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        if r15 != null goto label6;

        $r9 = new org.apache.commons.math3.exception.ConvergenceException;

        $r11 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats EMPTY_CLUSTER_IN_K_MEANS>;

        $r10 = newarray (java.lang.Object)[0];

        specialinvoke $r9.<org.apache.commons.math3.exception.ConvergenceException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r9;

     label6:
        $r6 = virtualinvoke r15.<org.apache.commons.math3.stat.clustering.Cluster: java.util.List getPoints()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i2);

        $r8 = (org.apache.commons.math3.stat.clustering.Clusterable) $r7;

        return $r8;
    }

    private static int getNearestCluster(java.util.Collection, org.apache.commons.math3.stat.clustering.Clusterable)
    {
        java.util.Collection r0;
        org.apache.commons.math3.stat.clustering.Clusterable r1, $r5;
        java.util.Iterator r2;
        org.apache.commons.math3.stat.clustering.Cluster r3;
        double d0, d1;
        boolean $z0;
        java.lang.Object $r4;
        byte $b0;
        int i1, i2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: org.apache.commons.math3.stat.clustering.Clusterable;

        d1 = 1.7976931348623157E308;

        i1 = 0;

        i2 = 0;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.commons.math3.stat.clustering.Cluster) $r4;

        $r5 = virtualinvoke r3.<org.apache.commons.math3.stat.clustering.Cluster: org.apache.commons.math3.stat.clustering.Clusterable getCenter()>();

        d0 = interfaceinvoke r1.<org.apache.commons.math3.stat.clustering.Clusterable: double distanceFrom(java.lang.Object)>($r5);

        $b0 = d0 cmpg d1;

        if $b0 >= 0 goto label2;

        d1 = d0;

        i2 = i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return i2;
    }
}
