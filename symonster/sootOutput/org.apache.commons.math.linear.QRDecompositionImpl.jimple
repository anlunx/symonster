public class org.apache.commons.math.linear.QRDecompositionImpl extends java.lang.Object implements org.apache.commons.math.linear.QRDecomposition
{
    private double[][] qrt;
    private double[] rDiag;
    private org.apache.commons.math.linear.RealMatrix cachedQ;
    private org.apache.commons.math.linear.RealMatrix cachedQT;
    private org.apache.commons.math.linear.RealMatrix cachedR;
    private org.apache.commons.math.linear.RealMatrix cachedH;

    public void <init>(org.apache.commons.math.linear.RealMatrix)
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix r1, $r4;
        int i0, i1, $i2, $i3, i6, i7, i8, i9, i10;
        double[] r2, r3, $r6, $r8;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15, $d16, d17, d18, d19;
        double[][] $r5, $r7, $r9;
        byte $b4, $b5;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        r1 := @parameter0: org.apache.commons.math.linear.RealMatrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getRowDimension()>();

        i1 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: int getColumnDimension()>();

        $r4 = interfaceinvoke r1.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix transpose()>();

        $r5 = interfaceinvoke $r4.<org.apache.commons.math.linear.RealMatrix: double[][] getData()>();

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt> = $r5;

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i0, i1);

        $r6 = newarray (double)[$i2];

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag> = $r6;

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQ> = null;

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT> = null;

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR> = null;

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedH> = null;

        i6 = 0;

     label01:
        $i3 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i0, i1);

        if i6 >= $i3 goto label12;

        $r7 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        r2 = $r7[i6];

        d15 = 0.0;

        i7 = i6;

     label02:
        if i7 >= i0 goto label03;

        d0 = r2[i7];

        $d14 = d0 * d0;

        d15 = d15 + $d14;

        i7 = i7 + 1;

        goto label02;

     label03:
        $d1 = r2[i6];

        $b4 = $d1 cmpl 0.0;

        if $b4 <= 0 goto label04;

        $d13 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d15);

        $d16 = neg $d13;

        goto label05;

     label04:
        $d16 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(d15);

     label05:
        d17 = $d16;

        $r8 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag>;

        $r8[i6] = $d16;

        $b5 = $d16 cmpl 0.0;

        if $b5 == 0 goto label11;

        $d2 = r2[i6];

        $d3 = $d2 - $d16;

        r2[i6] = $d3;

        i8 = i6 + 1;

     label06:
        if i8 >= i1 goto label11;

        $r9 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        r3 = $r9[i8];

        d18 = 0.0;

        i9 = i6;

     label07:
        if i9 >= i0 goto label08;

        $d11 = r3[i9];

        $d10 = r2[i9];

        $d12 = $d11 * $d10;

        d18 = d18 - $d12;

        i9 = i9 + 1;

        goto label07;

     label08:
        $d4 = r2[i6];

        $d5 = d17 * $d4;

        d19 = d18 / $d5;

        i10 = i6;

     label09:
        if i10 >= i0 goto label10;

        $d8 = r3[i10];

        $d6 = r2[i10];

        $d7 = d19 * $d6;

        $d9 = $d8 - $d7;

        r3[i10] = $d9;

        i10 = i10 + 1;

        goto label09;

     label10:
        i8 = i8 + 1;

        goto label06;

     label11:
        i6 = i6 + 1;

        goto label01;

     label12:
        return;
    }

    public org.apache.commons.math.linear.RealMatrix getR()
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        int i0, i1, $i2, i3, i4;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r6, $r8, $r11;
        double[][] $r3, $r4, $r9;
        double[] $r5, $r7, $r10;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR>;

        if $r1 != null goto label4;

        $r3 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r5 = $r4[0];

        i1 = lengthof $r5;

        $r6 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i1, i0);

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR> = $r6;

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        i3 = $i2 - 1;

     label1:
        if i3 < 0 goto label4;

        $r8 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR>;

        $r7 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag>;

        $d0 = $r7[i3];

        interfaceinvoke $r8.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i3, i3, $d0);

        i4 = i3 + 1;

     label2:
        if i4 >= i0 goto label3;

        $r11 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR>;

        $r9 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r10 = $r9[i4];

        $d1 = $r10[i3];

        interfaceinvoke $r11.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i3, i4, $d1);

        i4 = i4 + 1;

        goto label2;

     label3:
        i3 = i3 + -1;

        goto label1;

     label4:
        $r2 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedR>;

        return $r2;
    }

    public org.apache.commons.math.linear.RealMatrix getQ()
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQ>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix getQT()>();

        $r4 = interfaceinvoke $r3.<org.apache.commons.math.linear.RealMatrix: org.apache.commons.math.linear.RealMatrix transpose()>();

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQ> = $r4;

     label1:
        $r2 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQ>;

        return $r2;
    }

    public org.apache.commons.math.linear.RealMatrix getQT()
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        int i0, i1, $i2, $i3, i5, i6, i7, i8, i9;
        double[] r1, $r6, $r10;
        org.apache.commons.math.linear.RealMatrix $r2, $r3, $r7, $r9, $r11, $r12, $r13;
        double[][] $r4, $r5, $r8;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, d10, d11;
        byte $b4;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        $r2 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        if $r2 != null goto label10;

        $r4 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        i0 = lengthof $r4;

        $r5 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r6 = $r5[0];

        i1 = lengthof $r6;

        $r7 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i1, i1);

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT> = $r7;

        i5 = i1 - 1;

     label01:
        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        if i5 < $i2 goto label02;

        $r13 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        interfaceinvoke $r13.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i5, i5, 1.0);

        i5 = i5 + -1;

        goto label01;

     label02:
        $i3 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>(i1, i0);

        i6 = $i3 - 1;

     label03:
        if i6 < 0 goto label10;

        $r8 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        r1 = $r8[i6];

        $r9 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        interfaceinvoke $r9.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i6, i6, 1.0);

        $d0 = r1[i6];

        $b4 = $d0 cmpl 0.0;

        if $b4 == 0 goto label09;

        i7 = i6;

     label04:
        if i7 >= i1 goto label09;

        d10 = 0.0;

        i8 = i6;

     label05:
        if i8 >= i1 goto label06;

        $r12 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        $d7 = interfaceinvoke $r12.<org.apache.commons.math.linear.RealMatrix: double getEntry(int,int)>(i7, i8);

        $d8 = r1[i8];

        $d9 = $d7 * $d8;

        d10 = d10 - $d9;

        i8 = i8 + 1;

        goto label05;

     label06:
        $r10 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag>;

        $d2 = $r10[i6];

        $d1 = r1[i6];

        $d3 = $d2 * $d1;

        d11 = d10 / $d3;

        i9 = i6;

     label07:
        if i9 >= i1 goto label08;

        $r11 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        $d5 = neg d11;

        $d4 = r1[i9];

        $d6 = $d5 * $d4;

        interfaceinvoke $r11.<org.apache.commons.math.linear.RealMatrix: void addToEntry(int,int,double)>(i7, i9, $d6);

        i9 = i9 + 1;

        goto label07;

     label08:
        i7 = i7 + 1;

        goto label04;

     label09:
        i6 = i6 + -1;

        goto label03;

     label10:
        $r3 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedQT>;

        return $r3;
    }

    public org.apache.commons.math.linear.RealMatrix getH()
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        int i0, i1, $i2, $i3, i4, i5;
        org.apache.commons.math.linear.RealMatrix $r1, $r2, $r6, $r10;
        double[][] $r3, $r4, $r7;
        double[] $r5, $r8, $r9;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        $r1 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedH>;

        if $r1 != null goto label4;

        $r3 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        i0 = lengthof $r3;

        $r4 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r5 = $r4[0];

        i1 = lengthof $r5;

        $r6 = staticinvoke <org.apache.commons.math.linear.MatrixUtils: org.apache.commons.math.linear.RealMatrix createRealMatrix(int,int)>(i1, i0);

        r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedH> = $r6;

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        i5 = 0;

     label2:
        $i2 = i4 + 1;

        $i3 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i2, i0);

        if i5 >= $i3 goto label3;

        $r10 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedH>;

        $r7 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r8 = $r7[i5];

        $d2 = $r8[i4];

        $r9 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag>;

        $d0 = $r9[i5];

        $d1 = neg $d0;

        $d3 = $d2 / $d1;

        interfaceinvoke $r10.<org.apache.commons.math.linear.RealMatrix: void setEntry(int,int,double)>(i4, i5, $d3);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: org.apache.commons.math.linear.RealMatrix cachedH>;

        return $r2;
    }

    public org.apache.commons.math.linear.DecompositionSolver getSolver()
    {
        org.apache.commons.math.linear.QRDecompositionImpl r0;
        org.apache.commons.math.linear.QRDecompositionImpl$Solver $r1;
        double[] $r2;
        double[][] $r3;

        r0 := @this: org.apache.commons.math.linear.QRDecompositionImpl;

        $r1 = new org.apache.commons.math.linear.QRDecompositionImpl$Solver;

        $r3 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[][] qrt>;

        $r2 = r0.<org.apache.commons.math.linear.QRDecompositionImpl: double[] rDiag>;

        specialinvoke $r1.<org.apache.commons.math.linear.QRDecompositionImpl$Solver: void <init>(double[][],double[],org.apache.commons.math.linear.QRDecompositionImpl$1)>($r3, $r2, null);

        return $r1;
    }
}
