public class org.apache.commons.math3.analysis.function.Sigmoid extends java.lang.Object implements org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction, org.apache.commons.math3.analysis.DifferentiableUnivariateFunction
{
    private final double lo;
    private final double hi;

    public void <init>()
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        specialinvoke r0.<org.apache.commons.math3.analysis.function.Sigmoid: void <init>(double,double)>(0.0, 1.0);

        return;
    }

    public void <init>(double, double)
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        double d0, d1;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo> = d0;

        r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi> = d1;

        return;
    }

    public org.apache.commons.math3.analysis.UnivariateFunction derivative()
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        org.apache.commons.math3.analysis.DifferentiableUnivariateFunction $r1;
        org.apache.commons.math3.analysis.UnivariateFunction $r2;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        $r1 = staticinvoke <org.apache.commons.math3.analysis.FunctionUtils: org.apache.commons.math3.analysis.DifferentiableUnivariateFunction toDifferentiableUnivariateFunction(org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction)>(r0);

        $r2 = interfaceinvoke $r1.<org.apache.commons.math3.analysis.DifferentiableUnivariateFunction: org.apache.commons.math3.analysis.UnivariateFunction derivative()>();

        return $r2;
    }

    public double value(double)
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        double d0, $d1, $d2, $d3;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        $d1 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi>;

        $d3 = staticinvoke <org.apache.commons.math3.analysis.function.Sigmoid: double value(double,double,double)>(d0, $d2, $d1);

        return $d3;
    }

    private static double value(double, double, double)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d4 = d2 - d1;

        $d3 = neg d0;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d3);

        $d6 = 1.0 + $d5;

        $d7 = $d4 / $d6;

        $d8 = d1 + $d7;

        return $d8;
    }

    public org.apache.commons.math3.analysis.differentiation.DerivativeStructure value(org.apache.commons.math3.analysis.differentiation.DerivativeStructure) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.analysis.function.Sigmoid r0;
        org.apache.commons.math3.analysis.differentiation.DerivativeStructure r1, $r4;
        double[] r2, r3;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, d21, d22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        boolean $z0;

        r0 := @this: org.apache.commons.math3.analysis.function.Sigmoid;

        r1 := @parameter0: org.apache.commons.math3.analysis.differentiation.DerivativeStructure;

        $i0 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: int getOrder()>();

        $i1 = $i0 + 1;

        r2 = newarray (double)[$i1];

        $d2 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: double getValue()>();

        $d3 = neg $d2;

        d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d3);

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 == 0 goto label1;

        $d20 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        r2[0] = $d20;

        $i10 = lengthof r2;

        staticinvoke <java.util.Arrays: void fill(double[],int,int,double)>(r2, 1, $i10, 0.0);

        goto label8;

     label1:
        $i2 = lengthof r2;

        r3 = newarray (double)[$i2];

        $d4 = 1.0 + d0;

        d1 = 1.0 / $d4;

        $d6 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double hi>;

        $d5 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        d21 = $d6 - $d5;

        i11 = 0;

     label2:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label7;

        d22 = 0.0;

        r3[i11] = 1.0;

        i12 = i11;

     label3:
        if i12 < 0 goto label6;

        $d12 = d22 * d0;

        $d11 = r3[i12];

        d22 = $d12 + $d11;

        if i12 <= 1 goto label4;

        $i9 = i12 - 1;

        $i4 = i11 - i12;

        $i5 = $i4 + 2;

        $d14 = (double) $i5;

        $i6 = i12 - 2;

        $d13 = r3[$i6];

        $d18 = $d14 * $d13;

        $i7 = i12 - 1;

        $d16 = (double) $i7;

        $i8 = i12 - 1;

        $d15 = r3[$i8];

        $d17 = $d16 * $d15;

        $d19 = $d18 - $d17;

        r3[$i9] = $d19;

        goto label5;

     label4:
        r3[0] = 0.0;

     label5:
        i12 = i12 + -1;

        goto label3;

     label6:
        d21 = d21 * d1;

        $d10 = d21 * d22;

        r2[i11] = $d10;

        i11 = i11 + 1;

        goto label2;

     label7:
        $d8 = r2[0];

        $d7 = r0.<org.apache.commons.math3.analysis.function.Sigmoid: double lo>;

        $d9 = $d8 + $d7;

        r2[0] = $d9;

     label8:
        $r4 = virtualinvoke r1.<org.apache.commons.math3.analysis.differentiation.DerivativeStructure: org.apache.commons.math3.analysis.differentiation.DerivativeStructure compose(double[])>(r2);

        return $r4;
    }

    static double access$000(double, double, double)
    {
        double d0, d1, d2, $d3;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $d3 = staticinvoke <org.apache.commons.math3.analysis.function.Sigmoid: double value(double,double,double)>(d0, d1, d2);

        return $d3;
    }
}
