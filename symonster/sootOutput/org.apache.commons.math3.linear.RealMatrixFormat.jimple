public class org.apache.commons.math3.linear.RealMatrixFormat extends java.lang.Object
{
    private static final java.lang.String DEFAULT_PREFIX;
    private static final java.lang.String DEFAULT_SUFFIX;
    private static final java.lang.String DEFAULT_ROW_PREFIX;
    private static final java.lang.String DEFAULT_ROW_SUFFIX;
    private static final java.lang.String DEFAULT_ROW_SEPARATOR;
    private static final java.lang.String DEFAULT_COLUMN_SEPARATOR;
    private final java.lang.String prefix;
    private final java.lang.String suffix;
    private final java.lang.String rowPrefix;
    private final java.lang.String rowSuffix;
    private final java.lang.String rowSeparator;
    private final java.lang.String columnSeparator;
    private final java.text.NumberFormat format;

    public void <init>()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat()>();

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>("{", "}", "{", "}", ",", ",", $r1);

        return;
    }

    public void <init>(java.text.NumberFormat)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: java.text.NumberFormat;

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>("{", "}", "{", "}", ",", ",", r1);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1, r2, r3, r4, r5, r6;
        java.text.NumberFormat $r7;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        $r7 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat()>();

        specialinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)>(r1, r2, r3, r4, r5, r6, $r7);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1, r2, r3, r4, r5, r6;
        java.text.NumberFormat r7, $r8;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.text.NumberFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix> = r1;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix> = r2;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix> = r3;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix> = r4;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator> = r5;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator> = r6;

        r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format> = r7;

        $r8 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        virtualinvoke $r8.<java.text.NumberFormat: void setGroupingUsed(boolean)>(0);

        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>();

        return $r0;
    }

    public java.lang.String getPrefix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        return $r1;
    }

    public java.lang.String getSuffix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        return $r1;
    }

    public java.lang.String getRowPrefix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        return $r1;
    }

    public java.lang.String getRowSuffix()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        return $r1;
    }

    public java.lang.String getRowSeparator()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        return $r1;
    }

    public java.lang.String getColumnSeparator()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        return $r1;
    }

    public java.text.NumberFormat getFormat()
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.text.NumberFormat $r1;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        $r1 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        return $r1;
    }

    public static org.apache.commons.math3.linear.RealMatrixFormat getInstance()
    {
        java.util.Locale $r0;
        org.apache.commons.math3.linear.RealMatrixFormat $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static org.apache.commons.math3.linear.RealMatrixFormat getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        org.apache.commons.math3.linear.RealMatrixFormat $r1;
        java.text.NumberFormat $r2;

        r0 := @parameter0: java.util.Locale;

        $r1 = new org.apache.commons.math3.linear.RealMatrixFormat;

        $r2 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.text.NumberFormat getDefaultNumberFormat(java.util.Locale)>(r0);

        specialinvoke $r1.<org.apache.commons.math3.linear.RealMatrixFormat: void <init>(java.text.NumberFormat)>($r2);

        return $r1;
    }

    public java.lang.String format(org.apache.commons.math3.linear.RealMatrix)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        java.lang.StringBuffer $r2, $r4;
        java.text.FieldPosition $r3;
        java.lang.String $r5;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = new java.text.FieldPosition;

        specialinvoke $r3.<java.text.FieldPosition: void <init>(int)>(0);

        $r4 = virtualinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.StringBuffer format(org.apache.commons.math3.linear.RealMatrix,java.lang.StringBuffer,java.text.FieldPosition)>(r1, $r2, $r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.StringBuffer format(org.apache.commons.math3.linear.RealMatrix, java.lang.StringBuffer, java.text.FieldPosition)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        org.apache.commons.math3.linear.RealMatrix r1;
        java.lang.StringBuffer r2;
        java.text.FieldPosition r3;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r4, $r6, $r8, $r10, $r12, $r16;
        double $d0;
        java.text.NumberFormat $r14;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: org.apache.commons.math3.linear.RealMatrix;

        r2 := @parameter1: java.lang.StringBuffer;

        r3 := @parameter2: java.text.FieldPosition;

        virtualinvoke r3.<java.text.FieldPosition: void setBeginIndex(int)>(0);

        virtualinvoke r3.<java.text.FieldPosition: void setEndIndex(int)>(0);

        $r4 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getRowDimension()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        $r8 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        i4 = 0;

     label2:
        $i1 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: int getColumnDimension()>();

        if i4 >= $i1 goto label4;

        if i4 <= 0 goto label3;

        $r16 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

     label3:
        $d0 = interfaceinvoke r1.<org.apache.commons.math3.linear.RealMatrix: double getEntry(int,int)>(i3, i4);

        $r14 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.lang.StringBuffer formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)>($d0, $r14, r2, r3);

        i4 = i4 + 1;

        goto label2;

     label4:
        $r10 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $i2 = i0 - 1;

        if i3 >= $i2 goto label5;

        $r12 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r6 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        return r2;
    }

    public org.apache.commons.math3.linear.RealMatrix parse(java.lang.String)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1;
        org.apache.commons.math3.linear.RealMatrix r3;
        java.text.ParsePosition $r4;
        int $i0, $i1;
        org.apache.commons.math3.exception.MathParseException $r5;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.text.ParsePosition;

        specialinvoke $r4.<java.text.ParsePosition: void <init>(int)>(0);

        r3 = virtualinvoke r0.<org.apache.commons.math3.linear.RealMatrixFormat: org.apache.commons.math3.linear.RealMatrix parse(java.lang.String,java.text.ParsePosition)>(r1, $r4);

        $i0 = virtualinvoke $r4.<java.text.ParsePosition: int getIndex()>();

        if $i0 != 0 goto label1;

        $r5 = new org.apache.commons.math3.exception.MathParseException;

        $i1 = virtualinvoke $r4.<java.text.ParsePosition: int getErrorIndex()>();

        specialinvoke $r5.<org.apache.commons.math3.exception.MathParseException: void <init>(java.lang.String,int,java.lang.Class)>(r1, $i1, class "org/apache/commons/math3/linear/Array2DRowRealMatrix");

        throw $r5;

     label1:
        return r3;
    }

    public org.apache.commons.math3.linear.RealMatrix parse(java.lang.String, java.text.ParsePosition)
    {
        org.apache.commons.math3.linear.RealMatrixFormat r0;
        java.lang.String r1, r3, r4, r5, r6, r7, r8, $r12, $r13, $r14, $r15, $r16, $r17;
        java.text.ParsePosition r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.util.Iterator r10;
        java.util.List r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z9, $z10, $z11, $z13, z14;
        java.util.ArrayList $r18, $r19, $r27, r28;
        org.apache.commons.math3.linear.RealMatrix $r20;
        java.lang.Object $r21, $r24;
        double[] $r22, $r23;
        java.lang.Number $r25, r29;
        double $d0;
        java.text.NumberFormat $r26;
        double[][] r30;

        r0 := @this: org.apache.commons.math3.linear.RealMatrixFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        i0 = virtualinvoke r2.<java.text.ParsePosition: int getIndex()>();

        $r12 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String prefix>;

        r3 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        $r13 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String suffix>;

        r4 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>();

        $r14 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowPrefix>;

        r5 = virtualinvoke $r14.<java.lang.String: java.lang.String trim()>();

        $r15 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSuffix>;

        r6 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>();

        $r16 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String columnSeparator>;

        r7 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        $r17 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String rowSeparator>;

        r8 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $z0 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r3, r2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        r28 = $r19;

        z14 = 1;

     label02:
        if z14 == 0 goto label10;

        $z6 = interfaceinvoke r28.<java.util.List: boolean isEmpty()>();

        if $z6 != 0 goto label05;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $z10 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r7, r2);

        if $z10 != 0 goto label06;

        $i5 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i5 == 0 goto label03;

        $z13 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r6, r2);

        if $z13 != 0 goto label03;

        return null;

     label03:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $z11 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r8, r2);

        if $z11 == 0 goto label04;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r28);

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        r28 = $r27;

        goto label02;

     label04:
        z14 = 0;

        goto label06;

     label05:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $i4 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i4 == 0 goto label06;

        $z9 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r5, r2);

        if $z9 != 0 goto label06;

        return null;

     label06:
        if z14 == 0 goto label02;

        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $r26 = r0.<org.apache.commons.math3.linear.RealMatrixFormat: java.text.NumberFormat format>;

        r29 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: java.lang.Number parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)>(r1, $r26, r2);

        if r29 == null goto label07;

        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>(r29);

        goto label09;

     label07:
        $z7 = interfaceinvoke r28.<java.util.List: boolean isEmpty()>();

        if $z7 == 0 goto label08;

        z14 = 0;

        goto label09;

     label08:
        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i0);

        return null;

     label09:
        goto label02;

     label10:
        $z1 = interfaceinvoke r28.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r28);

     label11:
        staticinvoke <org.apache.commons.math3.util.CompositeFormat: void parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)>(r1, r2);

        $z2 = staticinvoke <org.apache.commons.math3.util.CompositeFormat: boolean parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)>(r1, r4, r2);

        if $z2 != 0 goto label12;

        return null;

     label12:
        $z3 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label13;

        virtualinvoke r2.<java.text.ParsePosition: void setIndex(int)>(i0);

        return null;

     label13:
        $i1 = interfaceinvoke $r18.<java.util.List: int size()>();

        r30 = newarray (double[])[$i1];

        i6 = 0;

        r10 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label17;

        $r21 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.List) $r21;

        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        $r22 = newarray (double)[$i2];

        r30[i6] = $r22;

        i7 = 0;

     label15:
        $i3 = interfaceinvoke r11.<java.util.List: int size()>();

        if i7 >= $i3 goto label16;

        $r23 = r30[i6];

        $r24 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i7);

        $r25 = (java.lang.Number) $r24;

        $d0 = virtualinvoke $r25.<java.lang.Number: double doubleValue()>();

        $r23[i7] = $d0;

        i7 = i7 + 1;

        goto label15;

     label16:
        i6 = i6 + 1;

        goto label14;

     label17:
        $r20 = staticinvoke <org.apache.commons.math3.linear.MatrixUtils: org.apache.commons.math3.linear.RealMatrix createRealMatrix(double[][])>(r30);

        return $r20;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_COLUMN_SEPARATOR> = ",";

        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_ROW_SEPARATOR> = ",";

        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_ROW_SUFFIX> = "}";

        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_ROW_PREFIX> = "{";

        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_SUFFIX> = "}";

        <org.apache.commons.math3.linear.RealMatrixFormat: java.lang.String DEFAULT_PREFIX> = "{";

        return;
    }
}
