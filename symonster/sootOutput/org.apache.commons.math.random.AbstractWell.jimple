public abstract class org.apache.commons.math.random.AbstractWell extends org.apache.commons.math.random.BitsStreamGenerator implements java.io.Serializable
{
    private static final long serialVersionUID;
    protected int index;
    protected final int[] v;
    protected final int[] iRm1;
    protected final int[] iRm2;
    protected final int[] i1;
    protected final int[] i2;
    protected final int[] i3;

    protected void <init>(int, int, int, int)
    {
        org.apache.commons.math.random.AbstractWell r0;
        int i0, i1, i2, i3;
        long $l4;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<org.apache.commons.math.random.AbstractWell: void <init>(int,int,int,int,long)>(i0, i1, i2, i3, $l4);

        return;
    }

    protected void <init>(int, int, int, int, int)
    {
        org.apache.commons.math.random.AbstractWell r0;
        int i0, i1, i2, i3, i4;
        int[] $r1;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = newarray (int)[1];

        $r1[0] = i4;

        specialinvoke r0.<org.apache.commons.math.random.AbstractWell: void <init>(int,int,int,int,int[])>(i0, i1, i2, i3, $r1);

        return;
    }

    protected void <init>(int, int, int, int, int[])
    {
        org.apache.commons.math.random.AbstractWell r0;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        specialinvoke r0.<org.apache.commons.math.random.BitsStreamGenerator: void <init>()>();

        $i6 = i0 + 32;

        $i7 = $i6 - 1;

        i5 = $i7 / 32;

        $r2 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] v> = $r2;

        r0.<org.apache.commons.math.random.AbstractWell: int index> = 0;

        $r3 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] iRm1> = $r3;

        $r4 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] iRm2> = $r4;

        $r5 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] i1> = $r5;

        $r6 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] i2> = $r6;

        $r7 = newarray (int)[i5];

        r0.<org.apache.commons.math.random.AbstractWell: int[] i3> = $r7;

        i20 = 0;

     label1:
        if i20 >= i5 goto label2;

        $r8 = r0.<org.apache.commons.math.random.AbstractWell: int[] iRm1>;

        $i8 = i20 + i5;

        $i9 = $i8 - 1;

        $i10 = $i9 % i5;

        $r8[i20] = $i10;

        $r9 = r0.<org.apache.commons.math.random.AbstractWell: int[] iRm2>;

        $i11 = i20 + i5;

        $i12 = $i11 - 2;

        $i13 = $i12 % i5;

        $r9[i20] = $i13;

        $r10 = r0.<org.apache.commons.math.random.AbstractWell: int[] i1>;

        $i14 = i20 + i1;

        $i15 = $i14 % i5;

        $r10[i20] = $i15;

        $r11 = r0.<org.apache.commons.math.random.AbstractWell: int[] i2>;

        $i16 = i20 + i2;

        $i17 = $i16 % i5;

        $r11[i20] = $i17;

        $r12 = r0.<org.apache.commons.math.random.AbstractWell: int[] i3>;

        $i18 = i20 + i3;

        $i19 = $i18 % i5;

        $r12[i20] = $i19;

        i20 = i20 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.commons.math.random.AbstractWell: void setSeed(int[])>(r1);

        return;
    }

    protected void <init>(int, int, int, int, long)
    {
        org.apache.commons.math.random.AbstractWell r0;
        int i0, i1, i2, i3, $i6, $i8;
        long l4, $l5, $l7;
        int[] $r1;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        $r1 = newarray (int)[2];

        $l5 = l4 >>> 32;

        $i6 = (int) $l5;

        $r1[0] = $i6;

        $l7 = l4 & 4294967295L;

        $i8 = (int) $l7;

        $r1[1] = $i8;

        specialinvoke r0.<org.apache.commons.math.random.AbstractWell: void <init>(int,int,int,int,int[])>(i0, i1, i2, i3, $r1);

        return;
    }

    public void setSeed(int)
    {
        org.apache.commons.math.random.AbstractWell r0;
        int i0;
        int[] $r1;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        i0 := @parameter0: int;

        $r1 = newarray (int)[1];

        $r1[0] = i0;

        virtualinvoke r0.<org.apache.commons.math.random.AbstractWell: void setSeed(int[])>($r1);

        return;
    }

    public void setSeed(int[])
    {
        org.apache.commons.math.random.AbstractWell r0;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7;
        long l0, $l10, $l11, $l12, $l13, $l14, $l15, $l17;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i16, i18;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        r1 := @parameter0: int[];

        if r1 != null goto label1;

        $l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<org.apache.commons.math.random.AbstractWell: void setSeed(long)>($l17);

        return;

     label1:
        $r3 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $i2 = lengthof r1;

        $r2 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $i1 = lengthof $r2;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i3);

        $i5 = lengthof r1;

        $r4 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $i4 = lengthof $r4;

        if $i5 >= $i4 goto label3;

        i18 = lengthof r1;

     label2:
        $r5 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $i6 = lengthof $r5;

        if i18 >= $i6 goto label3;

        $r6 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $i7 = lengthof r1;

        $i8 = i18 - $i7;

        $i9 = $r6[$i8];

        l0 = (long) $i9;

        $r7 = r0.<org.apache.commons.math.random.AbstractWell: int[] v>;

        $l10 = l0 >> 30;

        $l11 = l0 ^ $l10;

        $l13 = 1812433253L * $l11;

        $l12 = (long) i18;

        $l14 = $l13 + $l12;

        $l15 = $l14 & 4294967295L;

        $i16 = (int) $l15;

        $r7[i18] = $i16;

        i18 = i18 + 1;

        goto label2;

     label3:
        r0.<org.apache.commons.math.random.AbstractWell: int index> = 0;

        return;
    }

    public void setSeed(long)
    {
        org.apache.commons.math.random.AbstractWell r0;
        long l0, $l1, $l3;
        int[] $r1;
        int $i2, $i4;

        r0 := @this: org.apache.commons.math.random.AbstractWell;

        l0 := @parameter0: long;

        $r1 = newarray (int)[2];

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        $r1[0] = $i2;

        $l3 = l0 & 4294967295L;

        $i4 = (int) $l3;

        $r1[1] = $i4;

        virtualinvoke r0.<org.apache.commons.math.random.AbstractWell: void setSeed(int[])>($r1);

        return;
    }

    protected abstract int next(int);

    public static void <clinit>()
    {
        <org.apache.commons.math.random.AbstractWell: long serialVersionUID> = -817701723016583596L;

        return;
    }
}
