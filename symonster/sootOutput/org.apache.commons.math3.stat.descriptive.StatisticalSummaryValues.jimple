public class org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues extends java.lang.Object implements java.io.Serializable, org.apache.commons.math3.stat.descriptive.StatisticalSummary
{
    private static final long serialVersionUID;
    private final double mean;
    private final double variance;
    private final long n;
    private final double max;
    private final double min;
    private final double sum;

    public void <init>(double, double, long, double, double, double)
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double d0, d1, d2, d3, d4;
        long l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        l0 := @parameter2: long;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double mean> = d0;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance> = d1;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long n> = l0;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double max> = d2;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double min> = d3;

        r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double sum> = d4;

        return;
    }

    public double getMax()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double max>;

        return $d0;
    }

    public double getMean()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double mean>;

        return $d0;
    }

    public double getMin()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double min>;

        return $d0;
    }

    public long getN()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        long $l0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $l0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long n>;

        return $l0;
    }

    public double getSum()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double sum>;

        return $d0;
    }

    public double getStandardDeviation()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0, $d1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance>;

        $d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double sqrt(double)>($d0);

        return $d1;
    }

    public double getVariance()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double variance>;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;
        long $l0, $l1;
        float $f0, $f1;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues) r1;

        $d0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $z1 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d0, $d1);

        if $z1 == 0 goto label3;

        $d2 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $z2 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d2, $d3);

        if $z2 == 0 goto label3;

        $d4 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $z3 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d4, $d5);

        if $z3 == 0 goto label3;

        $l0 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $f0 = (float) $l0;

        $l1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $f1 = (float) $l1;

        $z4 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(float,float)>($f0, $f1);

        if $z4 == 0 goto label3;

        $d6 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $d7 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $z5 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d6, $d7);

        if $z5 == 0 goto label3;

        $d8 = virtualinvoke r2.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $d9 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $z6 = staticinvoke <org.apache.commons.math3.util.Precision: boolean equalsIncludingNaN(double,double)>($d8, $d9);

        if $z6 == 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        return $z7;
    }

    public int hashCode()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        long $l6;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $i0 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d0);

        i12 = 31 + $i0;

        $i1 = i12 * 31;

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $i2 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d1);

        i13 = $i1 + $i2;

        $i3 = i13 * 31;

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $i4 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d2);

        i14 = $i3 + $i4;

        $i5 = i14 * 31;

        $l6 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $d3 = (double) $l6;

        $i7 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d3);

        i15 = $i5 + $i7;

        $i8 = i15 * 31;

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $i9 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d4);

        i16 = $i8 + $i9;

        $i10 = i16 * 31;

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $i11 = staticinvoke <org.apache.commons.math3.util.MathUtils: int hash(double)>($d5);

        i17 = $i10 + $i11;

        return i17;
    }

    public java.lang.String toString()
    {
        org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues r0;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21, $r22, $r24, $r25;
        long $l0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        java.lang.String $r27;

        r0 := @this: org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("StatisticalSummaryValues:");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("n: ");

        $l0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long getN()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l0);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("min: ");

        $d0 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMin()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d0);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r12 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("max: ");

        $d1 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMax()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d1);

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r15 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("mean: ");

        $d2 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getMean()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d2);

        virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r18 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("std dev: ");

        $d3 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getStandardDeviation()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d3);

        virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r21 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("variance: ");

        $d4 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getVariance()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d4);

        virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r24 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("sum: ");

        $d5 = virtualinvoke r0.<org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: double getSum()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(double)>($d5);

        virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r27 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r27;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math3.stat.descriptive.StatisticalSummaryValues: long serialVersionUID> = -5108854841843722536L;

        return;
    }
}
