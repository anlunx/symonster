public class org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction extends java.lang.Object implements org.apache.commons.math.analysis.DifferentiableUnivariateRealFunction
{
    private final double[] knots;
    private final org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials;
    private final int n;

    public void <init>(double[], org.apache.commons.math.analysis.polynomials.PolynomialFunction[])
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0;
        double[] r1, $r3, $r4;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction[] r2, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean $z0;
        java.lang.Object[] $r7, $r10, $r15;
        org.apache.commons.math.exception.util.LocalizedFormats $r8, $r11, $r16;
        java.lang.IllegalArgumentException $r9, $r14, $r19;
        java.lang.Integer $r12, $r13, $r17, $r18;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        r1 := @parameter0: double[];

        r2 := @parameter1: org.apache.commons.math.analysis.polynomials.PolynomialFunction[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        if $i0 >= 2 goto label1;

        $r16 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION>;

        $r15 = newarray (java.lang.Object)[2];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15[0] = $r17;

        $i14 = lengthof r1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r15[1] = $r18;

        $r19 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r16, $r15);

        throw $r19;

     label1:
        $i1 = lengthof r1;

        $i3 = $i1 - 1;

        $i2 = lengthof r2;

        if $i3 == $i2 goto label2;

        $r11 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS>;

        $r10 = newarray (java.lang.Object)[2];

        $i12 = lengthof r2;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        $r10[0] = $r12;

        $i13 = lengthof r1;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        $r10[1] = $r13;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r11, $r10);

        throw $r14;

     label2:
        $z0 = staticinvoke <org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: boolean isStrictlyIncreasing(double[])>(r1);

        if $z0 != 0 goto label3;

        $r8 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NOT_STRICTLY_INCREASING_KNOT_VALUES>;

        $r7 = newarray (java.lang.Object)[0];

        $r9 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalArgumentException createIllegalArgumentException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r8, $r7);

        throw $r9;

     label3:
        $i4 = lengthof r1;

        $i5 = $i4 - 1;

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n> = $i5;

        $i6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i7 = $i6 + 1;

        $r3 = newarray (double)[$i7];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots> = $r3;

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i8 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i9 = $i8 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, 0, $i9);

        $i10 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $r5 = newarray (org.apache.commons.math.analysis.polynomials.PolynomialFunction)[$i10];

        r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials> = $r5;

        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i11 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i11);

        return;
    }

    public double value(double) throws org.apache.commons.math.ArgumentOutsideDomainException
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        double[] $r1, $r3, $r4, $r5, $r6, $r9;
        byte $b0, $b3;
        org.apache.commons.math.ArgumentOutsideDomainException $r2;
        int $i1, $i2, $i4, $i5, i6;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction[] $r7, $r8;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r10;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d1 = $r1[0];

        $b0 = d0 cmpg $d1;

        if $b0 < 0 goto label1;

        $r5 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d4 = $r5[$i2];

        $b3 = d0 cmpl $d4;

        if $b3 <= 0 goto label2;

     label1:
        $r2 = new org.apache.commons.math.ArgumentOutsideDomainException;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d3 = $r3[0];

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $d2 = $r4[$i1];

        specialinvoke $r2.<org.apache.commons.math.ArgumentOutsideDomainException: void <init>(double,double,double)>(d0, $d3, $d2);

        throw $r2;

     label2:
        $r6 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        i6 = staticinvoke <java.util.Arrays: int binarySearch(double[],double)>($r6, d0);

        if i6 >= 0 goto label3;

        $i5 = neg i6;

        i6 = $i5 - 2;

     label3:
        $r7 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i4 = lengthof $r7;

        if i6 < $i4 goto label4;

        i6 = i6 + -1;

     label4:
        $r8 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r10 = $r8[i6];

        $r9 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $d5 = $r9[i6];

        $d6 = d0 - $d5;

        $d7 = virtualinvoke $r10.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: double value(double)>($d6);

        return $d7;
    }

    public org.apache.commons.math.analysis.UnivariateRealFunction derivative()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0, $r1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $r1 = virtualinvoke r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()>();

        return $r1;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction polynomialSplineDerivative()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0, $r2;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction[] r1, $r4;
        int $i0, $i1, i2;
        double[] $r3;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction $r5, $r6;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math.analysis.polynomials.PolynomialFunction)[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        if i2 >= $i1 goto label2;

        $r4 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials>;

        $r5 = $r4[i2];

        $r6 = virtualinvoke $r5.<org.apache.commons.math.analysis.polynomials.PolynomialFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction polynomialDerivative()>();

        r1[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $r3 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        specialinvoke $r2.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: void <init>(double[],org.apache.commons.math.analysis.polynomials.PolynomialFunction[])>($r3, r1);

        return $r2;
    }

    public int getN()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0;
        int $i0;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        return $i0;
    }

    public org.apache.commons.math.analysis.polynomials.PolynomialFunction[] getPolynomials()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0;
        org.apache.commons.math.analysis.polynomials.PolynomialFunction[] r1, $r2;
        int $i0, $i1;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        r1 = newarray (org.apache.commons.math.analysis.polynomials.PolynomialFunction)[$i0];

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: org.apache.commons.math.analysis.polynomials.PolynomialFunction[] polynomials>;

        $i1 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public double[] getKnots()
    {
        org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction r0;
        double[] r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction;

        $i0 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i1 = $i0 + 1;

        r1 = newarray (double)[$i1];

        $r2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: double[] knots>;

        $i2 = r0.<org.apache.commons.math.analysis.polynomials.PolynomialSplineFunction: int n>;

        $i3 = $i2 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i3);

        return r1;
    }

    private static boolean isStrictlyIncreasing(double[])
    {
        double[] r0;
        int $i0, $i1, i3;
        double $d0, $d1;
        byte $b2;

        r0 := @parameter0: double[];

        i3 = 1;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label3;

        $i1 = i3 - 1;

        $d1 = r0[$i1];

        $d0 = r0[i3];

        $b2 = $d1 cmpl $d0;

        if $b2 < 0 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }
}
