class org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper extends java.lang.Object implements org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$Mapper
{
    private final double upper;

    public void <init>(double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper r0;
        double d0;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper: double upper> = d0;

        return;
    }

    public double unboundedToBounded(double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper;

        d0 := @parameter0: double;

        $d2 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper: double upper>;

        $d1 = neg d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d1);

        $d4 = $d2 - $d3;

        return $d4;
    }

    public double boundedToUnbounded(double)
    {
        org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper r0;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter$UpperBoundMapper: double upper>;

        $d2 = $d1 - d0;

        $d3 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d2);

        $d4 = neg $d3;

        return $d4;
    }
}
