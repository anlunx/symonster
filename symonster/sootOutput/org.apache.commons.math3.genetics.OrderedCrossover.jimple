public class org.apache.commons.math3.genetics.OrderedCrossover extends java.lang.Object implements org.apache.commons.math3.genetics.CrossoverPolicy
{

    public void <init>()
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.commons.math3.genetics.ChromosomePair crossover(org.apache.commons.math3.genetics.Chromosome, org.apache.commons.math3.genetics.Chromosome) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathIllegalArgumentException
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;
        org.apache.commons.math3.genetics.Chromosome r1, r2;
        boolean $z0, $z1;
        org.apache.commons.math3.exception.MathIllegalArgumentException $r3;
        java.lang.Object[] $r4;
        org.apache.commons.math3.exception.util.LocalizedFormats $r5;
        org.apache.commons.math3.genetics.AbstractListChromosome $r6, $r7;
        org.apache.commons.math3.genetics.ChromosomePair $r8;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.Chromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.Chromosome;

        $z0 = r1 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z0 == 0 goto label1;

        $z1 = r2 instanceof org.apache.commons.math3.genetics.AbstractListChromosome;

        if $z1 != 0 goto label2;

     label1:
        $r3 = new org.apache.commons.math3.exception.MathIllegalArgumentException;

        $r5 = <org.apache.commons.math3.exception.util.LocalizedFormats: org.apache.commons.math3.exception.util.LocalizedFormats INVALID_FIXED_LENGTH_CHROMOSOME>;

        $r4 = newarray (java.lang.Object)[0];

        specialinvoke $r3.<org.apache.commons.math3.exception.MathIllegalArgumentException: void <init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])>($r5, $r4);

        throw $r3;

     label2:
        $r7 = (org.apache.commons.math3.genetics.AbstractListChromosome) r1;

        $r6 = (org.apache.commons.math3.genetics.AbstractListChromosome) r2;

        $r8 = virtualinvoke r0.<org.apache.commons.math3.genetics.OrderedCrossover: org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome,org.apache.commons.math3.genetics.AbstractListChromosome)>($r7, $r6);

        return $r8;
    }

    protected org.apache.commons.math3.genetics.ChromosomePair mate(org.apache.commons.math3.genetics.AbstractListChromosome, org.apache.commons.math3.genetics.AbstractListChromosome) throws org.apache.commons.math3.exception.DimensionMismatchException
    {
        org.apache.commons.math3.genetics.OrderedCrossover r0;
        org.apache.commons.math3.genetics.AbstractListChromosome r1, r2, $r19, $r20;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, i11;
        java.util.List r3, r4, $r16, $r17;
        org.apache.commons.math3.random.RandomGenerator r9;
        java.lang.Object r10, r11;
        java.util.ArrayList $r12, $r13;
        java.util.HashSet $r14, $r15;
        org.apache.commons.math3.genetics.ChromosomePair $r18;
        boolean $z4, $z5;
        org.apache.commons.math3.exception.DimensionMismatchException $r21;

        r0 := @this: org.apache.commons.math3.genetics.OrderedCrossover;

        r1 := @parameter0: org.apache.commons.math3.genetics.AbstractListChromosome;

        r2 := @parameter1: org.apache.commons.math3.genetics.AbstractListChromosome;

        i0 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        $i6 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        if i0 == $i6 goto label1;

        $r21 = new org.apache.commons.math3.exception.DimensionMismatchException;

        $i10 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: int getLength()>();

        specialinvoke $r21.<org.apache.commons.math3.exception.DimensionMismatchException: void <init>(int,int)>($i10, i0);

        throw $r21;

     label1:
        r3 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        r4 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: java.util.List getRepresentation()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(i0);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>(i0);

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>(int)>(i0);

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>(int)>(i0);

        r9 = staticinvoke <org.apache.commons.math3.genetics.GeneticAlgorithm: org.apache.commons.math3.random.RandomGenerator getRandomGenerator()>();

        i1 = interfaceinvoke r9.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

     label2:
        i2 = interfaceinvoke r9.<org.apache.commons.math3.random.RandomGenerator: int nextInt(int)>(i0);

        if i1 == i2 goto label2;

        i3 = staticinvoke <org.apache.commons.math3.util.FastMath: int min(int,int)>(i1, i2);

        i4 = staticinvoke <org.apache.commons.math3.util.FastMath: int max(int,int)>(i1, i2);

        $i7 = i4 + 1;

        $r16 = interfaceinvoke r3.<java.util.List: java.util.List subList(int,int)>(i3, $i7);

        interfaceinvoke $r12.<java.util.List: boolean addAll(java.util.Collection)>($r16);

        interfaceinvoke $r14.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $i8 = i4 + 1;

        $r17 = interfaceinvoke r4.<java.util.List: java.util.List subList(int,int)>(i3, $i8);

        interfaceinvoke $r13.<java.util.List: boolean addAll(java.util.Collection)>($r17);

        interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r13);

        i11 = 1;

     label3:
        if i11 > i0 goto label6;

        $i9 = i4 + i11;

        i5 = $i9 % i0;

        r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i5);

        r11 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i5);

        $z4 = interfaceinvoke $r14.<java.util.Set: boolean contains(java.lang.Object)>(r11);

        if $z4 != 0 goto label4;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r11);

        interfaceinvoke $r14.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label4:
        $z5 = interfaceinvoke $r15.<java.util.Set: boolean contains(java.lang.Object)>(r10);

        if $z5 != 0 goto label5;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r10);

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r10);

     label5:
        i11 = i11 + 1;

        goto label3;

     label6:
        staticinvoke <java.util.Collections: void rotate(java.util.List,int)>($r12, i3);

        staticinvoke <java.util.Collections: void rotate(java.util.List,int)>($r13, i3);

        $r18 = new org.apache.commons.math3.genetics.ChromosomePair;

        $r19 = virtualinvoke r1.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r12);

        $r20 = virtualinvoke r2.<org.apache.commons.math3.genetics.AbstractListChromosome: org.apache.commons.math3.genetics.AbstractListChromosome newFixedLengthChromosome(java.util.List)>($r13);

        specialinvoke $r18.<org.apache.commons.math3.genetics.ChromosomePair: void <init>(org.apache.commons.math3.genetics.Chromosome,org.apache.commons.math3.genetics.Chromosome)>($r19, $r20);

        return $r18;
    }
}
