public class org.apache.commons.math.random.EmpiricalDistributionImpl extends java.lang.Object implements java.io.Serializable, org.apache.commons.math.random.EmpiricalDistribution
{
    private static final long serialVersionUID;
    private final java.util.List binStats;
    private org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats;
    private double max;
    private double min;
    private double delta;
    private final int binCount;
    private boolean loaded;
    private double[] upperBounds;
    private final org.apache.commons.math.random.RandomData randomData;

    public void <init>()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        org.apache.commons.math.random.RandomDataImpl $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats> = null;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double max> = #-Infinity;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min> = #Infinity;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta> = 0.0;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded> = 0;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds> = null;

        $r1 = new org.apache.commons.math.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.random.RandomData randomData> = $r1;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount> = 1000;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats> = $r2;

        return;
    }

    public void <init>(int)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        int i0;
        org.apache.commons.math.random.RandomDataImpl $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats> = null;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double max> = #-Infinity;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min> = #Infinity;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta> = 0.0;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded> = 0;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds> = null;

        $r1 = new org.apache.commons.math.random.RandomDataImpl;

        specialinvoke $r1.<org.apache.commons.math.random.RandomDataImpl: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.random.RandomData randomData> = $r1;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount> = i0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats> = $r2;

        return;
    }

    public void load(double[])
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        double[] r1;
        org.apache.commons.math.random.EmpiricalDistributionImpl$ArrayDataAdapter $r4;
        java.io.IOException $r5;
        org.apache.commons.math.MathRuntimeException $r6;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        r1 := @parameter0: double[];

        $r4 = new org.apache.commons.math.random.EmpiricalDistributionImpl$ArrayDataAdapter;

        specialinvoke $r4.<org.apache.commons.math.random.EmpiricalDistributionImpl$ArrayDataAdapter: void <init>(org.apache.commons.math.random.EmpiricalDistributionImpl,double[])>(r0, r1);

     label1:
        virtualinvoke $r4.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter: void computeStats()>();

        specialinvoke r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: void fillBinStats(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.math.MathRuntimeException;

        specialinvoke $r6.<org.apache.commons.math.MathRuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded> = 1;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void load(java.net.URL) throws java.io.IOException
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        java.net.URL r1;
        java.io.BufferedReader $r4, $r9, r18;
        java.io.InputStreamReader $r5, $r10;
        java.io.InputStream $r6, $r11;
        org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter $r7;
        org.apache.commons.math.stat.descriptive.SummaryStatistics $r8;
        long $l0;
        byte $b1;
        java.lang.Object[] $r12;
        org.apache.commons.math.exception.util.LocalizedFormats $r13;
        java.io.EOFException $r14;
        java.lang.Throwable $r15;
        java.io.IOException $r16, $r17;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        r1 := @parameter0: java.net.URL;

        $r4 = new java.io.BufferedReader;

        $r5 = new java.io.InputStreamReader;

        $r6 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);

        r18 = $r4;

     label01:
        $r7 = new org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter;

        specialinvoke $r7.<org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter: void <init>(org.apache.commons.math.random.EmpiricalDistributionImpl,java.io.BufferedReader)>(r0, $r4);

        virtualinvoke $r7.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter: void computeStats()>();

        $r8 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        $l0 = virtualinvoke $r8.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label02;

        $r13 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats URL_CONTAINS_NO_DATA>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        $r14 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.io.EOFException createEOFException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r13, $r12);

        throw $r14;

     label02:
        $r9 = new java.io.BufferedReader;

        $r10 = new java.io.InputStreamReader;

        $r11 = virtualinvoke r1.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r11);

        specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r10);

        r18 = $r9;

        specialinvoke r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: void fillBinStats(java.lang.Object)>($r9);

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded> = 1;

     label03:
        virtualinvoke $r9.<java.io.BufferedReader: void close()>();

     label04:
        goto label11;

     label05:
        $r16 := @caughtexception;

        goto label11;

     label06:
        $r15 := @caughtexception;

     label07:
        virtualinvoke r18.<java.io.BufferedReader: void close()>();

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

     label10:
        throw $r15;

     label11:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void load(java.io.File) throws java.io.IOException
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        java.io.File r1;
        java.io.BufferedReader $r4, $r7, r12;
        java.io.FileReader $r5, $r8;
        org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter $r6;
        java.io.IOException $r9, $r11;
        java.lang.Throwable $r10;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        r1 := @parameter0: java.io.File;

        $r4 = new java.io.BufferedReader;

        $r5 = new java.io.FileReader;

        specialinvoke $r5.<java.io.FileReader: void <init>(java.io.File)>(r1);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader)>($r5);

        r12 = $r4;

     label01:
        $r6 = new org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter;

        specialinvoke $r6.<org.apache.commons.math.random.EmpiricalDistributionImpl$StreamDataAdapter: void <init>(org.apache.commons.math.random.EmpiricalDistributionImpl,java.io.BufferedReader)>(r0, $r4);

        virtualinvoke $r6.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter: void computeStats()>();

        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.FileReader;

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>(r1);

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader)>($r8);

        r12 = $r7;

        specialinvoke r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: void fillBinStats(java.lang.Object)>($r7);

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded> = 1;

     label02:
        virtualinvoke $r7.<java.io.BufferedReader: void close()>();

     label03:
        goto label10;

     label04:
        $r11 := @caughtexception;

        goto label10;

     label05:
        $r10 := @caughtexception;

     label06:
        virtualinvoke r12.<java.io.BufferedReader: void close()>();

     label07:
        goto label09;

     label08:
        $r9 := @caughtexception;

     label09:
        throw $r10;

     label10:
        return;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    private void fillBinStats(java.lang.Object) throws java.io.IOException
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        java.lang.Object r1, $r10, $r17;
        org.apache.commons.math.stat.descriptive.SummaryStatistics $r2, $r3, $r11, $r12, $r18, $r19, $r20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        int $i0, $i1, $i4, $i5, $i6, $i7, $i8, i11, $i12, i13;
        java.lang.Double $r4;
        java.util.List $r5, $r8, $r15, $r21, $r22;
        boolean $z0;
        org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapterFactory $r6;
        double[] $r7, $r9, $r13, $r14, $r16;
        long $l2, $l3, $l9, $l10;
        org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter r25;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        $d0 = virtualinvoke $r2.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getMin()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min> = $d0;

        $r3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        $d1 = virtualinvoke $r3.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getMax()>();

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double max> = $d1;

        $d3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double max>;

        $d2 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min>;

        $d5 = $d3 - $d2;

        $i0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $d4 = (double) $i0;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $d6 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        $d7 = $d5 / $d6;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta> = $d7;

        $r5 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r22 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        interfaceinvoke $r22.<java.util.List: void clear()>();

     label1:
        i11 = 0;

     label2:
        $i12 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        if i11 >= $i12 goto label3;

        $r20 = new org.apache.commons.math.stat.descriptive.SummaryStatistics;

        specialinvoke $r20.<org.apache.commons.math.stat.descriptive.SummaryStatistics: void <init>()>();

        $r21 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        interfaceinvoke $r21.<java.util.List: void add(int,java.lang.Object)>(i11, $r20);

        i11 = i11 + 1;

        goto label2;

     label3:
        $r6 = new org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapterFactory;

        specialinvoke $r6.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapterFactory: void <init>(org.apache.commons.math.random.EmpiricalDistributionImpl,org.apache.commons.math.random.EmpiricalDistributionImpl$1)>(r0, null);

        r25 = virtualinvoke $r6.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapterFactory: org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter getAdapter(java.lang.Object)>(r1);

        virtualinvoke r25.<org.apache.commons.math.random.EmpiricalDistributionImpl$DataAdapter: void computeBinStats()>();

        $i1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $r7 = newarray (double)[$i1];

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds> = $r7;

        $r9 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        $r8 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.apache.commons.math.stat.descriptive.SummaryStatistics) $r10;

        $l2 = virtualinvoke $r11.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $d8 = (double) $l2;

        $r12 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        $l3 = virtualinvoke $r12.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $d9 = (double) $l3;

        $d10 = $d8 / $d9;

        $r9[0] = $d10;

        i13 = 1;

     label4:
        $i4 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $i5 = $i4 - 1;

        if i13 >= $i5 goto label5;

        $r16 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        $r14 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        $i8 = i13 - 1;

        $d11 = $r14[$i8];

        $r15 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        $r17 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i13);

        $r18 = (org.apache.commons.math.stat.descriptive.SummaryStatistics) $r17;

        $l9 = virtualinvoke $r18.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $d12 = (double) $l9;

        $r19 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        $l10 = virtualinvoke $r19.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $d13 = (double) $l10;

        $d14 = $d12 / $d13;

        $d15 = $d11 + $d14;

        $r16[i13] = $d15;

        i13 = i13 + 1;

        goto label4;

     label5:
        $r13 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        $i6 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $i7 = $i6 - 1;

        $r13[$i7] = 1.0;

        return;
    }

    private int findBin(double)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        d0 := @parameter0: double;

        $d1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min>;

        $d3 = d0 - $d1;

        $d2 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta>;

        $d4 = $d3 / $d2;

        $d5 = staticinvoke <org.apache.commons.math.util.FastMath: double ceil(double)>($d4);

        $i0 = (int) $d5;

        $i1 = $i0 - 1;

        $i2 = staticinvoke <org.apache.commons.math.util.FastMath: int max(int,int)>($i1, 0);

        $i3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $i4 = $i3 - 1;

        $i5 = staticinvoke <org.apache.commons.math.util.FastMath: int min(int,int)>($i2, $i4);

        return $i5;
    }

    public double getNextValue() throws java.lang.IllegalStateException
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;
        org.apache.commons.math.stat.descriptive.SummaryStatistics r1;
        boolean $z0;
        int $i0, i5;
        org.apache.commons.math.MathRuntimeException $r2;
        java.lang.Object[] $r3, $r9;
        org.apache.commons.math.exception.util.LocalizedFormats $r4, $r10;
        double[] $r5;
        byte $b1, $b3, $b4;
        java.util.List $r6;
        java.lang.Object $r7;
        long $l2;
        org.apache.commons.math.random.RandomData $r8;
        java.lang.IllegalStateException $r11;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $z0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded>;

        if $z0 != 0 goto label1;

        $r10 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats DISTRIBUTION_NOT_LOADED>;

        $r9 = newarray (java.lang.Object)[0];

        $r11 = staticinvoke <org.apache.commons.math.MathRuntimeException: java.lang.IllegalStateException createIllegalStateException(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r10, $r9);

        throw $r11;

     label1:
        d0 = staticinvoke <org.apache.commons.math.util.FastMath: double random()>();

        i5 = 0;

     label2:
        $i0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        if i5 >= $i0 goto label5;

        $r5 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        $d1 = $r5[i5];

        $b1 = d0 cmpg $d1;

        if $b1 > 0 goto label4;

        $r6 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i5);

        r1 = (org.apache.commons.math.stat.descriptive.SummaryStatistics) $r7;

        $l2 = virtualinvoke r1.<org.apache.commons.math.stat.descriptive.SummaryStatistics: long getN()>();

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label4;

        $d2 = virtualinvoke r1.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getStandardDeviation()>();

        $b4 = $d2 cmpl 0.0;

        if $b4 <= 0 goto label3;

        $r8 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.random.RandomData randomData>;

        $d4 = virtualinvoke r1.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getMean()>();

        $d5 = virtualinvoke r1.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getStandardDeviation()>();

        $d6 = interfaceinvoke $r8.<org.apache.commons.math.random.RandomData: double nextGaussian(double,double)>($d4, $d5);

        return $d6;

     label3:
        $d3 = virtualinvoke r1.<org.apache.commons.math.stat.descriptive.SummaryStatistics: double getMean()>();

        return $d3;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        $r2 = new org.apache.commons.math.MathRuntimeException;

        $r4 = <org.apache.commons.math.exception.util.LocalizedFormats: org.apache.commons.math.exception.util.LocalizedFormats NO_BIN_SELECTED>;

        $r3 = newarray (java.lang.Object)[0];

        specialinvoke $r2.<org.apache.commons.math.MathRuntimeException: void <init>(org.apache.commons.math.exception.util.Localizable,java.lang.Object[])>($r4, $r3);

        throw $r2;
    }

    public org.apache.commons.math.stat.descriptive.StatisticalSummary getSampleStats()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        org.apache.commons.math.stat.descriptive.SummaryStatistics $r1;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $r1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        return $r1;
    }

    public int getBinCount()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        int $i0;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $i0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        return $i0;
    }

    public java.util.List getBinStats()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        java.util.List $r1;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $r1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        return $r1;
    }

    public double[] getUpperBounds()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        double[] r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $i0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        r1 = newarray (double)[$i0];

        $d1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double min>;

        $d0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta>;

        $d2 = $d1 + $d0;

        r1[0] = $d2;

        i6 = 1;

     label1:
        $i1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $i2 = $i1 - 1;

        if i6 >= $i2 goto label2;

        $i5 = i6 - 1;

        $d5 = r1[$i5];

        $d4 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double delta>;

        $d6 = $d5 + $d4;

        r1[i6] = $d6;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int binCount>;

        $i4 = $i3 - 1;

        $d3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double max>;

        r1[$i4] = $d3;

        return r1;
    }

    public double[] getGeneratorUpperBounds()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        int i0;
        double[] r1, $r2, $r3;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $r2 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        i0 = lengthof $r2;

        r1 = newarray (double)[i0];

        $r3 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: double[] upperBounds>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        return r1;
    }

    public boolean isLoaded()
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        boolean $z0;

        r0 := @this: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $z0 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: boolean loaded>;

        return $z0;
    }

    static int access$100(org.apache.commons.math.random.EmpiricalDistributionImpl, double)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        double d0;
        int $i0;

        r0 := @parameter0: org.apache.commons.math.random.EmpiricalDistributionImpl;

        d0 := @parameter1: double;

        $i0 = specialinvoke r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: int findBin(double)>(d0);

        return $i0;
    }

    static java.util.List access$200(org.apache.commons.math.random.EmpiricalDistributionImpl)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $r1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: java.util.List binStats>;

        return $r1;
    }

    static org.apache.commons.math.stat.descriptive.SummaryStatistics access$302(org.apache.commons.math.random.EmpiricalDistributionImpl, org.apache.commons.math.stat.descriptive.SummaryStatistics)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        org.apache.commons.math.stat.descriptive.SummaryStatistics r1;

        r0 := @parameter0: org.apache.commons.math.random.EmpiricalDistributionImpl;

        r1 := @parameter1: org.apache.commons.math.stat.descriptive.SummaryStatistics;

        r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats> = r1;

        return r1;
    }

    static org.apache.commons.math.stat.descriptive.SummaryStatistics access$300(org.apache.commons.math.random.EmpiricalDistributionImpl)
    {
        org.apache.commons.math.random.EmpiricalDistributionImpl r0;
        org.apache.commons.math.stat.descriptive.SummaryStatistics $r1;

        r0 := @parameter0: org.apache.commons.math.random.EmpiricalDistributionImpl;

        $r1 = r0.<org.apache.commons.math.random.EmpiricalDistributionImpl: org.apache.commons.math.stat.descriptive.SummaryStatistics sampleStats>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.math.random.EmpiricalDistributionImpl: long serialVersionUID> = 5729073523949762654L;

        return;
    }
}
