public class com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends extends java.lang.Object
{
    private final double[] _tau;
    private final double[] _alpha;
    private final double[] _beta;
    private final int _n;

    public static com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends noDividends()
    {
        double[] r0;
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends $r1;

        r0 = newarray (double)[0];

        $r1 = new com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        specialinvoke $r1.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: void <init>(double[],double[],double[])>(r0, r0, r0);

        return $r1;
    }

    public void <init>(double[], double[], double[])
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        double[] r1, r2, r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i9, $i11, $i12, i17, $i18;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;
        byte $b6, $b7, $b8, $b10, $b13, $b14, $b15, $b16;
        java.lang.Object[] $r7, $r12, $r15, $r17;
        java.lang.Integer $r8, $r10, $r13, $r18;
        java.lang.Double $r9, $r11, $r14, $r16, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r3 := @parameter2: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r1, "null tau");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r2, "null alpha");

        staticinvoke <com.opengamma.util.ArgumentChecker: java.lang.Object notNull(java.lang.Object,java.lang.String)>(r3, "null beta");

        $i0 = lengthof r1;

        r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n> = $i0;

        $i2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        $i1 = lengthof r2;

        if $i2 != $i1 goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "alpha wrong length");

        $i4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        $i3 = lengthof r3;

        if $i4 != $i3 goto label03;

        $z1 = 1;

        goto label04;

     label03:
        $z1 = 0;

     label04:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "beta wrong length");

        $i5 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        if $i5 <= 0 goto label18;

        $d0 = r1[0];

        $b6 = $d0 cmpl 0.0;

        if $b6 < 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z2, "first dividend at negative time. Please remove from list");

        $d1 = r2[0];

        $b7 = $d1 cmpl 0.0;

        if $b7 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z3, "first cash dividend is negative.");

        $d2 = r3[0];

        $b8 = $d2 cmpl 0.0;

        if $b8 < 0 goto label09;

        $d11 = r3[0];

        $b16 = $d11 cmpg 1.0;

        if $b16 >= 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        $r15 = newarray (java.lang.Object)[1];

        $d12 = r3[0];

        $r16 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d12);

        $r15[0] = $r16;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z4, "Proportional dividend must be between 0.0 (inclusive) and 1.0 (exclusive). Value is {}", $r15);

        i17 = 1;

     label11:
        $i18 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        if i17 >= $i18 goto label18;

        $d4 = r1[i17];

        $i9 = i17 - 1;

        $d3 = r1[$i9];

        $b10 = $d4 cmpl $d3;

        if $b10 <= 0 goto label12;

        $z5 = 1;

        goto label13;

     label12:
        $z5 = 0;

     label13:
        $r7 = newarray (java.lang.Object)[4];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r7[0] = $r8;

        $d5 = r1[i17];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d5);

        $r7[1] = $r9;

        $i11 = i17 - 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11);

        $r7[2] = $r10;

        $i12 = i17 - 1;

        $d6 = r1[$i12];

        $r11 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d6);

        $r7[3] = $r11;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z5, "Dividends not increasing. {}th dividend is {}, and {}th is {}", $r7);

        $d7 = r2[i17];

        $b13 = $d7 cmpl 0.0;

        if $b13 < 0 goto label14;

        $z6 = 1;

        goto label15;

     label14:
        $z6 = 0;

     label15:
        $r12 = newarray (java.lang.Object)[2];

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r12[0] = $r13;

        $d8 = r2[i17];

        $r14 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        $r12[1] = $r14;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z6, "Cash dividend is negative. alpha[{}] = {}", $r12);

        $d9 = r3[i17];

        $b14 = $d9 cmpl 0.0;

        if $b14 < 0 goto label16;

        $d10 = r3[i17];

        $b15 = $d10 cmpg 1.0;

        if $b15 >= 0 goto label16;

        $z7 = 1;

        goto label17;

     label16:
        $z7 = 0;

     label17:
        $r17 = newarray (java.lang.Object)[2];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        $r17[0] = $r18;

        $d13 = r3[i17];

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d13);

        $r17[1] = $r19;

        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String,java.lang.Object[])>($z7, "Proportional dividend must be between 0.0 (inclusive) and 1.0 (exclusive). beta[{}] = {}", $r17);

        i17 = i17 + 1;

        goto label11;

     label18:
        r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau> = r1;

        r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha> = r2;

        r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta> = r3;

        return;
    }

    public double[] getTau()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        double[] r1, $r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $i0 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        return r1;
    }

    public double[] getAlpha()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        double[] r1, $r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $i0 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        return r1;
    }

    public double[] getBeta()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        double[] r1, $r2;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $i0 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i0);

        return r1;
    }

    public double getTau(int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double getAlpha(int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $d0 = $r1[i0];

        return $d0;
    }

    public double getBeta(int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        int i0;
        double[] $r1;
        double $d0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        i0 := @parameter0: int;

        $r1 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $d0 = $r1[i0];

        return $d0;
    }

    public int getNumberOfDividends()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        int $i0;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $i0 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        return $i0;
    }

    public com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends withTau(double, int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0, $r3;
        double d0;
        int i0, $i2, $i3;
        double[] r1, $r2, $r4, $r5;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "negative tau");

        if i0 < 0 goto label3;

        $i2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        if i0 >= $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "index out of range");

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $i3 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i3);

        r1[i0] = d0;

        $r3 = new com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $r5 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        specialinvoke $r3.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: void <init>(double[],double[],double[])>(r1, $r4, $r5);

        return $r3;
    }

    public com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends withAlpha(double, int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0, $r3;
        double d0;
        int i0, $i2, $i3;
        double[] r1, $r2, $r4, $r5;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "negative alpha");

        if i0 < 0 goto label3;

        $i2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        if i0 >= $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "index out of range");

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $i3 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i3);

        r1[i0] = d0;

        $r3 = new com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $r5 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        specialinvoke $r3.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: void <init>(double[],double[],double[])>($r4, r1, $r5);

        return $r3;
    }

    public com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends withBeta(double, int)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0, $r3;
        double d0;
        int i0, $i2, $i3;
        double[] r1, $r2, $r4, $r5;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $b1 = d0 cmpl 0.0;

        if $b1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z0, "negative beta");

        if i0 < 0 goto label3;

        $i2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        if i0 >= $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <com.opengamma.util.ArgumentChecker: void isTrue(boolean,java.lang.String)>($z1, "index out of range");

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $i3 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: int _n>;

        r1 = staticinvoke <java.util.Arrays: double[] copyOf(double[],int)>($r2, $i3);

        r1[i0] = d0;

        $r3 = new com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $r4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $r5 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        specialinvoke $r3.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: void <init>(double[],double[],double[])>($r4, $r5, r1);

        return $r3;
    }

    public int hashCode()
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0;
        double[] $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        $i1 = 31 * 1;

        $r1 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r1);

        i8 = $i1 + $i2;

        $i3 = 31 * i8;

        $r2 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r2);

        i9 = $i3 + $i4;

        $i5 = 31 * i9;

        $r3 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r3);

        i10 = $i5 + $i6;

        return i10;
    }

    public boolean equals(java.lang.Object)
    {
        com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        double[] $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends) r1;

        $r4 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $r3 = r2.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _alpha>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r4, $r3);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r6 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $r5 = r2.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _beta>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r6, $r5);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $r8 = r0.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $r7 = r2.<com.opengamma.analytics.financial.equity.variance.pricing.AffineDividends: double[] _tau>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r8, $r7);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }
}
