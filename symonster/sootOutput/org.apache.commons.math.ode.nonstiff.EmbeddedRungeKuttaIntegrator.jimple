public abstract class org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator extends org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator
{
    private final boolean fsal;
    private final double[] c;
    private final double[][] a;
    private final double[] b;
    private final org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype;
    private final double exp;
    private double safety;
    private double minReduction;
    private double maxGrowth;

    protected void <init>(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double, double)
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        java.lang.String r1;
        boolean z0;
        double[] r2, r4;
        double[][] r3;
        org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator r5;
        double d0, d1, d2, d3, $d4, $d5;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[][];

        r4 := @parameter4: double[];

        r5 := @parameter5: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator;

        d0 := @parameter6: double;

        d1 := @parameter7: double;

        d2 := @parameter8: double;

        d3 := @parameter9: double;

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double,double)>(r1, d0, d1, d2, d3);

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal> = z0;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c> = r2;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a> = r3;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b> = r4;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype> = r5;

        $i0 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        $d4 = (double) $i0;

        $d5 = -1.0 / $d4;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp> = $d5;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMinReduction(double)>(0.2);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMaxGrowth(double)>(10.0);

        return;
    }

    protected void <init>(java.lang.String, boolean, double[], double[][], double[], org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator, double, double, double[], double[])
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        java.lang.String r1;
        boolean z0;
        double[] r2, r4, r6, r7;
        double[][] r3;
        org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator r5;
        double d0, d1, $d2, $d3;
        int $i0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: double[];

        r3 := @parameter3: double[][];

        r4 := @parameter4: double[];

        r5 := @parameter5: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator;

        d0 := @parameter6: double;

        d1 := @parameter7: double;

        r6 := @parameter8: double[];

        r7 := @parameter9: double[];

        specialinvoke r0.<org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator: void <init>(java.lang.String,double,double,double[],double[])>(r1, d0, d1, r6, r7);

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal> = z0;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c> = r2;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a> = r3;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b> = r4;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype> = r5;

        $i0 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        $d2 = (double) $i0;

        $d3 = -1.0 / $d2;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp> = $d3;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setSafety(double)>(0.9);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMinReduction(double)>(0.2);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setMaxGrowth(double)>(10.0);

        return;
    }

    public abstract int getOrder();

    public double getSafety()
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        return $d0;
    }

    public void setSafety(double)
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety> = d0;

        return;
    }

    public double integrate(org.apache.commons.math.ode.FirstOrderDifferentialEquations, double, double[], double, double[]) throws org.apache.commons.math.ode.DerivativeException, org.apache.commons.math.ode.IntegratorException
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        org.apache.commons.math.ode.FirstOrderDifferentialEquations r1;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, $d59, $d60, $d61, $d62, $d63, $d64, d65, d66, d67, d68, d69, d70, d71, d72, $d73, d74;
        double[] r2, r3, r5, r6, $r8, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r31, r38;
        boolean z0, $z3, $z4, $z5, $z6, $z7, z8, $z9, $z10, $z11, $z12;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i27, i28, i29, i30, i31, i32, i33;
        double[][] r4, $r21, $r24;
        org.apache.commons.math.ode.sampling.StepHandler r7;
        byte $b1, $b10, $b11, $b12, $b13, $b16, $b26;
        org.apache.commons.math.ode.sampling.DummyStepInterpolator $r9;
        java.util.Collection $r11;
        java.lang.Object $r32;
        org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator $r33, r35;
        org.apache.commons.math.ode.sampling.StepInterpolator $r34;
        org.apache.commons.math.ode.sampling.AbstractStepInterpolator r36;
        java.util.Iterator r37;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        r1 := @parameter0: org.apache.commons.math.ode.FirstOrderDifferentialEquations;

        d0 := @parameter1: double;

        r2 := @parameter2: double[];

        d1 := @parameter3: double;

        r3 := @parameter4: double[];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void sanityChecks(org.apache.commons.math.ode.FirstOrderDifferentialEquations,double,double[],double,double[])>(r1, d0, r2, d1, r3);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setEquations(org.apache.commons.math.ode.FirstOrderDifferentialEquations)>(r1);

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void resetEvaluations()>();

        $b1 = d1 cmpl d0;

        if $b1 <= 0 goto label01;

        $z7 = 1;

        goto label02;

     label01:
        $z7 = 0;

     label02:
        z0 = $z7;

        $r8 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c>;

        $i2 = lengthof $r8;

        i0 = $i2 + 1;

        if r3 == r2 goto label03;

        $i25 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i25);

     label03:
        $i3 = lengthof r2;

        r4 = newmultiarray (double)[i0][$i3];

        $i4 = lengthof r2;

        r5 = newarray (double)[$i4];

        $i5 = lengthof r2;

        r6 = newarray (double)[$i5];

        $z3 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean requiresDenseOutput()>();

        if $z3 == 0 goto label04;

        $r33 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator prototype>;

        $r34 = virtualinvoke $r33.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: org.apache.commons.math.ode.sampling.StepInterpolator copy()>();

        r35 = (org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator) $r34;

        virtualinvoke r35.<org.apache.commons.math.ode.nonstiff.RungeKuttaStepInterpolator: void reinitialize(org.apache.commons.math.ode.AbstractIntegrator,double[],double[][],boolean)>(r0, r5, r4, z0);

        r36 = r35;

        goto label05;

     label04:
        $r9 = new org.apache.commons.math.ode.sampling.DummyStepInterpolator;

        $i6 = i0 - 1;

        $r10 = r4[$i6];

        specialinvoke $r9.<org.apache.commons.math.ode.sampling.DummyStepInterpolator: void <init>(double[],double[],boolean)>(r5, $r10, z0);

        r36 = $r9;

     label05:
        virtualinvoke r36.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>(d0);

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart> = d0;

        d65 = 0.0;

        z8 = 1;

        $r11 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: java.util.Collection stepHandlers>;

        r37 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z9 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label07;

        $r32 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.commons.math.ode.sampling.StepHandler) $r32;

        interfaceinvoke r7.<org.apache.commons.math.ode.sampling.StepHandler: void reset()>();

        goto label06;

     label07:
        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void setStateInitialized(boolean)>(0);

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep> = 0;

     label08:
        virtualinvoke r36.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void shift()>();

        d66 = 10.0;

     label09:
        $b26 = d66 cmpl 1.0;

        if $b26 < 0 goto label28;

        if z8 != 0 goto label10;

        $z6 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal>;

        if $z6 != 0 goto label11;

     label10:
        $d18 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r14 = r4[0];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>($d18, r3, $r14);

     label11:
        if z8 == 0 goto label17;

        $i21 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int mainSetDimension>;

        r38 = newarray (double)[$i21];

        $r27 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecAbsoluteTolerance>;

        if $r27 != null goto label14;

        i27 = 0;

     label12:
        $i24 = lengthof r38;

        if i27 >= $i24 goto label13;

        $d60 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double scalAbsoluteTolerance>;

        $d61 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double scalRelativeTolerance>;

        $d59 = r3[i27];

        $d62 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d59);

        $d63 = $d61 * $d62;

        $d64 = $d60 + $d63;

        r38[i27] = $d64;

        i27 = i27 + 1;

        goto label12;

     label13:
        goto label16;

     label14:
        i28 = 0;

     label15:
        $i22 = lengthof r38;

        if i28 >= $i22 goto label16;

        $r30 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecAbsoluteTolerance>;

        $d54 = $r30[i28];

        $r31 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] vecRelativeTolerance>;

        $d55 = $r31[i28];

        $d53 = r3[i28];

        $d56 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d53);

        $d57 = $d55 * $d56;

        $d58 = $d54 + $d57;

        r38[i28] = $d58;

        i28 = i28 + 1;

        goto label15;

     label16:
        $i23 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: int getOrder()>();

        $d52 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r29 = r4[0];

        $r28 = r4[1];

        d65 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double initializeStep(org.apache.commons.math.ode.FirstOrderDifferentialEquations,boolean,int,double[],double,double[],double[],double[],double[])>(r1, z0, $i23, r38, $d52, r3, $r29, r5, $r28);

        z8 = 0;

     label17:
        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize> = d65;

        i29 = 1;

     label18:
        if i29 >= i0 goto label23;

        i30 = 0;

     label19:
        $i17 = lengthof r2;

        if i30 >= $i17 goto label22;

        $r21 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a>;

        $i19 = i29 - 1;

        $r22 = $r21[$i19];

        $d44 = $r22[0];

        $r23 = r4[0];

        $d43 = $r23[i30];

        d67 = $d44 * $d43;

        i31 = 1;

     label20:
        if i31 >= i29 goto label21;

        $r24 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[][] a>;

        $i20 = i29 - 1;

        $r25 = $r24[$i20];

        $d50 = $r25[i31];

        $r26 = r4[i31];

        $d49 = $r26[i30];

        $d51 = $d50 * $d49;

        d67 = d67 + $d51;

        i31 = i31 + 1;

        goto label20;

     label21:
        $d47 = r3[i30];

        $d45 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d46 = $d45 * d67;

        $d48 = $d47 + $d46;

        r5[i30] = $d48;

        i30 = i30 + 1;

        goto label19;

     label22:
        $d41 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $r19 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] c>;

        $i18 = i29 - 1;

        $d39 = $r19[$i18];

        $d38 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d40 = $d39 * $d38;

        $d42 = $d41 + $d40;

        $r20 = r4[i29];

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void computeDerivatives(double,double[],double[])>($d42, r5, $r20);

        i29 = i29 + 1;

        goto label18;

     label23:
        i32 = 0;

     label24:
        $i15 = lengthof r2;

        if i32 >= $i15 goto label27;

        $r15 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b>;

        $d30 = $r15[0];

        $r16 = r4[0];

        $d29 = $r16[i32];

        d68 = $d30 * $d29;

        i33 = 1;

     label25:
        if i33 >= i0 goto label26;

        $r17 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double[] b>;

        $d36 = $r17[i33];

        $r18 = r4[i33];

        $d35 = $r18[i32];

        $d37 = $d36 * $d35;

        d68 = d68 + $d37;

        i33 = i33 + 1;

        goto label25;

     label26:
        $d33 = r3[i32];

        $d31 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d32 = $d31 * d68;

        $d34 = $d33 + $d32;

        r5[i32] = $d34;

        i32 = i32 + 1;

        goto label24;

     label27:
        $d19 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d66 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double estimateError(double[][],double[],double[],double)>(r4, r3, r5, $d19);

        $b16 = d66 cmpl 1.0;

        if $b16 < 0 goto label09;

        $d21 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        $d22 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        $d23 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        $d20 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp>;

        $d24 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>(d66, $d20);

        $d25 = $d23 * $d24;

        $d26 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d22, $d25);

        d69 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>($d21, $d26);

        $d27 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d28 = $d27 * d69;

        d65 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double filterStep(double,boolean,boolean)>($d28, z0, 0);

        goto label09;

     label28:
        $d4 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        $d3 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        $d5 = $d4 + $d3;

        virtualinvoke r36.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>($d5);

        $i7 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r3, 0, $i7);

        $i8 = i0 - 1;

        $r12 = r4[$i8];

        $i9 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r12, 0, r6, 0, $i9);

        $d6 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double acceptStep(org.apache.commons.math.ode.sampling.AbstractStepInterpolator,double[],double[],double)>(r36, r3, r6, d1);

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart> = $d6;

        $z4 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep>;

        if $z4 != 0 goto label38;

        $d7 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        virtualinvoke r36.<org.apache.commons.math.ode.sampling.AbstractStepInterpolator: void storeTime(double)>($d7);

        $z5 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean fsal>;

        if $z5 == 0 goto label29;

        $r13 = r4[0];

        $i14 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, $r13, 0, $i14);

     label29:
        $d9 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        $d10 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        $d11 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double safety>;

        $d8 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double exp>;

        $d12 = staticinvoke <org.apache.commons.math.util.FastMath: double pow(double,double)>(d66, $d8);

        $d13 = $d11 * $d12;

        $d14 = staticinvoke <org.apache.commons.math.util.FastMath: double max(double,double)>($d10, $d13);

        d70 = staticinvoke <org.apache.commons.math.util.FastMath: double min(double,double)>($d9, $d14);

        $d15 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepSize>;

        d71 = $d15 * d70;

        $d16 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d72 = $d16 + d71;

        if z0 == 0 goto label31;

        $b13 = d72 cmpl d1;

        if $b13 < 0 goto label30;

        $z10 = 1;

        goto label33;

     label30:
        $z10 = 0;

        goto label33;

     label31:
        $b10 = d72 cmpg d1;

        if $b10 > 0 goto label32;

        $z10 = 1;

        goto label33;

     label32:
        $z10 = 0;

     label33:
        d65 = virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double filterStep(double,boolean,boolean)>(d71, z0, $z10);

        $d73 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d2 = $d73 + d65;

        if z0 == 0 goto label35;

        $b12 = d2 cmpl d1;

        if $b12 < 0 goto label34;

        $z11 = 1;

        goto label37;

     label34:
        $z11 = 0;

        goto label37;

     label35:
        $b11 = d2 cmpg d1;

        if $b11 > 0 goto label36;

        $z11 = 1;

        goto label37;

     label36:
        $z11 = 0;

     label37:
        if $z11 == 0 goto label38;

        $d17 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        d65 = d1 - $d17;

     label38:
        $z12 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: boolean isLastStep>;

        if $z12 == 0 goto label08;

        d74 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double stepStart>;

        virtualinvoke r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: void resetInternalState()>();

        return d74;
    }

    public double getMinReduction()
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction>;

        return $d0;
    }

    public void setMinReduction(double)
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double minReduction> = d0;

        return;
    }

    public double getMaxGrowth()
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double $d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        $d0 = r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth>;

        return $d0;
    }

    public void setMaxGrowth(double)
    {
        org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator r0;
        double d0;

        r0 := @this: org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator;

        d0 := @parameter0: double;

        r0.<org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator: double maxGrowth> = d0;

        return;
    }

    protected abstract double estimateError(double[][], double[], double[], double);
}
