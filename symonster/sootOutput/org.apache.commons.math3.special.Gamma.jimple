public class org.apache.commons.math3.special.Gamma extends java.lang.Object
{
    public static final double GAMMA;
    public static final double LANCZOS_G;
    private static final double DEFAULT_EPSILON;
    private static final double[] LANCZOS;
    private static final double HALF_LOG_2_PI;
    private static final double SQRT_TWO_PI;
    private static final double C_LIMIT;
    private static final double S_LIMIT;
    private static final double INV_GAMMA1P_M1_A0;
    private static final double INV_GAMMA1P_M1_A1;
    private static final double INV_GAMMA1P_M1_B1;
    private static final double INV_GAMMA1P_M1_B2;
    private static final double INV_GAMMA1P_M1_B3;
    private static final double INV_GAMMA1P_M1_B4;
    private static final double INV_GAMMA1P_M1_B5;
    private static final double INV_GAMMA1P_M1_B6;
    private static final double INV_GAMMA1P_M1_B7;
    private static final double INV_GAMMA1P_M1_B8;
    private static final double INV_GAMMA1P_M1_P0;
    private static final double INV_GAMMA1P_M1_P1;
    private static final double INV_GAMMA1P_M1_P2;
    private static final double INV_GAMMA1P_M1_P3;
    private static final double INV_GAMMA1P_M1_P4;
    private static final double INV_GAMMA1P_M1_P5;
    private static final double INV_GAMMA1P_M1_P6;
    private static final double INV_GAMMA1P_M1_Q1;
    private static final double INV_GAMMA1P_M1_Q2;
    private static final double INV_GAMMA1P_M1_Q3;
    private static final double INV_GAMMA1P_M1_Q4;
    private static final double INV_GAMMA1P_M1_C;
    private static final double INV_GAMMA1P_M1_C0;
    private static final double INV_GAMMA1P_M1_C1;
    private static final double INV_GAMMA1P_M1_C2;
    private static final double INV_GAMMA1P_M1_C3;
    private static final double INV_GAMMA1P_M1_C4;
    private static final double INV_GAMMA1P_M1_C5;
    private static final double INV_GAMMA1P_M1_C6;
    private static final double INV_GAMMA1P_M1_C7;
    private static final double INV_GAMMA1P_M1_C8;
    private static final double INV_GAMMA1P_M1_C9;
    private static final double INV_GAMMA1P_M1_C10;
    private static final double INV_GAMMA1P_M1_C11;
    private static final double INV_GAMMA1P_M1_C12;
    private static final double INV_GAMMA1P_M1_C13;

    private void <init>()
    {
        org.apache.commons.math3.special.Gamma r0;

        r0 := @this: org.apache.commons.math3.special.Gamma;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double logGamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, d26, d27, d28;
        boolean $z0;
        byte $b0, $b1, $b2, $b3;
        int $i4, i5, i6;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label2;

     label1:
        d26 = #NaN;

        goto label8;

     label2:
        $b1 = d0 cmpg 0.5;

        if $b1 >= 0 goto label3;

        $d23 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>(d0);

        $d24 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d25 = $d23 - $d24;

        return $d25;

     label3:
        $b2 = d0 cmpg 2.5;

        if $b2 > 0 goto label4;

        $d20 = d0 - 0.5;

        $d21 = $d20 - 0.5;

        $d22 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d21);

        return $d22;

     label4:
        $b3 = d0 cmpg 8.0;

        if $b3 > 0 goto label7;

        $d11 = d0 - 1.5;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double floor(double)>($d11);

        i5 = (int) $d12;

        d27 = 1.0;

        i6 = 1;

     label5:
        if i6 > i5 goto label6;

        $d18 = (double) i6;

        $d19 = d0 - $d18;

        d27 = d27 * $d19;

        i6 = i6 + 1;

        goto label5;

     label6:
        $i4 = i5 + 1;

        $d13 = (double) $i4;

        $d14 = d0 - $d13;

        $d15 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma1p(double)>($d14);

        $d16 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d27);

        $d17 = $d15 + $d16;

        return $d17;

     label7:
        d28 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>(d0);

        $d2 = d0 + 4.7421875;

        d1 = $d2 + 0.5;

        $d3 = d0 + 0.5;

        $d4 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d5 = $d3 * $d4;

        $d7 = $d5 - d1;

        $d6 = <org.apache.commons.math3.special.Gamma: double HALF_LOG_2_PI>;

        $d9 = $d7 + $d6;

        $d8 = d28 / d0;

        $d10 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>($d8);

        d26 = $d9 + $d10;

     label8:
        return d26;
    }

    public static double regularizedGammaP(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double,double,int)>(d0, d1, 1.0E-14, 2147483647);

        return $d2;
    }

    public static double regularizedGammaP(double, double, double, int)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, d17, d18, d19, d20, $d21;
        int i0;
        boolean $z0, $z1, $z2;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8;
        org.apache.commons.math3.exception.MaxCountExceededException $r0;
        java.lang.Integer $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d1 cmpg 0.0;

        if $b2 >= 0 goto label2;

     label1:
        d17 = #NaN;

        goto label9;

     label2:
        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label3;

        d17 = 0.0;

        goto label9;

     label3:
        $d3 = d0 + 1.0;

        $b4 = d1 cmpl $d3;

        if $b4 < 0 goto label4;

        $d16 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>(d0, d1, d2, i0);

        d17 = 1.0 - $d16;

        goto label9;

     label4:
        d18 = 0.0;

        d19 = 1.0 / d0;

        d20 = d19;

     label5:
        $d4 = d19 / d20;

        $d5 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>($d4);

        $b5 = $d5 cmpl d2;

        if $b5 <= 0 goto label6;

        $d13 = (double) i0;

        $b6 = d18 cmpg $d13;

        if $b6 >= 0 goto label6;

        $b7 = d20 cmpg #Infinity;

        if $b7 >= 0 goto label6;

        d18 = d18 + 1.0;

        $d14 = d0 + d18;

        $d15 = d1 / $d14;

        d19 = d19 * $d15;

        d20 = d20 + d19;

        goto label5;

     label6:
        $d21 = (double) i0;

        $b8 = d18 cmpl $d21;

        if $b8 < 0 goto label7;

        $r0 = new org.apache.commons.math3.exception.MaxCountExceededException;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r0.<org.apache.commons.math3.exception.MaxCountExceededException: void <init>(java.lang.Number)>($r1);

        throw $r0;

     label7:
        $z2 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d20);

        if $z2 == 0 goto label8;

        d17 = 1.0;

        goto label9;

     label8:
        $d6 = neg d1;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d8 = d0 * $d7;

        $d9 = $d6 + $d8;

        $d10 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d0);

        $d11 = $d9 - $d10;

        $d12 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d11);

        d17 = $d12 * d20;

     label9:
        return d17;
    }

    public static double regularizedGammaQ(double, double)
    {
        double d0, d1, $d2;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaQ(double,double,double,int)>(d0, d1, 1.0E-14, 2147483647);

        return $d2;
    }

    public static double regularizedGammaQ(double, double, double, int)
    {
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, d13, d14;
        int i0;
        boolean $z0, $z1;
        byte $b1, $b2, $b3, $b4;
        org.apache.commons.math3.special.Gamma$1 $r1;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        i0 := @parameter3: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 != 0 goto label1;

        $b1 = d0 cmpg 0.0;

        if $b1 <= 0 goto label1;

        $b2 = d1 cmpg 0.0;

        if $b2 >= 0 goto label2;

     label1:
        d13 = #NaN;

        goto label5;

     label2:
        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label3;

        d13 = 1.0;

        goto label5;

     label3:
        $d3 = d0 + 1.0;

        $b4 = d1 cmpg $d3;

        if $b4 >= 0 goto label4;

        $d12 = staticinvoke <org.apache.commons.math3.special.Gamma: double regularizedGammaP(double,double,double,int)>(d0, d1, d2, i0);

        d13 = 1.0 - $d12;

        goto label5;

     label4:
        $r1 = new org.apache.commons.math3.special.Gamma$1;

        specialinvoke $r1.<org.apache.commons.math3.special.Gamma$1: void <init>(double)>(d0);

        $d4 = virtualinvoke $r1.<org.apache.commons.math3.util.ContinuedFraction: double evaluate(double,double,int)>(d1, d2, i0);

        d14 = 1.0 / $d4;

        $d5 = neg d1;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d1);

        $d7 = d0 * $d6;

        $d8 = $d5 + $d7;

        $d9 = staticinvoke <org.apache.commons.math3.special.Gamma: double logGamma(double)>(d0);

        $d10 = $d8 - $d9;

        $d11 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d10);

        d13 = $d11 * d14;

     label5:
        return d13;
    }

    public static double digamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $b2 = d0 cmpg 1.0E-5;

        if $b2 > 0 goto label1;

        $d16 = 1.0 / d0;

        $d17 = -0.5772156649015329 - $d16;

        return $d17;

     label1:
        $b1 = d0 cmpl 49.0;

        if $b1 < 0 goto label2;

        $d6 = d0 * d0;

        d1 = 1.0 / $d6;

        $d7 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(d0);

        $d8 = 0.5 / d0;

        $d14 = $d7 - $d8;

        $d9 = d1 / 252.0;

        $d10 = 0.008333333333333333 - $d9;

        $d11 = d1 * $d10;

        $d12 = 0.08333333333333333 + $d11;

        $d13 = d1 * $d12;

        $d15 = $d14 - $d13;

        return $d15;

     label2:
        $d2 = d0 + 1.0;

        $d3 = staticinvoke <org.apache.commons.math3.special.Gamma: double digamma(double)>($d2);

        $d4 = 1.0 / d0;

        $d5 = $d3 - $d4;

        return $d5;
    }

    public static double trigamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19;
        byte $b0, $b1, $b2;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 <= 0 goto label1;

        $b2 = d0 cmpg 1.0E-5;

        if $b2 > 0 goto label1;

        $d18 = d0 * d0;

        $d19 = 1.0 / $d18;

        return $d19;

     label1:
        $b1 = d0 cmpl 49.0;

        if $b1 < 0 goto label2;

        $d7 = d0 * d0;

        d1 = 1.0 / $d7;

        $d9 = 1.0 / d0;

        $d8 = d1 / 2.0;

        $d16 = $d9 + $d8;

        $d14 = d1 / d0;

        $d10 = d1 / 42.0;

        $d11 = 0.03333333333333333 + $d10;

        $d12 = d1 * $d11;

        $d13 = 0.16666666666666666 - $d12;

        $d15 = $d14 * $d13;

        $d17 = $d16 + $d15;

        return $d17;

     label2:
        $d2 = d0 + 1.0;

        $d3 = staticinvoke <org.apache.commons.math3.special.Gamma: double trigamma(double)>($d2);

        $d4 = d0 * d0;

        $d5 = 1.0 / $d4;

        $d6 = $d3 + $d5;

        return $d6;
    }

    public static double lanczos(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, d7;
        double[] $r0, $r1, $r2;
        int $i0, i1;

        d0 := @parameter0: double;

        d7 = 0.0;

        $r0 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $i0 = lengthof $r0;

        i1 = $i0 - 1;

     label1:
        if i1 <= 0 goto label2;

        $r2 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $d5 = $r2[i1];

        $d3 = (double) i1;

        $d4 = d0 + $d3;

        $d6 = $d5 / $d4;

        d7 = d7 + $d6;

        i1 = i1 + -1;

        goto label1;

     label2:
        $r1 = <org.apache.commons.math3.special.Gamma: double[] LANCZOS>;

        $d1 = $r1[0];

        $d2 = d7 + $d1;

        return $d2;
    }

    public static double invGamma1pm1(double)
    {
        double d0, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, $d30, $d31, $d32, $d33, $d34, $d35, $d36, $d37, $d38, $d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, $d48, $d49, $d50, $d51, $d52, $d53, $d54, $d55, $d56, $d57, $d58, d59, d61, d62, d63, d64, d65, d66, d67, d68, d69, d70, d71, d72, d73, d74, d75, d76, d77, d78, d79, d80, d81, d82, d83, d85, d86, d87, d88, d89, d90, d92, d93, d94, d95, d96, d97, d98, d99, d100, d101, d102, d103, d104, d105, d106, d107, d108, d109;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r0;
        java.lang.Double $r1, $r2, $r4, $r5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;

        d0 := @parameter0: double;

        $b0 = d0 cmpg -0.5;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label1:
        $b1 = d0 cmpl 1.5;

        if $b1 <= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label2:
        $b2 = d0 cmpg 0.5;

        if $b2 > 0 goto label3;

        $d58 = d0;

        goto label4;

     label3:
        $d2 = d0 - 0.5;

        $d58 = $d2 - 0.5;

     label4:
        $b3 = $d58 cmpg 0.0;

        if $b3 >= 0 goto label7;

        $d31 = $d58 * 6.247308301164655E-9;

        d59 = 6.116095104481416E-9 + $d31;

        $d32 = $d58 * 1.9575583661463974E-10;

        d61 = -6.077618957228252E-8 + $d32;

        $d33 = $d58 * d61;

        d62 = 9.926418406727737E-7 + $d33;

        $d34 = $d58 * d62;

        d63 = -6.4304548177935305E-6 + $d34;

        $d35 = $d58 * d63;

        d64 = -8.514194324403149E-6 + $d35;

        $d36 = $d58 * d64;

        d65 = 4.939449793824468E-4 + $d36;

        $d37 = $d58 * d65;

        d66 = 0.026620534842894922 + $d37;

        $d38 = $d58 * d66;

        d67 = 0.203610414066807 + $d38;

        $d39 = $d58 * d67;

        d68 = 1.0 + $d39;

        $d40 = d59 / d68;

        $d41 = $d58 * $d40;

        d69 = -2.056338416977607E-7 + $d41;

        $d42 = $d58 * d69;

        d70 = 1.133027231981696E-6 + $d42;

        $d43 = $d58 * d70;

        d71 = -1.2504934821426706E-6 + $d43;

        $d44 = $d58 * d71;

        d72 = -2.013485478078824E-5 + $d44;

        $d45 = $d58 * d72;

        d73 = 1.280502823881162E-4 + $d45;

        $d46 = $d58 * d73;

        d74 = -2.1524167411495098E-4 + $d46;

        $d47 = $d58 * d74;

        d75 = -0.0011651675918590652 + $d47;

        $d48 = $d58 * d75;

        d76 = 0.0072189432466631 + $d48;

        $d49 = $d58 * d76;

        d77 = -0.009621971527876973 + $d49;

        $d50 = $d58 * d77;

        d78 = -0.04219773455554433 + $d50;

        $d51 = $d58 * d78;

        d79 = 0.16653861138229148 + $d51;

        $d52 = $d58 * d79;

        d80 = -0.04200263503409524 + $d52;

        $d53 = $d58 * d80;

        d81 = -0.6558780715202539 + $d53;

        $d54 = $d58 * d81;

        d82 = -0.42278433509846713 + $d54;

        $b5 = d0 cmpl 0.5;

        if $b5 <= 0 goto label5;

        $d57 = $d58 * d82;

        d83 = $d57 / d0;

        goto label6;

     label5:
        $d55 = d82 + 0.5;

        $d56 = $d55 + 0.5;

        d83 = d0 * $d56;

     label6:
        goto label9;

     label7:
        $d3 = $d58 * 4.343529937408594E-15;

        d85 = -1.2494415722763663E-13 + $d3;

        $d4 = $d58 * d85;

        d86 = 1.5728330277104463E-12 + $d4;

        $d5 = $d58 * d86;

        d87 = 4.686843322948848E-11 + $d5;

        $d6 = $d58 * d87;

        d88 = 6.820161668496171E-10 + $d6;

        $d7 = $d58 * d88;

        d89 = 6.8716741130671986E-9 + $d7;

        $d8 = $d58 * d89;

        d90 = 6.116095104481416E-9 + $d8;

        $d9 = $d58 * 2.6923694661863613E-4;

        d92 = 0.004956830093825887 + $d9;

        $d10 = $d58 * d92;

        d93 = 0.054642130860422966 + $d10;

        $d11 = $d58 * d93;

        d94 = 0.3056961078365221 + $d11;

        $d12 = $d58 * d94;

        d95 = 1.0 + $d12;

        $d13 = d90 / d95;

        $d14 = $d13 * $d58;

        d96 = -2.056338416977607E-7 + $d14;

        $d15 = $d58 * d96;

        d97 = 1.133027231981696E-6 + $d15;

        $d16 = $d58 * d97;

        d98 = -1.2504934821426706E-6 + $d16;

        $d17 = $d58 * d98;

        d99 = -2.013485478078824E-5 + $d17;

        $d18 = $d58 * d99;

        d100 = 1.280502823881162E-4 + $d18;

        $d19 = $d58 * d100;

        d101 = -2.1524167411495098E-4 + $d19;

        $d20 = $d58 * d101;

        d102 = -0.0011651675918590652 + $d20;

        $d21 = $d58 * d102;

        d103 = 0.0072189432466631 + $d21;

        $d22 = $d58 * d103;

        d104 = -0.009621971527876973 + $d22;

        $d23 = $d58 * d104;

        d105 = -0.04219773455554433 + $d23;

        $d24 = $d58 * d105;

        d106 = 0.16653861138229148 + $d24;

        $d25 = $d58 * d106;

        d107 = -0.04200263503409524 + $d25;

        $d26 = $d58 * d107;

        d108 = -0.6558780715202539 + $d26;

        $d27 = $d58 * d108;

        d109 = 0.5772156649015329 + $d27;

        $b4 = d0 cmpl 0.5;

        if $b4 <= 0 goto label8;

        $d30 = $d58 / d0;

        $d28 = d109 - 0.5;

        $d29 = $d28 - 0.5;

        d83 = $d30 * $d29;

        goto label9;

     label8:
        d83 = d0 * d109;

     label9:
        return d83;
    }

    public static double logGamma1p(double) throws org.apache.commons.math3.exception.NumberIsTooSmallException, org.apache.commons.math3.exception.NumberIsTooLargeException
    {
        double d0, $d1, $d2, $d3;
        byte $b0, $b1;
        org.apache.commons.math3.exception.NumberIsTooLargeException $r0;
        java.lang.Double $r1, $r2, $r4, $r5;
        org.apache.commons.math3.exception.NumberIsTooSmallException $r3;

        d0 := @parameter0: double;

        $b0 = d0 cmpg -0.5;

        if $b0 >= 0 goto label1;

        $r3 = new org.apache.commons.math3.exception.NumberIsTooSmallException;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(-0.5);

        specialinvoke $r3.<org.apache.commons.math3.exception.NumberIsTooSmallException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r4, $r5, 1);

        throw $r3;

     label1:
        $b1 = d0 cmpl 1.5;

        if $b1 <= 0 goto label2;

        $r0 = new org.apache.commons.math3.exception.NumberIsTooLargeException;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        specialinvoke $r0.<org.apache.commons.math3.exception.NumberIsTooLargeException: void <init>(java.lang.Number,java.lang.Number,boolean)>($r1, $r2, 1);

        throw $r0;

     label2:
        $d1 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>(d0);

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double log1p(double)>($d1);

        $d3 = neg $d2;

        return $d3;
    }

    public static double gamma(double)
    {
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, d22, d23, d24, d25, d26, d27, d28;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6;

        d0 := @parameter0: double;

        $d2 = staticinvoke <org.apache.commons.math3.util.FastMath: double rint(double)>(d0);

        $b0 = d0 cmpl $d2;

        if $b0 != 0 goto label1;

        $b6 = d0 cmpg 0.0;

        if $b6 > 0 goto label1;

        return #NaN;

     label1:
        d1 = staticinvoke <org.apache.commons.math3.util.FastMath: double abs(double)>(d0);

        $b1 = d1 cmpg 20.0;

        if $b1 > 0 goto label7;

        $b3 = d0 cmpl 1.0;

        if $b3 < 0 goto label4;

        d22 = 1.0;

        d23 = d0;

     label2:
        $b5 = d23 cmpl 2.5;

        if $b5 <= 0 goto label3;

        d23 = d23 - 1.0;

        d22 = d22 * d23;

        goto label2;

     label3:
        $d19 = d23 - 1.0;

        $d20 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>($d19);

        $d21 = 1.0 + $d20;

        d24 = d22 / $d21;

        goto label9;

     label4:
        d25 = d0;

        d26 = d0;

     label5:
        $b4 = d26 cmpg -0.5;

        if $b4 >= 0 goto label6;

        d26 = d26 + 1.0;

        d25 = d25 * d26;

        goto label5;

     label6:
        $d16 = staticinvoke <org.apache.commons.math3.special.Gamma: double invGamma1pm1(double)>(d26);

        $d17 = 1.0 + $d16;

        $d18 = d25 * $d17;

        d24 = 1.0 / $d18;

        goto label9;

     label7:
        $d3 = d1 + 4.7421875;

        d27 = $d3 + 0.5;

        $d5 = 2.5066282746310007 / d0;

        $d4 = d1 + 0.5;

        $d6 = staticinvoke <org.apache.commons.math3.util.FastMath: double pow(double,double)>(d27, $d4);

        $d8 = $d5 * $d6;

        $d7 = neg d27;

        $d9 = staticinvoke <org.apache.commons.math3.util.FastMath: double exp(double)>($d7);

        $d10 = $d8 * $d9;

        $d11 = staticinvoke <org.apache.commons.math3.special.Gamma: double lanczos(double)>(d1);

        d28 = $d10 * $d11;

        $b2 = d0 cmpl 0.0;

        if $b2 <= 0 goto label8;

        d24 = d28;

        goto label9;

     label8:
        $d12 = 3.141592653589793 * d0;

        $d13 = staticinvoke <org.apache.commons.math3.util.FastMath: double sin(double)>($d12);

        $d14 = d0 * $d13;

        $d15 = $d14 * d28;

        d24 = -3.141592653589793 / $d15;

     label9:
        return d24;
    }

    static void <clinit>()
    {
        double[] $r0;
        double $d0, $d1;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C13> = -2.056338416977607E-7;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C12> = 1.133027231981696E-6;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C11> = -1.2504934821426706E-6;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C10> = -2.013485478078824E-5;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C9> = 1.280502823881162E-4;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C8> = -2.1524167411495098E-4;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C7> = -0.0011651675918590652;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C6> = 0.0072189432466631;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C5> = -0.009621971527876973;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C4> = -0.04219773455554433;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C3> = 0.16653861138229148;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C2> = -0.04200263503409524;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C1> = -0.6558780715202539;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C0> = 0.5772156649015329;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_C> = -0.42278433509846713;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_Q4> = 2.6923694661863613E-4;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_Q3> = 0.004956830093825887;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_Q2> = 0.054642130860422966;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_Q1> = 0.3056961078365221;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P6> = 4.343529937408594E-15;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P5> = -1.2494415722763663E-13;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P4> = 1.5728330277104463E-12;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P3> = 4.686843322948848E-11;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P2> = 6.820161668496171E-10;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P1> = 6.8716741130671986E-9;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_P0> = 6.116095104481416E-9;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B8> = 1.9575583661463974E-10;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B7> = -6.077618957228252E-8;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B6> = 9.926418406727737E-7;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B5> = -6.4304548177935305E-6;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B4> = -8.514194324403149E-6;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B3> = 4.939449793824468E-4;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B2> = 0.026620534842894922;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_B1> = 0.203610414066807;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_A1> = 6.247308301164655E-9;

        <org.apache.commons.math3.special.Gamma: double INV_GAMMA1P_M1_A0> = 6.116095104481416E-9;

        <org.apache.commons.math3.special.Gamma: double S_LIMIT> = 1.0E-5;

        <org.apache.commons.math3.special.Gamma: double C_LIMIT> = 49.0;

        <org.apache.commons.math3.special.Gamma: double SQRT_TWO_PI> = 2.5066282746310007;

        <org.apache.commons.math3.special.Gamma: double DEFAULT_EPSILON> = 1.0E-14;

        <org.apache.commons.math3.special.Gamma: double LANCZOS_G> = 4.7421875;

        <org.apache.commons.math3.special.Gamma: double GAMMA> = 0.5772156649015329;

        $r0 = newarray (double)[15];

        $r0[0] = 0.9999999999999971;

        $r0[1] = 57.15623566586292;

        $r0[2] = -59.59796035547549;

        $r0[3] = 14.136097974741746;

        $r0[4] = -0.4919138160976202;

        $r0[5] = 3.399464998481189E-5;

        $r0[6] = 4.652362892704858E-5;

        $r0[7] = -9.837447530487956E-5;

        $r0[8] = 1.580887032249125E-4;

        $r0[9] = -2.1026444172410488E-4;

        $r0[10] = 2.1743961811521265E-4;

        $r0[11] = -1.643181065367639E-4;

        $r0[12] = 8.441822398385275E-5;

        $r0[13] = -2.6190838401581408E-5;

        $r0[14] = 3.6899182659531625E-6;

        <org.apache.commons.math3.special.Gamma: double[] LANCZOS> = $r0;

        $d0 = staticinvoke <org.apache.commons.math3.util.FastMath: double log(double)>(6.283185307179586);

        $d1 = 0.5 * $d0;

        <org.apache.commons.math3.special.Gamma: double HALF_LOG_2_PI> = $d1;

        return;
    }
}
