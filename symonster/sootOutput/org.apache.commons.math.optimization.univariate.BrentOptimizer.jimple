public class org.apache.commons.math.optimization.univariate.BrentOptimizer extends org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer
{
    private static final double GOLDEN_SECTION;

    public void <init>()
    {
        org.apache.commons.math.optimization.univariate.BrentOptimizer r0;

        r0 := @this: org.apache.commons.math.optimization.univariate.BrentOptimizer;

        specialinvoke r0.<org.apache.commons.math.optimization.univariate.AbstractUnivariateRealOptimizer: void <init>()>();

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void setMaxEvaluations(int)>(1000);

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void setMaximalIterationCount(int)>(100);

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void setAbsoluteAccuracy(double)>(1.0E-11);

        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void setRelativeAccuracy(double)>(1.0E-9);

        return;
    }

    protected double doOptimize() throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.BrentOptimizer r0;
        org.apache.commons.math.optimization.GoalType $r1, $r2;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        boolean $z0;

        r0 := @this: org.apache.commons.math.optimization.univariate.BrentOptimizer;

        $r1 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: org.apache.commons.math.optimization.GoalType getGoalType()>();

        $r2 = <org.apache.commons.math.optimization.GoalType: org.apache.commons.math.optimization.GoalType MINIMIZE>;

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $d0 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double getMin()>();

        $d1 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double getStartValue()>();

        $d2 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double getMax()>();

        $d3 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double getRelativeAccuracy()>();

        $d4 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double getAbsoluteAccuracy()>();

        $d5 = specialinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double localMin(boolean,double,double,double,double,double)>($z0, $d0, $d1, $d2, $d3, $d4);

        return $d5;
    }

    private double localMin(boolean, double, double, double, double, double) throws org.apache.commons.math.MaxIterationsExceededException, org.apache.commons.math.FunctionEvaluationException
    {
        org.apache.commons.math.optimization.univariate.BrentOptimizer r0;
        boolean z0;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, $d40, $d41, $d42, $d43, $d44, $d45, $d46, $d47, d52, d53, d54, d55, d56, d57, $d58, d59, d60, $d61;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23;
        org.apache.commons.math.exception.NotStrictlyPositiveException $r2, $r4;
        java.lang.Double $r3, $r5;

        r0 := @this: org.apache.commons.math.optimization.univariate.BrentOptimizer;

        z0 := @parameter0: boolean;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        d2 := @parameter3: double;

        d3 := @parameter4: double;

        d4 := @parameter5: double;

        $b0 = d3 cmpg 0.0;

        if $b0 > 0 goto label01;

        $r4 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d3);

        specialinvoke $r4.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r5);

        throw $r4;

     label01:
        $b1 = d4 cmpg 0.0;

        if $b1 > 0 goto label02;

        $r2 = new org.apache.commons.math.exception.NotStrictlyPositiveException;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d4);

        specialinvoke $r2.<org.apache.commons.math.exception.NotStrictlyPositiveException: void <init>(java.lang.Number)>($r3);

        throw $r2;

     label02:
        $b2 = d0 cmpg d2;

        if $b2 >= 0 goto label03;

        d30 = d0;

        d31 = d2;

        goto label04;

     label03:
        d30 = d2;

        d31 = d0;

     label04:
        d32 = d1;

        d33 = d1;

        d34 = d1;

        d35 = 0.0;

        d36 = 0.0;

        d37 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d1);

        if z0 != 0 goto label05;

        d37 = neg d37;

     label05:
        d38 = d37;

        d39 = d37;

     label06:
        $d40 = d30 + d31;

        d5 = 0.5 * $d40;

        $d41 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d32);

        $d42 = d3 * $d41;

        d6 = $d42 + d4;

        d7 = 2.0 * d6;

        $d43 = d32 - d5;

        $d44 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d43);

        $d45 = d31 - d30;

        $d46 = 0.5 * $d45;

        $d47 = d7 - $d46;

        $b21 = $d44 cmpl $d47;

        if $b21 <= 0 goto label31;

        $d8 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d36);

        $b3 = $d8 cmpl d6;

        if $b3 <= 0 goto label14;

        $d11 = d32 - d34;

        $d10 = d37 - d38;

        d52 = $d11 * $d10;

        $d13 = d32 - d33;

        $d12 = d37 - d39;

        d53 = $d13 * $d12;

        $d14 = d32 - d33;

        $d17 = $d14 * d53;

        $d15 = d32 - d34;

        $d16 = $d15 * d52;

        d54 = $d17 - $d16;

        $d18 = d53 - d52;

        d55 = 2.0 * $d18;

        $b14 = d55 cmpl 0.0;

        if $b14 <= 0 goto label07;

        d54 = neg d54;

        goto label08;

     label07:
        d55 = neg d55;

     label08:
        d56 = d36;

        d36 = d35;

        $d19 = d30 - d32;

        $d20 = d55 * $d19;

        $b15 = d54 cmpl $d20;

        if $b15 <= 0 goto label11;

        $d22 = d31 - d32;

        $d23 = d55 * $d22;

        $b16 = d54 cmpg $d23;

        if $b16 >= 0 goto label11;

        $d24 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d54);

        $d25 = 0.5 * d55;

        $d26 = $d25 * d56;

        $d27 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>($d26);

        $b17 = $d24 cmpg $d27;

        if $b17 >= 0 goto label11;

        d35 = d54 / d55;

        d57 = d32 + d35;

        $d28 = d57 - d30;

        $b18 = $d28 cmpg d7;

        if $b18 < 0 goto label09;

        $d29 = d31 - d57;

        $b20 = $d29 cmpg d7;

        if $b20 >= 0 goto label17;

     label09:
        $b19 = d32 cmpg d5;

        if $b19 > 0 goto label10;

        d35 = d6;

        goto label17;

     label10:
        d35 = neg d6;

        goto label17;

     label11:
        $b22 = d32 cmpg d5;

        if $b22 >= 0 goto label12;

        d36 = d31 - d32;

        goto label13;

     label12:
        d36 = d30 - d32;

     label13:
        $d21 = <org.apache.commons.math.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d35 = $d21 * d36;

        goto label17;

     label14:
        $b4 = d32 cmpg d5;

        if $b4 >= 0 goto label15;

        d36 = d31 - d32;

        goto label16;

     label15:
        d36 = d30 - d32;

     label16:
        $d9 = <org.apache.commons.math.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION>;

        d35 = $d9 * d36;

     label17:
        $d58 = staticinvoke <org.apache.commons.math.util.FastMath: double abs(double)>(d35);

        $b23 = $d58 cmpg d6;

        if $b23 >= 0 goto label19;

        $b13 = d35 cmpl 0.0;

        if $b13 < 0 goto label18;

        d59 = d32 + d6;

        goto label20;

     label18:
        d59 = d32 - d6;

        goto label20;

     label19:
        d59 = d32 + d35;

     label20:
        d60 = virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: double computeObjectiveValue(double)>(d59);

        if z0 != 0 goto label21;

        d60 = neg d60;

     label21:
        $b5 = d60 cmpg d37;

        if $b5 > 0 goto label24;

        $b12 = d59 cmpg d32;

        if $b12 >= 0 goto label22;

        d31 = d32;

        goto label23;

     label22:
        d30 = d32;

     label23:
        d33 = d34;

        d38 = d39;

        d34 = d32;

        d39 = d37;

        d32 = d59;

        d37 = d60;

        goto label30;

     label24:
        $b6 = d59 cmpg d32;

        if $b6 >= 0 goto label25;

        d30 = d59;

        goto label26;

     label25:
        d31 = d59;

     label26:
        $b7 = d60 cmpg d39;

        if $b7 <= 0 goto label27;

        $b8 = d34 cmpl d32;

        if $b8 != 0 goto label28;

     label27:
        d33 = d34;

        d38 = d39;

        d34 = d59;

        d39 = d60;

        goto label30;

     label28:
        $b9 = d60 cmpg d38;

        if $b9 <= 0 goto label29;

        $b10 = d33 cmpl d32;

        if $b10 == 0 goto label29;

        $b11 = d33 cmpl d34;

        if $b11 != 0 goto label30;

     label29:
        d33 = d59;

        d38 = d60;

     label30:
        goto label34;

     label31:
        if z0 == 0 goto label32;

        $d61 = d37;

        goto label33;

     label32:
        $d61 = neg d37;

     label33:
        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void setFunctionValue(double)>($d61);

        return d32;

     label34:
        virtualinvoke r0.<org.apache.commons.math.optimization.univariate.BrentOptimizer: void incrementIterationsCounter()>();

        goto label06;
    }

    static void <clinit>()
    {
        double $d0, $d1, $d2;

        $d0 = staticinvoke <org.apache.commons.math.util.FastMath: double sqrt(double)>(5.0);

        $d1 = 3.0 - $d0;

        $d2 = 0.5 * $d1;

        <org.apache.commons.math.optimization.univariate.BrentOptimizer: double GOLDEN_SECTION> = $d2;

        return;
    }
}
