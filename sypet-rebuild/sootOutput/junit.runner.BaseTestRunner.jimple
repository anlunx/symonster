public abstract class junit.runner.BaseTestRunner extends java.lang.Object implements junit.framework.TestListener
{
    public static final java.lang.String SUITE_METHODNAME;
    private static java.util.Properties fPreferences;
    static int fgMaxMessageLength;
    static boolean fgFilterStack;
    boolean fLoading;

    public void <init>()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = 1;

        return;
    }

    public synchronized void startTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.String $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testStarted(java.lang.String)>($r2);

        return;
    }

    protected static void setPreferences(java.util.Properties)
    {
        java.util.Properties r0;

        r0 := @parameter0: java.util.Properties;

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = r0;

        return;
    }

    protected static java.util.Properties getPreferences()
    {
        java.util.Properties $r0, $r1, $r2, $r3, $r5;

        $r0 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        if $r0 != null goto label1;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        <junit.runner.BaseTestRunner: java.util.Properties fPreferences> = $r2;

        $r3 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        virtualinvoke $r3.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("loading", "true");

        $r5 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        virtualinvoke $r5.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>("filterstack", "true");

        staticinvoke <junit.runner.BaseTestRunner: void readPreferences()>();

     label1:
        $r1 = <junit.runner.BaseTestRunner: java.util.Properties fPreferences>;

        return $r1;
    }

    public static void savePreferences() throws java.io.IOException
    {
        java.io.FileOutputStream $r2;
        java.io.File $r3;
        java.util.Properties $r4;
        java.lang.Throwable $r5;

        $r2 = new java.io.FileOutputStream;

        $r3 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

     label1:
        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r4.<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>($r2, "");

     label2:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.io.FileOutputStream: void close()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void setPreference(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.Properties $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r2.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

        return;
    }

    public synchronized void endTest(junit.framework.Test)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.String $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testEnded(java.lang.String)>($r2);

        return;
    }

    public synchronized void addError(junit.framework.Test, java.lang.Throwable)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(1, r1, r2);

        return;
    }

    public synchronized void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        junit.runner.BaseTestRunner r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>(2, r1, r2);

        return;
    }

    public abstract void testStarted(java.lang.String);

    public abstract void testEnded(java.lang.String);

    public abstract void testFailed(int, junit.framework.Test, java.lang.Throwable);

    public junit.framework.Test getTest(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, $r13, $r17, $r19, $r23, $r25, $r30, $r32, r35;
        int $i0, $i1;
        java.lang.Class[] $r2, $r3;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        java.lang.Exception $r6, $r14;
        junit.framework.TestSuite $r7;
        java.lang.ClassNotFoundException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r15, $r16, $r18, $r21, $r22, $r24, $r27, $r28, $r31;
        java.lang.IllegalAccessException $r20;
        java.lang.reflect.InvocationTargetException $r26;
        java.lang.Throwable $r29;
        java.lang.Class r33;
        java.lang.reflect.Method r37;
        junit.framework.Test r38;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 0 goto label01;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        return null;

     label01:
        r33 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.Class loadSuiteClass(java.lang.String)>(r1);

     label02:
        goto label06;

     label03:
        $r8 := @caughtexception;

        r35 = virtualinvoke $r8.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        if r35 != null goto label04;

        r35 = r1;

     label04:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found \"");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r13);

        return null;

     label05:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r17 = virtualinvoke $r14.<java.lang.Exception: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r19);

        return null;

     label06:
        $r2 = newarray (java.lang.Class)[0];

        r37 = virtualinvoke r33.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r2);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        $r7 = new junit.framework.TestSuite;

        specialinvoke $r7.<junit.framework.TestSuite: void <init>(java.lang.Class)>(r33);

        return $r7;

     label09:
        $i1 = virtualinvoke r37.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 != 0 goto label10;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>("Suite() method must be static");

        return null;

     label10:
        $r3 = newarray (java.lang.Class)[0];

        $r4 = (java.lang.Object[]) $r3;

        $r5 = virtualinvoke r37.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4);

        r38 = (junit.framework.Test) $r5;

        if r38 != null goto label12;

     label11:
        return r38;

     label12:
        goto label15;

     label13:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        $r29 = virtualinvoke $r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r30 = virtualinvoke $r29.<java.lang.Throwable: java.lang.String toString()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r32);

        return null;

     label14:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to invoke suite():");

        $r23 = virtualinvoke $r20.<java.lang.IllegalAccessException: java.lang.String toString()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<junit.runner.BaseTestRunner: void runFailed(java.lang.String)>($r25);

        return null;

     label15:
        virtualinvoke r0.<junit.runner.BaseTestRunner: void clearStatus()>();

        return r38;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label05;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.reflect.InvocationTargetException from label10 to label11 with label13;
        catch java.lang.IllegalAccessException from label10 to label11 with label14;
    }

    public java.lang.String elapsedTimeAsString(long)
    {
        junit.runner.BaseTestRunner r0;
        long l0;
        java.text.NumberFormat $r1;
        double $d0, $d1;
        java.lang.String $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getInstance()>();

        $d0 = (double) l0;

        $d1 = $d0 / 1000.0;

        $r2 = virtualinvoke $r1.<java.text.NumberFormat: java.lang.String format(double)>($d1);

        return $r2;
    }

    protected java.lang.String processArguments(java.lang.String[])
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r2, $r3, $r4, $r6, r7;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r5;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String[];

        r7 = null;

        i4 = 0;

     label1:
        $i0 = lengthof r1;

        if i4 >= $i0 goto label8;

        $r2 = r1[i4];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-noloading");

        if $z0 == 0 goto label2;

        virtualinvoke r0.<junit.runner.BaseTestRunner: void setLoading(boolean)>(0);

        goto label7;

     label2:
        $r3 = r1[i4];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-nofilterstack");

        if $z1 == 0 goto label3;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 0;

        goto label7;

     label3:
        $r4 = r1[i4];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-c");

        if $z2 == 0 goto label6;

        $i2 = lengthof r1;

        $i1 = i4 + 1;

        if $i2 <= $i1 goto label4;

        $i3 = i4 + 1;

        $r6 = r1[$i3];

        r7 = virtualinvoke r0.<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>($r6);

        goto label5;

     label4:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Missing Test class name");

     label5:
        i4 = i4 + 1;

        goto label7;

     label6:
        r7 = r1[i4];

     label7:
        i4 = i4 + 1;

        goto label1;

     label8:
        return r7;
    }

    public void setLoading(boolean)
    {
        junit.runner.BaseTestRunner r0;
        boolean z0;

        r0 := @this: junit.runner.BaseTestRunner;

        z0 := @parameter0: boolean;

        r0.<junit.runner.BaseTestRunner: boolean fLoading> = z0;

        return;
    }

    public java.lang.String extractClassName(java.lang.String)
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1, $r2;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("Default package for");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        $i1 = $i0 + 1;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r2;

     label1:
        return r1;
    }

    public static java.lang.String truncate(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, r4;

        r4 := @parameter0: java.lang.String;

        $i0 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i0 == -1 goto label1;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        $i2 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        if $i1 <= $i2 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i3 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        $r1 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r4;
    }

    protected abstract void runFailed(java.lang.String);

    protected java.lang.Class loadSuiteClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: junit.runner.BaseTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        return $r2;
    }

    protected void clearStatus()
    {
        junit.runner.BaseTestRunner r0;

        r0 := @this: junit.runner.BaseTestRunner;

        return;
    }

    protected boolean useReloadingTestSuiteLoader()
    {
        junit.runner.BaseTestRunner r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2;

        r0 := @this: junit.runner.BaseTestRunner;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("loading");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $z1 = r0.<junit.runner.BaseTestRunner: boolean fLoading>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private static java.io.File getPreferencesFile()
    {
        java.lang.String r0;
        java.io.File $r1;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r0, "junit.properties");

        return $r1;
    }

    private static void readPreferences()
    {
        java.io.FileInputStream $r2, r9;
        java.io.File $r3;
        java.util.Properties $r4, $r5, $r6;
        java.io.IOException $r7, $r8;

        r9 = null;

     label1:
        $r2 = new java.io.FileInputStream;

        $r3 = staticinvoke <junit.runner.BaseTestRunner: java.io.File getPreferencesFile()>();

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

        r9 = $r2;

        $r4 = new java.util.Properties;

        $r5 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        specialinvoke $r4.<java.util.Properties: void <init>(java.util.Properties)>($r5);

        staticinvoke <junit.runner.BaseTestRunner: void setPreferences(java.util.Properties)>($r4);

        $r6 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        virtualinvoke $r6.<java.util.Properties: void load(java.io.InputStream)>($r2);

     label2:
        goto label7;

     label3:
        $r8 := @caughtexception;

     label4:
        if r9 == null goto label5;

        virtualinvoke r9.<java.io.InputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public static java.lang.String getPreference(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.util.Properties $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <junit.runner.BaseTestRunner: java.util.Properties getPreferences()>();

        $r2 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r0);

        return $r2;
    }

    public static int getPreference(java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, i1;
        java.lang.NumberFormatException $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>(r0);

        i1 = i0;

        if r1 != null goto label1;

        return i0;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return i1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String getFilteredTrace(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.StringBuffer r3;
        java.lang.String r4, $r7;
        java.io.StringWriter $r5;
        java.io.PrintWriter $r6;

        r0 := @parameter0: java.lang.Throwable;

        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        $r6 = new java.io.PrintWriter;

        specialinvoke $r6.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r6);

        r3 = virtualinvoke $r5.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();

        r4 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>();

        $r7 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>(r4);

        return $r7;
    }

    public static java.lang.String getFilteredTrace(java.lang.String)
    {
        java.lang.String r0, $r11, $r13;
        boolean $z0, $z1;
        java.io.StringWriter $r7;
        java.io.PrintWriter $r8;
        java.io.StringReader $r9;
        java.io.BufferedReader $r10;
        java.lang.Exception $r12;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <junit.runner.BaseTestRunner: boolean showStackRaw()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r7 = new java.io.StringWriter;

        specialinvoke $r7.<java.io.StringWriter: void <init>()>();

        $r8 = new java.io.PrintWriter;

        specialinvoke $r8.<java.io.PrintWriter: void <init>(java.io.Writer)>($r7);

        $r9 = new java.io.StringReader;

        specialinvoke $r9.<java.io.StringReader: void <init>(java.lang.String)>(r0);

        $r10 = new java.io.BufferedReader;

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r9);

     label2:
        $r13 = virtualinvoke $r10.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r13 == null goto label3;

        $z1 = staticinvoke <junit.runner.BaseTestRunner: boolean filterLine(java.lang.String)>($r13);

        if $z1 != 0 goto label2;

        virtualinvoke $r8.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        goto label2;

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        return r0;

     label5:
        $r11 = virtualinvoke $r7.<java.io.StringWriter: java.lang.String toString()>();

        return $r11;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected static boolean showStackRaw()
    {
        java.lang.String $r0;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>("filterstack");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        $z1 = <junit.runner.BaseTestRunner: boolean fgFilterStack>;

        if $z1 != 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static boolean filterLine(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.String[] $r2;
        int $i0, $i1, i2;

        r0 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "junit.framework.TestCase";

        $r2[1] = "junit.framework.TestResult";

        $r2[2] = "junit.framework.TestSuite";

        $r2[3] = "junit.framework.Assert.";

        $r2[4] = "junit.swingui.TestRunner";

        $r2[5] = "junit.awtui.TestRunner";

        $r2[6] = "junit.textui.TestRunner";

        $r2[7] = "java.lang.reflect.Method.invoke(";

        i2 = 0;

     label1:
        $i0 = lengthof $r2;

        if i2 >= $i0 goto label3;

        $r3 = $r2[i2];

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>($r3);

        if $i1 <= 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        int $i0, $i1;

        <junit.runner.BaseTestRunner: java.lang.String SUITE_METHODNAME> = "suite";

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = 500;

        <junit.runner.BaseTestRunner: boolean fgFilterStack> = 1;

        $i0 = <junit.runner.BaseTestRunner: int fgMaxMessageLength>;

        $i1 = staticinvoke <junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>("maxmessage", $i0);

        <junit.runner.BaseTestRunner: int fgMaxMessageLength> = $i1;

        return;
    }
}
