class org.junit.internal.runners.MethodRoadie$1 extends java.lang.Object implements java.lang.Runnable
{
    final long val$timeout;
    final org.junit.internal.runners.MethodRoadie this$0;

    void <init>(org.junit.internal.runners.MethodRoadie, long)
    {
        org.junit.internal.runners.MethodRoadie$1 r0;
        org.junit.internal.runners.MethodRoadie r1;
        long l0;

        r0 := @this: org.junit.internal.runners.MethodRoadie$1;

        r1 := @parameter0: org.junit.internal.runners.MethodRoadie;

        l0 := @parameter1: long;

        r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0> = r1;

        r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout> = l0;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        org.junit.internal.runners.MethodRoadie$1 r0;
        java.util.concurrent.ExecutorService r1;
        java.util.concurrent.Future r3;
        org.junit.internal.runners.MethodRoadie$1$1 $r4;
        java.util.concurrent.TimeUnit $r5, $r6;
        long $l0, $l1;
        java.lang.Exception $r9, $r12;
        org.junit.internal.runners.MethodRoadie $r10, $r14;
        java.util.concurrent.TimeoutException $r11;
        java.lang.Object[] $r13;
        java.lang.Long $r15;
        java.lang.String $r16;
        boolean z0;

        r0 := @this: org.junit.internal.runners.MethodRoadie$1;

        r1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>();

        $r4 = new org.junit.internal.runners.MethodRoadie$1$1;

        specialinvoke $r4.<org.junit.internal.runners.MethodRoadie$1$1: void <init>(org.junit.internal.runners.MethodRoadie$1)>(r0);

        r3 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r4);

        interfaceinvoke r1.<java.util.concurrent.ExecutorService: void shutdown()>();

     label1:
        $l0 = r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        z0 = interfaceinvoke r1.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>($l0, $r5);

        if z0 != 0 goto label2;

        interfaceinvoke r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label2:
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke r3.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(0L, $r6);

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        $r14 = r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        $r12 = new java.lang.Exception;

        $r13 = newarray (java.lang.Object)[1];

        $l1 = r0.<org.junit.internal.runners.MethodRoadie$1: long val$timeout>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r13[0] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("test timed out after %d milliseconds", $r13);

        specialinvoke $r12.<java.lang.Exception: void <init>(java.lang.String)>($r16);

        virtualinvoke $r14.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r12);

        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = r0.<org.junit.internal.runners.MethodRoadie$1: org.junit.internal.runners.MethodRoadie this$0>;

        virtualinvoke $r10.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r9);

     label6:
        return;

        catch java.util.concurrent.TimeoutException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }
}
