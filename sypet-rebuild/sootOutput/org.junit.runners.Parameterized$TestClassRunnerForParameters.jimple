class org.junit.runners.Parameterized$TestClassRunnerForParameters extends org.junit.runners.BlockJUnit4ClassRunner
{
    private final java.lang.Object[] fParameters;
    private final java.lang.String fName;
    final org.junit.runners.Parameterized this$0;

    void <init>(org.junit.runners.Parameterized, java.lang.Class, java.lang.Object[], java.lang.String) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        org.junit.runners.Parameterized r1;
        java.lang.Class r2;
        java.lang.Object[] r3;
        java.lang.String r4;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        r1 := @parameter0: org.junit.runners.Parameterized;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.lang.Object[];

        r4 := @parameter3: java.lang.String;

        r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0> = r1;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void <init>(java.lang.Class)>(r2);

        r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters> = r3;

        r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.String fName> = r4;

        return;
    }

    public java.lang.Object createTest() throws java.lang.Exception
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        org.junit.runners.Parameterized $r1;
        boolean $z0;
        java.lang.Object $r2, $r3;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        $r1 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0>;

        $z0 = staticinvoke <org.junit.runners.Parameterized: boolean access$000(org.junit.runners.Parameterized)>($r1);

        if $z0 == 0 goto label1;

        $r3 = specialinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object createTestUsingFieldInjection()>();

        return $r3;

     label1:
        $r2 = specialinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object createTestUsingConstructorInjection()>();

        return $r2;
    }

    private java.lang.Object createTestUsingConstructorInjection() throws java.lang.Exception
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        $r1 = virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        return $r4;
    }

    private java.lang.Object createTestUsingFieldInjection() throws java.lang.Exception
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        java.util.List r1;
        java.lang.Object r2, $r12, $r15, $r36, $r40;
        java.util.Iterator r3;
        org.junit.runners.model.FrameworkField r4;
        java.lang.reflect.Field r5;
        org.junit.runners.Parameterized$Parameter r6;
        int i0, $i1, $i2, $i3, $i4;
        org.junit.runners.Parameterized $r8;
        java.lang.Object[] $r9, $r14, $r21, $r35, $r39;
        org.junit.runners.model.TestClass $r10, $r28;
        java.lang.Class $r11, $r41, $r45;
        boolean $z0;
        java.lang.'annotation'.Annotation $r13;
        java.lang.Exception $r16, $r26;
        java.lang.StringBuilder $r17, $r18, $r19, $r20, $r22, $r23, $r27, $r30, $r31, $r33, $r34, $r37, $r38, $r43, $r44, $r47, $r48;
        java.lang.String $r24, $r29, $r32, $r42, $r46, $r49;
        java.lang.IllegalArgumentException $r25;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        $r8 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0>;

        r1 = staticinvoke <org.junit.runners.Parameterized: java.util.List access$100(org.junit.runners.Parameterized)>($r8);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r9 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $i2 = lengthof $r9;

        if $i1 == $i2 goto label1;

        $r16 = new java.lang.Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong number of parameters and @Parameter fields. @Parameter fields counted: ");

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available parameters: ");

        $r21 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $i4 = lengthof $r21;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.Exception: void <init>(java.lang.String)>($r24);

        throw $r16;

     label1:
        $r10 = virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r11 = virtualinvoke $r10.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        r2 = virtualinvoke $r11.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runners.model.FrameworkField) $r12;

        r5 = virtualinvoke r4.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        $r13 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/runners/Parameterized$Parameter");

        r6 = (org.junit.runners.Parameterized$Parameter) $r13;

        i0 = interfaceinvoke r6.<org.junit.runners.Parameterized$Parameter: int value()>();

     label3:
        $r14 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $r15 = $r14[i0];

        virtualinvoke r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, $r15);

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

        $r26 = new java.lang.Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.model.TestClass getTestClass()>();

        $r29 = virtualinvoke $r28.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Trying to set ");

        $r32 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.String getName()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with the value ");

        $r35 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $r36 = $r35[i0];

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is not the right type (");

        $r39 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.Object[] fParameters>;

        $r40 = $r39[i0];

        $r41 = virtualinvoke $r40.<java.lang.Object: java.lang.Class getClass()>();

        $r42 = virtualinvoke $r41.<java.lang.Class: java.lang.String getSimpleName()>();

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r45 = virtualinvoke r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r46 = virtualinvoke $r45.<java.lang.Class: java.lang.String getSimpleName()>();

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r49, $r25);

        throw $r26;

     label6:
        goto label2;

     label7:
        return r2;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected java.lang.String getName()
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        java.lang.String $r1;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        $r1 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.String fName>;

        return $r1;
    }

    protected java.lang.String testName(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.StringBuilder $r2, $r4, $r6;
        java.lang.String $r3, $r5, $r7;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected void validateConstructor(java.util.List)
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        java.util.List r1;
        org.junit.runners.Parameterized $r2;
        boolean $z0;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: void validateOnlyOneConstructor(java.util.List)>(r1);

        $r2 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0>;

        $z0 = staticinvoke <org.junit.runners.Parameterized: boolean access$000(org.junit.runners.Parameterized)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: void validateZeroArgConstructor(java.util.List)>(r1);

     label1:
        return;
    }

    protected void validateFields(java.util.List)
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        java.util.List r1, r2;
        int[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        org.junit.runners.Parameterized $r4, $r5;
        boolean $z0, $z1;
        java.lang.Exception $r6, $r14, $r24;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.String $r13, $r19, $r33;
        java.lang.Object $r20;
        java.lang.reflect.Field $r21;
        java.lang.'annotation'.Annotation $r22;
        org.junit.runners.Parameterized$Parameter $r23;
        java.util.Iterator r34;
        org.junit.runners.model.FrameworkField r35;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateFields(java.util.List)>(r1);

        $r4 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0>;

        $z0 = staticinvoke <org.junit.runners.Parameterized: boolean access$000(org.junit.runners.Parameterized)>($r4);

        if $z0 == 0 goto label9;

        $r5 = r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.Parameterized this$0>;

        r2 = staticinvoke <org.junit.runners.Parameterized: java.util.List access$100(org.junit.runners.Parameterized)>($r5);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        r3 = newarray (int)[$i1];

        r34 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r20 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.junit.runners.model.FrameworkField) $r20;

        $r21 = virtualinvoke r35.<org.junit.runners.model.FrameworkField: java.lang.reflect.Field getField()>();

        $r22 = virtualinvoke $r21.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/runners/Parameterized$Parameter");

        $r23 = (org.junit.runners.Parameterized$Parameter) $r22;

        i0 = interfaceinvoke $r23.<org.junit.runners.Parameterized$Parameter: int value()>();

        if i0 < 0 goto label2;

        $i6 = interfaceinvoke r2.<java.util.List: int size()>();

        $i7 = $i6 - 1;

        if i0 <= $i7 goto label3;

     label2:
        $r24 = new java.lang.Exception;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid @Parameter value: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". @Parameter fields counted: ");

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Please use an index between 0 and ");

        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        $i5 = $i4 - 1;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.Exception: void <init>(java.lang.String)>($r33);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r24);

        goto label4;

     label3:
        $i8 = r3[i0];

        $i9 = $i8 + 1;

        r3[i0] = $i9;

     label4:
        goto label1;

     label5:
        i10 = 0;

     label6:
        $i2 = lengthof r3;

        if i10 >= $i2 goto label9;

        i11 = r3[i10];

        if i11 != 0 goto label7;

        $r14 = new java.lang.Exception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Parameter(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is never used.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.Exception: void <init>(java.lang.String)>($r19);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label8;

     label7:
        if i11 <= 1 goto label8;

        $r6 = new java.lang.Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@Parameter(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is used more than once (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.Exception: void <init>(java.lang.String)>($r13);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label8:
        i10 = i10 + 1;

        goto label6;

     label9:
        return;
    }

    protected org.junit.runners.model.Statement classBlock(org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        org.junit.runner.notification.RunNotifier r1;
        org.junit.runners.model.Statement $r2;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        r1 := @parameter0: org.junit.runner.notification.RunNotifier;

        $r2 = virtualinvoke r0.<org.junit.runners.Parameterized$TestClassRunnerForParameters: org.junit.runners.model.Statement childrenInvoker(org.junit.runner.notification.RunNotifier)>(r1);

        return $r2;
    }

    protected java.lang.annotation.Annotation[] getRunnerAnnotations()
    {
        org.junit.runners.Parameterized$TestClassRunnerForParameters r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: org.junit.runners.Parameterized$TestClassRunnerForParameters;

        $r1 = newarray (java.lang.'annotation'.Annotation)[0];

        return $r1;
    }
}
