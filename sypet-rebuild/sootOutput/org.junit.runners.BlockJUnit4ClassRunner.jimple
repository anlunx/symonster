public class org.junit.runners.BlockJUnit4ClassRunner extends org.junit.runners.ParentRunner
{

    public void <init>(java.lang.Class) throws org.junit.runners.model.InitializationError
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Class r1;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.junit.runners.ParentRunner: void <init>(java.lang.Class)>(r1);

        return;
    }

    protected void runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        org.junit.runner.notification.RunNotifier r2;
        org.junit.runner.Description r3;
        java.lang.'annotation'.Annotation $r4;
        org.junit.runners.model.Statement $r5;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: org.junit.runner.notification.RunNotifier;

        r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>(r1);

        $r4 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/Ignore");

        if $r4 == null goto label1;

        virtualinvoke r2.<org.junit.runner.notification.RunNotifier: void fireTestIgnored(org.junit.runner.Description)>(r3);

        goto label2;

     label1:
        $r5 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void runLeaf(org.junit.runners.model.Statement,org.junit.runner.Description,org.junit.runner.notification.RunNotifier)>($r5, r3, r2);

     label2:
        return;
    }

    protected org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        org.junit.runners.model.TestClass $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        java.lang.annotation.Annotation[] $r5;
        org.junit.runner.Description $r6;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        $r4 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.String testName(org.junit.runners.model.FrameworkMethod)>(r1);

        $r5 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.annotation.Annotation[] getAnnotations()>();

        $r6 = staticinvoke <org.junit.runner.Description: org.junit.runner.Description createTestDescription(java.lang.Class,java.lang.String,java.lang.annotation.Annotation[])>($r3, $r4, $r5);

        return $r6;
    }

    protected java.util.List getChildren()
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List $r1;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List computeTestMethods()>();

        return $r1;
    }

    protected java.util.List computeTestMethods()
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.TestClass $r1;
        java.util.List $r2;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "org/junit/Test");

        return $r2;
    }

    protected void collectInitializationErrors(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.junit.runners.ParentRunner: void collectInitializationErrors(java.util.List)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateNoNonStaticInnerClass(java.util.List)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateConstructor(java.util.List)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateInstanceMethods(java.util.List)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateFields(java.util.List)>(r1);

        specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateMethods(java.util.List)>(r1);

        return;
    }

    protected void validateNoNonStaticInnerClass(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;
        java.lang.String r2, $r7;
        org.junit.runners.model.TestClass $r3, $r6;
        boolean $z0;
        java.lang.StringBuilder $r4, $r5, $r8, $r9;
        java.lang.Exception $r10;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $z0 = virtualinvoke $r3.<org.junit.runners.model.TestClass: boolean isANonStaticInnerClass()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The inner class ");

        $r6 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r7 = virtualinvoke $r6.<org.junit.runners.model.TestClass: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not static.");

        r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>(r2);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

     label1:
        return;
    }

    protected void validateConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateOnlyOneConstructor(java.util.List)>(r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateZeroArgConstructor(java.util.List)>(r1);

        return;
    }

    protected void validateOnlyOneConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;
        boolean $z0;
        java.lang.Exception $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        $z0 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean hasOneConstructor()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("Test class should have exactly one public constructor");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    protected void validateZeroArgConstructor(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;
        org.junit.runners.model.TestClass $r3, $r4;
        boolean $z0, $z1;
        java.lang.reflect.Constructor $r5;
        java.lang.Class[] $r6;
        int $i0;
        java.lang.Exception $r7;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $z0 = virtualinvoke $r3.<org.junit.runners.model.TestClass: boolean isANonStaticInnerClass()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean hasOneConstructor()>();

        if $z1 == 0 goto label1;

        $r4 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r6 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r6;

        if $i0 == 0 goto label1;

        $r7 = new java.lang.Exception;

        specialinvoke $r7.<java.lang.Exception: void <init>(java.lang.String)>("Test class should have exactly one public zero-argument constructor");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label1:
        return;
    }

    private boolean hasOneConstructor()
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.Class $r2;
        java.lang.reflect.Constructor[] $r3;
        int $i0;
        boolean $z0;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $i0 = lengthof $r3;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void validateInstanceMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1, $r2;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "org/junit/After", 0, r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "org/junit/Before", 0, r1);

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validateTestMethods(java.util.List)>(r1);

        $r2 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List computeTestMethods()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("No runnable methods");

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    protected void validateFields(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;
        org.junit.internal.runners.rules.RuleFieldValidator $r2;
        org.junit.runners.model.TestClass $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleFieldValidator: org.junit.internal.runners.rules.RuleFieldValidator RULE_VALIDATOR>;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleFieldValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, r1);

        return;
    }

    private void validateMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;
        org.junit.internal.runners.rules.RuleFieldValidator $r2;
        org.junit.runners.model.TestClass $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        $r2 = <org.junit.internal.runners.rules.RuleFieldValidator: org.junit.internal.runners.rules.RuleFieldValidator RULE_METHOD_VALIDATOR>;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        virtualinvoke $r2.<org.junit.internal.runners.rules.RuleFieldValidator: void validate(org.junit.runners.model.TestClass,java.util.List)>($r3, r1);

        return;
    }

    protected void validateTestMethods(java.util.List)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.util.List r1;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.util.List;

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void validatePublicVoidNoArgMethods(java.lang.Class,boolean,java.util.List)>(class "org/junit/Test", 0, r1);

        return;
    }

    protected java.lang.Object createTest() throws java.lang.Exception
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.TestClass $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        $r1 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r2 = virtualinvoke $r1.<org.junit.runners.model.TestClass: java.lang.reflect.Constructor getOnlyConstructor()>();

        $r3 = newarray (java.lang.Object)[0];

        $r4 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        return $r4;
    }

    protected java.lang.String testName(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.String $r2;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        $r2 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        return $r2;
    }

    protected org.junit.runners.model.Statement methodBlock(org.junit.runners.model.FrameworkMethod)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.BlockJUnit4ClassRunner$1 $r3;
        java.lang.Throwable $r4;
        org.junit.internal.runners.statements.Fail $r5;
        org.junit.runners.model.Statement r7, r8, r9, r10, r11, r12;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

     label1:
        $r3 = new org.junit.runners.BlockJUnit4ClassRunner$1;

        specialinvoke $r3.<org.junit.runners.BlockJUnit4ClassRunner$1: void <init>(org.junit.runners.BlockJUnit4ClassRunner)>(r0);

        r2 = virtualinvoke $r3.<org.junit.runners.BlockJUnit4ClassRunner$1: java.lang.Object run()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new org.junit.internal.runners.statements.Fail;

        specialinvoke $r5.<org.junit.internal.runners.statements.Fail: void <init>(java.lang.Throwable)>($r4);

        return $r5;

     label4:
        r7 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod,java.lang.Object)>(r1, r2);

        r8 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>(r1, r2, r7);

        r9 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withPotentialTimeout(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>(r1, r2, r8);

        r10 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withBefores(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>(r1, r2, r9);

        r11 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withAfters(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>(r1, r2, r10);

        r12 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withRules(org.junit.runners.model.FrameworkMethod,java.lang.Object,org.junit.runners.model.Statement)>(r1, r2, r11);

        return r12;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.internal.runners.statements.InvokeMethod $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        $r3 = new org.junit.internal.runners.statements.InvokeMethod;

        specialinvoke $r3.<org.junit.internal.runners.statements.InvokeMethod: void <init>(org.junit.runners.model.FrameworkMethod,java.lang.Object)>(r1, r2);

        return $r3;
    }

    protected org.junit.runners.model.Statement possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.model.Statement r3, $r7;
        org.junit.Test r4;
        java.lang.'annotation'.Annotation $r5;
        boolean $z0;
        java.lang.Class $r6;
        org.junit.internal.runners.statements.ExpectException r8;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.junit.runners.model.Statement;

        $r5 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/Test");

        r4 = (org.junit.Test) $r5;

        $z0 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: boolean expectsException(org.junit.Test)>(r4);

        if $z0 == 0 goto label1;

        r8 = new org.junit.internal.runners.statements.ExpectException;

        $r7 = r8;

        $r6 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.Class getExpectedException(org.junit.Test)>(r4);

        specialinvoke r8.<org.junit.internal.runners.statements.ExpectException: void <init>(org.junit.runners.model.Statement,java.lang.Class)>(r3, $r6);

        goto label2;

     label1:
        $r7 = r3;

     label2:
        return $r7;
    }

    protected org.junit.runners.model.Statement withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.model.Statement r3, $r6;
        long l0;
        java.lang.'annotation'.Annotation $r4;
        org.junit.Test $r5;
        byte $b1;
        org.junit.internal.runners.statements.FailOnTimeout r7;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.junit.runners.model.Statement;

        $r4 = virtualinvoke r1.<org.junit.runners.model.FrameworkMethod: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/Test");

        $r5 = (org.junit.Test) $r4;

        l0 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: long getTimeout(org.junit.Test)>($r5);

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        r7 = new org.junit.internal.runners.statements.FailOnTimeout;

        $r6 = r7;

        specialinvoke r7.<org.junit.internal.runners.statements.FailOnTimeout: void <init>(org.junit.runners.model.Statement,long)>(r3, l0);

        goto label2;

     label1:
        $r6 = r3;

     label2:
        return $r6;
    }

    protected org.junit.runners.model.Statement withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.model.Statement r3, $r6;
        java.util.List r4;
        org.junit.runners.model.TestClass $r5;
        boolean $z0;
        org.junit.internal.runners.statements.RunBefores r7;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.junit.runners.model.Statement;

        $r5 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        r4 = virtualinvoke $r5.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "org/junit/Before");

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = r3;

        goto label2;

     label1:
        r7 = new org.junit.internal.runners.statements.RunBefores;

        $r6 = r7;

        specialinvoke r7.<org.junit.internal.runners.statements.RunBefores: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>(r3, r4, r2);

     label2:
        return $r6;
    }

    protected org.junit.runners.model.Statement withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.model.Statement r3, $r6;
        java.util.List r4;
        org.junit.runners.model.TestClass $r5;
        boolean $z0;
        org.junit.internal.runners.statements.RunAfters r7;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.junit.runners.model.Statement;

        $r5 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        r4 = virtualinvoke $r5.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "org/junit/After");

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = r3;

        goto label2;

     label1:
        r7 = new org.junit.internal.runners.statements.RunAfters;

        $r6 = r7;

        specialinvoke r7.<org.junit.internal.runners.statements.RunAfters: void <init>(org.junit.runners.model.Statement,java.util.List,java.lang.Object)>(r3, r4, r2);

     label2:
        return $r6;
    }

    private org.junit.runners.model.Statement withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.lang.Object r2;
        org.junit.runners.model.Statement r3, r6, r7;
        java.util.List r4;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.junit.runners.model.Statement;

        r4 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List getTestRules(java.lang.Object)>(r2);

        r6 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withMethodRules(org.junit.runners.model.FrameworkMethod,java.util.List,java.lang.Object,org.junit.runners.model.Statement)>(r1, r4, r2, r3);

        r7 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.Statement withTestRules(org.junit.runners.model.FrameworkMethod,java.util.List,org.junit.runners.model.Statement)>(r1, r4, r6);

        return r7;
    }

    private org.junit.runners.model.Statement withMethodRules(org.junit.runners.model.FrameworkMethod, java.util.List, java.lang.Object, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.util.List r2, $r6;
        java.lang.Object r3, $r7;
        java.util.Iterator r4;
        org.junit.rules.MethodRule r5;
        boolean $z0, $z1;
        org.junit.runners.model.Statement r8;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.Object;

        r8 := @parameter3: org.junit.runners.model.Statement;

        $r6 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List getMethodRules(java.lang.Object)>(r3);

        r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.junit.rules.MethodRule) $r7;

        $z1 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r5);

        if $z1 != 0 goto label2;

        r8 = interfaceinvoke r5.<org.junit.rules.MethodRule: org.junit.runners.model.Statement apply(org.junit.runners.model.Statement,org.junit.runners.model.FrameworkMethod,java.lang.Object)>(r8, r1, r3);

     label2:
        goto label1;

     label3:
        return r8;
    }

    private java.util.List getMethodRules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.util.List rules(java.lang.Object)>(r1);

        return $r2;
    }

    protected java.util.List rules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Object r1;
        org.junit.runners.model.TestClass $r2;
        java.util.List $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r3 = virtualinvoke $r2.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>(r1, class "org/junit/Rule", class "org/junit/rules/MethodRule");

        return $r3;
    }

    private org.junit.runners.model.Statement withTestRules(org.junit.runners.model.FrameworkMethod, java.util.List, org.junit.runners.model.Statement)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.runners.model.FrameworkMethod r1;
        java.util.List r2;
        org.junit.runners.model.Statement r3, $r5;
        boolean $z0;
        org.junit.runner.Description $r4;
        org.junit.rules.RunRules r6;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.runners.model.FrameworkMethod;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: org.junit.runners.model.Statement;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = r3;

        goto label2;

     label1:
        r6 = new org.junit.rules.RunRules;

        $r5 = r6;

        $r4 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>(r1);

        specialinvoke r6.<org.junit.rules.RunRules: void <init>(org.junit.runners.model.Statement,java.lang.Iterable,org.junit.runner.Description)>(r3, r2, $r4);

     label2:
        return $r5;
    }

    protected java.util.List getTestRules(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Object r1;
        java.util.List r2, $r5;
        org.junit.runners.model.TestClass $r3, $r4;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        r2 = virtualinvoke $r3.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethodValues(java.lang.Object,java.lang.Class,java.lang.Class)>(r1, class "org/junit/Rule", class "org/junit/rules/TestRule");

        $r4 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runners.model.TestClass getTestClass()>();

        $r5 = virtualinvoke $r4.<org.junit.runners.model.TestClass: java.util.List getAnnotatedFieldValues(java.lang.Object,java.lang.Class,java.lang.Class)>(r1, class "org/junit/Rule", class "org/junit/rules/TestRule");

        interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        return r2;
    }

    private java.lang.Class getExpectedException(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.Test r1;
        java.lang.Class $r2, $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.Test;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<org.junit.Test: java.lang.Class expected()>();

        if $r2 != class "org/junit/Test$None" goto label2;

     label1:
        return null;

     label2:
        $r3 = interfaceinvoke r1.<org.junit.Test: java.lang.Class expected()>();

        return $r3;
    }

    private boolean expectsException(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.Test r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.Test;

        $r2 = specialinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: java.lang.Class getExpectedException(org.junit.Test)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private long getTimeout(org.junit.Test)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        org.junit.Test r1;
        long $l0;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: org.junit.Test;

        if r1 != null goto label1;

        return 0L;

     label1:
        $l0 = interfaceinvoke r1.<org.junit.Test: long timeout()>();

        return $l0;
    }

    protected volatile void runChild(java.lang.Object, org.junit.runner.notification.RunNotifier)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Object r1;
        org.junit.runner.notification.RunNotifier r2;
        org.junit.runners.model.FrameworkMethod $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.junit.runner.notification.RunNotifier;

        $r3 = (org.junit.runners.model.FrameworkMethod) r1;

        virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)>($r3, r2);

        return;
    }

    protected volatile org.junit.runner.Description describeChild(java.lang.Object)
    {
        org.junit.runners.BlockJUnit4ClassRunner r0;
        java.lang.Object r1;
        org.junit.runners.model.FrameworkMethod $r2;
        org.junit.runner.Description $r3;

        r0 := @this: org.junit.runners.BlockJUnit4ClassRunner;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.junit.runners.model.FrameworkMethod) r1;

        $r3 = virtualinvoke r0.<org.junit.runners.BlockJUnit4ClassRunner: org.junit.runner.Description describeChild(org.junit.runners.model.FrameworkMethod)>($r2);

        return $r3;
    }
}
