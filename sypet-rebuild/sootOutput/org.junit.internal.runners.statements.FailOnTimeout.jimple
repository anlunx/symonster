public class org.junit.internal.runners.statements.FailOnTimeout extends org.junit.runners.model.Statement
{
    private final org.junit.runners.model.Statement fOriginalStatement;
    private final long fTimeout;

    public void <init>(org.junit.runners.model.Statement, long)
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.runners.model.Statement r1;
        long l0;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.runners.model.Statement;

        l0 := @parameter1: long;

        specialinvoke r0.<org.junit.runners.model.Statement: void <init>()>();

        r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement fOriginalStatement> = r1;

        r0.<org.junit.internal.runners.statements.FailOnTimeout: long fTimeout> = l0;

        return;
    }

    public void evaluate() throws java.lang.Throwable
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$StatementThread r1;
        boolean $z0;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 = specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.internal.runners.statements.FailOnTimeout$StatementThread evaluateStatement()>();

        $z0 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$StatementThread: boolean access$000(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>(r1);

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: void throwExceptionForUnfinishedThread(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>(r1);

     label1:
        return;
    }

    private org.junit.internal.runners.statements.FailOnTimeout$StatementThread evaluateStatement() throws java.lang.InterruptedException
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$StatementThread $r2;
        org.junit.runners.model.Statement $r3;
        long $l0;
        boolean $z0;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        $r2 = new org.junit.internal.runners.statements.FailOnTimeout$StatementThread;

        $r3 = r0.<org.junit.internal.runners.statements.FailOnTimeout: org.junit.runners.model.Statement fOriginalStatement>;

        specialinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: void <init>(org.junit.runners.model.Statement)>($r3);

        virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: void start()>();

        $l0 = r0.<org.junit.internal.runners.statements.FailOnTimeout: long fTimeout>;

        virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: void join(long)>($l0);

        $z0 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$StatementThread: boolean access$000(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: void recordStackTrace()>();

     label1:
        virtualinvoke $r2.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: void interrupt()>();

        return $r2;
    }

    private void throwExceptionForUnfinishedThread(org.junit.internal.runners.statements.FailOnTimeout$StatementThread) throws java.lang.Throwable
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$StatementThread r1;
        java.lang.Throwable $r2, $r3;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$StatementThread;

        $r2 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$StatementThread: java.lang.Throwable access$100(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>(r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.junit.internal.runners.statements.FailOnTimeout$StatementThread: java.lang.Throwable access$100(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>(r1);

        throw $r3;

     label1:
        specialinvoke r0.<org.junit.internal.runners.statements.FailOnTimeout: void throwTimeoutException(org.junit.internal.runners.statements.FailOnTimeout$StatementThread)>(r1);

        return;
    }

    private void throwTimeoutException(org.junit.internal.runners.statements.FailOnTimeout$StatementThread) throws java.lang.Exception
    {
        org.junit.internal.runners.statements.FailOnTimeout r0;
        org.junit.internal.runners.statements.FailOnTimeout$StatementThread r1;
        java.lang.Exception $r3;
        java.lang.Object[] $r4;
        long $l0;
        java.lang.Long $r5;
        java.lang.String $r6;
        java.lang.StackTraceElement[] $r7;

        r0 := @this: org.junit.internal.runners.statements.FailOnTimeout;

        r1 := @parameter0: org.junit.internal.runners.statements.FailOnTimeout$StatementThread;

        $r3 = new java.lang.Exception;

        $r4 = newarray (java.lang.Object)[1];

        $l0 = r0.<org.junit.internal.runners.statements.FailOnTimeout: long fTimeout>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("test timed out after %d milliseconds", $r4);

        specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<org.junit.internal.runners.statements.FailOnTimeout$StatementThread: java.lang.StackTraceElement[] getRecordedStackTrace()>();

        virtualinvoke $r3.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r7);

        throw $r3;
    }
}
