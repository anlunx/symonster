public class org.junit.internal.runners.MethodRoadie extends java.lang.Object
{
    private final java.lang.Object fTest;
    private final org.junit.runner.notification.RunNotifier fNotifier;
    private final org.junit.runner.Description fDescription;
    private org.junit.internal.runners.TestMethod fTestMethod;

    public void <init>(java.lang.Object, org.junit.internal.runners.TestMethod, org.junit.runner.notification.RunNotifier, org.junit.runner.Description)
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.lang.Object r1;
        org.junit.internal.runners.TestMethod r2;
        org.junit.runner.notification.RunNotifier r3;
        org.junit.runner.Description r4;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.junit.internal.runners.TestMethod;

        r3 := @parameter2: org.junit.runner.notification.RunNotifier;

        r4 := @parameter3: org.junit.runner.Description;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.junit.internal.runners.MethodRoadie: java.lang.Object fTest> = r1;

        r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier> = r3;

        r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription> = r4;

        r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod> = r2;

        return;
    }

    public void run()
    {
        org.junit.internal.runners.MethodRoadie r0;
        long l0;
        org.junit.internal.runners.TestMethod $r2, $r5;
        boolean $z0;
        org.junit.runner.Description $r3, $r6, $r8, $r11;
        org.junit.runner.notification.RunNotifier $r4, $r7, $r9, $r12;
        byte $b1;
        java.lang.Throwable $r10;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        $r2 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $z0 = virtualinvoke $r2.<org.junit.internal.runners.TestMethod: boolean isIgnored()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier>;

        $r8 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription>;

        virtualinvoke $r9.<org.junit.runner.notification.RunNotifier: void fireTestIgnored(org.junit.runner.Description)>($r8);

        return;

     label1:
        $r4 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier>;

        $r3 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription>;

        virtualinvoke $r4.<org.junit.runner.notification.RunNotifier: void fireTestStarted(org.junit.runner.Description)>($r3);

     label2:
        $r5 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        l0 = virtualinvoke $r5.<org.junit.internal.runners.TestMethod: long getTimeout()>();

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label3;

        specialinvoke r0.<org.junit.internal.runners.MethodRoadie: void runWithTimeout(long)>(l0);

        goto label4;

     label3:
        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void runTest()>();

     label4:
        $r7 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier>;

        $r6 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription>;

        virtualinvoke $r7.<org.junit.runner.notification.RunNotifier: void fireTestFinished(org.junit.runner.Description)>($r6);

        goto label7;

     label5:
        $r10 := @caughtexception;

     label6:
        $r12 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier>;

        $r11 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription>;

        virtualinvoke $r12.<org.junit.runner.notification.RunNotifier: void fireTestFinished(org.junit.runner.Description)>($r11);

        throw $r10;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void runWithTimeout(long)
    {
        org.junit.internal.runners.MethodRoadie r0;
        long l0;
        org.junit.internal.runners.MethodRoadie$1 $r1;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        l0 := @parameter0: long;

        $r1 = new org.junit.internal.runners.MethodRoadie$1;

        specialinvoke $r1.<org.junit.internal.runners.MethodRoadie$1: void <init>(org.junit.internal.runners.MethodRoadie,long)>(r0, l0);

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void runBeforesThenTestThenAfters(java.lang.Runnable)>($r1);

        return;
    }

    public void runTest()
    {
        org.junit.internal.runners.MethodRoadie r0;
        org.junit.internal.runners.MethodRoadie$2 $r1;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        $r1 = new org.junit.internal.runners.MethodRoadie$2;

        specialinvoke $r1.<org.junit.internal.runners.MethodRoadie$2: void <init>(org.junit.internal.runners.MethodRoadie)>(r0);

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void runBeforesThenTestThenAfters(java.lang.Runnable)>($r1);

        return;
    }

    public void runBeforesThenTestThenAfters(java.lang.Runnable)
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.lang.Runnable r1;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;
        java.lang.Throwable $r5;
        org.junit.internal.runners.FailedBefore $r6;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        r1 := @parameter0: java.lang.Runnable;

     label1:
        specialinvoke r0.<org.junit.internal.runners.MethodRoadie: void runBefores()>();

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label2:
        specialinvoke r0.<org.junit.internal.runners.MethodRoadie: void runAfters()>();

        goto label8;

     label3:
        $r6 := @caughtexception;

     label4:
        specialinvoke r0.<org.junit.internal.runners.MethodRoadie: void runAfters()>();

        goto label8;

     label5:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("test should never throw an exception to this level");

        throw $r4;

     label6:
        $r5 := @caughtexception;

     label7:
        specialinvoke r0.<org.junit.internal.runners.MethodRoadie: void runAfters()>();

        throw $r5;

     label8:
        return;

        catch org.junit.internal.runners.FailedBefore from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    protected void runTestMethod()
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.lang.Throwable r1, $r29;
        java.lang.String r2, $r11, $r13, $r21, $r25;
        java.lang.Object $r3;
        org.junit.internal.runners.TestMethod $r4, $r5, $r9, $r15, $r16, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7, $r8, $r12, $r17, $r18, $r22, $r23, $r26, $r27;
        java.lang.Class $r10, $r20, $r24;
        java.lang.reflect.InvocationTargetException $r14;
        java.lang.Exception $r28;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

     label1:
        $r4 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $r3 = r0.<org.junit.internal.runners.MethodRoadie: java.lang.Object fTest>;

        virtualinvoke $r4.<org.junit.internal.runners.TestMethod: void invoke(java.lang.Object)>($r3);

        $r5 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $z0 = virtualinvoke $r5.<org.junit.internal.runners.TestMethod: boolean expectsException()>();

        if $z0 == 0 goto label2;

        $r6 = new java.lang.AssertionError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected exception: ");

        $r9 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $r10 = virtualinvoke $r9.<org.junit.internal.runners.TestMethod: java.lang.Class getExpectedException()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r13);

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r6);

     label2:
        goto label8;

     label3:
        $r14 := @caughtexception;

        r1 = virtualinvoke $r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = r1 instanceof org.junit.internal.AssumptionViolatedException;

        if $z1 == 0 goto label4;

        return;

     label4:
        $r15 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $z2 = virtualinvoke $r15.<org.junit.internal.runners.TestMethod: boolean expectsException()>();

        if $z2 != 0 goto label5;

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>(r1);

        goto label6;

     label5:
        $r16 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $z3 = virtualinvoke $r16.<org.junit.internal.runners.TestMethod: boolean isUnexpected(java.lang.Throwable)>(r1);

        if $z3 == 0 goto label6;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception, expected<");

        $r19 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        $r20 = virtualinvoke $r19.<org.junit.internal.runners.TestMethod: java.lang.Class getExpectedException()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was<");

        $r24 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        r2 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = new java.lang.Exception;

        specialinvoke $r28.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r2, r1);

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r28);

     label6:
        goto label8;

     label7:
        $r29 := @caughtexception;

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r29);

     label8:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label7;
    }

    private void runBefores() throws org.junit.internal.runners.FailedBefore
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.util.Iterator r1;
        java.lang.reflect.Method r2;
        org.junit.internal.runners.TestMethod $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.Throwable $r8, $r11;
        org.junit.internal.runners.FailedBefore $r9, $r13;
        java.lang.reflect.InvocationTargetException $r10;
        org.junit.internal.AssumptionViolatedException $r12;
        java.util.List r14;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

     label1:
        $r3 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        r14 = virtualinvoke $r3.<org.junit.internal.runners.TestMethod: java.util.List getBefores()>();

        r1 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.reflect.Method) $r4;

        $r6 = r0.<org.junit.internal.runners.MethodRoadie: java.lang.Object fTest>;

        $r5 = newarray (java.lang.Object)[0];

        virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r5);

        goto label2;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r11;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        $r13 = new org.junit.internal.runners.FailedBefore;

        specialinvoke $r13.<org.junit.internal.runners.FailedBefore: void <init>()>();

        throw $r13;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r8);

        $r9 = new org.junit.internal.runners.FailedBefore;

        specialinvoke $r9.<org.junit.internal.runners.FailedBefore: void <init>()>();

        throw $r9;

     label8:
        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label3 with label4;
        catch org.junit.internal.AssumptionViolatedException from label1 to label5 with label6;
        catch java.lang.Throwable from label1 to label5 with label7;
    }

    private void runAfters()
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.util.List r1;
        java.util.Iterator r2;
        java.lang.reflect.Method r3;
        org.junit.internal.runners.TestMethod $r4;
        boolean $z0;
        java.lang.Object $r5, $r7;
        java.lang.Object[] $r6;
        java.lang.Throwable $r9, $r11;
        java.lang.reflect.InvocationTargetException $r10;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        $r4 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.internal.runners.TestMethod fTestMethod>;

        r1 = virtualinvoke $r4.<org.junit.internal.runners.TestMethod: java.util.List getAfters()>();

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Method) $r5;

     label2:
        $r7 = r0.<org.junit.internal.runners.MethodRoadie: java.lang.Object fTest>;

        $r6 = newarray (java.lang.Object)[0];

        virtualinvoke r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r6);

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r11);

        goto label6;

     label5:
        $r9 := @caughtexception;

        virtualinvoke r0.<org.junit.internal.runners.MethodRoadie: void addFailure(java.lang.Throwable)>($r9);

     label6:
        goto label1;

     label7:
        return;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    protected void addFailure(java.lang.Throwable)
    {
        org.junit.internal.runners.MethodRoadie r0;
        java.lang.Throwable r1;
        org.junit.runner.notification.Failure $r2;
        org.junit.runner.Description $r3;
        org.junit.runner.notification.RunNotifier $r4;

        r0 := @this: org.junit.internal.runners.MethodRoadie;

        r1 := @parameter0: java.lang.Throwable;

        $r4 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.notification.RunNotifier fNotifier>;

        $r2 = new org.junit.runner.notification.Failure;

        $r3 = r0.<org.junit.internal.runners.MethodRoadie: org.junit.runner.Description fDescription>;

        specialinvoke $r2.<org.junit.runner.notification.Failure: void <init>(org.junit.runner.Description,java.lang.Throwable)>($r3, r1);

        virtualinvoke $r4.<org.junit.runner.notification.RunNotifier: void fireTestFailure(org.junit.runner.notification.Failure)>($r2);

        return;
    }
}
