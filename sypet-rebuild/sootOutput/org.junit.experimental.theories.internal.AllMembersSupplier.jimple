public class org.junit.experimental.theories.internal.AllMembersSupplier extends org.junit.experimental.theories.ParameterSupplier
{
    private final org.junit.runners.model.TestClass fClass;

    public void <init>(org.junit.runners.model.TestClass)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.runners.model.TestClass r1;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.runners.model.TestClass;

        specialinvoke r0.<org.junit.experimental.theories.ParameterSupplier: void <init>()>();

        r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass fClass> = r1;

        return;
    }

    public java.util.List getValueSources(org.junit.experimental.theories.ParameterSignature)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.ArrayList $r3;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addFields(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addSinglePointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)>(r1, $r3);

        return $r3;
    }

    private void addMultiPointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2, $r7;
        java.util.Iterator r3;
        org.junit.runners.model.FrameworkMethod r4;
        org.junit.runners.model.TestClass $r6;
        boolean $z0;
        java.lang.Object $r8, $r11;
        java.lang.String $r9;
        java.lang.Object[] $r10;
        java.lang.Throwable $r12;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r6 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass fClass>;

        $r7 = virtualinvoke $r6.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "org/junit/experimental/theories/DataPoints");

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runners.model.FrameworkMethod) $r8;

     label2:
        $r9 = virtualinvoke r4.<org.junit.runners.model.FrameworkMethod: java.lang.String getName()>();

        $r10 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke r4.<org.junit.runners.model.FrameworkMethod: java.lang.Object invokeExplosively(java.lang.Object,java.lang.Object[])>(null, $r10);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addMultiPointArrayValues(org.junit.experimental.theories.ParameterSignature,java.lang.String,java.util.List,java.lang.Object)>(r1, $r9, r2, $r11);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void addSinglePointMethods(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2, $r6;
        java.util.Iterator r3;
        org.junit.runners.model.FrameworkMethod r4;
        org.junit.runners.model.TestClass $r5;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.lang.Class $r8;
        org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue $r9;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r5 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass fClass>;

        $r6 = virtualinvoke $r5.<org.junit.runners.model.TestClass: java.util.List getAnnotatedMethods(java.lang.Class)>(class "org/junit/experimental/theories/DataPoint");

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.junit.runners.model.FrameworkMethod) $r7;

        $r8 = virtualinvoke r4.<org.junit.runners.model.FrameworkMethod: java.lang.Class getType()>();

        $z1 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: boolean isCorrectlyTyped(org.junit.experimental.theories.ParameterSignature,java.lang.Class)>(r1, $r8);

        if $z1 == 0 goto label2;

        $r9 = new org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue;

        specialinvoke $r9.<org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue: void <init>(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.AllMembersSupplier$1)>(r4, null);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9);

     label2:
        goto label1;

     label3:
        return;
    }

    private void addFields(org.junit.experimental.theories.ParameterSignature, java.util.List)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.util.List r2;
        java.lang.reflect.Field[] r3;
        int i0, $i1, i2;
        java.lang.reflect.Field r4;
        java.lang.Class r5, $r8;
        org.junit.runners.model.TestClass $r7;
        boolean $z0, $z1, $z2;
        java.lang.'annotation'.Annotation $r9, $r13;
        java.lang.String $r10, $r14;
        java.lang.Object $r11, $r15;
        org.junit.experimental.theories.PotentialAssignment $r12;
        java.lang.Throwable $r16;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.util.List;

        $r7 = r0.<org.junit.experimental.theories.internal.AllMembersSupplier: org.junit.runners.model.TestClass fClass>;

        $r8 = virtualinvoke $r7.<org.junit.runners.model.TestClass: java.lang.Class getJavaClass()>();

        r3 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        i0 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        r4 = r3[i2];

        $i1 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label6;

        r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptArrayType(java.lang.Class)>(r5);

        if $z1 == 0 goto label5;

        $r13 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/experimental/theories/DataPoints");

        if $r13 == null goto label5;

     label2:
        $r14 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r15 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.lang.Object getStaticFieldValue(java.lang.reflect.Field)>(r4);

        specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: void addArrayValues(java.lang.String,java.util.List,java.lang.Object)>($r14, r2, $r15);

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        goto label6;

     label5:
        $z2 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>(r5);

        if $z2 == 0 goto label6;

        $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "org/junit/experimental/theories/DataPoint");

        if $r9 == null goto label6;

        $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r11 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: java.lang.Object getStaticFieldValue(java.lang.reflect.Field)>(r4);

        $r12 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r10, $r11);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r12);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void addArrayValues(java.lang.String, java.util.List, java.lang.Object)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        java.lang.String r1, $r9;
        java.util.List r2;
        java.lang.Object r3, $r10;
        int $i0, i1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        org.junit.experimental.theories.PotentialAssignment $r11;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r3);

        if i1 >= $i0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r3, i1);

        $r11 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r9, $r10);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addMultiPointArrayValues(org.junit.experimental.theories.ParameterSignature, java.lang.String, java.util.List, java.lang.Object) throws java.lang.Throwable
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.lang.String r2, $r12;
        java.util.List r3;
        java.lang.Object r4, $r5, $r13;
        int $i0, i1;
        java.lang.Class $r6;
        boolean $z0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        org.junit.experimental.theories.PotentialAssignment $r14;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        if i1 >= $i0 goto label3;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r4, i1);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = specialinvoke r0.<org.junit.experimental.theories.internal.AllMembersSupplier: boolean isCorrectlyTyped(org.junit.experimental.theories.ParameterSignature,java.lang.Class)>(r1, $r6);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r4, i1);

        $r14 = staticinvoke <org.junit.experimental.theories.PotentialAssignment: org.junit.experimental.theories.PotentialAssignment forValue(java.lang.String,java.lang.Object)>($r12, $r13);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r14);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private boolean isCorrectlyTyped(org.junit.experimental.theories.ParameterSignature, java.lang.Class)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        org.junit.experimental.theories.ParameterSignature r1;
        java.lang.Class r2;
        boolean $z0;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: org.junit.experimental.theories.ParameterSignature;

        r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r1.<org.junit.experimental.theories.ParameterSignature: boolean canAcceptType(java.lang.Class)>(r2);

        return $z0;
    }

    private java.lang.Object getStaticFieldValue(java.lang.reflect.Field)
    {
        org.junit.experimental.theories.internal.AllMembersSupplier r0;
        java.lang.reflect.Field r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.RuntimeException $r4, $r6;
        java.lang.IllegalAccessException $r5;

        r0 := @this: org.junit.experimental.theories.internal.AllMembersSupplier;

        r1 := @parameter0: java.lang.reflect.Field;

     label1:
        $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected: field from getClass doesn\'t exist on object");

        throw $r4;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected: getFields returned an inaccessible field");

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }
}
