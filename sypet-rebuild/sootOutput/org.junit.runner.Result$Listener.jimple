class org.junit.runner.Result$Listener extends org.junit.runner.notification.RunListener
{
    final org.junit.runner.Result this$0;

    private void <init>(org.junit.runner.Result)
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Result r1;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Result;

        r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0> = r1;

        specialinvoke r0.<org.junit.runner.notification.RunListener: void <init>()>();

        return;
    }

    public void testRunStarted(org.junit.runner.Description) throws java.lang.Exception
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Description r1;
        org.junit.runner.Result $r2;
        long $l0;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        staticinvoke <org.junit.runner.Result: long access$002(org.junit.runner.Result,long)>($r2, $l0);

        return;
    }

    public void testRunFinished(org.junit.runner.Result) throws java.lang.Exception
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Result r1, $r2, $r3;
        long l0, $l1, $l2;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Result;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $r2 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $l1 = staticinvoke <org.junit.runner.Result: long access$000(org.junit.runner.Result)>($r2);

        $l2 = l0 - $l1;

        staticinvoke <org.junit.runner.Result: long access$114(org.junit.runner.Result,long)>($r3, $l2);

        return;
    }

    public void testFinished(org.junit.runner.Description) throws java.lang.Exception
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Description r1;
        org.junit.runner.Result $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $r3 = staticinvoke <org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger access$200(org.junit.runner.Result)>($r2);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return;
    }

    public void testFailure(org.junit.runner.notification.Failure) throws java.lang.Exception
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.notification.Failure r1;
        org.junit.runner.Result $r2;
        java.util.List $r3;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.notification.Failure;

        $r2 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $r3 = staticinvoke <org.junit.runner.Result: java.util.List access$300(org.junit.runner.Result)>($r2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void testIgnored(org.junit.runner.Description) throws java.lang.Exception
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Description r1;
        org.junit.runner.Result $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Description;

        $r2 = r0.<org.junit.runner.Result$Listener: org.junit.runner.Result this$0>;

        $r3 = staticinvoke <org.junit.runner.Result: java.util.concurrent.atomic.AtomicInteger access$400(org.junit.runner.Result)>($r2);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return;
    }

    public void testAssumptionFailure(org.junit.runner.notification.Failure)
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.notification.Failure r1;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.notification.Failure;

        return;
    }

    void <init>(org.junit.runner.Result, org.junit.runner.Result$1)
    {
        org.junit.runner.Result$Listener r0;
        org.junit.runner.Result r1;
        org.junit.runner.Result$1 r2;

        r0 := @this: org.junit.runner.Result$Listener;

        r1 := @parameter0: org.junit.runner.Result;

        r2 := @parameter1: org.junit.runner.Result$1;

        specialinvoke r0.<org.junit.runner.Result$Listener: void <init>(org.junit.runner.Result)>(r1);

        return;
    }
}
